; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\lcdpm323.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\lcdpm323.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\ConvertColor\LCDPM323.c]
                          THUMB

                          AREA ||i.LCD_Color2Index_M323||, CODE, READONLY, ALIGN=1

                  LCD_Color2Index_M323 PROC
;;;33     */
;;;34     unsigned LCD_Color2Index_M323(LCD_COLOR Color) {
000000  f3c02107          UBFX     r1,r0,#8,#8
;;;35       unsigned r, g, b;
;;;36       r = Color & 255;
;;;37       g = (Color >> 8 ) & 255;
;;;38       b = Color >> 16;
000004  0c02              LSRS     r2,r0,#16
000006  b2c3              UXTB     r3,r0                 ;36
000008  b510              PUSH     {r4,lr}               ;34
;;;39       r = (r * 7 + 127) / 255;
00000a  ebc300c3          RSB      r0,r3,r3,LSL #3
00000e  23ff              MOVS     r3,#0xff
000010  307f              ADDS     r0,r0,#0x7f
;;;40       g = (g + 42) / 85;
000012  2455              MOVS     r4,#0x55
000014  312a              ADDS     r1,r1,#0x2a
;;;41       b = (b * 7 + 127) / 255;
000016  ebc202c2          RSB      r2,r2,r2,LSL #3
00001a  327f              ADDS     r2,r2,#0x7f
00001c  fbb1f1f4          UDIV     r1,r1,r4              ;40
000020  fbb2f2f3          UDIV     r2,r2,r3
000024  fbb0f0f3          UDIV     r0,r0,r3              ;39
;;;42       return b + (g << 3) + (r << 5);
000028  eb0201c1          ADD      r1,r2,r1,LSL #3
00002c  eb011040          ADD      r0,r1,r0,LSL #5
;;;43     }
000030  bd10              POP      {r4,pc}
;;;44     
                          ENDP


                          AREA ||i.LCD_GetIndexMask_M323||, CODE, READONLY, ALIGN=1

                  LCD_GetIndexMask_M323 PROC
;;;60     */
;;;61     unsigned LCD_GetIndexMask_M323(void) {
000000  20ff              MOVS     r0,#0xff
;;;62       return 0xff;
;;;63     }
000002  4770              BX       lr
;;;64     
                          ENDP


                          AREA ||i.LCD_Index2Color_M323||, CODE, READONLY, ALIGN=1

                  LCD_Index2Color_M323 PROC
;;;48     */
;;;49     LCD_COLOR LCD_Index2Color_M323(int Index) {
000000  f0000107          AND      r1,r0,#7
;;;50       unsigned r, g, b;
;;;51       b = (Index & 7) * 255 / 7;
000004  2207              MOVS     r2,#7
;;;52       g = ((Index >> 3) & 3) * 85;
000006  f3c003c1          UBFX     r3,r0,#3,#2
;;;53       r = ((Index >> 5) & 7) * 255 / 7;
00000a  f3c01042          UBFX     r0,r0,#5,#3
00000e  ebc02000          RSB      r0,r0,r0,LSL #8
000012  ebc12101          RSB      r1,r1,r1,LSL #8       ;51
000016  fbb0f0f2          UDIV     r0,r0,r2
00001a  fbb1f1f2          UDIV     r1,r1,r2              ;51
00001e  eb031303          ADD      r3,r3,r3,LSL #4       ;52
000022  eb030383          ADD      r3,r3,r3,LSL #2       ;52
;;;54       return r + (g << 8) + (((U32)b) << 16);
000026  eb002003          ADD      r0,r0,r3,LSL #8
00002a  eb004001          ADD      r0,r0,r1,LSL #16
;;;55     }
00002e  4770              BX       lr
;;;56     
                          ENDP

