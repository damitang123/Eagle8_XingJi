; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\wm_move.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\wm_move.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\WM\WM_Move.c]
                          THUMB

                          AREA ||i.WM_MoveTo||, CODE, READONLY, ALIGN=1

                  WM_MoveTo PROC
;;;116    */
;;;117    void WM_MoveTo(WM_HWIN hWin, int x, int y) {
000000  f7ffbffe          B.W      WM__MoveTo
;;;118      WM_LOCK(); {
;;;119        WM__MoveTo(hWin, x, y);
;;;120      } WM_UNLOCK();
;;;121    }
;;;122    
                          ENDP


                          AREA ||i.WM_MoveWindow||, CODE, READONLY, ALIGN=1

                  WM_MoveWindow PROC
;;;106    */
;;;107    void WM_MoveWindow(WM_HWIN hWin, int dx, int dy) {
000000  f7ffbffe          B.W      WM__MoveWindow
;;;108      WM_LOCK(); {
;;;109        WM__MoveWindow(hWin, dx, dy);
;;;110      } WM_UNLOCK();
;;;111    }
;;;112    
                          ENDP


                          AREA ||i.WM__MoveTo||, CODE, READONLY, ALIGN=1

                  WM__MoveTo PROC
;;;87     */
;;;88     void WM__MoveTo(WM_HWIN hWin, int x, int y) {
000000  b570              PUSH     {r4-r6,lr}
000002  4615              MOV      r5,r2
000004  460e              MOV      r6,r1
000006  0004              MOVS     r4,r0
000008  d00c              BEQ      |L3.36|
;;;89       if (hWin) {
;;;90         WM_Obj* pWin = WM_HANDLE2PTR(hWin);
00000a  f7fffffe          BL       GUI_ALLOC_h2p
;;;91         x -= pWin->Rect.x0;
00000e  f9b01000          LDRSH    r1,[r0,#0]
;;;92         y -= pWin->Rect.y0;
000012  f9b00002          LDRSH    r0,[r0,#2]
000016  1a71              SUBS     r1,r6,r1              ;91
000018  1a2a              SUBS     r2,r5,r0
;;;93         WM__MoveWindow(hWin, x, y);
00001a  4620              MOV      r0,r4
00001c  e8bd4070          POP      {r4-r6,lr}
000020  f7ffbffe          B.W      WM__MoveWindow
                  |L3.36|
;;;94       }
;;;95     }
000024  bd70              POP      {r4-r6,pc}
;;;96     
                          ENDP


                          AREA ||i.WM__MoveWindow||, CODE, READONLY, ALIGN=1

                  WM__MoveWindow PROC
;;;65     */
;;;66     void WM__MoveWindow(WM_HWIN hWin, int dx, int dy) {
000000  e92d41fc          PUSH     {r2-r8,lr}
000004  4616              MOV      r6,r2
000006  460d              MOV      r5,r1
000008  0007              MOVS     r7,r0
00000a  d030              BEQ      |L4.110|
;;;67       GUI_RECT r;
;;;68       WM_Obj* pWin;
;;;69       if ((hWin) && (dx || dy)) {
00000c  ea550006          ORRS     r0,r5,r6
000010  d02d              BEQ      |L4.110|
;;;70         pWin = WM_HANDLE2PTR(hWin);
000012  4638              MOV      r0,r7
000014  f7fffffe          BL       GUI_ALLOC_h2p
000018  4604              MOV      r4,r0
;;;71         r = pWin->Rect;
;;;72         GUI_MoveRect(&pWin->Rect, dx, dy);
00001a  4632              MOV      r2,r6
00001c  e9d40100          LDRD     r0,r1,[r4,#0]         ;70
000020  e9cd0100          STRD     r0,r1,[sp,#0]
000024  4629              MOV      r1,r5
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       GUI_MoveRect
;;;73         GUI_MoveRect(&pWin->InvalidRect, dx, dy);
00002c  4632              MOV      r2,r6
00002e  4629              MOV      r1,r5
000030  f1040008          ADD      r0,r4,#8
000034  f7fffffe          BL       GUI_MoveRect
;;;74         _MoveDescendents(pWin->hFirstChild, dx, dy);  /* Children need to be moved along ...*/
000038  f9b40018          LDRSH    r0,[r4,#0x18]
00003c  4632              MOV      r2,r6
00003e  4629              MOV      r1,r5
000040  f7fffffe          BL       _MoveDescendents
;;;75         /* Invalidate old and new area ... */
;;;76         if (pWin->Status & WM_SF_ISVIS) {
000044  7f20              LDRB     r0,[r4,#0x1c]
000046  0780              LSLS     r0,r0,#30
000048  d50d              BPL      |L4.102|
;;;77           WM__InvalidateRectEx(&pWin->Rect, pWin->hParent, pWin->hNext); /* Invalidate new area */
00004a  f9b4201a          LDRSH    r2,[r4,#0x1a]
00004e  f9b41016          LDRSH    r1,[r4,#0x16]
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       WM__InvalidateRectEx
;;;78           WM__InvalidateRectEx(&r,          pWin->hParent, pWin->hNext); /* Invalidate old area */
000058  f9b4201a          LDRSH    r2,[r4,#0x1a]
00005c  f9b41016          LDRSH    r1,[r4,#0x16]
000060  4668              MOV      r0,sp
000062  f7fffffe          BL       WM__InvalidateRectEx
                  |L4.102|
;;;79         }
;;;80         WM__SendMsgNoData(hWin, WM_MOVE);             /* Notify window it has been moved */
000066  2103              MOVS     r1,#3
000068  4638              MOV      r0,r7
00006a  f7fffffe          BL       WM__SendMsgNoData
                  |L4.110|
;;;81       }
;;;82     }
00006e  e8bd81fc          POP      {r2-r8,pc}
;;;83     
                          ENDP


                          AREA ||i._MoveDescendents||, CODE, READONLY, ALIGN=1

                  _MoveDescendents PROC
;;;43     */
;;;44     static void _MoveDescendents(WM_HWIN hWin, int dx, int dy) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4616              MOV      r6,r2
000006  460f              MOV      r7,r1
000008  4605              MOV      r5,r0
;;;45       WM_Obj* pWin;
;;;46     
;;;47       for (;hWin; hWin = pWin->hNext) {
00000a  e019              B        |L5.64|
                  |L5.12|
;;;48         pWin = WM_HANDLE2PTR(hWin);
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       GUI_ALLOC_h2p
000012  4604              MOV      r4,r0
;;;49         GUI_MoveRect(&pWin->Rect, dx, dy);
000014  4632              MOV      r2,r6
000016  4639              MOV      r1,r7
000018  f7fffffe          BL       GUI_MoveRect
;;;50         GUI_MoveRect(&pWin->InvalidRect, dx, dy);
00001c  4632              MOV      r2,r6
00001e  4639              MOV      r1,r7
000020  f1040008          ADD      r0,r4,#8
000024  f7fffffe          BL       GUI_MoveRect
;;;51         _MoveDescendents(pWin->hFirstChild, dx, dy);  /* Children need to be moved along ...*/
000028  f9b40018          LDRSH    r0,[r4,#0x18]
00002c  4632              MOV      r2,r6
00002e  4639              MOV      r1,r7
000030  f7fffffe          BL       _MoveDescendents
;;;52         WM__SendMsgNoData(hWin, WM_MOVE);
000034  2103              MOVS     r1,#3
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       WM__SendMsgNoData
00003c  f9b4501a          LDRSH    r5,[r4,#0x1a]         ;47
                  |L5.64|
000040  2d00              CMP      r5,#0                 ;47
000042  d1e3              BNE      |L5.12|
;;;53       }
;;;54     }
000044  e8bd81f0          POP      {r4-r8,pc}
;;;55     
                          ENDP

