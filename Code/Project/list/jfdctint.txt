; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\jfdctint.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\jfdctint.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\JPEG\jfdctint.c]
                          THUMB

                          AREA ||i.jpeg_fdct_islow||, CODE, READONLY, ALIGN=2

                  jpeg_fdct_islow PROC
;;;139    GLOBAL(void)
;;;140    jpeg_fdct_islow (DCTELEM * data)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;141    {
;;;142      INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
;;;143      INT32 tmp10, tmp11, tmp12, tmp13;
;;;144      INT32 z1, z2, z3, z4, z5;
;;;145      DCTELEM *dataptr;
;;;146      int ctr;
;;;147      SHIFT_TEMPS
;;;148    
;;;149      /* Pass 1: process rows. */
;;;150      /* Note results are scaled up by sqrt(8) compared to a true DCT; */
;;;151      /* furthermore, we scale the results by 2**PASS1_BITS. */
;;;152    
;;;153      dataptr = data;
;;;154      for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
000004  2607              MOVS     r6,#7
000006  9800              LDR      r0,[sp,#0]
                  |L1.8|
;;;155        tmp0 = dataptr[0] + dataptr[7];
000008  f8501b1c          LDR      r1,[r0],#0x1c
00000c  f8502918          LDR      r2,[r0],#-0x18
;;;156        tmp7 = dataptr[0] - dataptr[7];
;;;157        tmp1 = dataptr[1] + dataptr[6];
000010  c808              LDM      r0!,{r3}
000012  188d              ADDS     r5,r1,r2              ;155
000014  1a89              SUBS     r1,r1,r2              ;156
000016  6902              LDR      r2,[r0,#0x10]
000018  189f              ADDS     r7,r3,r2
;;;158        tmp6 = dataptr[1] - dataptr[6];
00001a  1a9a              SUBS     r2,r3,r2
;;;159        tmp2 = dataptr[2] + dataptr[5];
00001c  f8503b08          LDR      r3,[r0],#8
000020  6844              LDR      r4,[r0,#4]
000022  eb030a04          ADD      r10,r3,r4
;;;160        tmp5 = dataptr[2] - dataptr[5];
000026  1b1b              SUBS     r3,r3,r4
000028  e9508401          LDRD     r8,r4,[r0,#-4]
;;;161        tmp3 = dataptr[3] + dataptr[4];
00002c  eb080c04          ADD      r12,r8,r4
;;;162        tmp4 = dataptr[3] - dataptr[4];
000030  eba80404          SUB      r4,r8,r4
;;;163        
;;;164        /* Even part per LL&M figure 1 --- note that published figure is faulty;
;;;165         * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
;;;166         */
;;;167        
;;;168        tmp10 = tmp0 + tmp3;
;;;169        tmp13 = tmp0 - tmp3;
;;;170        tmp11 = tmp1 + tmp2;
000034  eb07090a          ADD      r9,r7,r10
000038  eb05080c          ADD      r8,r5,r12             ;168
00003c  eba5050c          SUB      r5,r5,r12             ;169
;;;171        tmp12 = tmp1 - tmp2;
;;;172        
;;;173        dataptr[0] = (DCTELEM) ((tmp10 + tmp11) << PASS1_BITS);
000040  eb080c09          ADD      r12,r8,r9
000044  ea4f0c8c          LSL      r12,r12,#2
000048  f840cc10          STR      r12,[r0,#-0x10]
;;;174        dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << PASS1_BITS);
00004c  eba80c09          SUB      r12,r8,r9
000050  eba7070a          SUB      r7,r7,r10             ;171
000054  ea4f0c8c          LSL      r12,r12,#2
000058  f840cb10          STR      r12,[r0],#0x10
;;;175        
;;;176        z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
00005c  eb070c05          ADD      r12,r7,r5
000060  f2411851          MOV      r8,#0x1151
000064  fb0cfc08          MUL      r12,r12,r8
;;;177        dataptr[2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp13, FIX_0_765366865),
000068  f640483f          MOV      r8,#0xc3f
00006c  fb05f508          MUL      r5,r5,r8
000070  eb0c0545          ADD      r5,r12,r5,LSL #1
000074  f5056580          ADD      r5,r5,#0x400
000078  12ed              ASRS     r5,r5,#11
00007a  f8405c18          STR      r5,[r0,#-0x18]
;;;178    				   CONST_BITS-PASS1_BITS);
;;;179        dataptr[6] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, - FIX_1_847759065),
00007e  4d77              LDR      r5,|L1.604|
;;;180    				   CONST_BITS-PASS1_BITS);
;;;181        
;;;182        /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
;;;183         * cK represents cos(K*pi/16).
;;;184         * i0..i3 in the paper are tmp4..tmp7 here.
;;;185         */
;;;186        
;;;187        z1 = tmp4 + tmp7;
;;;188        z2 = tmp5 + tmp6;
;;;189        z3 = tmp4 + tmp6;
;;;190        z4 = tmp5 + tmp7;
;;;191        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
000080  f24258a1          MOV      r8,#0x25a1
000084  fb05c507          MLA      r5,r5,r7,r12          ;179
000088  f5056580          ADD      r5,r5,#0x400          ;179
00008c  12ed              ASRS     r5,r5,#11             ;179
00008e  f8405c08          STR      r5,[r0,#-8]           ;179
000092  eb040c02          ADD      r12,r4,r2             ;189
000096  185d              ADDS     r5,r3,r1              ;190
000098  eb0c0705          ADD      r7,r12,r5
00009c  fb07f708          MUL      r7,r7,r8
0000a0  eb040a01          ADD      r10,r4,r1             ;187
;;;192        
;;;193        tmp4 = MULTIPLY(tmp4, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
0000a4  f640188e          MOV      r8,#0x98e
0000a8  fb04f408          MUL      r4,r4,r8
;;;194        tmp5 = MULTIPLY(tmp5, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
0000ac  f24418b3          MOV      r8,#0x41b3
0000b0  eb030902          ADD      r9,r3,r2              ;188
0000b4  fb03fb08          MUL      r11,r3,r8
;;;195        tmp6 = MULTIPLY(tmp6, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
0000b8  f2462354          MOV      r3,#0x6254
0000bc  fb02fe03          MUL      lr,r2,r3
;;;196        tmp7 = MULTIPLY(tmp7, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
0000c0  f243020b          MOV      r2,#0x300b
0000c4  4351              MULS     r1,r2,r1
;;;197        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
0000c6  4a66              LDR      r2,|L1.608|
;;;198        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
;;;199        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
;;;200        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
0000c8  4b67              LDR      r3,|L1.616|
0000ca  fb0af802          MUL      r8,r10,r2             ;197
0000ce  4a65              LDR      r2,|L1.612|
;;;201        
;;;202        z3 += z5;
;;;203        z4 += z5;
0000d0  fb057503          MLA      r5,r5,r3,r7
0000d4  fb09f902          MUL      r9,r9,r2              ;198
0000d8  ebac220c          SUB      r2,r12,r12,LSL #8     ;199
0000dc  ebc21282          RSB      r2,r2,r2,LSL #6       ;199
0000e0  eba2028c          SUB      r2,r2,r12,LSL #2      ;199
0000e4  eb020c07          ADD      r12,r2,r7             ;202
;;;204        
;;;205        dataptr[7] = (DCTELEM) DESCALE(tmp4 + z1 + z3, CONST_BITS-PASS1_BITS);
0000e8  eb040208          ADD      r2,r4,r8
0000ec  4462              ADD      r2,r2,r12
0000ee  f5026280          ADD      r2,r2,#0x400
0000f2  12d2              ASRS     r2,r2,#11
0000f4  f8402c04          STR      r2,[r0,#-4]
;;;206        dataptr[5] = (DCTELEM) DESCALE(tmp5 + z2 + z4, CONST_BITS-PASS1_BITS);
0000f8  eb0b0209          ADD      r2,r11,r9
0000fc  442a              ADD      r2,r2,r5
0000fe  f5026280          ADD      r2,r2,#0x400
000102  12d2              ASRS     r2,r2,#11
000104  f8402c0c          STR      r2,[r0,#-0xc]
;;;207        dataptr[3] = (DCTELEM) DESCALE(tmp6 + z2 + z3, CONST_BITS-PASS1_BITS);
000108  eb0e0209          ADD      r2,lr,r9
00010c  4462              ADD      r2,r2,r12
;;;208        dataptr[1] = (DCTELEM) DESCALE(tmp7 + z1 + z4, CONST_BITS-PASS1_BITS);
00010e  4441              ADD      r1,r1,r8
000110  f5026280          ADD      r2,r2,#0x400          ;207
000114  4429              ADD      r1,r1,r5
000116  12d2              ASRS     r2,r2,#11             ;207
000118  f5016180          ADD      r1,r1,#0x400
00011c  12c9              ASRS     r1,r1,#11
00011e  f8402c14          STR      r2,[r0,#-0x14]        ;207
000122  f8401c1c          STR      r1,[r0,#-0x1c]
000126  1e76              SUBS     r6,r6,#1
000128  f57faf6e          BPL      |L1.8|
;;;209        
;;;210        dataptr += DCTSIZE;		/* advance pointer to next row */
;;;211      }
;;;212    
;;;213      /* Pass 2: process columns.
;;;214       * We remove the PASS1_BITS scaling, but leave the results scaled up
;;;215       * by an overall factor of 8.
;;;216       */
;;;217    
;;;218      dataptr = data;
;;;219      for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
00012c  9800              LDR      r0,[sp,#0]
00012e  2707              MOVS     r7,#7
                  |L1.304|
;;;220        tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
000130  f8501be0          LDR      r1,[r0],#0xe0
000134  f85029c0          LDR      r2,[r0],#-0xc0
000138  188d              ADDS     r5,r1,r2
;;;221        tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
00013a  1a89              SUBS     r1,r1,r2
;;;222        tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
00013c  6803              LDR      r3,[r0,#0]
00013e  f8d020a0          LDR      r2,[r0,#0xa0]
;;;223        tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
;;;224        tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
;;;225        tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
;;;226        tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
000142  f8d08040          LDR      r8,[r0,#0x40]
000146  eb030a02          ADD      r10,r3,r2             ;222
00014a  1a9c              SUBS     r4,r3,r2              ;223
00014c  6a03              LDR      r3,[r0,#0x20]         ;224
00014e  f8d02080          LDR      r2,[r0,#0x80]         ;224
000152  189e              ADDS     r6,r3,r2              ;224
000154  1a9a              SUBS     r2,r3,r2              ;225
000156  6e03              LDR      r3,[r0,#0x60]
000158  eb080c03          ADD      r12,r8,r3
;;;227        tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
;;;228        
;;;229        /* Even part per LL&M figure 1 --- note that published figure is faulty;
;;;230         * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
;;;231         */
;;;232        
;;;233        tmp10 = tmp0 + tmp3;
00015c  eb05090c          ADD      r9,r5,r12
;;;234        tmp13 = tmp0 - tmp3;
000160  eba5050c          SUB      r5,r5,r12
;;;235        tmp11 = tmp1 + tmp2;
000164  eb0a0c06          ADD      r12,r10,r6
000168  eba80303          SUB      r3,r8,r3              ;227
;;;236        tmp12 = tmp1 - tmp2;
;;;237        
;;;238        dataptr[DCTSIZE*0] = (DCTELEM) DESCALE(tmp10 + tmp11, PASS1_BITS);
00016c  eb09080c          ADD      r8,r9,r12
000170  f1080802          ADD      r8,r8,#2
;;;239        dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp10 - tmp11, PASS1_BITS);
000174  eba90c0c          SUB      r12,r9,r12
000178  ea4f08a8          ASR      r8,r8,#2              ;238
00017c  f8408c20          STR      r8,[r0,#-0x20]        ;238
000180  f10c0c02          ADD      r12,r12,#2
000184  ebaa0606          SUB      r6,r10,r6             ;236
000188  ea4f0cac          ASR      r12,r12,#2
;;;240        
;;;241        z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
00018c  f8c0c060          STR      r12,[r0,#0x60]
000190  eb060c05          ADD      r12,r6,r5
000194  f2411851          MOV      r8,#0x1151
000198  fb0cfc08          MUL      r12,r12,r8
;;;242        dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp13, FIX_0_765366865),
00019c  f640483f          MOV      r8,#0xc3f
0001a0  fb05f508          MUL      r5,r5,r8
0001a4  eb0c0545          ADD      r5,r12,r5,LSL #1
0001a8  f5054580          ADD      r5,r5,#0x4000
0001ac  13ed              ASRS     r5,r5,#15
;;;243    					   CONST_BITS+PASS1_BITS);
;;;244        dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, - FIX_1_847759065),
0001ae  6205              STR      r5,[r0,#0x20]
0001b0  4d2a              LDR      r5,|L1.604|
;;;245    					   CONST_BITS+PASS1_BITS);
;;;246        
;;;247        /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
;;;248         * cK represents cos(K*pi/16).
;;;249         * i0..i3 in the paper are tmp4..tmp7 here.
;;;250         */
;;;251        
;;;252        z1 = tmp4 + tmp7;
;;;253        z2 = tmp5 + tmp6;
;;;254        z3 = tmp4 + tmp6;
0001b2  eb030804          ADD      r8,r3,r4
0001b6  fb05c506          MLA      r5,r5,r6,r12          ;244
0001ba  f5054580          ADD      r5,r5,#0x4000         ;244
0001be  13ed              ASRS     r5,r5,#15             ;244
;;;255        z4 = tmp5 + tmp7;
0001c0  f8c050a0          STR      r5,[r0,#0xa0]
0001c4  1855              ADDS     r5,r2,r1
;;;256        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
0001c6  eb080c05          ADD      r12,r8,r5
0001ca  f24256a1          MOV      r6,#0x25a1
0001ce  fb0cfc06          MUL      r12,r12,r6
0001d2  eb030a01          ADD      r10,r3,r1             ;252
;;;257        
;;;258        tmp4 = MULTIPLY(tmp4, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
0001d6  f640168e          MOV      r6,#0x98e
0001da  4373              MULS     r3,r6,r3
;;;259        tmp5 = MULTIPLY(tmp5, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
0001dc  f24416b3          MOV      r6,#0x41b3
0001e0  eb020904          ADD      r9,r2,r4              ;253
0001e4  fb02fb06          MUL      r11,r2,r6
;;;260        tmp6 = MULTIPLY(tmp6, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
0001e8  f2462254          MOV      r2,#0x6254
0001ec  fb04fe02          MUL      lr,r4,r2
;;;261        tmp7 = MULTIPLY(tmp7, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
0001f0  f243020b          MOV      r2,#0x300b
0001f4  4351              MULS     r1,r2,r1
;;;262        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
0001f6  4a1a              LDR      r2,|L1.608|
;;;263        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
;;;264        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
;;;265        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
0001f8  4c1b              LDR      r4,|L1.616|
0001fa  fb0af602          MUL      r6,r10,r2             ;262
0001fe  4a19              LDR      r2,|L1.612|
;;;266        
;;;267        z3 += z5;
;;;268        z4 += z5;
000200  fb05c504          MLA      r5,r5,r4,r12
000204  fb09f902          MUL      r9,r9,r2              ;263
000208  eba82208          SUB      r2,r8,r8,LSL #8       ;264
00020c  ebc21282          RSB      r2,r2,r2,LSL #6       ;264
000210  eba20288          SUB      r2,r2,r8,LSL #2       ;264
000214  eb02080c          ADD      r8,r2,r12             ;267
;;;269        
;;;270        dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp4 + z1 + z3,
000218  199a              ADDS     r2,r3,r6
00021a  4442              ADD      r2,r2,r8
00021c  f5024280          ADD      r2,r2,#0x4000
000220  13d2              ASRS     r2,r2,#15
;;;271    					   CONST_BITS+PASS1_BITS);
;;;272        dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp5 + z2 + z4,
000222  f8c020c0          STR      r2,[r0,#0xc0]
000226  eb0b0209          ADD      r2,r11,r9
00022a  442a              ADD      r2,r2,r5
00022c  f5024280          ADD      r2,r2,#0x4000
000230  13d2              ASRS     r2,r2,#15
;;;273    					   CONST_BITS+PASS1_BITS);
;;;274        dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp6 + z2 + z3,
000232  f8c02080          STR      r2,[r0,#0x80]
000236  eb0e0209          ADD      r2,lr,r9
00023a  4442              ADD      r2,r2,r8
;;;275    					   CONST_BITS+PASS1_BITS);
;;;276        dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp7 + z1 + z4,
00023c  4431              ADD      r1,r1,r6
00023e  f5024280          ADD      r2,r2,#0x4000         ;274
000242  4429              ADD      r1,r1,r5
000244  13d2              ASRS     r2,r2,#15             ;274
000246  f5014180          ADD      r1,r1,#0x4000
00024a  13c9              ASRS     r1,r1,#15
00024c  6402              STR      r2,[r0,#0x40]
00024e  f840191c          STR      r1,[r0],#-0x1c
000252  1e7f              SUBS     r7,r7,#1
000254  f57faf6c          BPL      |L1.304|
;;;277    					   CONST_BITS+PASS1_BITS);
;;;278        
;;;279        dataptr++;			/* advance pointer to next column */
;;;280      }
;;;281    }
000258  e8bd8ff8          POP      {r3-r11,pc}
;;;282    
                          ENDP

                  |L1.604|
                          DCD      0xffffc4df
                  |L1.608|
                          DCD      0xffffe333
                  |L1.612|
                          DCD      0xffffadfd
                  |L1.616|
                          DCD      0xfffff384
