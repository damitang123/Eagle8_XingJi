; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\tjpgd_user.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\tjpgd_user.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\User\Tjpgdecode\tjpgd_user.c]
                          THUMB

                          AREA ||i.Jpeg_Display||, CODE, READONLY, ALIGN=2

                  Jpeg_Display PROC
;;;52     
;;;53     void Jpeg_Display(void* pJpgFile,int x, int y ,int nScale)
000000  b510              PUSH     {r4,lr}
;;;54     {
000002  b0a4              SUB      sp,sp,#0x90
000004  461c              MOV      r4,r3
;;;55     	JDEC jdec; 
;;;56     	JRESULT  res;
;;;57     	IODEV dev;
;;;58     	dev.nFileOffset = 0;
000006  2300              MOVS     r3,#0
;;;59     	dev.xOff = x;
000008  9323              STR      r3,[sp,#0x8c]
00000a  9120              STR      r1,[sp,#0x80]
00000c  e9cd2021          STRD     r2,r0,[sp,#0x84]
;;;60     	dev.yOff = y;
;;;61     	dev.pJpgFile = pJpgFile;
;;;62     	res = jd_prepare(&jdec,_in_func,aJpeg_Buffer,sizeof(aJpeg_Buffer),&dev);
000010  a820              ADD      r0,sp,#0x80
000012  9000              STR      r0,[sp,#0]
000014  f640431c          MOV      r3,#0xc1c
000018  4a0a              LDR      r2,|L1.68|
00001a  490b              LDR      r1,|L1.72|
00001c  a801              ADD      r0,sp,#4
00001e  f7fffffe          BL       jd_prepare
000022  0001              MOVS     r1,r0
;;;63     	if (res == JDR_OK) 
000024  d001              BEQ      |L1.42|
;;;64     	{
;;;65     		res = jd_decomp(&jdec, _out_func, nScale);
;;;66     		if (res != JDR_OK)
;;;67     		{
;;;68     			TRACE_PRINTF("Failed to decompress: rc = %d\r\n", res);
;;;69     		}
;;;70     	} 
;;;71     	else 
;;;72     	{
;;;73     		TRACE_PRINTF("Failed to prepare: rc = %d\r\n", res);
000026  a009              ADR      r0,|L1.76|
000028  e007              B        |L1.58|
                  |L1.42|
00002a  b2e2              UXTB     r2,r4                 ;65
00002c  490f              LDR      r1,|L1.108|
00002e  a801              ADD      r0,sp,#4              ;65
000030  f7fffffe          BL       jd_decomp
000034  0001              MOVS     r1,r0                 ;65
000036  d002              BEQ      |L1.62|
000038  a00d              ADR      r0,|L1.112|
                  |L1.58|
00003a  f7fffffe          BL       User_Debug_Printf
                  |L1.62|
;;;74     	}
;;;75     }
00003e  b024              ADD      sp,sp,#0x90
000040  bd10              POP      {r4,pc}
;;;76     
                          ENDP

000042  0000              DCW      0x0000
                  |L1.68|
                          DCD      ||.bss||
                  |L1.72|
                          DCD      _in_func
                  |L1.76|
00004c  4661696c          DCB      "Failed to prepare: rc = %d\r\n",0
000050  65642074
000054  6f207072
000058  65706172
00005c  653a2072
000060  63203d20
000064  25640d0a
000068  00      
000069  00                DCB      0
00006a  00                DCB      0
00006b  00                DCB      0
                  |L1.108|
                          DCD      _out_func
                  |L1.112|
000070  4661696c          DCB      "Failed to decompress: rc = %d\r\n",0
000074  65642074
000078  6f206465
00007c  636f6d70
000080  72657373
000084  3a207263
000088  203d2025
00008c  640d0a00

                          AREA ||i._in_func||, CODE, READONLY, ALIGN=1

                  _in_func PROC
;;;16     
;;;17     UINT _in_func( JDEC* jdec,   BYTE* buff,  UINT nByte)
000000  b570              PUSH     {r4-r6,lr}
;;;18     {	
;;;19     	IODEV *pDev = (IODEV *)jdec->device;
;;;20     	if(buff)
;;;21     	{
;;;22     		memcpy(buff,(void *)(pDev->pJpgFile + pDev->nFileOffset),nByte);
000002  6f84              LDR      r4,[r0,#0x78]
000004  4615              MOV      r5,r2                 ;18
000006  000b              MOVS     r3,r1                 ;18
000008  68e0              LDR      r0,[r4,#0xc]          ;18
00000a  d009              BEQ      |L2.32|
00000c  68a1              LDR      r1,[r4,#8]
00000e  4401              ADD      r1,r1,r0
000010  4618              MOV      r0,r3
000012  f7fffffe          BL       __aeabi_memcpy
;;;23     		pDev->nFileOffset += nByte;
000016  68e0              LDR      r0,[r4,#0xc]
000018  4428              ADD      r0,r0,r5
;;;24     		return nByte;
00001a  60e0              STR      r0,[r4,#0xc]
00001c  4628              MOV      r0,r5
;;;25     	}
;;;26     	else
;;;27     	{
;;;28     		(pDev->nFileOffset) += nByte;
;;;29     		return 0;
;;;30     	}
;;;31     }  
00001e  bd70              POP      {r4-r6,pc}
                  |L2.32|
000020  4410              ADD      r0,r0,r2              ;28
000022  60e0              STR      r0,[r4,#0xc]          ;29
000024  2000              MOVS     r0,#0                 ;29
000026  bd70              POP      {r4-r6,pc}
;;;32     
                          ENDP


                          AREA ||i._out_func||, CODE, READONLY, ALIGN=1

                  _out_func PROC
;;;32     
;;;33     UINT _out_func(JDEC* jdec, void* bitmap, JRECT* rect)
000000  b5f8              PUSH     {r3-r7,lr}
;;;34     {
000002  460c              MOV      r4,r1
;;;35     	GUI_RECT r;
;;;36     	IODEV *pDev = (IODEV *)jdec->device;
;;;37     	
;;;38     	r.x0 = rect->left;
000004  6f81              LDR      r1,[r0,#0x78]
000006  8810              LDRH     r0,[r2,#0]
;;;39     	r.x1 = rect->right;
000008  8856              LDRH     r6,[r2,#2]
;;;40     	r.y0 = rect->top;
00000a  8895              LDRH     r5,[r2,#4]
;;;41     	r.y1 = rect->bottom;
00000c  88d3              LDRH     r3,[r2,#6]
;;;42     
;;;43     	r.x0 += pDev->xOff;
00000e  880a              LDRH     r2,[r1,#0]
000010  4410              ADD      r0,r0,r2
;;;44     	r.x1 += pDev->xOff;
000012  4432              ADD      r2,r2,r6
;;;45     	r.y0 += pDev->yOff;
000014  888e              LDRH     r6,[r1,#4]
000016  b200              SXTH     r0,r0                 ;43
000018  19a9              ADDS     r1,r5,r6
;;;46     	r.y1 += pDev->yOff;
00001a  4433              ADD      r3,r3,r6
00001c  b212              SXTH     r2,r2                 ;44
00001e  b209              SXTH     r1,r1                 ;45
000020  b21b              SXTH     r3,r3
;;;47     
;;;48     	LCD_L0_FillRect_WithData(r.x0,r.y0,r.x1, r.y1, bitmap);
000022  9400              STR      r4,[sp,#0]
000024  f7fffffe          BL       LCD_L0_FillRect_WithData
;;;49     	
;;;50     	return 1;
000028  2001              MOVS     r0,#1
;;;51     }  
00002a  bdf8              POP      {r3-r7,pc}
;;;52     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  aJpeg_Buffer
                          %        3100
