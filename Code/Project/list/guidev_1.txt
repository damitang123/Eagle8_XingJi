; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\guidev_1.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guidev_1.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\MemDev\GUIDEV_1.c]
                          THUMB

                          AREA ||i._DrawBitLine1BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine1BPP PROC
;;;94     */
;;;95     static void _DrawBitLine1BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, unsigned int xsize,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;96                                  const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest)
;;;97     {
000004  460f              MOV      r7,r1
000006  a90a              ADD      r1,sp,#0x28
;;;98       PIXELINDEX pixels;
;;;99       PIXELINDEX Index1;
;;;100      unsigned int PixelCnt;
;;;101      GUI_USE_PARA(pUsage);
;;;102      PixelCnt = 8 - (Diff & 7);
;;;103      pixels = (*p) << (Diff & 7);
;;;104      GUI_DEBUG_ERROROUT3_IF( x < pDev->x0, "GUIDEV.c: DrawBitLine1BPP, Act= %d, Border= %d, Clip= %d"
;;;105                        ,x,pDev->x0, GUI_Context.ClipRect.x0);
;;;106      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000008  f8dd9034          LDR      r9,[sp,#0x34]
00000c  e8910421          LDM      r1,{r0,r5,r10}        ;97
000010  f0000007          AND      r0,r0,#7              ;102
000014  7819              LDRB     r1,[r3,#0]            ;103
000016  f1c00408          RSB      r4,r0,#8              ;102
00001a  4081              LSLS     r1,r1,r0              ;103
00001c  482e              LDR      r0,|L1.216|
00001e  4698              MOV      r8,r3                 ;97
000020  4693              MOV      r11,r2                ;97
000022  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000024  b2ce              UXTB     r6,r1                 ;103
000026  f0100003          ANDS     r0,r0,#3
00002a  d00a              BEQ      |L1.66|
00002c  2801              CMP      r0,#1
00002e  d038              BEQ      |L1.162|
000030  2802              CMP      r0,#2
000032  d14e              BNE      |L1.210|
;;;107      case 0:    /* Write mode */
;;;108        do {
;;;109          /* Prepare loop */
;;;110          if (PixelCnt > xsize) {
;;;111            PixelCnt = xsize;
;;;112          }
;;;113          xsize -= PixelCnt;
;;;114          /* Write as many pixels as we are allowed to and have loaded in this inner loop */
;;;115          do {
;;;116            (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + ((U8)pixels >> 7)));
;;;117            pixels <<= 1;
;;;118          } while (--PixelCnt);
;;;119          /* Check if an other Source byte needs to be loaded */
;;;120          if (xsize == 0) {
;;;121            return;
;;;122          }
;;;123          PixelCnt = 8;
;;;124          pixels = *(++p);
;;;125        } while (1);
;;;126      case LCD_DRAWMODE_TRANS:
;;;127        Index1 = *(pTrans + 1);
000034  f89aa002          LDRB     r10,[r10,#2]
                  |L1.56|
;;;128        do {
;;;129          /* Prepare loop */
;;;130          if (PixelCnt > xsize) {
000038  42ac              CMP      r4,r5
00003a  d900              BLS      |L1.62|
;;;131            PixelCnt = xsize;
00003c  462c              MOV      r4,r5
                  |L1.62|
;;;132          }
;;;133          xsize -= PixelCnt;
00003e  1b2d              SUBS     r5,r5,r4
;;;134          while (pixels) {
000040  e026              B        |L1.144|
                  |L1.66|
000042  42ac              CMP      r4,r5                 ;110
000044  d900              BLS      |L1.72|
000046  462c              MOV      r4,r5                 ;111
                  |L1.72|
000048  1b2d              SUBS     r5,r5,r4              ;113
                  |L1.74|
00004a  09f0              LSRS     r0,r6,#7              ;116
00004c  f8d91028          LDR      r1,[r9,#0x28]         ;116
000050  f83a2010          LDRH     r2,[r10,r0,LSL #1]    ;116
000054  4638              MOV      r0,r7                 ;116
000056  6a4b              LDR      r3,[r1,#0x24]         ;116
000058  1c7f              ADDS     r7,r7,#1              ;116
00005a  4659              MOV      r1,r11                ;116
00005c  4798              BLX      r3                    ;116
00005e  0670              LSLS     r0,r6,#25             ;117
000060  0e06              LSRS     r6,r0,#24             ;117
000062  1e64              SUBS     r4,r4,#1              ;117
000064  d1f1              BNE      |L1.74|
000066  2d00              CMP      r5,#0                 ;120
000068  d033              BEQ      |L1.210|
00006a  2408              MOVS     r4,#8                 ;123
00006c  f8186f01          LDRB     r6,[r8,#1]!           ;124
000070  e7e7              B        |L1.66|
                  |L1.114|
;;;135            if ((pixels & 0x80)) {
000072  0630              LSLS     r0,r6,#24
000074  d506              BPL      |L1.132|
;;;136              (*pDev->pAPIList->pfSetPixelIndex)(x, y, Index1);
000076  f8d90028          LDR      r0,[r9,#0x28]
00007a  4652              MOV      r2,r10
00007c  4659              MOV      r1,r11
00007e  6a43              LDR      r3,[r0,#0x24]
000080  4638              MOV      r0,r7
000082  4798              BLX      r3
                  |L1.132|
;;;137            }
;;;138            x++;
;;;139            pixels <<= 1;
000084  0670              LSLS     r0,r6,#25
000086  0e06              LSRS     r6,r0,#24
000088  1e64              SUBS     r4,r4,#1
00008a  f1070701          ADD      r7,r7,#1
;;;140            if (--PixelCnt == 0) {
00008e  d001              BEQ      |L1.148|
                  |L1.144|
000090  2e00              CMP      r6,#0                 ;134
000092  d1ee              BNE      |L1.114|
                  |L1.148|
;;;141              break;
;;;142            }
;;;143          }
;;;144          /* Check if an other Source byte needs to be loaded */
;;;145          if (xsize == 0) {
000094  2d00              CMP      r5,#0
000096  d01c              BEQ      |L1.210|
;;;146            return;
;;;147          }
;;;148          x += PixelCnt;
000098  4427              ADD      r7,r7,r4
;;;149          PixelCnt = 8;
00009a  2408              MOVS     r4,#8
;;;150          pixels = *(++p);
00009c  f8186f01          LDRB     r6,[r8,#1]!
;;;151        } while (1);
0000a0  e7ca              B        |L1.56|
                  |L1.162|
;;;152      case LCD_DRAWMODE_XOR:;
;;;153      PixelLoopXor:
;;;154        if (PixelCnt > xsize) {
0000a2  42ac              CMP      r4,r5
0000a4  d900              BLS      |L1.168|
;;;155          PixelCnt = xsize;
0000a6  462c              MOV      r4,r5
                  |L1.168|
;;;156        }
;;;157        xsize -= PixelCnt;
0000a8  1b2d              SUBS     r5,r5,r4
                  |L1.170|
;;;158        do {
;;;159          if ((pixels & 0x80)) {
0000aa  0630              LSLS     r0,r6,#24
0000ac  d505              BPL      |L1.186|
;;;160            (*pDev->pAPIList->pfXorPixel)(x, y);
0000ae  f8d90028          LDR      r0,[r9,#0x28]
0000b2  4659              MOV      r1,r11
0000b4  6a82              LDR      r2,[r0,#0x28]
0000b6  4638              MOV      r0,r7
0000b8  4790              BLX      r2
                  |L1.186|
;;;161          }
;;;162          x++;
;;;163          pDest++;
;;;164          pixels <<= 1;
0000ba  0670              LSLS     r0,r6,#25
0000bc  0e06              LSRS     r6,r0,#24
0000be  1e64              SUBS     r4,r4,#1
0000c0  f1070701          ADD      r7,r7,#1
;;;165        } while (--PixelCnt);
0000c4  d1f1              BNE      |L1.170|
;;;166        if (xsize) {
0000c6  2d00              CMP      r5,#0
0000c8  d003              BEQ      |L1.210|
;;;167          PixelCnt = 8;
0000ca  2408              MOVS     r4,#8
;;;168          pixels = *(++p);
0000cc  f8186f01          LDRB     r6,[r8,#1]!
;;;169          goto PixelLoopXor;
0000d0  e7e7              B        |L1.162|
                  |L1.210|
;;;170        }
;;;171        break;
;;;172      }
;;;173    }
0000d2  e8bd9ff0          POP      {r4-r12,pc}
;;;174    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L1.216|
                          DCD      GUI_Context

                          AREA ||i._DrawBitLine2BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine2BPP PROC
;;;178    */
;;;179    static void _DrawBitLine2BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;180                                 const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest)
;;;181    {
000004  460f              MOV      r7,r1
000006  a90a              ADD      r1,sp,#0x28
;;;182      U8 pixels;
;;;183      U8  PixelCnt;
;;;184      GUI_USE_PARA(pUsage);
;;;185      GUI_USE_PARA(pDest);
;;;186      PixelCnt = 4 - (Diff & 3);
;;;187      pixels = (*p) << ((Diff & 3) << 1);
;;;188      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000008  f8dd9034          LDR      r9,[sp,#0x34]
00000c  e8910441          LDM      r1,{r0,r6,r10}        ;181
000010  f0000003          AND      r0,r0,#3              ;186
000014  f1c00404          RSB      r4,r0,#4              ;186
000018  7819              LDRB     r1,[r3,#0]            ;187
00001a  0040              LSLS     r0,r0,#1              ;187
00001c  4081              LSLS     r1,r1,r0              ;187
00001e  4821              LDR      r0,|L2.164|
000020  4698              MOV      r8,r3                 ;181
000022  4693              MOV      r11,r2                ;181
000024  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000026  b2cd              UXTB     r5,r1                 ;187
000028  f0100003          ANDS     r0,r0,#3
00002c  d002              BEQ      |L2.52|
00002e  2802              CMP      r0,#2
000030  d136              BNE      |L2.160|
000032  e019              B        |L2.104|
                  |L2.52|
;;;189      case 0:    /* Write mode */
;;;190      PixelLoopWrite:
;;;191        if (PixelCnt > xsize) {
000034  42b4              CMP      r4,r6
000036  dd00              BLE      |L2.58|
;;;192          PixelCnt = xsize;
000038  b2f4              UXTB     r4,r6
                  |L2.58|
;;;193        }
;;;194        xsize -= PixelCnt;
00003a  1b36              SUBS     r6,r6,r4
                  |L2.60|
;;;195        do {
;;;196          (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + (pixels >> 6)));
00003c  09a9              LSRS     r1,r5,#6
00003e  4638              MOV      r0,r7
000040  f83a2011          LDRH     r2,[r10,r1,LSL #1]
000044  f8d91028          LDR      r1,[r9,#0x28]
000048  1c7f              ADDS     r7,r7,#1
00004a  6a4b              LDR      r3,[r1,#0x24]
00004c  4659              MOV      r1,r11
00004e  4798              BLX      r3
000050  06a8              LSLS     r0,r5,#26
;;;197          pixels <<= 2;
000052  0e05              LSRS     r5,r0,#24
000054  1e64              SUBS     r4,r4,#1
;;;198        } while (--PixelCnt);
000056  f01404ff          ANDS     r4,r4,#0xff
00005a  d1ef              BNE      |L2.60|
;;;199        if (xsize) {
00005c  2e00              CMP      r6,#0
00005e  d01f              BEQ      |L2.160|
;;;200          PixelCnt = 4;
000060  2404              MOVS     r4,#4
;;;201          pixels = *(++p);
000062  f8185f01          LDRB     r5,[r8,#1]!
;;;202          goto PixelLoopWrite;
000066  e7e5              B        |L2.52|
                  |L2.104|
;;;203        }
;;;204        break;
;;;205      case LCD_DRAWMODE_TRANS:
;;;206      PixelLoopTrans:
;;;207        if (PixelCnt > xsize)
000068  42b4              CMP      r4,r6
00006a  dd00              BLE      |L2.110|
;;;208          PixelCnt = xsize;
00006c  b2f4              UXTB     r4,r6
                  |L2.110|
;;;209        xsize -= PixelCnt;
00006e  1b36              SUBS     r6,r6,r4
                  |L2.112|
;;;210        do {
;;;211          if (pixels & 0xc0) {
000070  09a8              LSRS     r0,r5,#6
000072  d008              BEQ      |L2.134|
;;;212            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *(pTrans + (pixels >> 6)));
000074  f8d90028          LDR      r0,[r9,#0x28]
000078  09a9              LSRS     r1,r5,#6
00007a  f83a2011          LDRH     r2,[r10,r1,LSL #1]
00007e  6a43              LDR      r3,[r0,#0x24]
000080  4659              MOV      r1,r11
000082  4638              MOV      r0,r7
000084  4798              BLX      r3
                  |L2.134|
000086  06a8              LSLS     r0,r5,#26
;;;213          }
;;;214          x++;
;;;215          pixels <<= 2;
000088  0e05              LSRS     r5,r0,#24
00008a  1e64              SUBS     r4,r4,#1
00008c  1c7f              ADDS     r7,r7,#1
;;;216        } while (--PixelCnt);
00008e  f01404ff          ANDS     r4,r4,#0xff
000092  d1ed              BNE      |L2.112|
;;;217        if (xsize) {
000094  2e00              CMP      r6,#0
000096  d003              BEQ      |L2.160|
;;;218          PixelCnt = 4;
000098  2404              MOVS     r4,#4
;;;219          pixels = *(++p);
00009a  f8185f01          LDRB     r5,[r8,#1]!
;;;220          goto PixelLoopTrans;
00009e  e7e3              B        |L2.104|
                  |L2.160|
;;;221        }
;;;222        break;
;;;223      }
;;;224    }
0000a0  e8bd9ff0          POP      {r4-r12,pc}
;;;225    
                          ENDP

                  |L2.164|
                          DCD      GUI_Context

                          AREA ||i._DrawBitLine4BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine4BPP PROC
;;;229    */
;;;230    static void _DrawBitLine4BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;231                                 const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest)
;;;232    {
000004  460c              MOV      r4,r1
000006  a90e              ADD      r1,sp,#0x38
;;;233      U8 pixels;
;;;234      GUI_USE_PARA(pUsage);
;;;235      GUI_USE_PARA(pDest);
;;;236      pixels = (*p) << ((Diff & 1) << 2);
;;;237      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000008  f8dd9044          LDR      r9,[sp,#0x44]
00000c  e8910441          LDM      r1,{r0,r6,r10}        ;232
000010  7819              LDRB     r1,[r3,#0]            ;236
000012  07c2              LSLS     r2,r0,#31             ;236
000014  0f52              LSRS     r2,r2,#29             ;236
000016  4091              LSLS     r1,r1,r2              ;236
000018  b2cd              UXTB     r5,r1                 ;236
00001a  4942              LDR      r1,|L3.292|
00001c  461f              MOV      r7,r3                 ;232
00001e  7c09              LDRB     r1,[r1,#0x10]  ; GUI_Context
000020  f0110103          ANDS     r1,r1,#3
000024  d013              BEQ      |L3.78|
000026  2902              CMP      r1,#2
000028  d17a              BNE      |L3.288|
;;;238    /*
;;;239              * Write mode *
;;;240    */
;;;241      case 0:
;;;242        /* Draw incomplete bytes to the left of center area */
;;;243        if (Diff) {
;;;244          (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + (pixels >> 4)));
;;;245          xsize--;
;;;246          pixels = *++p;
;;;247        }
;;;248        /* Draw center area (2 pixels in one byte) */
;;;249        if (xsize >= 2) {
;;;250          int i = xsize >> 1;
;;;251          xsize &= 1;
;;;252          do {
;;;253            (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + (pixels >>  4)));
;;;254            (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + (pixels  & 15)));
;;;255            pixels = *++p;
;;;256          } while (--i);
;;;257        }
;;;258        /* Draw incomplete bytes to the right of center area */
;;;259        if (xsize) {
;;;260          (*pDev->pAPIList->pfSetPixelIndex)(x++, y, *(pTrans + (pixels >> 4)));
;;;261        }
;;;262        break;
;;;263    /*
;;;264              * Transparent draw mode *
;;;265    */
;;;266      case LCD_DRAWMODE_TRANS:
;;;267        /* Draw incomplete bytes to the left of center area */
;;;268        if (Diff) {
00002a  2800              CMP      r0,#0
00002c  d066              BEQ      |L3.252|
;;;269          if (pixels & 0xF0) {
00002e  0928              LSRS     r0,r5,#4
000030  d008              BEQ      |L3.68|
;;;270            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *(pTrans + (pixels >> 4)));
000032  f8d90028          LDR      r0,[r9,#0x28]
000036  0929              LSRS     r1,r5,#4
000038  f83a2011          LDRH     r2,[r10,r1,LSL #1]
00003c  6a43              LDR      r3,[r0,#0x24]
00003e  4620              MOV      r0,r4
000040  9902              LDR      r1,[sp,#8]
000042  4798              BLX      r3
                  |L3.68|
;;;271          }
;;;272          x++;
;;;273          xsize--;
;;;274          pixels = *++p;
000044  1c64              ADDS     r4,r4,#1
000046  f8175f01          LDRB     r5,[r7,#1]!
00004a  1e76              SUBS     r6,r6,#1
00004c  e056              B        |L3.252|
                  |L3.78|
00004e  b160              CBZ      r0,|L3.106|
000050  0929              LSRS     r1,r5,#4              ;244
000052  4620              MOV      r0,r4                 ;244
000054  f83a2011          LDRH     r2,[r10,r1,LSL #1]    ;244
000058  f8d91028          LDR      r1,[r9,#0x28]         ;244
00005c  1c64              ADDS     r4,r4,#1              ;244
00005e  6a4b              LDR      r3,[r1,#0x24]         ;244
000060  9902              LDR      r1,[sp,#8]            ;244
000062  4798              BLX      r3                    ;244
000064  f8175f01          LDRB     r5,[r7,#1]!           ;246
000068  1e76              SUBS     r6,r6,#1              ;246
                  |L3.106|
00006a  2e02              CMP      r6,#2                 ;249
00006c  db21              BLT      |L3.178|
00006e  ea4f0b66          ASR      r11,r6,#1             ;250
000072  f0060601          AND      r6,r6,#1              ;251
                  |L3.118|
000076  0929              LSRS     r1,r5,#4              ;253
000078  f1040801          ADD      r8,r4,#1              ;253
00007c  f83a2011          LDRH     r2,[r10,r1,LSL #1]    ;253
000080  f8d91028          LDR      r1,[r9,#0x28]         ;253
000084  4620              MOV      r0,r4                 ;253
000086  6a4b              LDR      r3,[r1,#0x24]         ;253
000088  9902              LDR      r1,[sp,#8]            ;253
00008a  4798              BLX      r3                    ;253
00008c  f8d90028          LDR      r0,[r9,#0x28]         ;254
000090  f005010f          AND      r1,r5,#0xf            ;254
000094  f1080401          ADD      r4,r8,#1              ;254
000098  f83a2011          LDRH     r2,[r10,r1,LSL #1]    ;254
00009c  6a43              LDR      r3,[r0,#0x24]         ;254
00009e  4640              MOV      r0,r8                 ;254
0000a0  9902              LDR      r1,[sp,#8]            ;254
0000a2  4798              BLX      r3                    ;254
0000a4  f8175f01          LDRB     r5,[r7,#1]!           ;255
0000a8  f1ab0001          SUB      r0,r11,#1             ;256
0000ac  ea5f0b00          MOVS     r11,r0                ;256
0000b0  d1e1              BNE      |L3.118|
                  |L3.178|
0000b2  2e00              CMP      r6,#0                 ;259
0000b4  d034              BEQ      |L3.288|
0000b6  0929              LSRS     r1,r5,#4              ;260
0000b8  4620              MOV      r0,r4                 ;260
0000ba  f83a2011          LDRH     r2,[r10,r1,LSL #1]    ;260
0000be  f8d91028          LDR      r1,[r9,#0x28]         ;260
0000c2  6a4b              LDR      r3,[r1,#0x24]         ;260
0000c4  9902              LDR      r1,[sp,#8]            ;260
0000c6  e026              B        |L3.278|
                  |L3.200|
;;;275        }
;;;276        /* Draw center area (2 pixels in one byte) */
;;;277        while (xsize >= 2) {
;;;278          /* Draw 1. (left) pixel */
;;;279          if (pixels & 0xF0) {
0000c8  0928              LSRS     r0,r5,#4
0000ca  d008              BEQ      |L3.222|
;;;280            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *(pTrans + (pixels >> 4)));
0000cc  f8d90028          LDR      r0,[r9,#0x28]
0000d0  0929              LSRS     r1,r5,#4
0000d2  f83a2011          LDRH     r2,[r10,r1,LSL #1]
0000d6  6a43              LDR      r3,[r0,#0x24]
0000d8  4620              MOV      r0,r4
0000da  9902              LDR      r1,[sp,#8]
0000dc  4798              BLX      r3
                  |L3.222|
;;;281          }
;;;282          /* Draw 2. (right) pixel */
;;;283          if (pixels &= 15) {
0000de  f015000f          ANDS     r0,r5,#0xf
0000e2  d007              BEQ      |L3.244|
;;;284            (*pDev->pAPIList->pfSetPixelIndex)(x + 1, y, *(pTrans + pixels));
0000e4  f83a2010          LDRH     r2,[r10,r0,LSL #1]
0000e8  f8d90028          LDR      r0,[r9,#0x28]
0000ec  9902              LDR      r1,[sp,#8]
0000ee  6a43              LDR      r3,[r0,#0x24]
0000f0  1c60              ADDS     r0,r4,#1
0000f2  4798              BLX      r3
                  |L3.244|
;;;285          }
;;;286          x += 2;
;;;287          xsize -= 2;
;;;288          pixels = *++p;
0000f4  f8175f01          LDRB     r5,[r7,#1]!
0000f8  1ca4              ADDS     r4,r4,#2
0000fa  1eb6              SUBS     r6,r6,#2
                  |L3.252|
0000fc  2e02              CMP      r6,#2                 ;277
0000fe  dae3              BGE      |L3.200|
;;;289        }
;;;290        /* Draw incomplete bytes to the right of center area */
;;;291        if (xsize) {
000100  2e00              CMP      r6,#0
000102  d00d              BEQ      |L3.288|
;;;292          if (pixels >>= 4) {
000104  0928              LSRS     r0,r5,#4
000106  d00b              BEQ      |L3.288|
;;;293            (*pDev->pAPIList->pfSetPixelIndex)(x, y, *(pTrans + pixels));
000108  f83a2010          LDRH     r2,[r10,r0,LSL #1]
00010c  f8d90028          LDR      r0,[r9,#0x28]
000110  9902              LDR      r1,[sp,#8]
000112  6a43              LDR      r3,[r0,#0x24]
000114  4620              MOV      r0,r4
                  |L3.278|
000116  b004              ADD      sp,sp,#0x10
000118  e8bd5ff0          POP      {r4-r12,lr}
00011c  4718              BX       r3
00011e  e7ff              B        |L3.288|
                  |L3.288|
;;;294          }
;;;295        }
;;;296        break;
;;;297      }
;;;298    }
000120  e8bd9fff          POP      {r0-r12,pc}
;;;299    
                          ENDP

                  |L3.292|
                          DCD      GUI_Context

                          AREA ||i._DrawBitmap||, CODE, READONLY, ALIGN=2

                  _DrawBitmap PROC
;;;356    */
;;;357    static void _DrawBitmap(int x0, int y0, int xsize, int ysize,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;358                            int BitsPerPixel, int BytesPerLine,
;;;359                            const U8 GUI_UNI_PTR * pData, int Diff, const LCD_PIXELINDEX* pTrans)
;;;360    {
000004  b087              SUB      sp,sp,#0x1c
000006  4605              MOV      r5,r0
;;;361      int i;
;;;362      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000008  4863              LDR      r0,|L4.408|
00000a  469b              MOV      r11,r3                ;360
00000c  f8dda060          LDR      r10,[sp,#0x60]
000010  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
000014  f8dd9058          LDR      r9,[sp,#0x58]
000018  f8dd8050          LDR      r8,[sp,#0x50]
00001c  f7fffffe          BL       GUI_ALLOC_h2p
000020  4604              MOV      r4,r0
;;;363      GUI_USAGE*  pUsage = (pDev->hUsage) ? GUI_USAGE_H2P(pDev->hUsage) : 0;
000022  f9b00018          LDRSH    r0,[r0,#0x18]
000026  b108              CBZ      r0,|L4.44|
000028  f7fffffe          BL       GUI_ALLOC_h2p
                  |L4.44|
00002c  0007              MOVS     r7,r0
;;;364      unsigned    BytesPerLineDest;
;;;365      PIXELINDEX* pDest;
;;;366      BytesPerLineDest = pDev->BytesPerLine;
00002e  68e0              LDR      r0,[r4,#0xc]
;;;367      x0 += Diff;
000030  9005              STR      r0,[sp,#0x14]
000032  9817              LDR      r0,[sp,#0x5c]
000034  4428              ADD      r0,r0,r5
;;;368      /* Mark all affected pixels dirty unless transparency is set */
;;;369      if (pUsage) {
000036  9007              STR      r0,[sp,#0x1c]
000038  d00b              BEQ      |L4.82|
;;;370        if ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0) {
00003a  4857              LDR      r0,|L4.408|
00003c  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
00003e  0780              LSLS     r0,r0,#30
000040  d407              BMI      |L4.82|
;;;371          GUI_USAGE_AddRect(pUsage, x0, y0 , xsize, ysize);
000042  ad07              ADD      r5,sp,#0x1c
000044  f8cdb000          STR      r11,[sp,#0]
000048  e895000e          LDM      r5,{r1-r3}
00004c  4638              MOV      r0,r7
00004e  f7fffffe          BL       GUI_USAGE_AddRect
                  |L4.82|
;;;372        }
;;;373      }
;;;374      pDest = _XY2PTR_BITOFFSET(x0, y0, 0);
000052  e9dd0107          LDRD     r0,r1,[sp,#0x1c]
000056  2200              MOVS     r2,#0
000058  f7fffffe          BL       _XY2PTR_BITOFFSET
00005c  4606              MOV      r6,r0
;;;375    #if BITSPERPIXEL == 16
;;;376      /* handle 16 bpp bitmaps in high color modes, but only without palette */
;;;377      if (BitsPerPixel == 16) {
;;;378        for (i = 0; i < ysize; i++) {
;;;379          _DrawBitLine16BPP_DDB(pUsage, x0, i + y0, (const U16*)pData, xsize, pDev, pDest);
;;;380          pData += BytesPerLine;
;;;381          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;382        }
;;;383        return;
;;;384      }
;;;385    #endif
;;;386      /* Handle 8 bpp bitmaps seperately as we have different routine bitmaps with or without palette */
;;;387      if (BitsPerPixel == 8) {
00005e  f1b80f08          CMP      r8,#8
000062  d003              BEQ      |L4.108|
;;;388        for (i = 0; i < ysize; i++) {
;;;389          if (pTrans) {
;;;390            _DrawBitLine8BPP(pUsage, x0, i + y0, pData, xsize, pTrans, pDev, pDest);
;;;391          } else {
;;;392            _DrawBitLine8BPP_DDB(pUsage, x0, i + y0, pData, xsize, pDev, pDest);
;;;393          }
;;;394          pData += BytesPerLine;
;;;395          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;396        }
;;;397        return;
;;;398      }
;;;399      /* Use aID for bitmaps without palette */
;;;400      if (!pTrans) {
000064  f1ba0f00          CMP      r10,#0
000068  d053              BEQ      |L4.274|
00006a  e054              B        |L4.278|
                  |L4.108|
00006c  2000              MOVS     r0,#0                 ;388
00006e  e04a              B        |L4.262|
                  |L4.112|
000070  e9dd5107          LDRD     r5,r1,[sp,#0x1c]      ;389
000074  eb080001          ADD      r0,r8,r1              ;392
000078  9000              STR      r0,[sp,#0]            ;392
00007a  4847              LDR      r0,|L4.408|
00007c  9f09              LDR      r7,[sp,#0x24]         ;389
00007e  f1ba0f00          CMP      r10,#0                ;389
000082  7c00              LDRB     r0,[r0,#0x10]         ;389  ; GUI_Context
000084  464e              MOV      r6,r9                 ;392
000086  f0000003          AND      r0,r0,#3              ;392
00008a  d01e              BEQ      |L4.202|
00008c  b110              CBZ      r0,|L4.148|
00008e  2802              CMP      r0,#2                 ;389
000090  d135              BNE      |L4.254|
000092  e00c              B        |L4.174|
                  |L4.148|
000094  7831              LDRB     r1,[r6,#0]            ;389
000096  4628              MOV      r0,r5                 ;389
000098  1c6d              ADDS     r5,r5,#1              ;389
00009a  f83a2011          LDRH     r2,[r10,r1,LSL #1]    ;389
00009e  6aa1              LDR      r1,[r4,#0x28]         ;389
0000a0  6a4b              LDR      r3,[r1,#0x24]         ;389
0000a2  9900              LDR      r1,[sp,#0]            ;389
0000a4  4798              BLX      r3                    ;389
0000a6  1c76              ADDS     r6,r6,#1              ;389
0000a8  1e7f              SUBS     r7,r7,#1              ;389
0000aa  d1f3              BNE      |L4.148|
0000ac  e027              B        |L4.254|
                  |L4.174|
0000ae  7830              LDRB     r0,[r6,#0]            ;389
0000b0  b130              CBZ      r0,|L4.192|
0000b2  f83a2010          LDRH     r2,[r10,r0,LSL #1]    ;389
0000b6  6aa0              LDR      r0,[r4,#0x28]         ;389
0000b8  9900              LDR      r1,[sp,#0]            ;389
0000ba  6a43              LDR      r3,[r0,#0x24]         ;389
0000bc  4628              MOV      r0,r5                 ;389
0000be  4798              BLX      r3                    ;389
                  |L4.192|
0000c0  1c6d              ADDS     r5,r5,#1              ;389
0000c2  1c76              ADDS     r6,r6,#1              ;389
0000c4  1e7f              SUBS     r7,r7,#1              ;389
0000c6  d1f2              BNE      |L4.174|
0000c8  e019              B        |L4.254|
                  |L4.202|
0000ca  b110              CBZ      r0,|L4.210|
0000cc  2802              CMP      r0,#2                 ;389
0000ce  d116              BNE      |L4.254|
0000d0  e00a              B        |L4.232|
                  |L4.210|
0000d2  6aa1              LDR      r1,[r4,#0x28]         ;389
0000d4  4628              MOV      r0,r5                 ;389
0000d6  7832              LDRB     r2,[r6,#0]            ;389
0000d8  6a4b              LDR      r3,[r1,#0x24]         ;389
0000da  1c6d              ADDS     r5,r5,#1              ;389
0000dc  9900              LDR      r1,[sp,#0]            ;389
0000de  4798              BLX      r3                    ;389
0000e0  1c76              ADDS     r6,r6,#1              ;389
0000e2  1e7f              SUBS     r7,r7,#1              ;389
0000e4  d1f5              BNE      |L4.210|
0000e6  e00a              B        |L4.254|
                  |L4.232|
0000e8  7832              LDRB     r2,[r6,#0]            ;389
0000ea  b122              CBZ      r2,|L4.246|
0000ec  6aa0              LDR      r0,[r4,#0x28]         ;389
0000ee  9900              LDR      r1,[sp,#0]            ;389
0000f0  6a43              LDR      r3,[r0,#0x24]         ;389
0000f2  4628              MOV      r0,r5                 ;389
0000f4  4798              BLX      r3                    ;389
                  |L4.246|
0000f6  1c6d              ADDS     r5,r5,#1              ;389
0000f8  1c76              ADDS     r6,r6,#1              ;389
0000fa  1e7f              SUBS     r7,r7,#1              ;389
0000fc  d1f4              BNE      |L4.232|
                  |L4.254|
0000fe  9915              LDR      r1,[sp,#0x54]         ;394
000100  f1080001          ADD      r0,r8,#1              ;388
000104  4489              ADD      r9,r9,r1              ;394
                  |L4.262|
000106  4680              MOV      r8,r0                 ;388
000108  4558              CMP      r0,r11                ;388
00010a  dbb1              BLT      |L4.112|
                  |L4.268|
;;;401        pTrans = aID;
;;;402      }
;;;403      for (i = 0; i < ysize; i++) {
;;;404        switch (BitsPerPixel) {
;;;405        case 1:
;;;406          _DrawBitLine1BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDev, pDest);
;;;407          break;
;;;408        case 2:
;;;409          _DrawBitLine2BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDev, pDest);
;;;410          break;
;;;411        case 4:
;;;412          _DrawBitLine4BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDev, pDest);
;;;413          break;
;;;414        }
;;;415        pData += BytesPerLine;
;;;416        pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;417      }
;;;418    }
00010c  b00b              ADD      sp,sp,#0x2c
00010e  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.274|
000112  f8dfa088          LDR      r10,|L4.412|
                  |L4.278|
000116  2500              MOVS     r5,#0                 ;403
000118  e03a              B        |L4.400|
                  |L4.282|
00011a  4640              MOV      r0,r8                 ;404
00011c  f1b80f01          CMP      r8,#1                 ;404
000120  d005              BEQ      |L4.302|
000122  2802              CMP      r0,#2                 ;404
000124  d012              BEQ      |L4.332|
000126  f1b80f04          CMP      r8,#4                 ;404
00012a  d12c              BNE      |L4.390|
00012c  e01d              B        |L4.362|
                  |L4.302|
00012e  9909              LDR      r1,[sp,#0x24]         ;406
000130  e9cd1a01          STRD     r1,r10,[sp,#4]        ;406
000134  e9cd4603          STRD     r4,r6,[sp,#0xc]       ;406
000138  9817              LDR      r0,[sp,#0x5c]         ;406
00013a  9000              STR      r0,[sp,#0]            ;406
00013c  9808              LDR      r0,[sp,#0x20]         ;406
00013e  464b              MOV      r3,r9                 ;406
000140  182a              ADDS     r2,r5,r0              ;406
000142  4638              MOV      r0,r7                 ;406
000144  9907              LDR      r1,[sp,#0x1c]         ;406
000146  f7fffffe          BL       _DrawBitLine1BPP
00014a  e01c              B        |L4.390|
                  |L4.332|
00014c  9909              LDR      r1,[sp,#0x24]         ;409
00014e  e9cd1a01          STRD     r1,r10,[sp,#4]        ;409
000152  e9cd4603          STRD     r4,r6,[sp,#0xc]       ;409
000156  9817              LDR      r0,[sp,#0x5c]         ;409
000158  9000              STR      r0,[sp,#0]            ;409
00015a  9808              LDR      r0,[sp,#0x20]         ;409
00015c  464b              MOV      r3,r9                 ;409
00015e  182a              ADDS     r2,r5,r0              ;409
000160  4638              MOV      r0,r7                 ;409
000162  9907              LDR      r1,[sp,#0x1c]         ;409
000164  f7fffffe          BL       _DrawBitLine2BPP
000168  e00d              B        |L4.390|
                  |L4.362|
00016a  9909              LDR      r1,[sp,#0x24]         ;412
00016c  e9cd1a01          STRD     r1,r10,[sp,#4]        ;412
000170  e9cd4603          STRD     r4,r6,[sp,#0xc]       ;412
000174  9817              LDR      r0,[sp,#0x5c]         ;412
000176  9000              STR      r0,[sp,#0]            ;412
000178  9808              LDR      r0,[sp,#0x20]         ;412
00017a  464b              MOV      r3,r9                 ;412
00017c  182a              ADDS     r2,r5,r0              ;412
00017e  4638              MOV      r0,r7                 ;412
000180  9907              LDR      r1,[sp,#0x1c]         ;412
000182  f7fffffe          BL       _DrawBitLine4BPP
                  |L4.390|
000186  9915              LDR      r1,[sp,#0x54]         ;415
000188  9805              LDR      r0,[sp,#0x14]         ;416
00018a  4489              ADD      r9,r9,r1              ;415
00018c  4406              ADD      r6,r6,r0              ;416
00018e  1c6d              ADDS     r5,r5,#1              ;416
                  |L4.400|
000190  455d              CMP      r5,r11                ;403
000192  dbc2              BLT      |L4.282|
000194  e7ba              B        |L4.268|
;;;419    
                          ENDP

000196  0000              DCW      0x0000
                  |L4.408|
                          DCD      GUI_Context
                  |L4.412|
                          DCD      ||.constdata||

                          AREA ||i._DrawHLine||, CODE, READONLY, ALIGN=1

                  _DrawHLine PROC
;;;490    */
;;;491    static void _DrawHLine(int x0, int y, int x1) {
000000  460b              MOV      r3,r1
;;;492      _FillRect(x0, y, x1, y);
000002  f7ffbffe          B.W      _FillRect
;;;493    }
;;;494    
                          ENDP


                          AREA ||i._DrawVLine||, CODE, READONLY, ALIGN=2

                  _DrawVLine PROC
;;;498    */
;;;499    static void _DrawVLine(int x , int y0, int y1) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;500      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000004  f8dfa094          LDR      r10,|L6.156|
000008  4683              MOV      r11,r0                ;499
00000a  4691              MOV      r9,r2                 ;499
00000c  460e              MOV      r6,r1                 ;499
00000e  f9ba0050          LDRSH    r0,[r10,#0x50]  ; GUI_Context
000012  f7fffffe          BL       GUI_ALLOC_h2p
000016  4607              MOV      r7,r0
;;;501      GUI_USAGE_h hUsage = pDev->hUsage; 
000018  f9b00018          LDRSH    r0,[r0,#0x18]
;;;502      GUI_USAGE*  pUsage = hUsage ? GUI_USAGE_H2P(hUsage) : NULL;
00001c  b118              CBZ      r0,|L6.38|
00001e  f7fffffe          BL       GUI_ALLOC_h2p
000022  4605              MOV      r5,r0
000024  e000              B        |L6.40|
                  |L6.38|
000026  2500              MOVS     r5,#0
                  |L6.40|
;;;503      U8* pData;
;;;504      int Bit, Mask;
;;;505      pData = _XY2PTR_BITOFFSET(x, y0, &Bit);
000028  466a              MOV      r2,sp
00002a  4631              MOV      r1,r6
00002c  4658              MOV      r0,r11
00002e  f7fffffe          BL       _XY2PTR_BITOFFSET
000032  4604              MOV      r4,r0
;;;506      Mask  = (1 << Bit);
000034  9900              LDR      r1,[sp,#0]
000036  2001              MOVS     r0,#1
;;;507      if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
000038  f89a2010          LDRB     r2,[r10,#0x10]  ; GUI_Context
00003c  fa00f801          LSL      r8,r0,r1              ;506
000040  07d2              LSLS     r2,r2,#31
000042  d011              BEQ      |L6.104|
                  |L6.68|
;;;508        do {
;;;509          *pData ^= Mask;
000044  7820              LDRB     r0,[r4,#0]
000046  ea800008          EOR      r0,r0,r8
00004a  7020              STRB     r0,[r4,#0]
;;;510          if (pUsage) {
00004c  b12d              CBZ      r5,|L6.90|
;;;511            GUI_USAGE_AddPixel(pUsage, x, y0);
00004e  68a8              LDR      r0,[r5,#8]
000050  4632              MOV      r2,r6
000052  4659              MOV      r1,r11
000054  6803              LDR      r3,[r0,#0]
000056  4628              MOV      r0,r5
000058  4798              BLX      r3
                  |L6.90|
;;;512          }
;;;513          pData += pDev->BytesPerLine;
00005a  68f8              LDR      r0,[r7,#0xc]
00005c  1c76              ADDS     r6,r6,#1
00005e  4404              ADD      r4,r4,r0
;;;514        } while (++y0 <= y1);
000060  454e              CMP      r6,r9
000062  ddef              BLE      |L6.68|
                  |L6.100|
;;;515      } else {
;;;516        int Pixel;
;;;517        Pixel = (LCD_COLORINDEX & 1) << Bit;
;;;518        do {
;;;519          *pData &= ~Mask;
;;;520          *pData |= Pixel;
;;;521          if (pUsage) {
;;;522            GUI_USAGE_AddPixel(pUsage, x, y0);
;;;523          }
;;;524          pData += pDev->BytesPerLine;
;;;525        } while (++y0 <= y1);
;;;526      }
;;;527    }
000064  e8bd8ff8          POP      {r3-r11,pc}
                  |L6.104|
000068  f89a0002          LDRB     r0,[r10,#2]           ;517  ; GUI_Context
00006c  f0000001          AND      r0,r0,#1              ;517
000070  fa00fa01          LSL      r10,r0,r1             ;517
                  |L6.116|
000074  7820              LDRB     r0,[r4,#0]            ;519
000076  ea200008          BIC      r0,r0,r8              ;519
00007a  ea40000a          ORR      r0,r0,r10             ;520
00007e  7020              STRB     r0,[r4,#0]            ;520
000080  b12d              CBZ      r5,|L6.142|
000082  68a8              LDR      r0,[r5,#8]            ;522
000084  4632              MOV      r2,r6                 ;522
000086  4659              MOV      r1,r11                ;522
000088  6803              LDR      r3,[r0,#0]            ;522
00008a  4628              MOV      r0,r5                 ;522
00008c  4798              BLX      r3                    ;522
                  |L6.142|
00008e  68f8              LDR      r0,[r7,#0xc]          ;524
000090  1c76              ADDS     r6,r6,#1              ;524
000092  4404              ADD      r4,r4,r0              ;524
000094  454e              CMP      r6,r9                 ;525
000096  dded              BLE      |L6.116|
000098  e7e4              B        |L6.100|
;;;528    
                          ENDP

00009a  0000              DCW      0x0000
                  |L6.156|
                          DCD      GUI_Context

                          AREA ||i._FillRect||, CODE, READONLY, ALIGN=2

                  _FillRect PROC
;;;423    */
;;;424    static void _FillRect(int x0, int y0, int x1, int y1) {
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;425      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000004  f8dfa13c          LDR      r10,|L7.324|
000008  b083              SUB      sp,sp,#0xc            ;424
00000a  4698              MOV      r8,r3                 ;424
00000c  4614              MOV      r4,r2                 ;424
00000e  460e              MOV      r6,r1                 ;424
000010  f9ba0050          LDRSH    r0,[r10,#0x50]  ; GUI_Context
000014  f7fffffe          BL       GUI_ALLOC_h2p
;;;426      U8* pData;
;;;427      int Bit, Len;
;;;428      int RemPixels;
;;;429      Len = x1 - x0 + 1;
000018  9903              LDR      r1,[sp,#0xc]
;;;430      /* Mark rectangle as modified */
;;;431      if (pDev->hUsage) {
00001a  f9b00018          LDRSH    r0,[r0,#0x18]
00001e  1a61              SUBS     r1,r4,r1              ;429
000020  f1010901          ADD      r9,r1,#1              ;429
;;;432        GUI_USAGE_AddRect(GUI_USAGE_H2P(pDev->hUsage), x0, y0, Len, y1 - y0 + 1);
;;;433      }
;;;434      /* Do the drawing */
;;;435      for (; y0 <= y1; y0++) {
;;;436        pData = _XY2PTR_BITOFFSET(x0, y0, &Bit);
;;;437        RemPixels = Len;
;;;438        if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
;;;439          if (Bit < 7) {
;;;440            while ((Bit >= 0) && RemPixels--) {
;;;441              *pData ^= 1 << (Bit--);
000024  f04f0b01          MOV      r11,#1
000028  2800              CMP      r0,#0                 ;431
00002a  d00a              BEQ      |L7.66|
00002c  f7fffffe          BL       GUI_ALLOC_h2p
000030  eba80106          SUB      r1,r8,r6              ;432
000034  1c49              ADDS     r1,r1,#1              ;432
000036  9100              STR      r1,[sp,#0]            ;432
000038  464b              MOV      r3,r9                 ;432
00003a  4632              MOV      r2,r6                 ;432
00003c  9903              LDR      r1,[sp,#0xc]          ;432
00003e  f7fffffe          BL       GUI_USAGE_AddRect
                  |L7.66|
000042  e079              B        |L7.312|
                  |L7.68|
000044  aa01              ADD      r2,sp,#4              ;436
000046  4631              MOV      r1,r6                 ;436
000048  9803              LDR      r0,[sp,#0xc]          ;436
00004a  f7fffffe          BL       _XY2PTR_BITOFFSET
00004e  f89a1010          LDRB     r1,[r10,#0x10]        ;438  ; GUI_Context
000052  4605              MOV      r5,r0                 ;436
000054  464c              MOV      r4,r9                 ;437
000056  07c9              LSLS     r1,r1,#31             ;438
000058  d02e              BEQ      |L7.184|
00005a  9801              LDR      r0,[sp,#4]            ;439
00005c  2807              CMP      r0,#7                 ;439
00005e  da0f              BGE      |L7.128|
000060  9901              LDR      r1,[sp,#4]            ;440
000062  4658              MOV      r0,r11
                  |L7.100|
000064  2900              CMP      r1,#0                 ;440
000066  db0a              BLT      |L7.126|
000068  1e64              SUBS     r4,r4,#1              ;440
00006a  d308              BCC      |L7.126|
00006c  782a              LDRB     r2,[r5,#0]
00006e  fa00f101          LSL      r1,r0,r1
000072  404a              EORS     r2,r2,r1
000074  702a              STRB     r2,[r5,#0]
000076  9901              LDR      r1,[sp,#4]
000078  1e49              SUBS     r1,r1,#1
00007a  9101              STR      r1,[sp,#4]
00007c  e7f2              B        |L7.100|
                  |L7.126|
00007e  1c6d              ADDS     r5,r5,#1
                  |L7.128|
;;;442            }
;;;443            pData++;
;;;444          }
;;;445          if (RemPixels > 0) {
000080  2c00              CMP      r4,#0
000082  dd58              BLE      |L7.310|
;;;446            int NumBytes = RemPixels >> 3;
000084  10e0              ASRS     r0,r4,#3
;;;447            if (NumBytes > 0) {
000086  2800              CMP      r0,#0
000088  dd06              BLE      |L7.152|
;;;448              RemPixels -= NumBytes << 3;
00008a  eba404c0          SUB      r4,r4,r0,LSL #3
00008e  2100              MOVS     r1,#0
                  |L7.144|
;;;449              do {
;;;450                *pData ^= *pData;
000090  f8051b01          STRB     r1,[r5],#1
000094  1e40              SUBS     r0,r0,#1
;;;451                pData++;
;;;452              } while (--NumBytes);
000096  d1fb              BNE      |L7.144|
                  |L7.152|
;;;453            }
;;;454            Bit = 7;
000098  2007              MOVS     r0,#7
00009a  9001              STR      r0,[sp,#4]            ;441
00009c  4658              MOV      r0,r11                ;441
;;;455            while (RemPixels--) {
00009e  e008              B        |L7.178|
                  |L7.160|
;;;456              *pData ^= 1 << (Bit--);
0000a0  9a01              LDR      r2,[sp,#4]
0000a2  7829              LDRB     r1,[r5,#0]
0000a4  fa00f202          LSL      r2,r0,r2
0000a8  4051              EORS     r1,r1,r2
0000aa  7029              STRB     r1,[r5,#0]
0000ac  9901              LDR      r1,[sp,#4]
0000ae  1e49              SUBS     r1,r1,#1
0000b0  9101              STR      r1,[sp,#4]
                  |L7.178|
0000b2  1e64              SUBS     r4,r4,#1
0000b4  d2f4              BCS      |L7.160|
0000b6  e03e              B        |L7.310|
                  |L7.184|
;;;457            }
;;;458          }
;;;459        } else {  /* Fill */
;;;460          int Color, FillByte;
;;;461          Color    = (LCD_COLORINDEX & 1);
0000b8  f89a0002          LDRB     r0,[r10,#2]  ; GUI_Context
0000bc  f0000701          AND      r7,r0,#1
;;;462          FillByte = (-Color) & 0xFF;
0000c0  4278              RSBS     r0,r7,#0
0000c2  b2c1              UXTB     r1,r0
;;;463          if (Bit < 7) {
0000c4  9801              LDR      r0,[sp,#4]
0000c6  2807              CMP      r0,#7
0000c8  da13              BGE      |L7.242|
0000ca  465b              MOV      r3,r11                ;441
                  |L7.204|
;;;464            while ((Bit >= 0) && RemPixels--) {
0000cc  0002              MOVS     r2,r0
0000ce  d40f              BMI      |L7.240|
0000d0  1e64              SUBS     r4,r4,#1
0000d2  d30d              BCC      |L7.240|
;;;465              *pData &= ~(1 << Bit);
0000d4  7828              LDRB     r0,[r5,#0]
0000d6  fa03f202          LSL      r2,r3,r2
0000da  4390              BICS     r0,r0,r2
0000dc  7028              STRB     r0,[r5,#0]
;;;466              *pData |= Color << (Bit--);
0000de  9a01              LDR      r2,[sp,#4]
0000e0  fa07f202          LSL      r2,r7,r2
0000e4  4310              ORRS     r0,r0,r2
0000e6  7028              STRB     r0,[r5,#0]
0000e8  9801              LDR      r0,[sp,#4]
0000ea  1e40              SUBS     r0,r0,#1
0000ec  9001              STR      r0,[sp,#4]
0000ee  e7ed              B        |L7.204|
                  |L7.240|
0000f0  1c6d              ADDS     r5,r5,#1
                  |L7.242|
;;;467            }
;;;468            pData++;
;;;469          }
;;;470          if (RemPixels > 0) {
0000f2  2c00              CMP      r4,#0
0000f4  dd1f              BLE      |L7.310|
;;;471            int NumBytes = RemPixels >> 3;
0000f6  10e0              ASRS     r0,r4,#3
;;;472            if (NumBytes > 0) {
0000f8  9000              STR      r0,[sp,#0]
0000fa  2800              CMP      r0,#0
0000fc  dd07              BLE      |L7.270|
;;;473              GUI_MEMSET(pData, FillByte, NumBytes);
0000fe  4602              MOV      r2,r0
000100  4628              MOV      r0,r5
000102  f7fffffe          BL       GUI__memset
;;;474              pData += NumBytes;
000106  9800              LDR      r0,[sp,#0]
000108  4405              ADD      r5,r5,r0
;;;475              RemPixels -= NumBytes << 3;
00010a  eba404c0          SUB      r4,r4,r0,LSL #3
                  |L7.270|
;;;476            }
;;;477            Bit = 7;
00010e  2007              MOVS     r0,#7
000110  4659              MOV      r1,r11                ;441
;;;478            while (RemPixels--) {
000112  9001              STR      r0,[sp,#4]
000114  e00d              B        |L7.306|
                  |L7.278|
;;;479              *pData &= ~(1 << Bit);
000116  9a01              LDR      r2,[sp,#4]
000118  7828              LDRB     r0,[r5,#0]
00011a  fa01f202          LSL      r2,r1,r2
00011e  4390              BICS     r0,r0,r2
000120  7028              STRB     r0,[r5,#0]
;;;480              *pData |= Color << (Bit--);
000122  9a01              LDR      r2,[sp,#4]
000124  fa07f202          LSL      r2,r7,r2
000128  4310              ORRS     r0,r0,r2
00012a  7028              STRB     r0,[r5,#0]
00012c  9801              LDR      r0,[sp,#4]
00012e  1e40              SUBS     r0,r0,#1
000130  9001              STR      r0,[sp,#4]
                  |L7.306|
000132  1e64              SUBS     r4,r4,#1
000134  d2ef              BCS      |L7.278|
                  |L7.310|
000136  1c76              ADDS     r6,r6,#1              ;478
                  |L7.312|
000138  4546              CMP      r6,r8                 ;435
00013a  dd83              BLE      |L7.68|
;;;481            }
;;;482          }
;;;483        }
;;;484      }
;;;485    }
00013c  b007              ADD      sp,sp,#0x1c
00013e  e8bd8ff0          POP      {r4-r11,pc}
;;;486    
                          ENDP

000142  0000              DCW      0x0000
                  |L7.324|
                          DCD      GUI_Context

                          AREA ||i._GetPixelIndex||, CODE, READONLY, ALIGN=1

                  _GetPixelIndex PROC
;;;563    */
;;;564    static unsigned int _GetPixelIndex(int x, int y) {
000000  b508              PUSH     {r3,lr}
;;;565      U8* pData;
;;;566      int Bit;
;;;567      pData = _XY2PTR_BITOFFSET(x, y, &Bit);
000002  466a              MOV      r2,sp
000004  f7fffffe          BL       _XY2PTR_BITOFFSET
;;;568      return (*pData >> Bit) & 1;
000008  7800              LDRB     r0,[r0,#0]
00000a  9900              LDR      r1,[sp,#0]
00000c  40c8              LSRS     r0,r0,r1
00000e  f0000001          AND      r0,r0,#1
;;;569    }
000012  bd08              POP      {r3,pc}
;;;570    
                          ENDP


                          AREA ||i._SetPixelIndex||, CODE, READONLY, ALIGN=2

                  _SetPixelIndex PROC
;;;532    */
;;;533    static void _SetPixelIndex(int x, int y, int Index) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  4607              MOV      r7,r0
;;;534      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000004  4815              LDR      r0,|L9.92|
000006  4615              MOV      r5,r2                 ;533
000008  460e              MOV      r6,r1                 ;533
00000a  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
00000e  f7fffffe          BL       GUI_ALLOC_h2p
000012  4604              MOV      r4,r0
;;;535      U8* pData;
;;;536      int Bit;
;;;537      pData   = _XY2PTR_BITOFFSET(x, y, &Bit);
000014  466a              MOV      r2,sp
000016  4631              MOV      r1,r6
000018  4638              MOV      r0,r7
00001a  f7fffffe          BL       _XY2PTR_BITOFFSET
;;;538      *pData &= ~(1 << Bit);
00001e  9b00              LDR      r3,[sp,#0]
000020  7801              LDRB     r1,[r0,#0]
000022  2201              MOVS     r2,#1
000024  409a              LSLS     r2,r2,r3
000026  4391              BICS     r1,r1,r2
000028  7001              STRB     r1,[r0,#0]
;;;539      *pData |= (Index & 1) << Bit;
00002a  9b00              LDR      r3,[sp,#0]
00002c  f0050201          AND      r2,r5,#1
000030  409a              LSLS     r2,r2,r3
000032  4311              ORRS     r1,r1,r2
000034  7001              STRB     r1,[r0,#0]
;;;540      if (pDev->hUsage) {
000036  f9b40018          LDRSH    r0,[r4,#0x18]
00003a  2800              CMP      r0,#0
00003c  d00c              BEQ      |L9.88|
;;;541        GUI_USAGE_AddPixel(GUI_USAGE_H2P(pDev->hUsage), x, y);
00003e  f7fffffe          BL       GUI_ALLOC_h2p
000042  4605              MOV      r5,r0
000044  f9b40018          LDRSH    r0,[r4,#0x18]
000048  f7fffffe          BL       GUI_ALLOC_h2p
00004c  6880              LDR      r0,[r0,#8]
00004e  4632              MOV      r2,r6
000050  4639              MOV      r1,r7
000052  6803              LDR      r3,[r0,#0]
000054  4628              MOV      r0,r5
000056  4798              BLX      r3
                  |L9.88|
;;;542      }
;;;543    }
000058  bdf8              POP      {r3-r7,pc}
;;;544    
                          ENDP

00005a  0000              DCW      0x0000
                  |L9.92|
                          DCD      GUI_Context

                          AREA ||i._XY2PTR_BITOFFSET||, CODE, READONLY, ALIGN=2

                  _XY2PTR_BITOFFSET PROC
;;;70     */
;;;71     static U8* _XY2PTR_BITOFFSET(int x, int y, int* pBitOffset) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
;;;72       GUI_ALLOC_DATATYPE_U Offset;
;;;73       GUI_MEMDEV* pDev;
;;;74       U8* pData;
;;;75       pDev  = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000004  480d              LDR      r0,|L10.60|
000006  4614              MOV      r4,r2                 ;71
000008  460d              MOV      r5,r1                 ;71
00000a  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
00000e  f7fffffe          BL       GUI_ALLOC_h2p
;;;76       pData = (U8*)(pDev + 1);
;;;77       #if GUI_DEBUG_LEVEL >= GUI_DEBUG_LEVEL_CHECK_ALL
;;;78         if ((x >= pDev->x0+pDev->XSize) | (x<pDev->x0) | (y >= pDev->y0+pDev->YSize) | (y<pDev->y0)) {
;;;79           GUI_DEBUG_ERROROUT2("_XY2PTR: parameters out of bounds", x, y);
;;;80         }
;;;81       #endif
;;;82       x -= pDev->x0;
000012  f9b02000          LDRSH    r2,[r0,#0]
000016  f100012c          ADD      r1,r0,#0x2c           ;76
;;;83       y -= pDev->y0;
00001a  8843              LDRH     r3,[r0,#2]
00001c  1ab2              SUBS     r2,r6,r2              ;82
;;;84       Offset = (GUI_ALLOC_DATATYPE_U)(y) * (GUI_ALLOC_DATATYPE_U)(pDev->BytesPerLine) + (x >> 3);
00001e  8980              LDRH     r0,[r0,#0xc]
000020  1aeb              SUBS     r3,r5,r3              ;83
000022  4358              MULS     r0,r3,r0
000024  eb0000e2          ADD      r0,r0,r2,ASR #3
000028  b280              UXTH     r0,r0
;;;85       if (pBitOffset) {
00002a  b124              CBZ      r4,|L10.54|
;;;86         *pBitOffset = 7 - (x & 7);
00002c  f0020207          AND      r2,r2,#7
000030  f1c20207          RSB      r2,r2,#7
000034  6022              STR      r2,[r4,#0]
                  |L10.54|
;;;87       }
;;;88       return pData + Offset;
000036  4408              ADD      r0,r0,r1
;;;89     }
000038  bd70              POP      {r4-r6,pc}
;;;90     
                          ENDP

00003a  0000              DCW      0x0000
                  |L10.60|
                          DCD      GUI_Context

                          AREA ||i._XorPixel||, CODE, READONLY, ALIGN=2

                  _XorPixel PROC
;;;548    */
;;;549    static void _XorPixel(int x, int y) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  4606              MOV      r6,r0
;;;550      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000004  4811              LDR      r0,|L11.76|
000006  460d              MOV      r5,r1                 ;549
000008  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
00000c  f7fffffe          BL       GUI_ALLOC_h2p
000010  4604              MOV      r4,r0
;;;551      U8* pData;
;;;552      int Bit;
;;;553      pData   = _XY2PTR_BITOFFSET(x, y, &Bit);
000012  466a              MOV      r2,sp
000014  4629              MOV      r1,r5
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       _XY2PTR_BITOFFSET
;;;554      *pData ^= (1 << Bit);
00001c  9b00              LDR      r3,[sp,#0]
00001e  7801              LDRB     r1,[r0,#0]
000020  2201              MOVS     r2,#1
000022  409a              LSLS     r2,r2,r3
000024  4051              EORS     r1,r1,r2
000026  7001              STRB     r1,[r0,#0]
;;;555      if (pDev->hUsage) {
000028  f9b40018          LDRSH    r0,[r4,#0x18]
00002c  2800              CMP      r0,#0
00002e  d00c              BEQ      |L11.74|
;;;556        GUI_USAGE_AddPixel(GUI_USAGE_H2P(pDev->hUsage), x, y);
000030  f7fffffe          BL       GUI_ALLOC_h2p
000034  4607              MOV      r7,r0
000036  f9b40018          LDRSH    r0,[r4,#0x18]
00003a  f7fffffe          BL       GUI_ALLOC_h2p
00003e  6880              LDR      r0,[r0,#8]
000040  462a              MOV      r2,r5
000042  4631              MOV      r1,r6
000044  6803              LDR      r3,[r0,#0]
000046  4638              MOV      r0,r7
000048  4798              BLX      r3
                  |L11.74|
;;;557      }
;;;558    }
00004a  bdf8              POP      {r3-r7,pc}
;;;559    
                          ENDP

                  |L11.76|
                          DCD      GUI_Context

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  aID
000000  00000001          DCW      0x0000,0x0001
000004  00020003          DCW      0x0002,0x0003
000008  00040005          DCW      0x0004,0x0005
00000c  00060007          DCW      0x0006,0x0007
000010  00080009          DCW      0x0008,0x0009
000014  000a000b          DCW      0x000a,0x000b
000018  000c000d          DCW      0x000c,0x000d
00001c  000e000f          DCW      0x000e,0x000f

                          AREA ||area_number.15||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.constdata||
                  GUI_MEMDEV__APIList1
                          DCD      GUI_MEMDEV__Color2Index
                          DCD      GUI_MEMDEV__Index2Color
                          DCD      GUI_MEMDEV__GetIndexMask
                          DCD      _DrawBitmap
                          DCD      _DrawHLine
                          DCD      _DrawVLine
                          DCD      _FillRect
                          DCD      _GetPixelIndex
                          DCD      GUI_MEMDEV__GetRect
                          DCD      _SetPixelIndex
                          DCD      _XorPixel
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000001
