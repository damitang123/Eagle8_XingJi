; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\tjpgd.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\tjpgd.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\User\Tjpgdecode\tjpgd.c]
                          THUMB

                          AREA ||i.alloc_pool||, CODE, READONLY, ALIGN=1

                  alloc_pool PROC
;;;131    static
;;;132    void* alloc_pool (	/* Pointer to allocated memory block (NULL:no memory available) */
000000  1cc9              ADDS     r1,r1,#3
;;;133    	JDEC* jd,		/* Pointer to the decompressor object */
;;;134    	UINT nd			/* Number of bytes to allocate */
;;;135    )
;;;136    {
;;;137    	char *rp = 0;
;;;138    
;;;139    
;;;140    	nd = (nd + 3) & ~3;			/* Align block size to the word boundary */
;;;141    
;;;142    	if (jd->sz_pool >= nd) {
000002  6f03              LDR      r3,[r0,#0x70]
000004  2200              MOVS     r2,#0                 ;137
000006  f0210103          BIC      r1,r1,#3              ;140
00000a  428b              CMP      r3,r1
00000c  d304              BCC      |L1.24|
;;;143    		jd->sz_pool -= nd;
00000e  1a5a              SUBS     r2,r3,r1
;;;144    		rp = (char*)jd->pool;			/* Get start of available memory pool */
000010  6702              STR      r2,[r0,#0x70]
;;;145    		jd->pool = (void*)(rp + nd);	/* Allocate requierd bytes */
000012  6ec2              LDR      r2,[r0,#0x6c]
000014  4411              ADD      r1,r1,r2
000016  66c1              STR      r1,[r0,#0x6c]
                  |L1.24|
;;;146    	}
;;;147    
;;;148    	return (void*)rp;	/* Return allocated memory block (NULL:no memory to allocate) */
000018  4610              MOV      r0,r2
;;;149    }
00001a  4770              BX       lr
;;;150    
                          ENDP


                          AREA ||i.bitext||, CODE, READONLY, ALIGN=1

                  bitext PROC
;;;253    static
;;;254    INT bitext (	/* >=0: extracted data, <0: error code */
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;255    	JDEC* jd,	/* Pointer to the decompressor object */
;;;256    	UINT nbit	/* Number of bits to extract (1 to 11) */
;;;257    )
;;;258    {
000004  4605              MOV      r5,r0
;;;259    	BYTE msk, s, *dp;
;;;260    	UINT dc, v, f;
;;;261    
;;;262    
;;;263    	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
000006  7b06              LDRB     r6,[r0,#0xc]
000008  e9d50400          LDRD     r0,r4,[r5,#0]
00000c  4688              MOV      r8,r1                 ;258
;;;264    	s = *dp; v = f = 0;
00000e  7821              LDRB     r1,[r4,#0]
000010  2700              MOVS     r7,#0
000012  46b9              MOV      r9,r7
                  |L2.20|
;;;265    	do {
;;;266    		if (!msk) {				/* Next byte? */
000014  b9fe              CBNZ     r6,|L2.86|
;;;267    			if (!dc) {			/* No input data is available, re-fill input buffer */
000016  b160              CBZ      r0,|L2.50|
000018  1c64              ADDS     r4,r4,#1
                  |L2.26|
00001a  1e40              SUBS     r0,r0,#1
;;;268    				dp = jd->inbuf;	/* Top of input buffer */
;;;269    				dc = jd->infunc(jd, dp, JD_SZBUF);
;;;270    				if (!dc) return 0 - (INT)JDR_INP;	/* Err: read error or wrong stream termination */
;;;271    			} else {
;;;272    				dp++;			/* Next data ptr */
;;;273    			}
;;;274    			dc--;				/* Decrement number of available bytes */
;;;275    			if (f) {			/* In flag sequence? */
00001c  f1b90f00          CMP      r9,#0
000020  d015              BEQ      |L2.78|
;;;276    				f = 0;			/* Exit flag sequence */
;;;277    				if (*dp != 0) return 0 - (INT)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
000022  7821              LDRB     r1,[r4,#0]
000024  f04f0900          MOV      r9,#0                 ;276
000028  b171              CBZ      r1,|L2.72|
00002a  f06f0005          MVN      r0,#5
                  |L2.46|
;;;278    				*dp = s = 0xFF;			/* The flag is a data 0xFF */
;;;279    			} else {
;;;280    				s = *dp;				/* Get next data byte */
;;;281    				if (s == 0xFF) {		/* Is start of flag sequence? */
;;;282    					f = 1; continue;	/* Enter flag sequence */
;;;283    				}
;;;284    			}
;;;285    			msk = 0x80;		/* Read from MSB */
;;;286    		}
;;;287    		v <<= 1;	/* Get a bit */
;;;288    		if (s & msk) v++;
;;;289    		msk >>= 1;
;;;290    		nbit--;
;;;291    	} while (nbit);
;;;292    	jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
;;;293    
;;;294    	return (INT)v;
;;;295    }
00002e  e8bd87f0          POP      {r4-r10,pc}
                  |L2.50|
000032  68ac              LDR      r4,[r5,#8]            ;269
000034  6f6b              LDR      r3,[r5,#0x74]         ;269
000036  f44f7200          MOV      r2,#0x200             ;269
00003a  4621              MOV      r1,r4                 ;269
00003c  4628              MOV      r0,r5                 ;269
00003e  4798              BLX      r3                    ;269
000040  2800              CMP      r0,#0                 ;270
000042  d1ea              BNE      |L2.26|
000044  1e80              SUBS     r0,r0,#2              ;270
000046  e7f2              B        |L2.46|
                  |L2.72|
000048  21ff              MOVS     r1,#0xff              ;278
00004a  7021              STRB     r1,[r4,#0]            ;278
00004c  e002              B        |L2.84|
                  |L2.78|
00004e  7821              LDRB     r1,[r4,#0]            ;280
000050  29ff              CMP      r1,#0xff              ;281
000052  d00f              BEQ      |L2.116|
                  |L2.84|
000054  2680              MOVS     r6,#0x80              ;285
                  |L2.86|
000056  007f              LSLS     r7,r7,#1              ;287
000058  4231              TST      r1,r6                 ;288
00005a  d000              BEQ      |L2.94|
00005c  1c7f              ADDS     r7,r7,#1              ;288
                  |L2.94|
00005e  0876              LSRS     r6,r6,#1              ;289
000060  f1a80801          SUB      r8,r8,#1              ;290
                  |L2.100|
000064  f1b80f00          CMP      r8,#0                 ;291
000068  d1d4              BNE      |L2.20|
00006a  732e              STRB     r6,[r5,#0xc]          ;292
00006c  e9c50400          STRD     r0,r4,[r5,#0]         ;292
000070  4638              MOV      r0,r7                 ;294
000072  e7dc              B        |L2.46|
                  |L2.116|
000074  f04f0901          MOV      r9,#1                 ;282
000078  e7f4              B        |L2.100|
;;;296    
                          ENDP


                          AREA ||i.block_idct||, CODE, READONLY, ALIGN=2

                  block_idct PROC
;;;366    static
;;;367    void block_idct (
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;368    	LONG* src,	/* Input block data (de-quantized and pre-scaled for Arai Algorithm) */
;;;369    	BYTE* dst	/* Pointer to the destination to store the block as byte array */
;;;370    )
;;;371    {
;;;372    	const LONG M13 = (LONG)(1.41421*4096), M2 = (LONG)(1.08239*4096), M4 = (LONG)(2.61313*4096), M5 = (LONG)(1.84776*4096);
;;;373    	LONG v0, v1, v2, v3, v4, v5, v6, v7;
;;;374    	LONG t10, t11, t12, t13;
;;;375    	UINT i;
;;;376    
;;;377    	/* Process columns */
;;;378    	for (i = 0; i < 8; i++) {
000004  f05f0200          MOVS.W   r2,#0
                  |L3.8|
;;;379    		v0 = src[8 * 0];	/* Get even elements */
000008  f8504b40          LDR      r4,[r0],#0x40
;;;380    		v1 = src[8 * 2];
;;;381    		v2 = src[8 * 4];
;;;382    		v3 = src[8 * 6];
;;;383    
;;;384    		t10 = v0 + v2;		/* Process the even elements */
;;;385    		t12 = v0 - v2;
;;;386    		t11 = (v1 - v3) * M13 >> 12;
00000c  f44f5cb5          MOV      r12,#0x16a0
000010  f8505b40          LDR      r5,[r0],#0x40         ;380
;;;387    		v3 += v1;
;;;388    		t11 -= v3;
;;;389    		v0 = t10 + v3;
;;;390    		v3 = t10 - v3;
;;;391    		v1 = t11 + t12;
;;;392    		v2 = t12 - t11;
;;;393    
;;;394    		v4 = src[8 * 7];	/* Get odd elements */
;;;395    		v5 = src[8 * 1];
;;;396    		v6 = src[8 * 5];
;;;397    		v7 = src[8 * 3];
;;;398    
;;;399    		t10 = v5 - v4;		/* Process the odd elements */
;;;400    		t11 = v5 + v4;
;;;401    		t12 = v6 - v7;
;;;402    		v7 += v6;
;;;403    		v5 = (t11 - v7) * M13 >> 12;
000014  f44f58b5          MOV      r8,#0x16a0
000018  6807              LDR      r7,[r0,#0]            ;384
00001a  6c03              LDR      r3,[r0,#0x40]         ;386
00001c  19e6              ADDS     r6,r4,r7              ;384
00001e  1be4              SUBS     r4,r4,r7              ;385
000020  1aef              SUBS     r7,r5,r3              ;386
000022  442b              ADD      r3,r3,r5              ;387
000024  fb07f70c          MUL      r7,r7,r12             ;386
000028  ebc33727          RSB      r7,r3,r7,ASR #12      ;388
00002c  18f5              ADDS     r5,r6,r3              ;389
00002e  eba60a03          SUB      r10,r6,r3             ;390
000032  eb070b04          ADD      r11,r7,r4             ;391
000036  eba40907          SUB      r9,r4,r7              ;392
00003a  f850cc60          LDR      r12,[r0,#-0x60]       ;395
00003e  6e03              LDR      r3,[r0,#0x60]         ;399
000040  f8507c20          LDR      r7,[r0,#-0x20]        ;397
000044  ebac0403          SUB      r4,r12,r3             ;399
000048  6a06              LDR      r6,[r0,#0x20]         ;401
00004a  449c              ADD      r12,r12,r3            ;400
00004c  1bf3              SUBS     r3,r6,r7              ;401
00004e  443e              ADD      r6,r6,r7              ;402
000050  ebac0706          SUB      r7,r12,r6
000054  fb07f708          MUL      r7,r7,r8
000058  ea4f3827          ASR      r8,r7,#12
;;;404    		v7 += t11;
00005c  4466              ADD      r6,r6,r12
;;;405    		t13 = (t10 + t12) * M5 >> 12;
00005e  18e7              ADDS     r7,r4,r3
000060  f6415c90          MOV      r12,#0x1d90
000064  fb07f70c          MUL      r7,r7,r12
;;;406    		v4 = t13 - (t10 * M2 >> 12);
000068  f2411c51          MOV      r12,#0x1151
00006c  fb04f40c          MUL      r4,r4,r12
;;;407    		v6 = t13 - (t12 * M4 >> 12) - v7;
000070  f6421ccf          MOV      r12,#0x29cf
000074  fb03f30c          MUL      r3,r3,r12
000078  133f              ASRS     r7,r7,#12             ;405
00007a  eba73323          SUB      r3,r7,r3,ASR #12
;;;408    		v5 -= v6;
;;;409    		v4 -= v5;
;;;410    
;;;411    		src[8 * 0] = v0 + v7;	/* Write-back transformed values */
00007e  eb050c06          ADD      r12,r5,r6
000082  1b9b              SUBS     r3,r3,r6              ;407
;;;412    		src[8 * 7] = v0 - v7;
000084  1bad              SUBS     r5,r5,r6
000086  eba73424          SUB      r4,r7,r4,ASR #12      ;406
00008a  f840cc80          STR      r12,[r0,#-0x80]       ;411
00008e  eba80703          SUB      r7,r8,r3              ;408
;;;413    		src[8 * 1] = v1 + v6;
000092  6605              STR      r5,[r0,#0x60]
000094  eb0b0503          ADD      r5,r11,r3
000098  f8405c60          STR      r5,[r0,#-0x60]
;;;414    		src[8 * 6] = v1 - v6;
00009c  ebab0303          SUB      r3,r11,r3
;;;415    		src[8 * 2] = v2 + v5;
0000a0  6403              STR      r3,[r0,#0x40]
0000a2  eb090307          ADD      r3,r9,r7
0000a6  f8403c40          STR      r3,[r0,#-0x40]
0000aa  1be4              SUBS     r4,r4,r7              ;409
;;;416    		src[8 * 5] = v2 - v5;
0000ac  eba90307          SUB      r3,r9,r7
;;;417    		src[8 * 3] = v3 + v4;
0000b0  6203              STR      r3,[r0,#0x20]
0000b2  eb0a0304          ADD      r3,r10,r4
0000b6  f8403c20          STR      r3,[r0,#-0x20]
;;;418    		src[8 * 4] = v3 - v4;
0000ba  ebaa0304          SUB      r3,r10,r4
0000be  1c52              ADDS     r2,r2,#1
0000c0  f840397c          STR      r3,[r0],#-0x7c
0000c4  2a08              CMP      r2,#8                 ;378
0000c6  d39f              BCC      |L3.8|
;;;419    
;;;420    		src++;	/* Next column */
;;;421    	}
;;;422    
;;;423    	/* Process rows */
;;;424    	src -= 8;
;;;425    	for (i = 0; i < 8; i++) {
0000c8  2300              MOVS     r3,#0
;;;426    		v0 = src[0] + (128L << 8);	/* Get even elements (remove DC offset (-128) here) */
;;;427    		v1 = src[2];
;;;428    		v2 = src[4];
;;;429    		v3 = src[6];
;;;430    
;;;431    		t10 = v0 + v2;				/* Process the even elements */
;;;432    		t12 = v0 - v2;
;;;433    		t11 = (v1 - v3) * M13 >> 12;
;;;434    		v3 += v1;
;;;435    		t11 -= v3;
;;;436    		v0 = t10 + v3;
;;;437    		v3 = t10 - v3;
;;;438    		v1 = t11 + t12;
;;;439    		v2 = t12 - t11;
;;;440    
;;;441    		v4 = src[7];				/* Get odd elements */
;;;442    		v5 = src[1];
;;;443    		v6 = src[5];
;;;444    		v7 = src[3];
;;;445    
;;;446    		t10 = v5 - v4;				/* Process the odd elements */
;;;447    		t11 = v5 + v4;
;;;448    		t12 = v6 - v7;
;;;449    		v7 += v6;
;;;450    		v5 = (t11 - v7) * M13 >> 12;
;;;451    		v7 += t11;
;;;452    		t13 = (t10 + t12) * M5 >> 12;
;;;453    		v4 = t13 - (t10 * M2 >> 12);
;;;454    		v6 = t13 - (t12 * M4 >> 12) - v7;
;;;455    		v5 -= v6;
;;;456    		v4 -= v5;
;;;457    
;;;458    		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Descale the transformed values 8 bits and output */
0000ca  f8dfe118          LDR      lr,|L3.484|
0000ce  3820              SUBS     r0,r0,#0x20
                  |L3.208|
0000d0  f44f5cb5          MOV      r12,#0x16a0           ;433
0000d4  f8502b08          LDR      r2,[r0],#8            ;426
0000d8  f44f58b5          MOV      r8,#0x16a0            ;450
0000dc  f8505b08          LDR      r5,[r0],#8            ;427
0000e0  f5024200          ADD      r2,r2,#0x8000         ;429
0000e4  f8504b10          LDR      r4,[r0],#0x10         ;428
0000e8  f8506c08          LDR      r6,[r0,#-8]           ;429
0000ec  1917              ADDS     r7,r2,r4              ;431
0000ee  1b14              SUBS     r4,r2,r4              ;432
0000f0  1baa              SUBS     r2,r5,r6              ;433
0000f2  fb02f20c          MUL      r2,r2,r12             ;433
0000f6  ea4f3c22          ASR      r12,r2,#12            ;433
0000fa  1972              ADDS     r2,r6,r5              ;434
0000fc  ebac0502          SUB      r5,r12,r2             ;435
000100  eb050904          ADD      r9,r5,r4              ;438
000104  eba40a05          SUB      r10,r4,r5             ;439
000108  18be              ADDS     r6,r7,r2              ;436
00010a  eba70b02          SUB      r11,r7,r2             ;437
00010e  f8505c04          LDR      r5,[r0,#-4]           ;441
000112  f850cc1c          LDR      r12,[r0,#-0x1c]       ;442
000116  f8502c0c          LDR      r2,[r0,#-0xc]         ;443
00011a  f8507c14          LDR      r7,[r0,#-0x14]        ;444
00011e  ebac0405          SUB      r4,r12,r5             ;446
000122  44ac              ADD      r12,r12,r5            ;447
000124  1bd5              SUBS     r5,r2,r7              ;448
000126  443a              ADD      r2,r2,r7              ;449
000128  ebac0702          SUB      r7,r12,r2             ;450
00012c  fb07f708          MUL      r7,r7,r8              ;450
000130  ea4f3827          ASR      r8,r7,#12             ;450
000134  4462              ADD      r2,r2,r12             ;451
000136  1967              ADDS     r7,r4,r5              ;452
000138  f6415c90          MOV      r12,#0x1d90           ;452
00013c  fb07f70c          MUL      r7,r7,r12             ;452
000140  f2411c51          MOV      r12,#0x1151           ;453
000144  fb04f40c          MUL      r4,r4,r12             ;453
000148  133f              ASRS     r7,r7,#12             ;452
00014a  f6421ccf          MOV      r12,#0x29cf           ;454
00014e  fb05f50c          MUL      r5,r5,r12             ;454
000152  eba73525          SUB      r5,r7,r5,ASR #12      ;454
000156  eba73424          SUB      r4,r7,r4,ASR #12      ;453
00015a  1aad              SUBS     r5,r5,r2              ;454
00015c  eba80705          SUB      r7,r8,r5              ;455
000160  eba40c07          SUB      r12,r4,r7             ;456
000164  18b4              ADDS     r4,r6,r2
000166  f3c42809          UBFX     r8,r4,#8,#10
;;;459    		dst[7] = BYTECLIP((v0 - v7) >> 8);
00016a  1ab2              SUBS     r2,r6,r2
00016c  f81e8008          LDRB     r8,[lr,r8]            ;458
000170  f3c22209          UBFX     r2,r2,#8,#10
000174  f8018b07          STRB     r8,[r1],#7            ;458
000178  f81e2002          LDRB     r2,[lr,r2]
00017c  f8012906          STRB     r2,[r1],#-6
;;;460    		dst[1] = BYTECLIP((v1 + v6) >> 8);
000180  eb090205          ADD      r2,r9,r5
000184  f3c22209          UBFX     r2,r2,#8,#10
000188  4674              MOV      r4,lr                 ;458
00018a  f81e2002          LDRB     r2,[lr,r2]
00018e  f8012b01          STRB     r2,[r1],#1
;;;461    		dst[6] = BYTECLIP((v1 - v6) >> 8);
000192  eba90205          SUB      r2,r9,r5
000196  f3c22209          UBFX     r2,r2,#8,#10
00019a  f81e2002          LDRB     r2,[lr,r2]
00019e  710a              STRB     r2,[r1,#4]
;;;462    		dst[2] = BYTECLIP((v2 + v5) >> 8);
0001a0  eb0a0207          ADD      r2,r10,r7
0001a4  f3c22209          UBFX     r2,r2,#8,#10
0001a8  5ca2              LDRB     r2,[r4,r2]
0001aa  f8012b02          STRB     r2,[r1],#2
;;;463    		dst[5] = BYTECLIP((v2 - v5) >> 8);
0001ae  ebaa0207          SUB      r2,r10,r7
0001b2  f3c22209          UBFX     r2,r2,#8,#10
0001b6  5ca2              LDRB     r2,[r4,r2]
0001b8  704a              STRB     r2,[r1,#1]
;;;464    		dst[3] = BYTECLIP((v3 + v4) >> 8);
0001ba  eb0b020c          ADD      r2,r11,r12
0001be  f3c22209          UBFX     r2,r2,#8,#10
0001c2  5ca2              LDRB     r2,[r4,r2]
0001c4  f8012c01          STRB     r2,[r1,#-1]
;;;465    		dst[4] = BYTECLIP((v3 - v4) >> 8);
0001c8  ebab020c          SUB      r2,r11,r12
0001cc  f3c22209          UBFX     r2,r2,#8,#10
0001d0  f81e2002          LDRB     r2,[lr,r2]
0001d4  1c5b              ADDS     r3,r3,#1
0001d6  f8012b04          STRB     r2,[r1],#4
0001da  2b08              CMP      r3,#8                 ;425
0001dc  f4ffaf78          BCC      |L3.208|
;;;466    		dst += 8;
;;;467    
;;;468    		src += 8;	/* Next row */
;;;469    	}
;;;470    }
0001e0  e8bd8ff0          POP      {r4-r11,pc}
;;;471    
                          ENDP

                  |L3.484|
                          DCD      ||.constdata||+0xc0

                          AREA ||i.create_huffman_tbl||, CODE, READONLY, ALIGN=2

                  create_huffman_tbl PROC
;;;195    static
;;;196    UINT create_huffman_tbl (	/* 0:OK, !0:Failed */
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;197    	JDEC* jd,				/* Pointer to the decompressor object */
;;;198    	const BYTE* data,		/* Pointer to the packed huffman tables */
;;;199    	UINT ndata				/* Size of input data */
;;;200    )
;;;201    {
000004  4616              MOV      r6,r2
000006  460d              MOV      r5,r1
;;;202    	UINT i, j, b, np, cls, num;
;;;203    	BYTE d, *pb, *pd;
;;;204    	WORD hc, *ph;
;;;205    
;;;206    
;;;207    	while (ndata) {	/* Process all tables in the segment */
;;;208    		if (ndata < 17) return JDR_FMT1;	/* Err: wrong data size */
;;;209    		ndata -= 17;
;;;210    		d = *data++;						/* Get table number and class */
;;;211    		cls = (d >> 4); num = d & 0x0F;		/* class = dc(0)/ac(1), table number = 0/1 */
;;;212    		if (d & 0xEE) return JDR_FMT1;		/* Err: invalid class/number */
;;;213    		pb = alloc_pool(jd, 16);			/* Allocate a memory block for the bit distribution table */
;;;214    		if (!pb) return JDR_MEM1;			/* Err: not enough memory */
;;;215    		jd->huffbits[num][cls] = pb;
;;;216    		for (np = i = 0; i < 16; i++) {		/* Load number of patterns for 1 to 16-bit code */
;;;217    			pb[i] = b = *data++;
;;;218    			np += b;	/* Get sum of code words for each code */
;;;219    		}
;;;220    
;;;221    		ph = alloc_pool(jd, np * sizeof (WORD));/* Allocate a memory block for the code word table */
;;;222    		if (!ph) return JDR_MEM1;			/* Err: not enough memory */
;;;223    		jd->huffcode[num][cls] = ph;
;;;224    		hc = 0;
;;;225    		for (j = i = 0; i < 16; i++) {		/* Re-build huffman code word table */
;;;226    			b = pb[i];
;;;227    			while (b--) ph[j++] = hc++;
;;;228    			hc <<= 1;
;;;229    		}
;;;230    
;;;231    		if (ndata < np) return JDR_FMT1;	/* Err: wrong data size */
;;;232    		ndata -= np;
;;;233    		pd = alloc_pool(jd, np);			/* Allocate a memory block for the decoded data */
;;;234    		if (!pd) return JDR_MEM1;			/* Err: not enough memory */
;;;235    		jd->huffdata[num][cls] = pd;
;;;236    		for (i = 0; i < np; i++) {			/* Load decoded data corresponds to each code ward */
000008  e05c              B        |L4.196|
                  |L4.10|
00000a  2e11              CMP      r6,#0x11              ;208
00000c  d353              BCC      |L4.182|
00000e  f8150b01          LDRB     r0,[r5],#1            ;210
000012  f1a60a11          SUB      r10,r6,#0x11          ;208
000016  0907              LSRS     r7,r0,#4              ;211
000018  f000040f          AND      r4,r0,#0xf            ;211
00001c  f0100fee          TST      r0,#0xee              ;212
000020  d149              BNE      |L4.182|
000022  2110              MOVS     r1,#0x10              ;213
000024  9800              LDR      r0,[sp,#0]            ;213
000026  f7fffffe          BL       alloc_pool
00002a  0006              MOVS     r6,r0                 ;213
00002c  d03a              BEQ      |L4.164|
00002e  9800              LDR      r0,[sp,#0]            ;215
000030  eb0000c4          ADD      r0,r0,r4,LSL #3       ;215
000034  eb000b87          ADD      r11,r0,r7,LSL #2      ;215
000038  2000              MOVS     r0,#0                 ;216
00003a  4604              MOV      r4,r0                 ;216
00003c  f8cb6024          STR      r6,[r11,#0x24]        ;216
                  |L4.64|
000040  f8151b01          LDRB     r1,[r5],#1            ;217
000044  5431              STRB     r1,[r6,r0]            ;217
000046  1c40              ADDS     r0,r0,#1              ;218
000048  440c              ADD      r4,r4,r1              ;218
00004a  2810              CMP      r0,#0x10              ;216
00004c  d3f8              BCC      |L4.64|
00004e  0061              LSLS     r1,r4,#1              ;221
000050  9800              LDR      r0,[sp,#0]            ;221
000052  f7fffffe          BL       alloc_pool
000056  0003              MOVS     r3,r0                 ;221
000058  d024              BEQ      |L4.164|
00005a  2000              MOVS     r0,#0                 ;224
00005c  4601              MOV      r1,r0                 ;225
00005e  460a              MOV      r2,r1                 ;225
000060  f64f79ff          MOV      r9,#0xffff            ;228
000064  f8cb3034          STR      r3,[r11,#0x34]        ;228
                  |L4.104|
000068  f816c001          LDRB     r12,[r6,r1]           ;226
00006c  e005              B        |L4.122|
00006e  bf00              NOP                            ;227
                  |L4.112|
000070  f8230012          STRH     r0,[r3,r2,LSL #1]     ;227
000074  1c40              ADDS     r0,r0,#1              ;227
000076  b280              UXTH     r0,r0                 ;227
000078  1c52              ADDS     r2,r2,#1              ;227
                  |L4.122|
00007a  f1bc0c01          SUBS     r12,r12,#1            ;227
00007e  d2f7              BCS      |L4.112|
000080  1c49              ADDS     r1,r1,#1              ;228
000082  ea090040          AND      r0,r9,r0,LSL #1       ;228
000086  2910              CMP      r1,#0x10              ;225
000088  d3ee              BCC      |L4.104|
00008a  45a2              CMP      r10,r4                ;231
00008c  d313              BCC      |L4.182|
00008e  ebaa0604          SUB      r6,r10,r4             ;232
000092  4621              MOV      r1,r4                 ;233
000094  9800              LDR      r0,[sp,#0]            ;233
000096  f7fffffe          BL       alloc_pool
00009a  b118              CBZ      r0,|L4.164|
00009c  2100              MOVS     r1,#0
00009e  f8cb0044          STR      r0,[r11,#0x44]
0000a2  e00d              B        |L4.192|
                  |L4.164|
0000a4  2003              MOVS     r0,#3                 ;234
                  |L4.166|
;;;237    			d = *data++;
;;;238    			if (!cls && d > 11) return JDR_FMT1;
;;;239    			*pd++ = d;
;;;240    		}
;;;241    	}
;;;242    
;;;243    	return JDR_OK;
;;;244    }
0000a6  e8bd8ffe          POP      {r1-r11,pc}
0000aa  bf00              NOP                            ;237
                  |L4.172|
0000ac  f8152b01          LDRB     r2,[r5],#1            ;237
0000b0  b91f              CBNZ     r7,|L4.186|
0000b2  2a0b              CMP      r2,#0xb               ;238
0000b4  d901              BLS      |L4.186|
                  |L4.182|
0000b6  2006              MOVS     r0,#6                 ;238
0000b8  e7f5              B        |L4.166|
                  |L4.186|
0000ba  f8002b01          STRB     r2,[r0],#1            ;239
0000be  1c49              ADDS     r1,r1,#1              ;239
                  |L4.192|
0000c0  42a1              CMP      r1,r4                 ;236
0000c2  d3f3              BCC      |L4.172|
                  |L4.196|
0000c4  2e00              CMP      r6,#0                 ;207
0000c6  d1a0              BNE      |L4.10|
0000c8  2000              MOVS     r0,#0                 ;243
0000ca  e7ec              B        |L4.166|
;;;245    
                          ENDP


                          AREA ||i.huffext||, CODE, READONLY, ALIGN=1

                  huffext PROC
;;;304    static
;;;305    INT huffext (			/* >=0: decoded data, <0: error code */
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;306    	JDEC* jd,			/* Pointer to the decompressor object */
;;;307    	const BYTE* hbits,	/* Pointer to the bit distribution table */
;;;308    	const WORD* hcode,	/* Pointer to the code word table */
;;;309    	const BYTE* hdata	/* Pointer to the data table */
;;;310    )
;;;311    {
000004  4604              MOV      r4,r0
000006  468a              MOV      r10,r1
;;;312    	BYTE msk, s, *dp;
;;;313    	UINT dc, v, f, bl, nd;
;;;314    
;;;315    
;;;316    	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
000008  7b05              LDRB     r5,[r0,#0xc]
00000a  e9d40100          LDRD     r0,r1,[r4,#0]
00000e  4688              MOV      r8,r1
;;;317    	s = *dp; v = f = 0;
000010  7809              LDRB     r1,[r1,#0]
000012  2600              MOVS     r6,#0
000014  469b              MOV      r11,r3                ;311
000016  4617              MOV      r7,r2                 ;311
;;;318    	bl = 16;	/* Max code length */
000018  f04f0910          MOV      r9,#0x10
00001c  9600              STR      r6,[sp,#0]
                  |L5.30|
;;;319    	do {
;;;320    		if (!msk) {		/* Next byte? */
00001e  bb0d              CBNZ     r5,|L5.100|
;;;321    			if (!dc) {	/* No input data is available, re-fill input buffer */
000020  b150              CBZ      r0,|L5.56|
;;;322    				dp = jd->inbuf;	/* Top of input buffer */
;;;323    				dc = jd->infunc(jd, dp, JD_SZBUF);
;;;324    				if (!dc) return 0 - (INT)JDR_INP;	/* Err: read error or wrong stream termination */
;;;325    			} else {
;;;326    				dp++;	/* Next data ptr */
000022  f1080801          ADD      r8,r8,#1
                  |L5.38|
;;;327    			}
;;;328    			dc--;		/* Decrement number of available bytes */
;;;329    			if (f) {		/* In flag sequence? */
000026  9900              LDR      r1,[sp,#0]
000028  1e40              SUBS     r0,r0,#1
00002a  b1b1              CBZ      r1,|L5.90|
;;;330    				f = 0;		/* Exit flag sequence */
00002c  2100              MOVS     r1,#0
;;;331    				if (*dp != 0)
00002e  9100              STR      r1,[sp,#0]
000030  f8981000          LDRB     r1,[r8,#0]
000034  bba1              CBNZ     r1,|L5.160|
000036  e00c              B        |L5.82|
                  |L5.56|
000038  f8d48008          LDR      r8,[r4,#8]            ;323
00003c  6f63              LDR      r3,[r4,#0x74]         ;323
00003e  f44f7200          MOV      r2,#0x200             ;323
000042  4641              MOV      r1,r8                 ;323
000044  4620              MOV      r0,r4                 ;323
000046  4798              BLX      r3                    ;323
000048  2800              CMP      r0,#0                 ;324
00004a  d1ec              BNE      |L5.38|
00004c  1e80              SUBS     r0,r0,#2              ;324
                  |L5.78|
;;;332    					return 0 - (INT)JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
;;;333    				*dp = s = 0xFF;			/* The flag is a data 0xFF */
;;;334    			} else {
;;;335    				s = *dp;				/* Get next data byte */
;;;336    				if (s == 0xFF) {		/* Is start of flag sequence? */
;;;337    					f = 1; continue;	/* Enter flag sequence, get trailing byte */
;;;338    				}
;;;339    			}
;;;340    			msk = 0x80;		/* Read from MSB */
;;;341    		}
;;;342    		v <<= 1;	/* Get a bit */
;;;343    		if (s & msk) v++;
;;;344    		msk >>= 1;
;;;345    
;;;346    		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
;;;347    			if (v == *hcode++) {		/* Matched? */
;;;348    				jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
;;;349    				return *hdata;			/* Return the decoded data */
;;;350    			}
;;;351    			hdata++;
;;;352    		}
;;;353    		bl--;
;;;354    	} while (bl);
;;;355    
;;;356    	return 0 - (INT)JDR_FMT1;	/* Err: code not found (may be collapted data) */
;;;357    }
00004e  e8bd8ff8          POP      {r3-r11,pc}
                  |L5.82|
000052  21ff              MOVS     r1,#0xff              ;333
000054  f8881000          STRB     r1,[r8,#0]            ;333
000058  e003              B        |L5.98|
                  |L5.90|
00005a  f8981000          LDRB     r1,[r8,#0]            ;335
00005e  29ff              CMP      r1,#0xff              ;336
000060  d012              BEQ      |L5.136|
                  |L5.98|
000062  2580              MOVS     r5,#0x80              ;340
                  |L5.100|
000064  0076              LSLS     r6,r6,#1              ;342
000066  4229              TST      r1,r5                 ;343
000068  d000              BEQ      |L5.108|
00006a  1c76              ADDS     r6,r6,#1              ;343
                  |L5.108|
00006c  f81a2b01          LDRB     r2,[r10],#1           ;346
000070  086d              LSRS     r5,r5,#1              ;344
000072  b182              CBZ      r2,|L5.150|
                  |L5.116|
000074  f8373b02          LDRH     r3,[r7],#2            ;347
000078  42b3              CMP      r3,r6                 ;347
00007a  d108              BNE      |L5.142|
00007c  7325              STRB     r5,[r4,#0xc]          ;348
00007e  e9c40800          STRD     r0,r8,[r4,#0]         ;348
000082  f89b0000          LDRB     r0,[r11,#0]           ;349
000086  e7e2              B        |L5.78|
                  |L5.136|
000088  2201              MOVS     r2,#1                 ;337
00008a  9200              STR      r2,[sp,#0]            ;337
00008c  e005              B        |L5.154|
                  |L5.142|
00008e  f10b0b01          ADD      r11,r11,#1            ;351
000092  1e52              SUBS     r2,r2,#1              ;351
000094  d1ee              BNE      |L5.116|
                  |L5.150|
000096  f1a90901          SUB      r9,r9,#1              ;353
                  |L5.154|
00009a  f1b90f00          CMP      r9,#0                 ;354
00009e  d1be              BNE      |L5.30|
                  |L5.160|
0000a0  f06f0005          MVN      r0,#5                 ;356
0000a4  e7d3              B        |L5.78|
;;;358    
                          ENDP


                          AREA ||i.jd_decomp||, CODE, READONLY, ALIGN=1

                  jd_decomp PROC
;;;930    
;;;931    JRESULT jd_decomp (
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;932    	JDEC* jd,								/* Initialized decompression object */
;;;933    	UINT (*outfunc)(JDEC*, void*, JRECT*),	/* RGB output function */
;;;934    	BYTE scale								/* Output de-scaling factor (0 to 3) */
;;;935    )
;;;936    {
000004  b084              SUB      sp,sp,#0x10
000006  4604              MOV      r4,r0
;;;937    	UINT x, y, mx, my;
;;;938    	WORD rst, rsc;
;;;939    	JRESULT rc;
;;;940    
;;;941    
;;;942    	if (scale > (JD_USE_SCALE ? 3 : 0)) return JDR_PAR;
000008  2a03              CMP      r2,#3
00000a  d903              BLS      |L6.20|
00000c  2005              MOVS     r0,#5
                  |L6.14|
;;;943    	jd->scale = scale;
;;;944    
;;;945    	mx = jd->msx * 8; my = jd->msy * 8;			/* Size of the MCU (pixel) */
;;;946    
;;;947    	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;	/* Initialize DC values */
;;;948    	rst = rsc = 0;
;;;949    
;;;950    	rc = JDR_OK;
;;;951    	for (y = 0; y < jd->height; y += my) {		/* Vertical loop of MCUs */
;;;952    		for (x = 0; x < jd->width; x += mx) {	/* Horizontal loop of MCUs */
;;;953    			if (jd->nrst && rst++ == jd->nrst) {	/* Process restart interval if enabled */
;;;954    				rc = restart(jd, rsc++);
;;;955    				if (rc != JDR_OK) return rc;
;;;956    				rst = 1;
;;;957    			}
;;;958    			rc = mcu_load(jd);					/* Load an MCU (decompress huffman coded stream and apply IDCT) */
;;;959    			if (rc != JDR_OK) return rc;
;;;960    			rc = mcu_output(jd, outfunc, x, y);	/* Output the MCU (color space conversion, scaling and output) */
;;;961    			if (rc != JDR_OK) return rc;
;;;962    		}
;;;963    	}
;;;964    
;;;965    	return rc;
;;;966    }
00000e  b007              ADD      sp,sp,#0x1c
000010  e8bd8ff0          POP      {r4-r11,pc}
                  |L6.20|
000014  7362              STRB     r2,[r4,#0xd]          ;943
000016  7ba0              LDRB     r0,[r4,#0xe]          ;945
000018  f04f0b00          MOV      r11,#0                ;947
00001c  00c0              LSLS     r0,r0,#3              ;945
00001e  9002              STR      r0,[sp,#8]            ;945
000020  7be0              LDRB     r0,[r4,#0xf]          ;945
000022  465d              MOV      r5,r11                ;948
000024  00c0              LSLS     r0,r0,#3              ;945
000026  9001              STR      r0,[sp,#4]            ;947
000028  f8a4b014          STRH     r11,[r4,#0x14]        ;947
00002c  f8a4b016          STRH     r11,[r4,#0x16]        ;947
000030  f8a4b018          STRH     r11,[r4,#0x18]        ;947
000034  46aa              MOV      r10,r5                ;948
000036  4658              MOV      r0,r11                ;950
000038  4659              MOV      r1,r11                ;951
00003a  e056              B        |L6.234|
                  |L6.60|
00003c  2100              MOVS     r1,#0                 ;952
00003e  e04d              B        |L6.220|
                  |L6.64|
000040  8b60              LDRH     r0,[r4,#0x1a]         ;953
000042  b3b0              CBZ      r0,|L6.178|
000044  4629              MOV      r1,r5                 ;953
000046  1c6d              ADDS     r5,r5,#1              ;953
000048  b2ad              UXTH     r5,r5                 ;953
00004a  4281              CMP      r1,r0                 ;953
00004c  d136              BNE      |L6.188|
00004e  4651              MOV      r1,r10                ;954
000050  1c48              ADDS     r0,r1,#1              ;954
000052  fa1ffa80          UXTH     r10,r0                ;954
000056  9100              STR      r1,[sp,#0]            ;954
000058  e9d40500          LDRD     r0,r5,[r4,#0]         ;954
00005c  2600              MOVS     r6,#0                 ;954
00005e  4637              MOV      r7,r6                 ;954
                  |L6.96|
000060  b1e0              CBZ      r0,|L6.156|
000062  1c6d              ADDS     r5,r5,#1              ;954
                  |L6.100|
000064  1e40              SUBS     r0,r0,#1              ;954
000066  7829              LDRB     r1,[r5,#0]            ;954
000068  1c7f              ADDS     r7,r7,#1              ;954
00006a  ea412106          ORR      r1,r1,r6,LSL #8       ;954
00006e  b28e              UXTH     r6,r1                 ;954
000070  2f02              CMP      r7,#2                 ;954
000072  d3f5              BCC      |L6.96|
000074  e9c40500          STRD     r0,r5,[r4,#0]         ;954
000078  f0260127          BIC      r1,r6,#0x27           ;954
00007c  f5a1427f          SUB      r2,r1,#0xff00         ;954
000080  4658              MOV      r0,r11                ;954
000082  f884b00c          STRB     r11,[r4,#0xc]         ;954
000086  3ad0              SUBS     r2,r2,#0xd0           ;954
000088  d106              BNE      |L6.152|
00008a  9900              LDR      r1,[sp,#0]            ;954
00008c  f0060207          AND      r2,r6,#7              ;954
000090  f0010107          AND      r1,r1,#7              ;954
000094  428a              CMP      r2,r1                 ;954
000096  d00d              BEQ      |L6.180|
                  |L6.152|
000098  2006              MOVS     r0,#6                 ;954
00009a  e7b8              B        |L6.14|
                  |L6.156|
00009c  68a5              LDR      r5,[r4,#8]
00009e  6f63              LDR      r3,[r4,#0x74]
0000a0  4620              MOV      r0,r4
0000a2  f44f7200          MOV      r2,#0x200
0000a6  4629              MOV      r1,r5
0000a8  4798              BLX      r3
0000aa  2800              CMP      r0,#0
0000ac  d1da              BNE      |L6.100|
0000ae  2002              MOVS     r0,#2
0000b0  e7ad              B        |L6.14|
                  |L6.178|
0000b2  e003              B        |L6.188|
                  |L6.180|
0000b4  82a0              STRH     r0,[r4,#0x14]
0000b6  82e0              STRH     r0,[r4,#0x16]
0000b8  8320              STRH     r0,[r4,#0x18]
0000ba  2501              MOVS     r5,#1                 ;956
                  |L6.188|
0000bc  4620              MOV      r0,r4                 ;958
0000be  f7fffffe          BL       mcu_load
0000c2  2800              CMP      r0,#0                 ;959
0000c4  d1a3              BNE      |L6.14|
0000c6  464b              MOV      r3,r9                 ;960
0000c8  4642              MOV      r2,r8                 ;960
0000ca  4620              MOV      r0,r4                 ;960
0000cc  9905              LDR      r1,[sp,#0x14]         ;960
0000ce  f7fffffe          BL       mcu_output
0000d2  2800              CMP      r0,#0                 ;961
0000d4  d19b              BNE      |L6.14|
0000d6  9a02              LDR      r2,[sp,#8]            ;952
0000d8  eb080102          ADD      r1,r8,r2              ;952
                  |L6.220|
0000dc  69e2              LDR      r2,[r4,#0x1c]         ;952
0000de  4688              MOV      r8,r1                 ;952
0000e0  4542              CMP      r2,r8                 ;952
0000e2  d8ad              BHI      |L6.64|
0000e4  9a01              LDR      r2,[sp,#4]            ;951
0000e6  eb090102          ADD      r1,r9,r2              ;951
                  |L6.234|
0000ea  6a22              LDR      r2,[r4,#0x20]         ;951
0000ec  4689              MOV      r9,r1                 ;951
0000ee  454a              CMP      r2,r9                 ;951
0000f0  d8a4              BHI      |L6.60|
0000f2  e78c              B        |L6.14|
;;;967    
                          ENDP


                          AREA ||i.jd_prepare||, CODE, READONLY, ALIGN=2

                  jd_prepare PROC
;;;759    
;;;760    JRESULT jd_prepare (
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;761    	JDEC* jd,			/* Blank decompressor object */
;;;762    	UINT (*infunc)(JDEC*, BYTE*, UINT),	/* JPEG strem input function */
;;;763    	void* pool,			/* Working buffer for the decompression session */
;;;764    	UINT sz_pool,		/* Size of working buffer */
;;;765    	void* dev			/* I/O device identifier for the session */
;;;766    )
;;;767    {
000004  4604              MOV      r4,r0
000006  980a              LDR      r0,[sp,#0x28]
000008  b382              CBZ      r2,|L7.108|
00000a  e9c4101d          STRD     r1,r0,[r4,#0x74]
;;;768    	BYTE *seg, b;
;;;769    	WORD marker;
;;;770    	DWORD ofs;
;;;771    	UINT n, i, j, len;
;;;772    	JRESULT rc;
;;;773    
;;;774    
;;;775    	if (!pool) return JDR_PAR;
;;;776    
;;;777    	jd->pool = pool;		/* Work memroy */
;;;778    	jd->sz_pool = sz_pool;	/* Size of given work memory */
;;;779    	jd->infunc = infunc;	/* Stream input function */
;;;780    	jd->device = dev;		/* I/O device identifier */
;;;781    	jd->nrst = 0;			/* No restart interval (default) */
00000e  2000              MOVS     r0,#0
000010  e9c4231b          STRD     r2,r3,[r4,#0x6c]
000014  8360              STRH     r0,[r4,#0x1a]
;;;782    
;;;783    	for (i = 0; i < 2; i++) {	/* Nulls pointers */
000016  4602              MOV      r2,r0
                  |L7.24|
;;;784    		for (j = 0; j < 2; j++) {
000018  2100              MOVS     r1,#0
;;;785    			jd->huffbits[i][j] = 0;
00001a  eb0405c2          ADD      r5,r4,r2,LSL #3
00001e  bf00              NOP      
                  |L7.32|
000020  eb050381          ADD      r3,r5,r1,LSL #2
;;;786    			jd->huffcode[i][j] = 0;
;;;787    			jd->huffdata[i][j] = 0;
000024  1c49              ADDS     r1,r1,#1
000026  6258              STR      r0,[r3,#0x24]         ;786
000028  6358              STR      r0,[r3,#0x34]
00002a  6458              STR      r0,[r3,#0x44]         ;784
00002c  2902              CMP      r1,#2                 ;784
00002e  d3f7              BCC      |L7.32|
000030  1c52              ADDS     r2,r2,#1              ;784
000032  2a02              CMP      r2,#2                 ;783
000034  d3f0              BCC      |L7.24|
;;;788    		}
;;;789    	}
;;;790    	for (i = 0; i < 4; i++) jd->qttbl[i] = 0;
000036  2100              MOVS     r1,#0
000038  ea4f0900          MOV.W    r9,r0
                  |L7.60|
00003c  eb040281          ADD      r2,r4,r1,LSL #2
000040  1c49              ADDS     r1,r1,#1
000042  f8c29054          STR      r9,[r2,#0x54]
000046  2904              CMP      r1,#4
000048  d3f8              BCC      |L7.60|
;;;791    
;;;792    	jd->inbuf = seg = alloc_pool(jd, JD_SZBUF);		/* Allocate stream input buffer */
00004a  f44f7100          MOV      r1,#0x200
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       alloc_pool
000054  4606              MOV      r6,r0
;;;793    	if (!seg) return JDR_MEM1;
000056  60a0              STR      r0,[r4,#8]
000058  0030              MOVS     r0,r6
00005a  d071              BEQ      |L7.320|
;;;794    
;;;795    	if (jd->infunc(jd, seg, 2) != 2) return JDR_INP;/* Check SOI marker */
00005c  6f63              LDR      r3,[r4,#0x74]
00005e  2202              MOVS     r2,#2
000060  4631              MOV      r1,r6
000062  4620              MOV      r0,r4
000064  4798              BLX      r3
000066  2802              CMP      r0,#2
                  |L7.104|
000068  d16b              BNE      |L7.322|
00006a  e003              B        |L7.116|
                  |L7.108|
00006c  e7ff              B        |L7.110|
                  |L7.110|
00006e  2005              MOVS     r0,#5                 ;775
                  |L7.112|
;;;796    	if (LDB_WORD(seg) != 0xFFD8) return JDR_FMT1;	/* Err: SOI is not detected */
;;;797    	ofs = 2;
;;;798    
;;;799    	for (;;) {
;;;800    		/* Get a JPEG marker */
;;;801    		if (jd->infunc(jd, seg, 4) != 4) return JDR_INP;
;;;802    		marker = LDB_WORD(seg);		/* Marker */
;;;803    		len = LDB_WORD(seg + 2);	/* Length field */
;;;804    		if (len <= 2 || (marker >> 8) != 0xFF) return JDR_FMT1;
;;;805    		len -= 2;		/* Content size excluding length field */
;;;806    		ofs += 4 + len;	/* Number of bytes loaded */
;;;807    
;;;808    		switch (marker & 0xFF) {
;;;809    		case 0xC0:	/* SOF0 (baseline JPEG) */
;;;810    			/* Load segment data */
;;;811    			if (len > JD_SZBUF) return JDR_MEM2;
;;;812    			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
;;;813    
;;;814    			jd->width = LDB_WORD(seg+3);		/* Image width in unit of pixel */
;;;815    			jd->height = LDB_WORD(seg+1);		/* Image height in unit of pixel */
;;;816    			if (seg[5] != 3) return JDR_FMT3;	/* Err: Supports only Y/Cb/Cr format */
;;;817    
;;;818    			/* Check three image components */
;;;819    			for (i = 0; i < 3; i++) {	
;;;820    				b = seg[7 + 3 * i];							/* Get sampling factor */
;;;821    				if (!i) {	/* Y component */
;;;822    					if (b != 0x11 && b != 0x22 && b != 0x21)/* Check sampling factor */
;;;823    						return JDR_FMT3;					/* Err: Supports only 4:4:4, 4:2:0 or 4:2:2 */
;;;824    					jd->msx = b >> 4; jd->msy = b & 15;		/* Size of MCU [blocks] */
;;;825    				} else {	/* Cb/Cr component */
;;;826    					if (b != 0x11) return JDR_FMT3;			/* Err: Sampling factor of Cr/Cb must be 1 */
;;;827    				}
;;;828    				b = seg[8 + 3 * i];							/* Get dequantizer table ID for this component */
;;;829    				if (b > 3) return JDR_FMT3;					/* Err: Invalid ID */
;;;830    				jd->qtid[i] = b;
;;;831    			}
;;;832    			break;
;;;833    
;;;834    		case 0xDD:	/* DRI */
;;;835    			/* Load segment data */
;;;836    			if (len > JD_SZBUF) return JDR_MEM2;
;;;837    			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
;;;838    
;;;839    			/* Get restart interval (MCUs) */
;;;840    			jd->nrst = LDB_WORD(seg);
;;;841    			break;
;;;842    
;;;843    		case 0xC4:	/* DHT */
;;;844    			/* Load segment data */
;;;845    			if (len > JD_SZBUF) return JDR_MEM2;
;;;846    			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
;;;847    
;;;848    			/* Create huffman tables */
;;;849    			rc = (JRESULT)create_huffman_tbl(jd, seg, len);
;;;850    			if (rc) return rc;
;;;851    			break;
;;;852    
;;;853    		case 0xDB:	/* DQT */
;;;854    			/* Load segment data */
;;;855    			if (len > JD_SZBUF) return JDR_MEM2;
;;;856    			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
;;;857    
;;;858    			/* Create de-quantizer tables */
;;;859    			rc = (JRESULT)create_qt_tbl(jd, seg, len);
;;;860    			if (rc) return rc;
;;;861    			break;
;;;862    
;;;863    		case 0xDA:	/* SOS */
;;;864    			/* Load segment data */
;;;865    			if (len > JD_SZBUF) return JDR_MEM2;
;;;866    			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
;;;867    
;;;868    			if (!jd->width || !jd->height) return JDR_FMT1;	/* Err: Invalid image size */
;;;869    
;;;870    			if (seg[0] != 3) return JDR_FMT3;				/* Err: Supports only three color components format */
;;;871    
;;;872    			/* Check if all tables corresponding to each components have been loaded */
;;;873    			for (i = 0; i < 3; i++) {
;;;874    				b = seg[2 + 2 * i];	/* Get huffman table ID */
;;;875    				if (b != 0x00 && b != 0x11)	return JDR_FMT3;	/* Err: Different table number for DC/AC element */
;;;876    				b = i ? 1 : 0;
;;;877    				if (!jd->huffbits[b][0] || !jd->huffbits[b][1])	/* Check huffman table for this component */
;;;878    					return JDR_FMT1;							/* Err: Huffman table not loaded */
;;;879    				if (!jd->qttbl[jd->qtid[i]]) return JDR_FMT1;	/* Err: Dequantizer table not loaded */
;;;880    			}
;;;881    
;;;882    			/* Allocate working buffer for MCU and RGB */
;;;883    			n = jd->msy * jd->msx;						/* Number of Y blocks in the MCU */
;;;884    			if (!n) return JDR_FMT1;					/* Err: SOF0 has not been loaded */
;;;885    			len = n * 64 * 2 + 64;						/* Allocate buffer for IDCT and RGB output */
;;;886    			if (len < 256) len = 256;					/* but at least 256 byte is required for IDCT */
;;;887    			jd->workbuf = alloc_pool(jd, len);			/* and it may occupy a part of following MCU working buffer for RGB output */
;;;888    			if (!jd->workbuf) return JDR_MEM1;			/* Err: not enough memory */
;;;889    			jd->mcubuf = alloc_pool(jd, (n + 2) * 64);	/* Allocate MCU working buffer */
;;;890    			if (!jd->mcubuf) return JDR_MEM1;			/* Err: not enough memory */
;;;891    
;;;892    			/* Pre-load the JPEG data to extract it from the bit stream */
;;;893    			jd->dptr = seg; jd->dctr = 0; jd->dmsk = 0;	/* Prepare to read bit stream */
;;;894    			if (ofs %= JD_SZBUF) {						/* Align read offset to JD_SZBUF */
;;;895    				jd->dctr = jd->infunc(jd, seg + ofs, JD_SZBUF - (UINT)ofs);
;;;896    				jd->dptr = seg + ofs - 1;
;;;897    			}
;;;898    
;;;899    			return JDR_OK;		/* Initialization succeeded. Ready to decompress the JPEG image. */
;;;900    
;;;901    		case 0xC1:	/* SOF1 */
;;;902    		case 0xC2:	/* SOF2 */
;;;903    		case 0xC3:	/* SOF3 */
;;;904    		case 0xC5:	/* SOF5 */
;;;905    		case 0xC6:	/* SOF6 */
;;;906    		case 0xC7:	/* SOF7 */
;;;907    		case 0xC9:	/* SOF9 */
;;;908    		case 0xCA:	/* SOF10 */
;;;909    		case 0xCB:	/* SOF11 */
;;;910    		case 0xCD:	/* SOF13 */
;;;911    		case 0xCE:	/* SOF14 */
;;;912    		case 0xCF:	/* SOF15 */
;;;913    		case 0xD9:	/* EOI */
;;;914    			return JDR_FMT3;	/* Unsuppoted JPEG standard (may be progressive JPEG) */
;;;915    
;;;916    		default:	/* Unknown segment (comment, exif or etc..) */
;;;917    			/* Skip segment data */
;;;918    			if (jd->infunc(jd, 0, len) != len)	/* Null pointer specifies to skip bytes of stream */
;;;919    				return JDR_INP;
;;;920    		}
;;;921    	}
;;;922    }
000070  e8bd9ff0          POP      {r4-r12,pc}
                  |L7.116|
000074  8830              LDRH     r0,[r6,#0]            ;796
000076  ba40              REV16    r0,r0                 ;796
000078  f5a0417f          SUB      r1,r0,#0xff00         ;796
00007c  39d8              SUBS     r1,r1,#0xd8           ;796
                  |L7.126|
00007e  d16f              BNE      |L7.352|
000080  f04f0a02          MOV      r10,#2                ;797
                  |L7.132|
000084  6f63              LDR      r3,[r4,#0x74]         ;801
000086  2204              MOVS     r2,#4                 ;801
000088  4631              MOV      r1,r6                 ;801
00008a  4620              MOV      r0,r4                 ;801
00008c  4798              BLX      r3                    ;801
00008e  2804              CMP      r0,#4                 ;801
000090  d1ea              BNE      |L7.104|
000092  8871              LDRH     r1,[r6,#2]            ;803
000094  8830              LDRH     r0,[r6,#0]            ;802
000096  ba4d              REV16    r5,r1                 ;803
000098  ba40              REV16    r0,r0                 ;802
00009a  2d02              CMP      r5,#2                 ;804
00009c  d960              BLS      |L7.352|
00009e  21ff              MOVS     r1,#0xff              ;804
0000a0  ebb12f10          CMP      r1,r0,LSR #8          ;804
0000a4  d1eb              BNE      |L7.126|
0000a6  1ead              SUBS     r5,r5,#2              ;804
0000a8  b2c0              UXTB     r0,r0                 ;808
0000aa  eb0a0105          ADD      r1,r10,r5             ;806
0000ae  38c0              SUBS     r0,r0,#0xc0           ;808
0000b0  f1010a04          ADD      r10,r1,#4             ;806
0000b4  281e              CMP      r0,#0x1e              ;808
0000b6  d271              BCS      |L7.412|
0000b8  e8dff000          TBB      [pc,r0]               ;808
0000bc  0fbebebe          DCB      0x0f,0xbe,0xbe,0xbe
0000c0  53bebebe          DCB      0x53,0xbe,0xbe,0xbe
0000c4  70bebebe          DCB      0x70,0xbe,0xbe,0xbe
0000c8  70bebebe          DCB      0x70,0xbe,0xbe,0xbe
0000cc  70707070          DCB      0x70,0x70,0x70,0x70
0000d0  70707070          DCB      0x70,0x70,0x70,0x70
0000d4  70bea464          DCB      0x70,0xbe,0xa4,0x64
0000d8  7044              DCB      0x70,0x44
0000da  f5b57f00          CMP      r5,#0x200             ;811
0000de  d87c              BHI      |L7.474|
0000e0  6f63              LDR      r3,[r4,#0x74]         ;812
0000e2  462a              MOV      r2,r5                 ;812
0000e4  4631              MOV      r1,r6                 ;812
0000e6  4620              MOV      r0,r4                 ;812
0000e8  4798              BLX      r3                    ;812
0000ea  42a8              CMP      r0,r5                 ;812
0000ec  d1bc              BNE      |L7.104|
0000ee  f8b60003          LDRH     r0,[r6,#3]            ;814
0000f2  ba40              REV16    r0,r0                 ;814
0000f4  61e0              STR      r0,[r4,#0x1c]         ;815
0000f6  f8b60001          LDRH     r0,[r6,#1]            ;815
0000fa  ba40              REV16    r0,r0                 ;815
0000fc  6220              STR      r0,[r4,#0x20]         ;816
0000fe  7970              LDRB     r0,[r6,#5]            ;816
000100  2803              CMP      r0,#3                 ;816
000102  d16b              BNE      |L7.476|
000104  f05f0000          MOVS.W   r0,#0                 ;819
                  |L7.264|
000108  eb000140          ADD      r1,r0,r0,LSL #1       ;820
00010c  198a              ADDS     r2,r1,r6              ;820
00010e  79d1              LDRB     r1,[r2,#7]            ;820
000110  b110              CBZ      r0,|L7.280|
000112  2911              CMP      r1,#0x11              ;826
000114  d162              BNE      |L7.476|
000116  e00a              B        |L7.302|
                  |L7.280|
000118  2911              CMP      r1,#0x11              ;822
00011a  d003              BEQ      |L7.292|
00011c  2922              CMP      r1,#0x22              ;822
00011e  d001              BEQ      |L7.292|
000120  2921              CMP      r1,#0x21              ;822
000122  d15b              BNE      |L7.476|
                  |L7.292|
000124  090b              LSRS     r3,r1,#4              ;824
000126  73a3              STRB     r3,[r4,#0xe]          ;824
000128  f001010f          AND      r1,r1,#0xf            ;824
00012c  73e1              STRB     r1,[r4,#0xf]          ;824
                  |L7.302|
00012e  7a11              LDRB     r1,[r2,#8]            ;828
000130  2903              CMP      r1,#3                 ;829
000132  d853              BHI      |L7.476|
000134  1822              ADDS     r2,r4,r0              ;830
000136  1c40              ADDS     r0,r0,#1              ;830
000138  7411              STRB     r1,[r2,#0x10]         ;830
00013a  2803              CMP      r0,#3                 ;819
00013c  d3e4              BCC      |L7.264|
                  |L7.318|
00013e  e7a1              B        |L7.132|
                  |L7.320|
000140  e0be              B        |L7.704|
                  |L7.322|
000142  e07b              B        |L7.572|
000144  f5b57f00          CMP      r5,#0x200             ;836
000148  d85f              BHI      |L7.522|
00014a  6f63              LDR      r3,[r4,#0x74]         ;837
00014c  462a              MOV      r2,r5                 ;837
00014e  4631              MOV      r1,r6                 ;837
000150  4620              MOV      r0,r4                 ;837
000152  4798              BLX      r3                    ;837
000154  42a8              CMP      r0,r5                 ;837
000156  d171              BNE      |L7.572|
000158  8830              LDRH     r0,[r6,#0]            ;840
00015a  ba40              REV16    r0,r0                 ;840
00015c  8360              STRH     r0,[r4,#0x1a]         ;840
00015e  e791              B        |L7.132|
                  |L7.352|
000160  e09b              B        |L7.666|
000162  f5b57f00          CMP      r5,#0x200             ;845
000166  d850              BHI      |L7.522|
000168  6f63              LDR      r3,[r4,#0x74]         ;846
00016a  462a              MOV      r2,r5                 ;846
00016c  4631              MOV      r1,r6                 ;846
00016e  4620              MOV      r0,r4                 ;846
000170  4798              BLX      r3                    ;846
000172  42a8              CMP      r0,r5                 ;846
000174  d162              BNE      |L7.572|
000176  462a              MOV      r2,r5                 ;849
000178  4631              MOV      r1,r6                 ;849
00017a  4620              MOV      r0,r4                 ;849
00017c  f7fffffe          BL       create_huffman_tbl
000180  b2c0              UXTB     r0,r0                 ;849
000182  e03a              B        |L7.506|
000184  f5b57f00          CMP      r5,#0x200             ;855
000188  d83f              BHI      |L7.522|
00018a  6f63              LDR      r3,[r4,#0x74]         ;856
00018c  462a              MOV      r2,r5                 ;856
00018e  4631              MOV      r1,r6                 ;856
000190  4620              MOV      r0,r4                 ;856
000192  4798              BLX      r3                    ;856
000194  42a8              CMP      r0,r5                 ;856
000196  d151              BNE      |L7.572|
000198  4637              MOV      r7,r6                 ;859
00019a  e02b              B        |L7.500|
                  |L7.412|
00019c  e092              B        |L7.708|
                  |L7.414|
00019e  2d41              CMP      r5,#0x41              ;859
0001a0  d304              BCC      |L7.428|
0001a2  f8170b01          LDRB     r0,[r7],#1            ;859
0001a6  3d41              SUBS     r5,r5,#0x41           ;859
0001a8  0901              LSRS     r1,r0,#4              ;859
0001aa  d001              BEQ      |L7.432|
                  |L7.428|
0001ac  2006              MOVS     r0,#6                 ;859
0001ae  e024              B        |L7.506|
                  |L7.432|
0001b0  f0000803          AND      r8,r0,#3              ;859
0001b4  f44f7180          MOV      r1,#0x100             ;859
0001b8  4620              MOV      r0,r4                 ;859
0001ba  f7fffffe          BL       alloc_pool
0001be  0001              MOVS     r1,r0                 ;859
0001c0  d01e              BEQ      |L7.512|
0001c2  eb040088          ADD      r0,r4,r8,LSL #2       ;859
0001c6  f8dfb110          LDR      r11,|L7.728|
0001ca  6541              STR      r1,[r0,#0x54]         ;859
0001cc  2000              MOVS     r0,#0                 ;859
0001ce  f10b0c40          ADD      r12,r11,#0x40         ;859
0001d2  bf00              NOP                            ;859
                  |L7.468|
0001d4  f81b2000          LDRB     r2,[r11,r0]           ;859
0001d8  e001              B        |L7.478|
                  |L7.474|
0001da  e016              B        |L7.522|
                  |L7.476|
0001dc  e02c              B        |L7.568|
                  |L7.478|
0001de  f8173b01          LDRB     r3,[r7],#1            ;859
0001e2  f83c8012          LDRH     r8,[r12,r2,LSL #1]    ;859
0001e6  1c40              ADDS     r0,r0,#1              ;859
0001e8  fb03f308          MUL      r3,r3,r8              ;859
0001ec  f8413022          STR      r3,[r1,r2,LSL #2]     ;859
0001f0  2840              CMP      r0,#0x40              ;859
0001f2  d3ef              BCC      |L7.468|
                  |L7.500|
0001f4  2d00              CMP      r5,#0                 ;859
0001f6  d1d2              BNE      |L7.414|
0001f8  4648              MOV      r0,r9                 ;859
                  |L7.506|
0001fa  2800              CMP      r0,#0                 ;860
                  |L7.508|
0001fc  d09f              BEQ      |L7.318|
0001fe  e737              B        |L7.112|
                  |L7.512|
000200  2003              MOVS     r0,#3
000202  e7fa              B        |L7.506|
000204  f5b57f00          CMP      r5,#0x200             ;865
000208  d901              BLS      |L7.526|
                  |L7.522|
00020a  2004              MOVS     r0,#4                 ;865
00020c  e730              B        |L7.112|
                  |L7.526|
00020e  6f63              LDR      r3,[r4,#0x74]         ;866
000210  462a              MOV      r2,r5                 ;866
000212  4631              MOV      r1,r6                 ;866
000214  4620              MOV      r0,r4                 ;866
000216  4798              BLX      r3                    ;866
000218  42a8              CMP      r0,r5                 ;866
00021a  d15a              BNE      |L7.722|
00021c  69e0              LDR      r0,[r4,#0x1c]         ;868
00021e  b3e0              CBZ      r0,|L7.666|
000220  6a20              LDR      r0,[r4,#0x20]         ;868
000222  b3d0              CBZ      r0,|L7.666|
000224  7830              LDRB     r0,[r6,#0]            ;870
000226  2803              CMP      r0,#3                 ;870
000228  d106              BNE      |L7.568|
00022a  2000              MOVS     r0,#0                 ;873
                  |L7.556|
00022c  eb060140          ADD      r1,r6,r0,LSL #1       ;874
000230  7889              LDRB     r1,[r1,#2]            ;874
000232  b121              CBZ      r1,|L7.574|
000234  2911              CMP      r1,#0x11              ;875
000236  d002              BEQ      |L7.574|
                  |L7.568|
000238  2008              MOVS     r0,#8                 ;914
00023a  e719              B        |L7.112|
                  |L7.572|
00023c  e049              B        |L7.722|
                  |L7.574|
00023e  b108              CBZ      r0,|L7.580|
000240  2101              MOVS     r1,#1                 ;876
000242  e000              B        |L7.582|
                  |L7.580|
000244  2100              MOVS     r1,#0                 ;876
                  |L7.582|
000246  eb0401c1          ADD      r1,r4,r1,LSL #3       ;877
00024a  6a4a              LDR      r2,[r1,#0x24]         ;877
00024c  b32a              CBZ      r2,|L7.666|
00024e  6a89              LDR      r1,[r1,#0x28]         ;877
000250  b319              CBZ      r1,|L7.666|
000252  1821              ADDS     r1,r4,r0              ;879
000254  7c09              LDRB     r1,[r1,#0x10]         ;879
000256  eb040181          ADD      r1,r4,r1,LSL #2       ;879
00025a  6d49              LDR      r1,[r1,#0x54]         ;879
00025c  b1e9              CBZ      r1,|L7.666|
00025e  1c40              ADDS     r0,r0,#1              ;879
000260  2803              CMP      r0,#3                 ;873
000262  d3e3              BCC      |L7.556|
000264  7be5              LDRB     r5,[r4,#0xf]          ;883
000266  7ba0              LDRB     r0,[r4,#0xe]          ;883
000268  4345              MULS     r5,r0,r5              ;883
00026a  d027              BEQ      |L7.700|
00026c  2040              MOVS     r0,#0x40              ;885
00026e  eb0011c5          ADD      r1,r0,r5,LSL #7       ;885
000272  29ff              CMP      r1,#0xff              ;886
000274  d800              BHI      |L7.632|
000276  0081              LSLS     r1,r0,#2              ;886
                  |L7.632|
000278  4620              MOV      r0,r4                 ;887
00027a  f7fffffe          BL       alloc_pool
00027e  6660              STR      r0,[r4,#0x64]         ;888
000280  b1f0              CBZ      r0,|L7.704|
000282  01a9              LSLS     r1,r5,#6              ;889
000284  4620              MOV      r0,r4                 ;889
000286  3180              ADDS     r1,r1,#0x80           ;889
000288  f7fffffe          BL       alloc_pool
00028c  66a0              STR      r0,[r4,#0x68]         ;890
00028e  b1b8              CBZ      r0,|L7.704|
000290  e9c49600          STRD     r9,r6,[r4,#0]         ;890
000294  f884900c          STRB     r9,[r4,#0xc]          ;893
000298  e000              B        |L7.668|
                  |L7.666|
00029a  e00f              B        |L7.700|
                  |L7.668|
00029c  f3ca0008          UBFX     r0,r10,#0,#9          ;894
0002a0  2800              CMP      r0,#0                 ;894
0002a2  d009              BEQ      |L7.696|
0002a4  1835              ADDS     r5,r6,r0              ;895
0002a6  f5c07200          RSB      r2,r0,#0x200          ;895
0002aa  6f63              LDR      r3,[r4,#0x74]         ;895
0002ac  4629              MOV      r1,r5                 ;895
0002ae  4620              MOV      r0,r4                 ;895
0002b0  4798              BLX      r3                    ;895
0002b2  1e6d              SUBS     r5,r5,#1              ;895
0002b4  e9c40500          STRD     r0,r5,[r4,#0]         ;895
                  |L7.696|
0002b8  2000              MOVS     r0,#0                 ;899
0002ba  e6d9              B        |L7.112|
                  |L7.700|
0002bc  2006              MOVS     r0,#6                 ;884
0002be  e6d7              B        |L7.112|
                  |L7.704|
0002c0  2003              MOVS     r0,#3                 ;890
0002c2  e6d5              B        |L7.112|
                  |L7.708|
0002c4  6f63              LDR      r3,[r4,#0x74]         ;918
0002c6  462a              MOV      r2,r5                 ;918
0002c8  2100              MOVS     r1,#0                 ;918
0002ca  4620              MOV      r0,r4                 ;918
0002cc  4798              BLX      r3                    ;918
0002ce  42a8              CMP      r0,r5                 ;918
0002d0  d094              BEQ      |L7.508|
                  |L7.722|
0002d2  2002              MOVS     r0,#2                 ;919
0002d4  e6cc              B        |L7.112|
;;;923    
                          ENDP

0002d6  0000              DCW      0x0000
                  |L7.728|
                          DCD      ||.constdata||

                          AREA ||i.mcu_load||, CODE, READONLY, ALIGN=2

                  mcu_load PROC
;;;479    static
;;;480    JRESULT mcu_load (
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;481    	JDEC* jd		/* Pointer to the decompressor object */
;;;482    )
;;;483    {
000004  4604              MOV      r4,r0
;;;484    	LONG *tmp = (LONG*)jd->workbuf;	/* Block working buffer for de-quantize and IDCT */
;;;485    	UINT blk, nby, nbc, i, z, id, cmp;
;;;486    	INT b, d, e;
;;;487    	BYTE *bp;
;;;488    	const BYTE *hb, *hd;
;;;489    	const WORD *hc;
;;;490    	const LONG *dqf;
;;;491    
;;;492    
;;;493    	nby = jd->msx * jd->msy;	/* Number of Y blocks (1, 2 or 4) */
000006  7b87              LDRB     r7,[r0,#0xe]
000008  6e46              LDR      r6,[r0,#0x64]
00000a  7bc0              LDRB     r0,[r0,#0xf]
;;;494    	nbc = 2;					/* Number of C blocks (2) */
;;;495    	bp = jd->mcubuf;			/* Pointer to the first block */
00000c  6ea1              LDR      r1,[r4,#0x68]
00000e  4347              MULS     r7,r0,r7              ;493
;;;496    
;;;497    	for (blk = 0; blk < nby + nbc; blk++) {
000010  2500              MOVS     r5,#0
000012  f1070902          ADD      r9,r7,#2
000016  9103              STR      r1,[sp,#0xc]          ;483
000018  e098              B        |L8.332|
                  |L8.26|
;;;498    		cmp = (blk < nby) ? 0 : blk - nby + 1;	/* Component number 0:Y, 1:Cb, 2:Cr */
00001a  42bd              CMP      r5,r7
00001c  d202              BCS      |L8.36|
00001e  f04f0a00          MOV      r10,#0
000022  e006              B        |L8.50|
                  |L8.36|
000024  1be8              SUBS     r0,r5,r7
000026  1c40              ADDS     r0,r0,#1
000028  ea5f0a00          MOVS     r10,r0
00002c  d001              BEQ      |L8.50|
;;;499    		id = cmp ? 1 : 0;						/* Huffman table ID of the component */
00002e  2001              MOVS     r0,#1
000030  e000              B        |L8.52|
                  |L8.50|
000032  2000              MOVS     r0,#0
                  |L8.52|
;;;500    
;;;501    		/* Extract a DC element from input stream */
;;;502    		hb = jd->huffbits[id][0];				/* Huffman table for the DC element */
000034  eb0400c0          ADD      r0,r4,r0,LSL #3
000038  4683              MOV      r11,r0
;;;503    		hc = jd->huffcode[id][0];
;;;504    		hd = jd->huffdata[id][0];
;;;505    		b = huffext(jd, hb, hc, hd);			/* Extract a huffman coded data (bit length) */
00003a  6c43              LDR      r3,[r0,#0x44]
00003c  6b42              LDR      r2,[r0,#0x34]
00003e  6a41              LDR      r1,[r0,#0x24]
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       huffext
000046  f1b00800          SUBS     r8,r0,#0
;;;506    		if (b < 0) return (JRESULT)(0 - b);				/* Err: invalid code or input */
00004a  da02              BGE      |L8.82|
00004c  f1c80000          RSB      r0,r8,#0
000050  e058              B        |L8.260|
                  |L8.82|
;;;507    		d = jd->dcv[cmp];						/* DC value of previous block */
000052  eb04004a          ADD      r0,r4,r10,LSL #1
000056  9001              STR      r0,[sp,#4]
000058  f9b00014          LDRSH    r0,[r0,#0x14]
;;;508    		if (b) {								/* If there is any difference from previous block */
00005c  9000              STR      r0,[sp,#0]
00005e  d013              BEQ      |L8.136|
;;;509    			e = bitext(jd, b);					/* Extract data bits */
000060  4641              MOV      r1,r8
000062  4620              MOV      r0,r4
000064  f7fffffe          BL       bitext
;;;510    			if (e < 0) return (JRESULT)(0 - e);			/* Err: input */
000068  2800              CMP      r0,#0
00006a  db4a              BLT      |L8.258|
;;;511    			b = 1 << (b - 1);					/* MSB position */
00006c  f1a80101          SUB      r1,r8,#1
000070  2201              MOVS     r2,#1
000072  408a              LSLS     r2,r2,r1
;;;512    			if (!(e & b)) e -= (b << 1) - 1;	/* Restore sign if needed */
000074  4210              TST      r0,r2
000076  d102              BNE      |L8.126|
000078  eba00042          SUB      r0,r0,r2,LSL #1
00007c  1c40              ADDS     r0,r0,#1
                  |L8.126|
;;;513    			d += e;								/* Get current value */
00007e  9900              LDR      r1,[sp,#0]
000080  4408              ADD      r0,r0,r1
;;;514    			jd->dcv[cmp] = (SHORT)d;			/* Save current DC value for next block */
000082  9901              LDR      r1,[sp,#4]
000084  9000              STR      r0,[sp,#0]            ;513
000086  8288              STRH     r0,[r1,#0x14]
                  |L8.136|
;;;515    		}
;;;516    		dqf = jd->qttbl[jd->qtid[cmp]];			/* De-quantizer table ID for this component */
000088  eb04000a          ADD      r0,r4,r10
00008c  7c00              LDRB     r0,[r0,#0x10]
00008e  eb040080          ADD      r0,r4,r0,LSL #2
;;;517    		tmp[0] = d * dqf[0] >> 8;				/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
000092  f8d0a054          LDR      r10,[r0,#0x54]
000096  9800              LDR      r0,[sp,#0]
000098  f8da1000          LDR      r1,[r10,#0]
00009c  4341              MULS     r1,r0,r1
00009e  1208              ASRS     r0,r1,#8
;;;518    
;;;519    		/* Extract following 63 AC elements from input stream */
;;;520    		for (i = 1; i < 64; i++) tmp[i] = 0;	/* Clear rest of elements */
0000a0  6030              STR      r0,[r6,#0]
0000a2  2001              MOVS     r0,#1
0000a4  f05f0100          MOVS.W   r1,#0
                  |L8.168|
0000a8  f8461020          STR      r1,[r6,r0,LSL #2]
0000ac  1c40              ADDS     r0,r0,#1
0000ae  2840              CMP      r0,#0x40
0000b0  d3fa              BCC      |L8.168|
;;;521    		hb = jd->huffbits[id][1];				/* Huffman table for the AC elements */
0000b2  f8db0028          LDR      r0,[r11,#0x28]
;;;522    		hc = jd->huffcode[id][1];
0000b6  9000              STR      r0,[sp,#0]
0000b8  f8db0038          LDR      r0,[r11,#0x38]
;;;523    		hd = jd->huffdata[id][1];
0000bc  9001              STR      r0,[sp,#4]
0000be  f8db0048          LDR      r0,[r11,#0x48]
;;;524    		i = 1;					/* Top of the AC elements */
0000c2  f04f0801          MOV      r8,#1
0000c6  9002              STR      r0,[sp,#8]
                  |L8.200|
;;;525    		do {
;;;526    			b = huffext(jd, hb, hc, hd);		/* Extract a huffman coded value (zero runs and bit length) */
0000c8  e89d000e          LDM      sp,{r1-r3}
0000cc  4620              MOV      r0,r4
0000ce  f7fffffe          BL       huffext
;;;527    			if (b == 0) break;					/* EOB? */
0000d2  2800              CMP      r0,#0
0000d4  d02f              BEQ      |L8.310|
;;;528    			if (b < 0) return (JRESULT)(0 - b);			/* Err: invalid code or input error */
0000d6  db14              BLT      |L8.258|
;;;529    			z = (UINT)b >> 4;					/* Number of leading zero elements */
0000d8  0901              LSRS     r1,r0,#4
;;;530    			if (z) {
0000da  d007              BEQ      |L8.236|
;;;531    				i += z;							/* Skip zero elements */
0000dc  4488              ADD      r8,r8,r1
;;;532    				if (i >= 64) return JDR_FMT1;	/* Too long zero run */
0000de  f1b80f40          CMP      r8,#0x40
0000e2  d303              BCC      |L8.236|
0000e4  2006              MOVS     r0,#6
                  |L8.230|
;;;533    			}
;;;534    			if (b &= 0x0F) {					/* Bit length */
;;;535    				d = bitext(jd, b);				/* Extract data bits */
;;;536    				if (d < 0) return (JRESULT)(0 - d);		/* Err: input device */
;;;537    				b = 1 << (b - 1);				/* MSB position */
;;;538    				if (!(d & b)) d -= (b << 1) - 1;/* Restore negative value if needed */
;;;539    				z = ZIG(i);						/* Zigzag-order to raster-order converted index */
;;;540    				tmp[z] = d * dqf[z] >> 8;		/* De-quantize, apply scale factor of Arai algorithm and descale 8 bits */
;;;541    			}
;;;542    		} while (++i < 64);		/* Next AC element */
;;;543    
;;;544    		if (JD_USE_SCALE && jd->scale == 3)
;;;545    			*bp = (*tmp / 256) + 128;	/* If scale ratio is 1/8, IDCT can be ommited and only DC element is used */
;;;546    		else
;;;547    			block_idct(tmp, bp);		/* Apply IDCT and store the block to the MCU buffer */
;;;548    
;;;549    		bp += 64;				/* Next block */
;;;550    	}
;;;551    
;;;552    	return JDR_OK;	/* All blocks have been loaded successfully */
;;;553    }
0000e6  b004              ADD      sp,sp,#0x10
0000e8  e8bd9ff0          POP      {r4-r12,pc}
                  |L8.236|
0000ec  f000000f          AND      r0,r0,#0xf            ;534
0000f0  ea5f0b00          MOVS     r11,r0                ;534
0000f4  d01a              BEQ      |L8.300|
0000f6  4601              MOV      r1,r0                 ;535
0000f8  4620              MOV      r0,r4                 ;535
0000fa  f7fffffe          BL       bitext
0000fe  2800              CMP      r0,#0                 ;536
000100  da02              BGE      |L8.264|
                  |L8.258|
000102  4240              RSBS     r0,r0,#0              ;536
                  |L8.260|
000104  b2c0              UXTB     r0,r0                 ;536
000106  e7ee              B        |L8.230|
                  |L8.264|
000108  f1ab0201          SUB      r2,r11,#1             ;537
00010c  2101              MOVS     r1,#1                 ;537
00010e  4091              LSLS     r1,r1,r2              ;537
000110  4208              TST      r0,r1                 ;538
000112  d102              BNE      |L8.282|
000114  eba00041          SUB      r0,r0,r1,LSL #1       ;538
000118  1c40              ADDS     r0,r0,#1              ;538
                  |L8.282|
00011a  4a14              LDR      r2,|L8.364|
00011c  f8121008          LDRB     r1,[r2,r8]            ;539
000120  f85a2021          LDR      r2,[r10,r1,LSL #2]    ;540
000124  4342              MULS     r2,r0,r2              ;540
000126  1210              ASRS     r0,r2,#8              ;540
000128  f8460021          STR      r0,[r6,r1,LSL #2]     ;540
                  |L8.300|
00012c  f1080801          ADD      r8,r8,#1              ;542
000130  f1b80f40          CMP      r8,#0x40              ;542
000134  d3c8              BCC      |L8.200|
                  |L8.310|
000136  7b60              LDRB     r0,[r4,#0xd]          ;544
000138  2803              CMP      r0,#3                 ;544
00013a  d00c              BEQ      |L8.342|
00013c  4630              MOV      r0,r6                 ;547
00013e  9903              LDR      r1,[sp,#0xc]          ;547
000140  f7fffffe          BL       block_idct
                  |L8.324|
000144  9803              LDR      r0,[sp,#0xc]          ;549
000146  3040              ADDS     r0,r0,#0x40           ;549
000148  1c6d              ADDS     r5,r5,#1              ;549
00014a  9003              STR      r0,[sp,#0xc]          ;549
                  |L8.332|
00014c  45a9              CMP      r9,r5                 ;497
00014e  f63faf64          BHI      |L8.26|
000152  2000              MOVS     r0,#0                 ;552
000154  e7c7              B        |L8.230|
                  |L8.342|
000156  6830              LDR      r0,[r6,#0]            ;545
000158  17c1              ASRS     r1,r0,#31             ;545
00015a  eb006011          ADD      r0,r0,r1,LSR #24      ;545
00015e  2180              MOVS     r1,#0x80              ;545
000160  eb012020          ADD      r0,r1,r0,ASR #8       ;545
000164  9903              LDR      r1,[sp,#0xc]          ;545
000166  7008              STRB     r0,[r1,#0]            ;545
000168  e7ec              B        |L8.324|
;;;554    
                          ENDP

00016a  0000              DCW      0x0000
                  |L8.364|
                          DCD      ||.constdata||

                          AREA ||i.mcu_output||, CODE, READONLY, ALIGN=2

                  mcu_output PROC
;;;562    static
;;;563    JRESULT mcu_output (
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;564    	JDEC* jd,	/* Pointer to the decompressor object */
;;;565    	UINT (*outfunc)(JDEC*, void*, JRECT*),	/* RGB output function */
;;;566    	UINT x,		/* MCU position in the image (left of the MCU) */
;;;567    	UINT y		/* MCU position in the image (top of the MCU) */
;;;568    )
;;;569    {
;;;570    	const INT CVACC = (sizeof (INT) > 2) ? 1024 : 128;
;;;571    	UINT ix, iy, mx, my, rx, ry;
;;;572    	INT yy, cb, cr;
;;;573    	BYTE *py, *pc, *rgb24;
;;;574    	JRECT rect;
;;;575    
;;;576    
;;;577    	mx = jd->msx * 8; my = jd->msy * 8;					/* MCU size (pixel) */
000004  7b81              LDRB     r1,[r0,#0xe]
000006  b093              SUB      sp,sp,#0x4c           ;569
000008  00cd              LSLS     r5,r1,#3
00000a  7bc1              LDRB     r1,[r0,#0xf]
;;;578    	rx = (x + mx <= jd->width) ? mx : jd->width - x;	/* Output rectangular size (it may be clipped at right/bottom end) */
00000c  1954              ADDS     r4,r2,r5
00000e  00ce              LSLS     r6,r1,#3              ;577
000010  69c1              LDR      r1,[r0,#0x1c]
000012  428c              CMP      r4,r1
000014  d801              BHI      |L9.26|
000016  462c              MOV      r4,r5
000018  e000              B        |L9.28|
                  |L9.26|
00001a  1a8c              SUBS     r4,r1,r2
                  |L9.28|
;;;579    	ry = (y + my <= jd->height) ? my : jd->height - y;
00001c  6a01              LDR      r1,[r0,#0x20]
00001e  199f              ADDS     r7,r3,r6
000020  428f              CMP      r7,r1
000022  d801              BHI      |L9.40|
000024  4637              MOV      r7,r6
000026  e000              B        |L9.42|
                  |L9.40|
000028  1acf              SUBS     r7,r1,r3
                  |L9.42|
;;;580    	if (JD_USE_SCALE) {
;;;581    		rx >>= jd->scale; ry >>= jd->scale;
00002a  7b41              LDRB     r1,[r0,#0xd]
00002c  40cc              LSRS     r4,r4,r1
00002e  fa27f701          LSR      r7,r7,r1
;;;582    		if (!rx || !ry) return JDR_OK;					/* Skip this MCU if all pixel is to be rounded off */
000032  9704              STR      r7,[sp,#0x10]
                  |L9.52|
000034  d07e              BEQ      |L9.308|
000036  2f00              CMP      r7,#0
000038  d0fc              BEQ      |L9.52|
;;;583    		x >>= jd->scale; y >>= jd->scale;
00003a  40ca              LSRS     r2,r2,r1
00003c  40cb              LSRS     r3,r3,r1
;;;584    	}
;;;585    	rect.left = x; rect.right = x + rx - 1;				/* Rectangular area in the frame buffer */
00003e  1911              ADDS     r1,r2,r4
000040  f8ad203c          STRH     r2,[sp,#0x3c]
000044  1e49              SUBS     r1,r1,#1
000046  f8ad103e          STRH     r1,[sp,#0x3e]
;;;586    	rect.top = y; rect.bottom = y + ry - 1;
00004a  19d9              ADDS     r1,r3,r7
00004c  f8ad3040          STRH     r3,[sp,#0x40]
000050  1e49              SUBS     r1,r1,#1
000052  f8ad1042          STRH     r1,[sp,#0x42]
;;;587    
;;;588    
;;;589    	if (!JD_USE_SCALE || jd->scale != 3) {	/* Not for 1/8 scaling */
000056  7b41              LDRB     r1,[r0,#0xd]
000058  2903              CMP      r1,#3
00005a  d06c              BEQ      |L9.310|
;;;590    
;;;591    		/* Build an RGB MCU from discrete comopnents */
;;;592    		rgb24 = (BYTE*)jd->workbuf;
;;;593    		for (iy = 0; iy < my; iy++) {
00005c  2100              MOVS     r1,#0
00005e  f8d0b064          LDR      r11,[r0,#0x64]
000062  e05f              B        |L9.292|
                  |L9.100|
;;;594    			pc = jd->mcubuf;
;;;595    			py = pc + iy * 8;
000064  6e81              LDR      r1,[r0,#0x68]
;;;596    			if (my == 16) {		/* Double block height? */
000066  2e10              CMP      r6,#0x10
000068  eb0107c9          ADD      r7,r1,r9,LSL #3       ;595
00006c  d007              BEQ      |L9.126|
;;;597    				pc += 64 * 4 + (iy >> 1) * 8;
;;;598    				if (iy >= 8) py += 64;
;;;599    			} else {			/* Single block height */
;;;600    				pc += mx * 8 + iy * 8;
00006e  eb050209          ADD      r2,r5,r9
000072  eb0102c2          ADD      r2,r1,r2,LSL #3
;;;601    			}
;;;602    			for (ix = 0; ix < mx; ix++) {
000076  bf00              NOP      
                  |L9.120|
000078  f04f0c00          MOV      r12,#0
00007c  e04e              B        |L9.284|
                  |L9.126|
00007e  ea4f0259          LSR      r2,r9,#1              ;597
000082  eb0102c2          ADD      r2,r1,r2,LSL #3       ;597
000086  f5027280          ADD      r2,r2,#0x100          ;597
00008a  f1b90f08          CMP      r9,#8                 ;598
00008e  d3f3              BCC      |L9.120|
000090  3740              ADDS     r7,r7,#0x40           ;598
000092  e7f1              B        |L9.120|
                  |L9.148|
;;;603    				cb = pc[0] - 128; 	/* Get Cb/Cr component and restore right level */
;;;604    				cr = pc[64] - 128;
000094  f8923040          LDRB     r3,[r2,#0x40]
000098  7811              LDRB     r1,[r2,#0]            ;603
00009a  3b80              SUBS     r3,r3,#0x80
00009c  f1a10e80          SUB      lr,r1,#0x80           ;603
;;;605    				if (mx == 16) {					/* Double block width? */
0000a0  2d10              CMP      r5,#0x10
0000a2  d054              BEQ      |L9.334|
0000a4  f1120201          ADDS.W   r2,r2,#1
                  |L9.168|
;;;606    					if (ix == 8) py += 64 - 8;	/* Jump to next block if double block heigt */
;;;607    					pc += ix & 1;				/* Increase chroma pointer every two pixels */
;;;608    				} else {						/* Single block width */
;;;609    					pc++;						/* Increase chroma pointer every pixel */
;;;610    				}
;;;611    				yy = *py++;			/* Get Y component */
;;;612    
;;;613    				/* Convert YCbCr to RGB */
;;;614    				*rgb24++ = /* R */ BYTECLIP(yy + ((INT)(1.402 * CVACC) * cr) / CVACC);
0000a8  f240589b          MOV      r8,#0x59b
0000ac  fb03f108          MUL      r1,r3,r8
0000b0  f817ab01          LDRB     r10,[r7],#1           ;611
0000b4  ea4f78e1          ASR      r8,r1,#31
0000b8  eb015898          ADD      r8,r1,r8,LSR #22
0000bc  eb0a21a8          ADD      r1,r10,r8,ASR #10
0000c0  f3c10809          UBFX     r8,r1,#0,#10
0000c4  4994              LDR      r1,|L9.792|
;;;615    				*rgb24++ = /* G */ BYTECLIP(yy - ((INT)(0.344 * CVACC) * cb + (INT)(0.714 * CVACC) * cr) / CVACC);
;;;616    				*rgb24++ = /* B */ BYTECLIP(yy + ((INT)(1.772 * CVACC) * cb) / CVACC);
0000c6  f10c0c01          ADD      r12,r12,#1
0000ca  f8188001          LDRB     r8,[r8,r1]            ;614
0000ce  f80b8b01          STRB     r8,[r11],#1           ;614
0000d2  f24021db          MOV      r1,#0x2db             ;615
0000d6  434b              MULS     r3,r1,r3              ;615
0000d8  eb0e084e          ADD      r8,lr,lr,LSL #1       ;615
0000dc  eb0801ce          ADD      r1,r8,lr,LSL #3       ;615
0000e0  eb031141          ADD      r1,r3,r1,LSL #5       ;615
0000e4  17cb              ASRS     r3,r1,#31             ;615
0000e6  eb015393          ADD      r3,r1,r3,LSR #22      ;615
0000ea  ebaa21a3          SUB      r1,r10,r3,ASR #10     ;615
0000ee  f3c10309          UBFX     r3,r1,#0,#10          ;615
0000f2  4989              LDR      r1,|L9.792|
0000f4  5c5b              LDRB     r3,[r3,r1]            ;615
0000f6  f88b3000          STRB     r3,[r11,#0]           ;615
0000fa  f2407316          MOV      r3,#0x716
0000fe  fb0ef103          MUL      r1,lr,r3
000102  17cb              ASRS     r3,r1,#31
000104  eb015393          ADD      r3,r1,r3,LSR #22
000108  eb0a21a3          ADD      r1,r10,r3,ASR #10
00010c  f3c10309          UBFX     r3,r1,#0,#10
000110  4981              LDR      r1,|L9.792|
000112  5c5b              LDRB     r3,[r3,r1]
000114  f88b3001          STRB     r3,[r11,#1]
000118  f10b0b02          ADD      r11,r11,#2
                  |L9.284|
00011c  45ac              CMP      r12,r5                ;602
00011e  d3b9              BCC      |L9.148|
000120  f1090101          ADD      r1,r9,#1              ;593
                  |L9.292|
000124  4689              MOV      r9,r1                 ;593
000126  42b1              CMP      r1,r6                 ;593
000128  d39c              BCC      |L9.100|
;;;617    			}
;;;618    		}
;;;619    
;;;620    		/* Descale the MCU rectangular if needed */
;;;621    		if (JD_USE_SCALE && jd->scale) {
00012a  7b41              LDRB     r1,[r0,#0xd]
00012c  2900              CMP      r1,#0
00012e  d052              BEQ      |L9.470|
;;;622    			UINT x, y, r, g, b, s, w, a;
;;;623    			BYTE *op;
;;;624    
;;;625    			/* Get averaged RGB value of each square correcponds to a pixel */
;;;626    			s = jd->scale * 2;	/* Bumber of shifts for averaging */
000130  004a              LSLS     r2,r1,#1
;;;627    			w = 1 << jd->scale;	/* Width of square */
000132  e001              B        |L9.312|
                  |L9.308|
000134  e0ea              B        |L9.780|
                  |L9.310|
000136  e04f              B        |L9.472|
                  |L9.312|
000138  9209              STR      r2,[sp,#0x24]
00013a  2201              MOVS     r2,#1
00013c  408a              LSLS     r2,r2,r1
;;;628    			a = (mx - w) * 3;	/* Bytes to skip for next line in the square */
00013e  1aa9              SUBS     r1,r5,r2
000140  eb010141          ADD      r1,r1,r1,LSL #1
;;;629    			op = (BYTE*)jd->workbuf;
000144  9106              STR      r1,[sp,#0x18]
000146  6e41              LDR      r1,[r0,#0x64]
;;;630    			for (iy = 0; iy < my; iy += w) {
000148  9111              STR      r1,[sp,#0x44]
00014a  2100              MOVS     r1,#0
00014c  e040              B        |L9.464|
                  |L9.334|
00014e  f1bc0f08          CMP      r12,#8                ;606
000152  d100              BNE      |L9.342|
000154  3738              ADDS     r7,r7,#0x38           ;606
                  |L9.342|
000156  f00c0101          AND      r1,r12,#1             ;607
00015a  440a              ADD      r2,r2,r1              ;607
00015c  e7a4              B        |L9.168|
                  |L9.350|
;;;631    				for (ix = 0; ix < mx; ix += w) {
00015e  2100              MOVS     r1,#0
000160  e031              B        |L9.454|
                  |L9.354|
;;;632    					rgb24 = (BYTE*)jd->workbuf + (iy * mx + ix) * 3;
000162  9b01              LDR      r3,[sp,#4]
000164  6e47              LDR      r7,[r0,#0x64]
000166  fb03e105          MLA      r1,r3,r5,lr
;;;633    					r = g = b = 0;
00016a  f04f0900          MOV      r9,#0
00016e  eb010141          ADD      r1,r1,r1,LSL #1       ;632
000172  4439              ADD      r1,r1,r7              ;632
000174  46cb              MOV      r11,r9
000176  46da              MOV      r10,r11
;;;634    					for (y = 0; y < w; y++) {	/* Accumulate RGB value in the square */
000178  464f              MOV      r7,r9
00017a  e010              B        |L9.414|
                  |L9.380|
;;;635    						for (x = 0; x < w; x++) {
00017c  2300              MOVS     r3,#0
00017e  e009              B        |L9.404|
                  |L9.384|
;;;636    							r += *rgb24++;
000180  f8118b01          LDRB     r8,[r1],#1
;;;637    							g += *rgb24++;
;;;638    							b += *rgb24++;
000184  1c5b              ADDS     r3,r3,#1
000186  44c2              ADD      r10,r10,r8            ;636
000188  f8118b01          LDRB     r8,[r1],#1            ;637
00018c  44c3              ADD      r11,r11,r8            ;637
00018e  f8118b01          LDRB     r8,[r1],#1
000192  44c1              ADD      r9,r9,r8
                  |L9.404|
000194  4293              CMP      r3,r2                 ;635
000196  d3f3              BCC      |L9.384|
;;;639    						}
;;;640    						rgb24 += a;
000198  9b06              LDR      r3,[sp,#0x18]
00019a  1c7f              ADDS     r7,r7,#1
00019c  4419              ADD      r1,r1,r3
                  |L9.414|
00019e  4297              CMP      r7,r2                 ;634
0001a0  d3ec              BCC      |L9.380|
;;;641    					}							/* Put the averaged RGB value as a pixel */
;;;642    					*op++ = (BYTE)(r >> s);
0001a2  9b09              LDR      r3,[sp,#0x24]
0001a4  fa2af103          LSR      r1,r10,r3
0001a8  9b11              LDR      r3,[sp,#0x44]
0001aa  7019              STRB     r1,[r3,#0]
;;;643    					*op++ = (BYTE)(g >> s);
0001ac  9f09              LDR      r7,[sp,#0x24]
0001ae  9911              LDR      r1,[sp,#0x44]
0001b0  fa2bf307          LSR      r3,r11,r7
0001b4  704b              STRB     r3,[r1,#1]
;;;644    					*op++ = (BYTE)(b >> s);
0001b6  9f09              LDR      r7,[sp,#0x24]
0001b8  fa29f307          LSR      r3,r9,r7
0001bc  708b              STRB     r3,[r1,#2]
0001be  1cc9              ADDS     r1,r1,#3
0001c0  9111              STR      r1,[sp,#0x44]         ;631
0001c2  eb0e0102          ADD      r1,lr,r2              ;631
                  |L9.454|
0001c6  468e              MOV      lr,r1                 ;631
0001c8  42a9              CMP      r1,r5                 ;631
0001ca  d3ca              BCC      |L9.354|
0001cc  9901              LDR      r1,[sp,#4]            ;630
0001ce  4411              ADD      r1,r1,r2              ;630
                  |L9.464|
0001d0  9101              STR      r1,[sp,#4]            ;630
0001d2  42b1              CMP      r1,r6                 ;630
0001d4  d3c3              BCC      |L9.350|
                  |L9.470|
0001d6  e05a              B        |L9.654|
                  |L9.472|
0001d8  e9d01219          LDRD     r1,r2,[r0,#0x64]      ;630
;;;645    				}
;;;646    			}
;;;647    		}
;;;648    
;;;649    	} else {	/* For only 1/8 scaling (left-top pixel in each block are the DC value of the block) */
;;;650    
;;;651    		/* Build a 1/8 descaled RGB MCU from discrete comopnents */
;;;652    		rgb24 = (BYTE*)jd->workbuf;
;;;653    		pc = jd->mcubuf + mx * my;
0001dc  fb052206          MLA      r2,r5,r6,r2
;;;654    		cb = pc[0] - 128;		/* Get Cb/Cr component and restore right level */
0001e0  7813              LDRB     r3,[r2,#0]
;;;655    		cr = pc[64] - 128;
0001e2  f8922040          LDRB     r2,[r2,#0x40]
0001e6  f1a30b80          SUB      r11,r3,#0x80          ;654
0001ea  f1a20e80          SUB      lr,r2,#0x80
;;;656    		for (iy = 0; iy < my; iy += 8) {
0001ee  2200              MOVS     r2,#0
0001f0  e04a              B        |L9.648|
                  |L9.498|
;;;657    			py = jd->mcubuf;
;;;658    			if (iy == 8) py += 64 * 2;
0001f2  6e82              LDR      r2,[r0,#0x68]
0001f4  f1b90f08          CMP      r9,#8
0001f8  d100              BNE      |L9.508|
0001fa  3280              ADDS     r2,r2,#0x80
                  |L9.508|
;;;659    			for (ix = 0; ix < mx; ix += 8) {
0001fc  2300              MOVS     r3,#0
0001fe  e03f              B        |L9.640|
                  |L9.512|
;;;660    				yy = *py;	/* Get Y component */
;;;661    				py += 64;
;;;662    
;;;663    				/* Convert YCbCr to RGB */
;;;664    				*rgb24++ = /* R */ BYTECLIP(yy + ((INT)(1.402 * CVACC) * cr / CVACC));
000200  f240589b          MOV      r8,#0x59b
000204  fb0efc08          MUL      r12,lr,r8
000208  f8127b40          LDRB     r7,[r2],#0x40         ;660
00020c  ea4f78ec          ASR      r8,r12,#31
000210  eb0c5c98          ADD      r12,r12,r8,LSR #22
000214  eb072cac          ADD      r12,r7,r12,ASR #10
000218  f3cc0809          UBFX     r8,r12,#0,#10
00021c  f8dfc0f8          LDR      r12,|L9.792|
;;;665    				*rgb24++ = /* G */ BYTECLIP(yy - ((INT)(0.344 * CVACC) * cb + (INT)(0.714 * CVACC) * cr) / CVACC);
;;;666    				*rgb24++ = /* B */ BYTECLIP(yy + ((INT)(1.772 * CVACC) * cb / CVACC));
000220  3308              ADDS     r3,r3,#8
000222  f818c00c          LDRB     r12,[r8,r12]          ;664
000226  f801cb01          STRB     r12,[r1],#1           ;664
00022a  468a              MOV      r10,r1                ;664
00022c  f24021db          MOV      r1,#0x2db             ;665
000230  fb0efc01          MUL      r12,lr,r1             ;665
000234  eb0b084b          ADD      r8,r11,r11,LSL #1     ;665
000238  eb0801cb          ADD      r1,r8,r11,LSL #3      ;665
00023c  eb0c1141          ADD      r1,r12,r1,LSL #5      ;665
000240  ea4f7ce1          ASR      r12,r1,#31            ;665
000244  eb01519c          ADD      r1,r1,r12,LSR #22     ;665
000248  eba721a1          SUB      r1,r7,r1,ASR #10      ;665
00024c  f3c10c09          UBFX     r12,r1,#0,#10         ;665
000250  4931              LDR      r1,|L9.792|
000252  f2407816          MOV      r8,#0x716
000256  f81cc001          LDRB     r12,[r12,r1]          ;665
00025a  f88ac000          STRB     r12,[r10,#0]          ;665
00025e  fb0bfc08          MUL      r12,r11,r8
000262  ea4f78ec          ASR      r8,r12,#31
000266  eb0c5c98          ADD      r12,r12,r8,LSR #22
00026a  eb0727ac          ADD      r7,r7,r12,ASR #10
00026e  f3c70c09          UBFX     r12,r7,#0,#10
000272  4f29              LDR      r7,|L9.792|
000274  f10a0101          ADD      r1,r10,#1             ;665
000278  f81c7007          LDRB     r7,[r12,r7]
00027c  f8017b01          STRB     r7,[r1],#1
                  |L9.640|
000280  42ab              CMP      r3,r5                 ;659
000282  d3bd              BCC      |L9.512|
000284  f1090208          ADD      r2,r9,#8              ;656
                  |L9.648|
000288  4691              MOV      r9,r2                 ;656
00028a  42b2              CMP      r2,r6                 ;656
00028c  d3b1              BCC      |L9.498|
                  |L9.654|
;;;667    			}
;;;668    		}
;;;669    	}
;;;670    
;;;671    	/* Squeeze up pixel table if a part of MCU is to be truncated */
;;;672    	mx >>= jd->scale;
00028e  7b41              LDRB     r1,[r0,#0xd]
000290  40cd              LSRS     r5,r5,r1
;;;673    	if (rx < mx) {
000292  42ac              CMP      r4,r5
000294  d21d              BCS      |L9.722|
;;;674    		BYTE *s, *d;
;;;675    		UINT x, y;
;;;676    
;;;677    		s = d = (BYTE*)jd->workbuf;
000296  6e41              LDR      r1,[r0,#0x64]
;;;678    		for (y = 0; y < ry; y++) {
000298  2600              MOVS     r6,#0
00029a  460a              MOV      r2,r1                 ;677
00029c  e016              B        |L9.716|
                  |L9.670|
;;;679    			for (x = 0; x < rx; x++) {	/* Copy effective pixels */
00029e  2300              MOVS     r3,#0
0002a0  e00d              B        |L9.702|
;;;680    				*d++ = *s++;
0002a2  bf00              NOP      
                  |L9.676|
0002a4  f8117b01          LDRB     r7,[r1],#1
0002a8  f8027b01          STRB     r7,[r2],#1
;;;681    				*d++ = *s++;
0002ac  f8117b01          LDRB     r7,[r1],#1
0002b0  f8027b01          STRB     r7,[r2],#1
;;;682    				*d++ = *s++;
0002b4  f8117b01          LDRB     r7,[r1],#1
0002b8  f8027b01          STRB     r7,[r2],#1
0002bc  1c5b              ADDS     r3,r3,#1
                  |L9.702|
0002be  42a3              CMP      r3,r4                 ;679
0002c0  d3f0              BCC      |L9.676|
;;;683    			}
;;;684    			s += (mx - rx) * 3;	/* Skip truncated pixels */
0002c2  1b2b              SUBS     r3,r5,r4
0002c4  eb030343          ADD      r3,r3,r3,LSL #1
0002c8  4419              ADD      r1,r1,r3
0002ca  1c76              ADDS     r6,r6,#1
                  |L9.716|
0002cc  9b04              LDR      r3,[sp,#0x10]         ;678
0002ce  429e              CMP      r6,r3                 ;678
0002d0  d3e5              BCC      |L9.670|
                  |L9.722|
;;;685    		}
;;;686    	}
;;;687    
;;;688    	/* Convert RGB888 to RGB565 if needed */
;;;689    	if (JD_FORMAT == 1) {
;;;690    		BYTE *s = (BYTE*)jd->workbuf;
;;;691    		WORD w, *d = (WORD*)s;
0002d2  6e41              LDR      r1,[r0,#0x64]
;;;692    		UINT n = rx * ry;
0002d4  9b04              LDR      r3,[sp,#0x10]
0002d6  460a              MOV      r2,r1                 ;691
0002d8  435c              MULS     r4,r3,r4
;;;693    
;;;694    		do {
;;;695    			w = (*s++ & 0xF8) << 8;		/* RRRRR----------- */
0002da  bf00              NOP      
                  |L9.732|
0002dc  f8113b01          LDRB     r3,[r1],#1
;;;696    			w |= (*s++ & 0xFC) << 3;	/* -----GGGGGG----- */
0002e0  f8115b01          LDRB     r5,[r1],#1
0002e4  f00303f8          AND      r3,r3,#0xf8           ;695
0002e8  021b              LSLS     r3,r3,#8              ;695
0002ea  f00505fc          AND      r5,r5,#0xfc
0002ee  ea4303c5          ORR      r3,r3,r5,LSL #3
;;;697    			w |= *s++ >> 3;				/* -----------BBBBB */
0002f2  f8115b01          LDRB     r5,[r1],#1
;;;698    			*d++ = w;
0002f6  1e64              SUBS     r4,r4,#1
0002f8  ea4303d5          ORR      r3,r3,r5,LSR #3       ;697
0002fc  f8223b02          STRH     r3,[r2],#2
;;;699    		} while (--n);
000300  d1ec              BNE      |L9.732|
;;;700    	}
;;;701    
;;;702    	/* Output the RGB rectangular */
;;;703    	return outfunc(jd, jd->workbuf, &rect) ? JDR_OK : JDR_INTR; 
000302  9b14              LDR      r3,[sp,#0x50]
000304  aa0f              ADD      r2,sp,#0x3c
000306  6e41              LDR      r1,[r0,#0x64]
000308  4798              BLX      r3
00030a  b118              CBZ      r0,|L9.788|
                  |L9.780|
00030c  2000              MOVS     r0,#0
                  |L9.782|
;;;704    }
00030e  b017              ADD      sp,sp,#0x5c
000310  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.788|
000314  2001              MOVS     r0,#1                 ;703
000316  e7fa              B        |L9.782|
;;;705    
                          ENDP

                  |L9.792|
                          DCD      ||.constdata||+0xc0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  Zig
000000  00010810          DCB      0x00,0x01,0x08,0x10
000004  0902030a          DCB      0x09,0x02,0x03,0x0a
000008  11182019          DCB      0x11,0x18,0x20,0x19
00000c  120b0405          DCB      0x12,0x0b,0x04,0x05
000010  0c131a21          DCB      0x0c,0x13,0x1a,0x21
000014  28302922          DCB      0x28,0x30,0x29,0x22
000018  1b140d06          DCB      0x1b,0x14,0x0d,0x06
00001c  070e151c          DCB      0x07,0x0e,0x15,0x1c
000020  232a3138          DCB      0x23,0x2a,0x31,0x38
000024  39322b24          DCB      0x39,0x32,0x2b,0x24
000028  1d160f17          DCB      0x1d,0x16,0x0f,0x17
00002c  1e252c33          DCB      0x1e,0x25,0x2c,0x33
000030  3a3b342d          DCB      0x3a,0x3b,0x34,0x2d
000034  261f272e          DCB      0x26,0x1f,0x27,0x2e
000038  353c3d36          DCB      0x35,0x3c,0x3d,0x36
00003c  2f373e3f          DCB      0x2f,0x37,0x3e,0x3f
                  Ipsf
000040  20002c62          DCW      0x2000,0x2c62
000044  29cf25a0          DCW      0x29cf,0x25a0
000048  20001924          DCW      0x2000,0x1924
00004c  115108d4          DCW      0x1151,0x08d4
000050  2c623d90          DCW      0x2c62,0x3d90
000054  39fe3431          DCW      0x39fe,0x3431
000058  2c6222df          DCW      0x2c62,0x22df
00005c  18050c3e          DCW      0x1805,0x0c3e
000060  29cf39fe          DCW      0x29cf,0x39fe
000064  36a03129          DCW      0x36a0,0x3129
000068  29cf20d9          DCW      0x29cf,0x20d9
00006c  16a00b89          DCW      0x16a0,0x0b89
000070  25a03431          DCW      0x25a0,0x3431
000074  31292c3e          DCW      0x3129,0x2c3e
000078  25a01d90          DCW      0x25a0,0x1d90
00007c  145d0a61          DCW      0x145d,0x0a61
000080  20002c62          DCW      0x2000,0x2c62
000084  29cf25a0          DCW      0x29cf,0x25a0
000088  20001924          DCW      0x2000,0x1924
00008c  115108d4          DCW      0x1151,0x08d4
000090  192422df          DCW      0x1924,0x22df
000094  20d91d90          DCW      0x20d9,0x1d90
000098  192413c1          DCW      0x1924,0x13c1
00009c  0d9b06ef          DCW      0x0d9b,0x06ef
0000a0  11511805          DCW      0x1151,0x1805
0000a4  16a0145d          DCW      0x16a0,0x145d
0000a8  11510d9b          DCW      0x1151,0x0d9b
0000ac  095f04c7          DCW      0x095f,0x04c7
0000b0  08d40c3e          DCW      0x08d4,0x0c3e
0000b4  0b890a61          DCW      0x0b89,0x0a61
0000b8  08d406ef          DCW      0x08d4,0x06ef
0000bc  04c7026f          DCW      0x04c7,0x026f
                  Clip8
0000c0  00010203          DCB      0x00,0x01,0x02,0x03
0000c4  04050607          DCB      0x04,0x05,0x06,0x07
0000c8  08090a0b          DCB      0x08,0x09,0x0a,0x0b
0000cc  0c0d0e0f          DCB      0x0c,0x0d,0x0e,0x0f
0000d0  10111213          DCB      0x10,0x11,0x12,0x13
0000d4  14151617          DCB      0x14,0x15,0x16,0x17
0000d8  18191a1b          DCB      0x18,0x19,0x1a,0x1b
0000dc  1c1d1e1f          DCB      0x1c,0x1d,0x1e,0x1f
0000e0  20212223          DCB      0x20,0x21,0x22,0x23
0000e4  24252627          DCB      0x24,0x25,0x26,0x27
0000e8  28292a2b          DCB      0x28,0x29,0x2a,0x2b
0000ec  2c2d2e2f          DCB      0x2c,0x2d,0x2e,0x2f
0000f0  30313233          DCB      0x30,0x31,0x32,0x33
0000f4  34353637          DCB      0x34,0x35,0x36,0x37
0000f8  38393a3b          DCB      0x38,0x39,0x3a,0x3b
0000fc  3c3d3e3f          DCB      0x3c,0x3d,0x3e,0x3f
000100  40414243          DCB      0x40,0x41,0x42,0x43
000104  44454647          DCB      0x44,0x45,0x46,0x47
000108  48494a4b          DCB      0x48,0x49,0x4a,0x4b
00010c  4c4d4e4f          DCB      0x4c,0x4d,0x4e,0x4f
000110  50515253          DCB      0x50,0x51,0x52,0x53
000114  54555657          DCB      0x54,0x55,0x56,0x57
000118  58595a5b          DCB      0x58,0x59,0x5a,0x5b
00011c  5c5d5e5f          DCB      0x5c,0x5d,0x5e,0x5f
000120  60616263          DCB      0x60,0x61,0x62,0x63
000124  64656667          DCB      0x64,0x65,0x66,0x67
000128  68696a6b          DCB      0x68,0x69,0x6a,0x6b
00012c  6c6d6e6f          DCB      0x6c,0x6d,0x6e,0x6f
000130  70717273          DCB      0x70,0x71,0x72,0x73
000134  74757677          DCB      0x74,0x75,0x76,0x77
000138  78797a7b          DCB      0x78,0x79,0x7a,0x7b
00013c  7c7d7e7f          DCB      0x7c,0x7d,0x7e,0x7f
000140  80818283          DCB      0x80,0x81,0x82,0x83
000144  84858687          DCB      0x84,0x85,0x86,0x87
000148  88898a8b          DCB      0x88,0x89,0x8a,0x8b
00014c  8c8d8e8f          DCB      0x8c,0x8d,0x8e,0x8f
000150  90919293          DCB      0x90,0x91,0x92,0x93
000154  94959697          DCB      0x94,0x95,0x96,0x97
000158  98999a9b          DCB      0x98,0x99,0x9a,0x9b
00015c  9c9d9e9f          DCB      0x9c,0x9d,0x9e,0x9f
000160  a0a1a2a3          DCB      0xa0,0xa1,0xa2,0xa3
000164  a4a5a6a7          DCB      0xa4,0xa5,0xa6,0xa7
000168  a8a9aaab          DCB      0xa8,0xa9,0xaa,0xab
00016c  acadaeaf          DCB      0xac,0xad,0xae,0xaf
000170  b0b1b2b3          DCB      0xb0,0xb1,0xb2,0xb3
000174  b4b5b6b7          DCB      0xb4,0xb5,0xb6,0xb7
000178  b8b9babb          DCB      0xb8,0xb9,0xba,0xbb
00017c  bcbdbebf          DCB      0xbc,0xbd,0xbe,0xbf
000180  c0c1c2c3          DCB      0xc0,0xc1,0xc2,0xc3
000184  c4c5c6c7          DCB      0xc4,0xc5,0xc6,0xc7
000188  c8c9cacb          DCB      0xc8,0xc9,0xca,0xcb
00018c  cccdcecf          DCB      0xcc,0xcd,0xce,0xcf
000190  d0d1d2d3          DCB      0xd0,0xd1,0xd2,0xd3
000194  d4d5d6d7          DCB      0xd4,0xd5,0xd6,0xd7
000198  d8d9dadb          DCB      0xd8,0xd9,0xda,0xdb
00019c  dcdddedf          DCB      0xdc,0xdd,0xde,0xdf
0001a0  e0e1e2e3          DCB      0xe0,0xe1,0xe2,0xe3
0001a4  e4e5e6e7          DCB      0xe4,0xe5,0xe6,0xe7
0001a8  e8e9eaeb          DCB      0xe8,0xe9,0xea,0xeb
0001ac  ecedeeef          DCB      0xec,0xed,0xee,0xef
0001b0  f0f1f2f3          DCB      0xf0,0xf1,0xf2,0xf3
0001b4  f4f5f6f7          DCB      0xf4,0xf5,0xf6,0xf7
0001b8  f8f9fafb          DCB      0xf8,0xf9,0xfa,0xfb
0001bc  fcfdfeff          DCB      0xfc,0xfd,0xfe,0xff
0001c0  ffffffff          DCB      0xff,0xff,0xff,0xff
0001c4  ffffffff          DCB      0xff,0xff,0xff,0xff
0001c8  ffffffff          DCB      0xff,0xff,0xff,0xff
0001cc  ffffffff          DCB      0xff,0xff,0xff,0xff
0001d0  ffffffff          DCB      0xff,0xff,0xff,0xff
0001d4  ffffffff          DCB      0xff,0xff,0xff,0xff
0001d8  ffffffff          DCB      0xff,0xff,0xff,0xff
0001dc  ffffffff          DCB      0xff,0xff,0xff,0xff
0001e0  ffffffff          DCB      0xff,0xff,0xff,0xff
0001e4  ffffffff          DCB      0xff,0xff,0xff,0xff
0001e8  ffffffff          DCB      0xff,0xff,0xff,0xff
0001ec  ffffffff          DCB      0xff,0xff,0xff,0xff
0001f0  ffffffff          DCB      0xff,0xff,0xff,0xff
0001f4  ffffffff          DCB      0xff,0xff,0xff,0xff
0001f8  ffffffff          DCB      0xff,0xff,0xff,0xff
0001fc  ffffffff          DCB      0xff,0xff,0xff,0xff
000200  ffffffff          DCB      0xff,0xff,0xff,0xff
000204  ffffffff          DCB      0xff,0xff,0xff,0xff
000208  ffffffff          DCB      0xff,0xff,0xff,0xff
00020c  ffffffff          DCB      0xff,0xff,0xff,0xff
000210  ffffffff          DCB      0xff,0xff,0xff,0xff
000214  ffffffff          DCB      0xff,0xff,0xff,0xff
000218  ffffffff          DCB      0xff,0xff,0xff,0xff
00021c  ffffffff          DCB      0xff,0xff,0xff,0xff
000220  ffffffff          DCB      0xff,0xff,0xff,0xff
000224  ffffffff          DCB      0xff,0xff,0xff,0xff
000228  ffffffff          DCB      0xff,0xff,0xff,0xff
00022c  ffffffff          DCB      0xff,0xff,0xff,0xff
000230  ffffffff          DCB      0xff,0xff,0xff,0xff
000234  ffffffff          DCB      0xff,0xff,0xff,0xff
000238  ffffffff          DCB      0xff,0xff,0xff,0xff
00023c  ffffffff          DCB      0xff,0xff,0xff,0xff
000240  ffffffff          DCB      0xff,0xff,0xff,0xff
000244  ffffffff          DCB      0xff,0xff,0xff,0xff
000248  ffffffff          DCB      0xff,0xff,0xff,0xff
00024c  ffffffff          DCB      0xff,0xff,0xff,0xff
000250  ffffffff          DCB      0xff,0xff,0xff,0xff
000254  ffffffff          DCB      0xff,0xff,0xff,0xff
000258  ffffffff          DCB      0xff,0xff,0xff,0xff
00025c  ffffffff          DCB      0xff,0xff,0xff,0xff
000260  ffffffff          DCB      0xff,0xff,0xff,0xff
000264  ffffffff          DCB      0xff,0xff,0xff,0xff
000268  ffffffff          DCB      0xff,0xff,0xff,0xff
00026c  ffffffff          DCB      0xff,0xff,0xff,0xff
000270  ffffffff          DCB      0xff,0xff,0xff,0xff
000274  ffffffff          DCB      0xff,0xff,0xff,0xff
000278  ffffffff          DCB      0xff,0xff,0xff,0xff
00027c  ffffffff          DCB      0xff,0xff,0xff,0xff
000280  ffffffff          DCB      0xff,0xff,0xff,0xff
000284  ffffffff          DCB      0xff,0xff,0xff,0xff
000288  ffffffff          DCB      0xff,0xff,0xff,0xff
00028c  ffffffff          DCB      0xff,0xff,0xff,0xff
000290  ffffffff          DCB      0xff,0xff,0xff,0xff
000294  ffffffff          DCB      0xff,0xff,0xff,0xff
000298  ffffffff          DCB      0xff,0xff,0xff,0xff
00029c  ffffffff          DCB      0xff,0xff,0xff,0xff
0002a0  ffffffff          DCB      0xff,0xff,0xff,0xff
0002a4  ffffffff          DCB      0xff,0xff,0xff,0xff
0002a8  ffffffff          DCB      0xff,0xff,0xff,0xff
0002ac  ffffffff          DCB      0xff,0xff,0xff,0xff
0002b0  ffffffff          DCB      0xff,0xff,0xff,0xff
0002b4  ffffffff          DCB      0xff,0xff,0xff,0xff
0002b8  ffffffff          DCB      0xff,0xff,0xff,0xff
0002bc  ffffffff          DCB      0xff,0xff,0xff,0xff
0002c0  00000000          DCB      0x00,0x00,0x00,0x00
0002c4  00000000          DCB      0x00,0x00,0x00,0x00
0002c8  00000000          DCB      0x00,0x00,0x00,0x00
0002cc  00000000          DCB      0x00,0x00,0x00,0x00
0002d0  00000000          DCB      0x00,0x00,0x00,0x00
0002d4  00000000          DCB      0x00,0x00,0x00,0x00
0002d8  00000000          DCB      0x00,0x00,0x00,0x00
0002dc  00000000          DCB      0x00,0x00,0x00,0x00
0002e0  00000000          DCB      0x00,0x00,0x00,0x00
0002e4  00000000          DCB      0x00,0x00,0x00,0x00
0002e8  00000000          DCB      0x00,0x00,0x00,0x00
0002ec  00000000          DCB      0x00,0x00,0x00,0x00
0002f0  00000000          DCB      0x00,0x00,0x00,0x00
0002f4  00000000          DCB      0x00,0x00,0x00,0x00
0002f8  00000000          DCB      0x00,0x00,0x00,0x00
0002fc  00000000          DCB      0x00,0x00,0x00,0x00
000300  00000000          DCB      0x00,0x00,0x00,0x00
000304  00000000          DCB      0x00,0x00,0x00,0x00
000308  00000000          DCB      0x00,0x00,0x00,0x00
00030c  00000000          DCB      0x00,0x00,0x00,0x00
000310  00000000          DCB      0x00,0x00,0x00,0x00
000314  00000000          DCB      0x00,0x00,0x00,0x00
000318  00000000          DCB      0x00,0x00,0x00,0x00
00031c  00000000          DCB      0x00,0x00,0x00,0x00
000320  00000000          DCB      0x00,0x00,0x00,0x00
000324  00000000          DCB      0x00,0x00,0x00,0x00
000328  00000000          DCB      0x00,0x00,0x00,0x00
00032c  00000000          DCB      0x00,0x00,0x00,0x00
000330  00000000          DCB      0x00,0x00,0x00,0x00
000334  00000000          DCB      0x00,0x00,0x00,0x00
000338  00000000          DCB      0x00,0x00,0x00,0x00
00033c  00000000          DCB      0x00,0x00,0x00,0x00
000340  00000000          DCB      0x00,0x00,0x00,0x00
000344  00000000          DCB      0x00,0x00,0x00,0x00
000348  00000000          DCB      0x00,0x00,0x00,0x00
00034c  00000000          DCB      0x00,0x00,0x00,0x00
000350  00000000          DCB      0x00,0x00,0x00,0x00
000354  00000000          DCB      0x00,0x00,0x00,0x00
000358  00000000          DCB      0x00,0x00,0x00,0x00
00035c  00000000          DCB      0x00,0x00,0x00,0x00
000360  00000000          DCB      0x00,0x00,0x00,0x00
000364  00000000          DCB      0x00,0x00,0x00,0x00
000368  00000000          DCB      0x00,0x00,0x00,0x00
00036c  00000000          DCB      0x00,0x00,0x00,0x00
000370  00000000          DCB      0x00,0x00,0x00,0x00
000374  00000000          DCB      0x00,0x00,0x00,0x00
000378  00000000          DCB      0x00,0x00,0x00,0x00
00037c  00000000          DCB      0x00,0x00,0x00,0x00
000380  00000000          DCB      0x00,0x00,0x00,0x00
000384  00000000          DCB      0x00,0x00,0x00,0x00
000388  00000000          DCB      0x00,0x00,0x00,0x00
00038c  00000000          DCB      0x00,0x00,0x00,0x00
000390  00000000          DCB      0x00,0x00,0x00,0x00
000394  00000000          DCB      0x00,0x00,0x00,0x00
000398  00000000          DCB      0x00,0x00,0x00,0x00
00039c  00000000          DCB      0x00,0x00,0x00,0x00
0003a0  00000000          DCB      0x00,0x00,0x00,0x00
0003a4  00000000          DCB      0x00,0x00,0x00,0x00
0003a8  00000000          DCB      0x00,0x00,0x00,0x00
0003ac  00000000          DCB      0x00,0x00,0x00,0x00
0003b0  00000000          DCB      0x00,0x00,0x00,0x00
0003b4  00000000          DCB      0x00,0x00,0x00,0x00
0003b8  00000000          DCB      0x00,0x00,0x00,0x00
0003bc  00000000          DCB      0x00,0x00,0x00,0x00
0003c0  00000000          DCB      0x00,0x00,0x00,0x00
0003c4  00000000          DCB      0x00,0x00,0x00,0x00
0003c8  00000000          DCB      0x00,0x00,0x00,0x00
0003cc  00000000          DCB      0x00,0x00,0x00,0x00
0003d0  00000000          DCB      0x00,0x00,0x00,0x00
0003d4  00000000          DCB      0x00,0x00,0x00,0x00
0003d8  00000000          DCB      0x00,0x00,0x00,0x00
0003dc  00000000          DCB      0x00,0x00,0x00,0x00
0003e0  00000000          DCB      0x00,0x00,0x00,0x00
0003e4  00000000          DCB      0x00,0x00,0x00,0x00
0003e8  00000000          DCB      0x00,0x00,0x00,0x00
0003ec  00000000          DCB      0x00,0x00,0x00,0x00
0003f0  00000000          DCB      0x00,0x00,0x00,0x00
0003f4  00000000          DCB      0x00,0x00,0x00,0x00
0003f8  00000000          DCB      0x00,0x00,0x00,0x00
0003fc  00000000          DCB      0x00,0x00,0x00,0x00
000400  00000000          DCB      0x00,0x00,0x00,0x00
000404  00000000          DCB      0x00,0x00,0x00,0x00
000408  00000000          DCB      0x00,0x00,0x00,0x00
00040c  00000000          DCB      0x00,0x00,0x00,0x00
000410  00000000          DCB      0x00,0x00,0x00,0x00
000414  00000000          DCB      0x00,0x00,0x00,0x00
000418  00000000          DCB      0x00,0x00,0x00,0x00
00041c  00000000          DCB      0x00,0x00,0x00,0x00
000420  00000000          DCB      0x00,0x00,0x00,0x00
000424  00000000          DCB      0x00,0x00,0x00,0x00
000428  00000000          DCB      0x00,0x00,0x00,0x00
00042c  00000000          DCB      0x00,0x00,0x00,0x00
000430  00000000          DCB      0x00,0x00,0x00,0x00
000434  00000000          DCB      0x00,0x00,0x00,0x00
000438  00000000          DCB      0x00,0x00,0x00,0x00
00043c  00000000          DCB      0x00,0x00,0x00,0x00
000440  00000000          DCB      0x00,0x00,0x00,0x00
000444  00000000          DCB      0x00,0x00,0x00,0x00
000448  00000000          DCB      0x00,0x00,0x00,0x00
00044c  00000000          DCB      0x00,0x00,0x00,0x00
000450  00000000          DCB      0x00,0x00,0x00,0x00
000454  00000000          DCB      0x00,0x00,0x00,0x00
000458  00000000          DCB      0x00,0x00,0x00,0x00
00045c  00000000          DCB      0x00,0x00,0x00,0x00
000460  00000000          DCB      0x00,0x00,0x00,0x00
000464  00000000          DCB      0x00,0x00,0x00,0x00
000468  00000000          DCB      0x00,0x00,0x00,0x00
00046c  00000000          DCB      0x00,0x00,0x00,0x00
000470  00000000          DCB      0x00,0x00,0x00,0x00
000474  00000000          DCB      0x00,0x00,0x00,0x00
000478  00000000          DCB      0x00,0x00,0x00,0x00
00047c  00000000          DCB      0x00,0x00,0x00,0x00
000480  00000000          DCB      0x00,0x00,0x00,0x00
000484  00000000          DCB      0x00,0x00,0x00,0x00
000488  00000000          DCB      0x00,0x00,0x00,0x00
00048c  00000000          DCB      0x00,0x00,0x00,0x00
000490  00000000          DCB      0x00,0x00,0x00,0x00
000494  00000000          DCB      0x00,0x00,0x00,0x00
000498  00000000          DCB      0x00,0x00,0x00,0x00
00049c  00000000          DCB      0x00,0x00,0x00,0x00
0004a0  00000000          DCB      0x00,0x00,0x00,0x00
0004a4  00000000          DCB      0x00,0x00,0x00,0x00
0004a8  00000000          DCB      0x00,0x00,0x00,0x00
0004ac  00000000          DCB      0x00,0x00,0x00,0x00
0004b0  00000000          DCB      0x00,0x00,0x00,0x00
0004b4  00000000          DCB      0x00,0x00,0x00,0x00
0004b8  00000000          DCB      0x00,0x00,0x00,0x00
0004bc  00000000          DCB      0x00,0x00,0x00,0x00
