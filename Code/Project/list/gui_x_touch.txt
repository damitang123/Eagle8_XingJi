; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\gui_x_touch.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui_x_touch.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI_X\GUI_X_Touch.c]
                          THUMB

                          AREA ||i.GUI_TOUCH_X_ActivateX||, CODE, READONLY, ALIGN=1

                  GUI_TOUCH_X_ActivateX PROC
;;;35     
;;;36     void GUI_TOUCH_X_ActivateX(void)
000000  4770              BX       lr
;;;37     {
;;;38     }
;;;39     
                          ENDP


                          AREA ||i.GUI_TOUCH_X_ActivateY||, CODE, READONLY, ALIGN=1

                  GUI_TOUCH_X_ActivateY PROC
;;;39     
;;;40     void GUI_TOUCH_X_ActivateY(void)
000000  4770              BX       lr
;;;41     {
;;;42     }
;;;43     
                          ENDP


                          AREA ||i.GUI_TOUCH_X_MeasureX||, CODE, READONLY, ALIGN=2

                  GUI_TOUCH_X_MeasureX PROC
;;;43     
;;;44     int  GUI_TOUCH_X_MeasureX(void)
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;45     {
;;;46     	char i;
;;;47     	unsigned short x[5];
;;;48     
;;;49     	if(Read_TSC2003_PENIRQ == 0)
000004  481f              LDR      r0,|L3.132|
000006  6801              LDR      r1,[r0,#0]
;;;50     	{
;;;51     		for(i = 0; i < 5; i++)
;;;52     		{
;;;53     			if(Read_TSC2003_PENIRQ == 0)
;;;54     			{
;;;55     				I2C_Block_Read(ADDR_TSC2003, (unsigned char *)&x[i], 0xC2, 2);
;;;56     				x[i] >>= 4;
;;;57     			}
;;;58     			else
;;;59     			{
;;;60     				xAdc = -1;
000008  4c1f              LDR      r4,|L3.136|
00000a  0689              LSLS     r1,r1,#26             ;49
00000c  f04f37ff          MOV      r7,#0xffffffff
000010  d422              BMI      |L3.88|
000012  2500              MOVS     r5,#0                 ;51
000014  4680              MOV      r8,r0                 ;49
000016  466e              MOV      r6,sp                 ;47
                  |L3.24|
000018  f8d80000          LDR      r0,[r8,#0]            ;53
00001c  0680              LSLS     r0,r0,#26             ;53
00001e  d41b              BMI      |L3.88|
000020  eb060145          ADD      r1,r6,r5,LSL #1       ;55
000024  2302              MOVS     r3,#2                 ;55
000026  22c2              MOVS     r2,#0xc2              ;55
000028  2090              MOVS     r0,#0x90              ;55
00002a  f7fffffe          BL       I2C_Block_Read
00002e  f8360015          LDRH     r0,[r6,r5,LSL #1]     ;56
000032  0900              LSRS     r0,r0,#4              ;56
000034  f8260015          STRH     r0,[r6,r5,LSL #1]     ;56
000038  1c6d              ADDS     r5,r5,#1              ;56
00003a  b2ed              UXTB     r5,r5                 ;51
00003c  2d05              CMP      r5,#5                 ;51
00003e  d3eb              BCC      |L3.24|
;;;61     				return (int)xAdc;
;;;62     			}
;;;63     		}
;;;64     
;;;65     		Array_Sort_By_Ascending(x, sizeof(x) / sizeof(unsigned short));
000040  2105              MOVS     r1,#5
000042  4668              MOV      r0,sp
000044  f7fffffe          BL       Array_Sort_By_Ascending
;;;66     		if(abs(x[1] - x[2]) < TOUCH_SHAKE_RANGE && abs(x[2] - x[3]) < TOUCH_SHAKE_RANGE && abs(x[1] - x[3]) < TOUCH_SHAKE_RANGE)
000048  f8bd2002          LDRH     r2,[sp,#2]
00004c  f8bd1004          LDRH     r1,[sp,#4]
000050  1a50              SUBS     r0,r2,r1
000052  3063              ADDS     r0,r0,#0x63
000054  28c6              CMP      r0,#0xc6
000056  d901              BLS      |L3.92|
                  |L3.88|
000058  8027              STRH     r7,[r4,#0]            ;60
00005a  e00f              B        |L3.124|
                  |L3.92|
00005c  f8bd0006          LDRH     r0,[sp,#6]
000060  1a0b              SUBS     r3,r1,r0
000062  3363              ADDS     r3,r3,#0x63
000064  2bc6              CMP      r3,#0xc6
000066  d8f7              BHI      |L3.88|
000068  1a13              SUBS     r3,r2,r0
00006a  3363              ADDS     r3,r3,#0x63
00006c  2bc6              CMP      r3,#0xc6
00006e  d8f3              BHI      |L3.88|
;;;67     		{
;;;68     			xAdc = (x[1] + x[2] + x[3]) / 3;
000070  4411              ADD      r1,r1,r2
000072  4408              ADD      r0,r0,r1
000074  2103              MOVS     r1,#3
000076  fbb0f0f1          UDIV     r0,r0,r1
00007a  8020              STRH     r0,[r4,#0]
                  |L3.124|
;;;69     		}
;;;70     		else
;;;71     		{
;;;72     			xAdc = -1;
;;;73     			return (int)xAdc;
;;;74     		}
;;;75     	}
;;;76     	else
;;;77     	{
;;;78     		xAdc = -1;
;;;79     	}
;;;80     
;;;81     	return (int)xAdc;
00007c  f9b40000          LDRSH    r0,[r4,#0]  ; xAdc
;;;82     
;;;83     }
000080  e8bd83fe          POP      {r1-r9,pc}
;;;84     
                          ENDP

                  |L3.132|
                          DCD      0x40010c08
                  |L3.136|
                          DCD      ||.data||

                          AREA ||i.GUI_TOUCH_X_MeasureY||, CODE, READONLY, ALIGN=2

                  GUI_TOUCH_X_MeasureY PROC
;;;84     
;;;85     int  GUI_TOUCH_X_MeasureY(void)
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;86     {
;;;87     	char i;
;;;88     	unsigned short y[5];
;;;89     	if(Read_TSC2003_PENIRQ == 0)
000004  481f              LDR      r0,|L4.132|
000006  6801              LDR      r1,[r0,#0]
;;;90     	{
;;;91     		for(i = 0; i < 5; i++)
;;;92     		{
;;;93     			if(Read_TSC2003_PENIRQ == 0)
;;;94     			{
;;;95     				I2C_Block_Read(ADDR_TSC2003, (unsigned char *)&y[i], 0xD2, 2);
;;;96     				y[i] >>= 4;
;;;97     			}
;;;98     			else
;;;99     			{
;;;100    				yAdc = -1;
000008  4c1f              LDR      r4,|L4.136|
00000a  0689              LSLS     r1,r1,#26             ;89
00000c  f04f37ff          MOV      r7,#0xffffffff
000010  d422              BMI      |L4.88|
000012  2500              MOVS     r5,#0                 ;91
000014  4680              MOV      r8,r0                 ;89
000016  466e              MOV      r6,sp                 ;88
                  |L4.24|
000018  f8d80000          LDR      r0,[r8,#0]            ;93
00001c  0680              LSLS     r0,r0,#26             ;93
00001e  d41b              BMI      |L4.88|
000020  eb060145          ADD      r1,r6,r5,LSL #1       ;95
000024  2302              MOVS     r3,#2                 ;95
000026  22d2              MOVS     r2,#0xd2              ;95
000028  2090              MOVS     r0,#0x90              ;95
00002a  f7fffffe          BL       I2C_Block_Read
00002e  f8360015          LDRH     r0,[r6,r5,LSL #1]     ;96
000032  0900              LSRS     r0,r0,#4              ;96
000034  f8260015          STRH     r0,[r6,r5,LSL #1]     ;96
000038  1c6d              ADDS     r5,r5,#1              ;96
00003a  b2ed              UXTB     r5,r5                 ;91
00003c  2d05              CMP      r5,#5                 ;91
00003e  d3eb              BCC      |L4.24|
;;;101    				return (int)yAdc;
;;;102    			}
;;;103    		}
;;;104    
;;;105    		Array_Sort_By_Ascending(y, sizeof(y) / sizeof(unsigned short));
000040  2105              MOVS     r1,#5
000042  4668              MOV      r0,sp
000044  f7fffffe          BL       Array_Sort_By_Ascending
;;;106    		if(abs(y[1] - y[2]) < TOUCH_SHAKE_RANGE && abs(y[2] - y[3]) < TOUCH_SHAKE_RANGE && abs(y[1] - y[3]) < TOUCH_SHAKE_RANGE)
000048  f8bd2002          LDRH     r2,[sp,#2]
00004c  f8bd1004          LDRH     r1,[sp,#4]
000050  1a50              SUBS     r0,r2,r1
000052  3063              ADDS     r0,r0,#0x63
000054  28c6              CMP      r0,#0xc6
000056  d901              BLS      |L4.92|
                  |L4.88|
000058  8067              STRH     r7,[r4,#2]            ;100
00005a  e00f              B        |L4.124|
                  |L4.92|
00005c  f8bd0006          LDRH     r0,[sp,#6]
000060  1a0b              SUBS     r3,r1,r0
000062  3363              ADDS     r3,r3,#0x63
000064  2bc6              CMP      r3,#0xc6
000066  d8f7              BHI      |L4.88|
000068  1a13              SUBS     r3,r2,r0
00006a  3363              ADDS     r3,r3,#0x63
00006c  2bc6              CMP      r3,#0xc6
00006e  d8f3              BHI      |L4.88|
;;;107    		{
;;;108    			yAdc = (y[1] + y[2] + y[3]) / 3;
000070  4411              ADD      r1,r1,r2
000072  4408              ADD      r0,r0,r1
000074  2103              MOVS     r1,#3
000076  fbb0f0f1          UDIV     r0,r0,r1
00007a  8060              STRH     r0,[r4,#2]
                  |L4.124|
;;;109    		}
;;;110    		else
;;;111    		{
;;;112    			yAdc = -1;
;;;113    			return (int)yAdc;
;;;114    		}
;;;115    	}
;;;116    	else
;;;117    	{
;;;118    		yAdc = -1;
;;;119    	}
;;;120    
;;;121    	return (int)yAdc;
00007c  f9b40002          LDRSH    r0,[r4,#2]  ; yAdc
;;;122    }
000080  e8bd83fe          POP      {r1-r9,pc}
;;;123    
                          ENDP

                  |L4.132|
                          DCD      0x40010c08
                  |L4.136|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=1

                  xAdc
000000  ffff              DCW      0xffff
                  yAdc
000002  ffff              DCW      0xffff
