; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\public_function.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\public_function.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\Board_Support_Package\public_function.c]
                          THUMB

                          AREA ||i.Array_Sort_By_Ascending||, CODE, READONLY, ALIGN=1

                  Array_Sort_By_Ascending PROC
;;;41     /*升序排列*/
;;;42     void Array_Sort_By_Ascending(unsigned short *a, char num)
000000  b5f0              PUSH     {r4-r7,lr}
;;;43     {
;;;44     	unsigned short i, j, temp;
;;;45     	for(i = 0; i < num - 1; i++)
000002  2300              MOVS     r3,#0
000004  1e4c              SUBS     r4,r1,#1
000006  e015              B        |L1.52|
                  |L1.8|
;;;46     	{
;;;47     		for (j = 0; j < num - i - 1; j++)
000008  2200              MOVS     r2,#0
00000a  1ace              SUBS     r6,r1,r3
00000c  1e76              SUBS     r6,r6,#1
00000e  e00d              B        |L1.44|
                  |L1.16|
;;;48     			if (a[j] > a[j + 1])
000010  eb000c42          ADD      r12,r0,r2,LSL #1
000014  f8305012          LDRH     r5,[r0,r2,LSL #1]
000018  f8bc7002          LDRH     r7,[r12,#2]
00001c  42bd              CMP      r5,r7
00001e  d903              BLS      |L1.40|
;;;49     			{
;;;50     				temp = a[j];
;;;51     				a[j] = a[j + 1];
000020  f8207012          STRH     r7,[r0,r2,LSL #1]
;;;52     				a[j + 1] = temp;
000024  f8ac5002          STRH     r5,[r12,#2]
                  |L1.40|
000028  1c52              ADDS     r2,r2,#1
00002a  b292              UXTH     r2,r2                 ;47
                  |L1.44|
00002c  4296              CMP      r6,r2                 ;47
00002e  dcef              BGT      |L1.16|
000030  1c5b              ADDS     r3,r3,#1              ;47
000032  b29b              UXTH     r3,r3                 ;45
                  |L1.52|
000034  42a3              CMP      r3,r4                 ;45
000036  dbe7              BLT      |L1.8|
;;;53     			}
;;;54     	}
;;;55     }
000038  bdf0              POP      {r4-r7,pc}
;;;56     
                          ENDP


                          AREA ||i.Array_Sort_By_Descending||, CODE, READONLY, ALIGN=1

                  Array_Sort_By_Descending PROC
;;;57     /*降序排列*/
;;;58     void Array_Sort_By_Descending(unsigned short *a, char num)
000000  b5f0              PUSH     {r4-r7,lr}
;;;59     {
;;;60     	unsigned short i, j, temp;
;;;61     	for(i = 0; i < num - 1; i++)
000002  2300              MOVS     r3,#0
000004  1e4c              SUBS     r4,r1,#1
000006  e015              B        |L2.52|
                  |L2.8|
;;;62     	{
;;;63     		for (j = 0; j < num - i - 1; j++)
000008  2200              MOVS     r2,#0
00000a  1ace              SUBS     r6,r1,r3
00000c  1e76              SUBS     r6,r6,#1
00000e  e00d              B        |L2.44|
                  |L2.16|
;;;64     			if (a[j] < a[j + 1])
000010  eb000c42          ADD      r12,r0,r2,LSL #1
000014  f8305012          LDRH     r5,[r0,r2,LSL #1]
000018  f8bc7002          LDRH     r7,[r12,#2]
00001c  42bd              CMP      r5,r7
00001e  d203              BCS      |L2.40|
;;;65     			{
;;;66     				temp = a[j];
;;;67     				a[j] = a[j + 1];
000020  f8207012          STRH     r7,[r0,r2,LSL #1]
;;;68     				a[j + 1] = temp;
000024  f8ac5002          STRH     r5,[r12,#2]
                  |L2.40|
000028  1c52              ADDS     r2,r2,#1
00002a  b292              UXTH     r2,r2                 ;63
                  |L2.44|
00002c  4296              CMP      r6,r2                 ;63
00002e  dcef              BGT      |L2.16|
000030  1c5b              ADDS     r3,r3,#1              ;63
000032  b29b              UXTH     r3,r3                 ;61
                  |L2.52|
000034  42a3              CMP      r3,r4                 ;61
000036  dbe7              BLT      |L2.8|
;;;69     			}
;;;70     	}
;;;71     }
000038  bdf0              POP      {r4-r7,pc}
;;;72     
                          ENDP


                          AREA ||i.Ascii_To_Unicode||, CODE, READONLY, ALIGN=2

                  Ascii_To_Unicode PROC
;;;6      
;;;7      unsigned short *Ascii_To_Unicode(unsigned short *dest, unsigned char *src )
000000  ea4f0200          MOV.W    r2,r0
                  |L3.4|
;;;8      {
;;;9      	unsigned short *dest_backup = dest;
;;;10     	while(0 != (*dest++ = *src++));
000004  f8113b01          LDRB     r3,[r1],#1
000008  f8203b02          STRH     r3,[r0],#2
00000c  2b00              CMP      r3,#0
00000e  d1f9              BNE      |L3.4|
;;;11     	return dest_backup;
000010  4610              MOV      r0,r2
;;;12     }
000012  4770              BX       lr
;;;13     
                          ENDP


                          AREA ||i.Swap_High_Low_Byte||, CODE, READONLY, ALIGN=1

                  Swap_High_Low_Byte PROC
;;;15     /*外部FLASH中的字体是按大端显示的,编译器是以小端模式的*/
;;;16     unsigned short *Swap_High_Low_Byte(unsigned short *dest, unsigned char *src )
000000  b530              PUSH     {r4,r5,lr}
;;;17     {
;;;18     	unsigned short i = 0;
000002  2200              MOVS     r2,#0
;;;19     	unsigned short *dest_backup = dest;
000004  4604              MOV      r4,r0
000006  e00c              B        |L4.34|
                  |L4.8|
;;;20     
;;;21     	while(*src != 0)
;;;22     	{
;;;23     		if(*src > 0x7f)
000008  2b7f              CMP      r3,#0x7f
00000a  d911              BLS      |L4.48|
;;;24     		{
;;;25     			if(i % 2 != 0)
00000c  07d5              LSLS     r5,r2,#31
00000e  d005              BEQ      |L4.28|
;;;26     				*dest++ = *src + (*(src - 1) << 8);
000010  f8115c01          LDRB     r5,[r1,#-1]
000014  eb032305          ADD      r3,r3,r5,LSL #8
000018  f8203b02          STRH     r3,[r0],#2
                  |L4.28|
00001c  1c52              ADDS     r2,r2,#1
;;;27     			i++;
00001e  b292              UXTH     r2,r2
                  |L4.32|
000020  1c49              ADDS     r1,r1,#1
                  |L4.34|
000022  780b              LDRB     r3,[r1,#0]            ;21
000024  2b00              CMP      r3,#0                 ;21
000026  d1ef              BNE      |L4.8|
;;;28     			src++;
;;;29     		}
;;;30     		else
;;;31     		{
;;;32     			*dest++ = *src++;
;;;33     		}
;;;34     	}
;;;35     
;;;36     	*dest = 0x00;
000028  2100              MOVS     r1,#0
00002a  8001              STRH     r1,[r0,#0]
;;;37     
;;;38     	return dest_backup;
00002c  4620              MOV      r0,r4
;;;39     }
00002e  bd30              POP      {r4,r5,pc}
                  |L4.48|
000030  f8203b02          STRH     r3,[r0],#2            ;32
000034  e7f4              B        |L4.32|
;;;40     
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  g_aXCHAR
                          %        100

                          AREA ||area_number.7||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.7||, ||.bss||
                  g_aCommonBuffer
                          %        200
