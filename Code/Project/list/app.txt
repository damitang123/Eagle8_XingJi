; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\app.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\app.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\User\app.c]
                          THUMB

                          AREA ||i.App_Start||, CODE, READONLY, ALIGN=2

                  App_Start PROC
;;;278    
;;;279    void  App_Start (void)
000000  f7fffffe          BL       Internal_Clk_Init
000004  f7fffffe          BL       RCC_Configuration
000008  f7fffffe          BL       NVIC_Configuration
00000c  f7fffffe          BL       Gpio_Init
000010  f7fffffe          BL       Key_Init
000014  f7fffffe          BL       Voc_Init
000018  f7fffffe          BL       Gps_Init
00001c  f7fffffe          BL       Buzzer_Init
000020  f7fffffe          BL       Setup_USART1
000024  f7fffffe          BL       ADC1_Configuration
000028  f7fffffe          BL       ADC2_Configuration
00002c  4c45              LDR      r4,|L1.324|
00002e  211c              MOVS     r1,#0x1c
000030  6860              LDR      r0,[r4,#4]  ; pApp
000032  f7fffffe          BL       __aeabi_memclr4
000036  6860              LDR      r0,[r4,#4]  ; pApp
000038  2601              MOVS     r6,#1
00003a  7006              STRB     r6,[r0,#0]
;;;280    {
;;;281    	InitializeBoard();
;;;282     
;;;283    	Global_Var_Init();
;;;284    
;;;285    	Setup_USART1();
00003c  f7fffffe          BL       Setup_USART1
;;;286    	
;;;287    	System_Tick_Init();
000040  f7fffffe          BL       System_Tick_Init
;;;288    
;;;289    	delay_ms(500);
000044  f44f70fa          MOV      r0,#0x1f4
000048  f7fffffe          BL       delay_ms
;;;290    
;;;291    	Gpio_Ctrl(eGpio_Power_On,true);
00004c  2101              MOVS     r1,#1
00004e  2000              MOVS     r0,#0
000050  f7fffffe          BL       Gpio_Ctrl
;;;292    	Gpio_Ctrl(eGpio_System_Work_Led,true);
000054  2101              MOVS     r1,#1
000056  4608              MOV      r0,r1
000058  f7fffffe          BL       Gpio_Ctrl
;;;293    
;;;294    	Data_Init();
00005c  f7fffffe          BL       Data_Init
000060  f7fffffe          BL       Rtc_Init
000064  2101              MOVS     r1,#1
000066  4838              LDR      r0,|L1.328|
000068  f7fffffe          BL       Rtc_Get_Time
00006c  4836              LDR      r0,|L1.328|
00006e  f7fffffe          BL       Is_Valid_DateTime
000072  2500              MOVS     r5,#0
000074  b950              CBNZ     r0,|L1.140|
000076  4834              LDR      r0,|L1.328|
000078  2111              MOVS     r1,#0x11
00007a  7001              STRB     r1,[r0,#0]
00007c  7046              STRB     r6,[r0,#1]
00007e  7086              STRB     r6,[r0,#2]
000080  210c              MOVS     r1,#0xc
000082  70c1              STRB     r1,[r0,#3]
000084  7105              STRB     r5,[r0,#4]
000086  7145              STRB     r5,[r0,#5]
000088  f7fffffe          BL       Rtc_Set_Time
                  |L1.140|
;;;295    
;;;296    	Check_System_Clock();
;;;297    	
;;;298    	GUI_Init();
00008c  f7fffffe          BL       GUI_Init
;;;299    	GUI_UC_SetEncodeUTF8();
000090  f7fffffe          BL       GUI_UC_SetEncodeUTF8
;;;300    	WM_SetCreateFlags(WM_CF_MEMDEV);
000094  2004              MOVS     r0,#4
000096  f7fffffe          BL       WM_SetCreateFlags
;;;301    	
;;;302    	Upload_Record_Var_Init();
00009a  f7fffffe          BL       Upload_Record_Var_Init
;;;303    
;;;304    	LCD_On();
00009e  f7fffffe          BL       LCD_L0_On
;;;305    	Display_Startup_Logo();		
0000a2  f7fffffe          BL       Display_Startup_Logo
;;;306    
;;;307    	Buzzer_Beep(eBUZ_DEVICE_OK);
0000a6  2002              MOVS     r0,#2
0000a8  f7fffffe          BL       Buzzer_Beep
;;;308    
;;;309    	/*如果按键不释放,就一直显示开机的画面.*/
;;;310    	while(KeyMiddleIsPressed())
0000ac  e005              B        |L1.186|
;;;311    	{
;;;312    		if(KeyRightIsPressed())
0000ae  bf00              NOP      
                  |L1.176|
0000b0  f7fffffe          BL       KeyRightIsPressed
0000b4  b108              CBZ      r0,|L1.186|
;;;313    		{
;;;314    			pApp->bTouchCalibrateAtStartUp = true;
0000b6  6860              LDR      r0,[r4,#4]  ; pApp
0000b8  7606              STRB     r6,[r0,#0x18]
                  |L1.186|
0000ba  f7fffffe          BL       KeyMiddleIsPressed
0000be  2800              CMP      r0,#0                 ;310
0000c0  d1f6              BNE      |L1.176|
;;;315    		}
;;;316    	}
;;;317    
;;;318    	delay_ms(100);
0000c2  2064              MOVS     r0,#0x64
0000c4  f7fffffe          BL       delay_ms
;;;319    
;;;320    	pApp->bSystemPowerOn = true;
0000c8  6860              LDR      r0,[r4,#4]  ; pApp
;;;321    
;;;322    	Gpio_Ctrl(eGpio_System_Work_Led,false);
0000ca  2100              MOVS     r1,#0
0000cc  7546              STRB     r6,[r0,#0x15]         ;320
0000ce  2001              MOVS     r0,#1
0000d0  f7fffffe          BL       Gpio_Ctrl
;;;323    
;;;324    #if USE_GB_T21254_2017
;;;325    	CW_SelectEnrollUser_Create(NULL, (void *)1);
0000d4  2101              MOVS     r1,#1
0000d6  2000              MOVS     r0,#0
0000d8  f7fffffe          BL       CW_SelectEnrollUser_Create
;;;326    	if(pApp->bTouchCalibrateAtStartUp)
0000dc  6860              LDR      r0,[r4,#4]  ; pApp
0000de  7e00              LDRB     r0,[r0,#0x18]
0000e0  b120              CBZ      r0,|L1.236|
;;;327    	{
;;;328    		CW_TouchCalibrate_Create(GetLastWinFromList(), (void *)1);
0000e2  f7fffffe          BL       GetLastWinFromList
0000e6  2101              MOVS     r1,#1
0000e8  f7fffffe          BL       CW_TouchCalibrate_Create
                  |L1.236|
;;;329    	}
;;;330    #else
;;;331    	CW_UserMain_Create(NULL,(void *)1);
;;;332    	if(pApp->bTouchCalibrateAtStartUp)
;;;333    	{
;;;334    		CW_TouchCalibrate_Create(GetLastWinFromList(), (void *)1);
;;;335    	}
;;;336    #endif
;;;337    
;;;338    #if SERVER_USE_XING_JIKONG_GU
;;;339    	GPRS_Variable_Init();
0000ec  f7fffffe          BL       GPRS_Variable_Init
;;;340    #endif
;;;341    
;;;342    	while(1)
;;;343    	{
;;;344    		GUI_Exec();
;;;345    		
;;;346    		if(pApp->bSystemLoginIn)
;;;347    		{
;;;348    			Exec_GPRS_User_Loop();
;;;349    		}
;;;350    
;;;351    		Uart_Usb_Cmd_Parser();
;;;352    
;;;353    		if(g_s10msTimer.bIntervalEvent)
0000f0  4e16              LDR      r6,|L1.332|
;;;354    		{
;;;355    			g_s10msTimer.bIntervalEvent = false;
;;;356    			Loop_10ms_Hook();
;;;357    		}
;;;358    
;;;359    		if(g_s50msTimer.bIntervalEvent)
0000f2  f8df805c          LDR      r8,|L1.336|
;;;360    		{
;;;361    			g_s50msTimer.bIntervalEvent = false;
;;;362    			Loop_50ms_Hook();
;;;363    		}
;;;364    		
;;;365    		if(g_s100msTimer.bIntervalEvent)
0000f6  f8df905c          LDR      r9,|L1.340|
;;;366    		{
;;;367    			g_s100msTimer.bIntervalEvent = false;
;;;368    			Loop_100ms_Hook();
;;;369    		}
;;;370    
;;;371    		if(g_s1000msTimer.bIntervalEvent)
0000fa  4f17              LDR      r7,|L1.344|
                  |L1.252|
0000fc  f7fffffe          BL       GUI_Exec
000100  6860              LDR      r0,[r4,#4]            ;346  ; pApp
000102  7d00              LDRB     r0,[r0,#0x14]         ;346
000104  b108              CBZ      r0,|L1.266|
000106  f7fffffe          BL       Exec_GPRS_User_Loop
                  |L1.266|
00010a  f7fffffe          BL       Uart_Usb_Cmd_Parser
00010e  7830              LDRB     r0,[r6,#0]            ;353  ; g_s10msTimer
000110  b110              CBZ      r0,|L1.280|
000112  7035              STRB     r5,[r6,#0]            ;355
000114  f7fffffe          BL       Loop_10ms_Hook
                  |L1.280|
000118  f8981000          LDRB     r1,[r8,#0]            ;359  ; g_s50msTimer
00011c  4640              MOV      r0,r8                 ;359
00011e  b111              CBZ      r1,|L1.294|
000120  7005              STRB     r5,[r0,#0]            ;361
000122  f7fffffe          BL       GPRS_HeartRate_Packet_Upload
                  |L1.294|
000126  f8991000          LDRB     r1,[r9,#0]            ;365  ; g_s100msTimer
00012a  4648              MOV      r0,r9                 ;365
00012c  b111              CBZ      r1,|L1.308|
00012e  7005              STRB     r5,[r0,#0]            ;367
000130  f7fffffe          BL       Loop_100ms_Hook
                  |L1.308|
000134  7838              LDRB     r0,[r7,#0]  ; g_s1000msTimer
000136  2800              CMP      r0,#0
000138  d0e0              BEQ      |L1.252|
;;;372    		{
;;;373    			g_s1000msTimer.bIntervalEvent = false;
00013a  703d              STRB     r5,[r7,#0]
;;;374    			Loop_1000ms_Hook();
00013c  f7fffffe          BL       Loop_1000ms_Hook
000140  e7dc              B        |L1.252|
;;;375    		}
;;;376    	}
;;;377    }
;;;378    
                          ENDP

000142  0000              DCW      0x0000
                  |L1.324|
                          DCD      ||.data||
                  |L1.328|
                          DCD      g_sDateTime
                  |L1.332|
                          DCD      g_s10msTimer
                  |L1.336|
                          DCD      g_s50msTimer
                  |L1.340|
                          DCD      g_s100msTimer
                  |L1.344|
                          DCD      g_s1000msTimer

                          AREA ||i.Display_Startup_Logo||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  Display_Startup_Logo PROC
;;;83     
;;;84     static void Display_Startup_Logo(void)
000000  b530              PUSH     {r4,r5,lr}
;;;85     {
000002  b08f              SUB      sp,sp,#0x3c
;;;86     	char szTemp[50];
;;;87     	
;;;88     	WM_Deactivate();
000004  f7fffffe          BL       WM_Deactivate
;;;89     	
;;;90     	if(g_sSystemParam.nSystemLanguage == eLanguage_Chinese)
000008  482a              LDR      r0,|L2.180|
00000a  7840              LDRB     r0,[r0,#1]  ; g_sSystemParam
00000c  2801              CMP      r0,#1
00000e  d04f              BEQ      |L2.176|
;;;91     	{
;;;92     		GUI_SetFont(&GUI_Font16_UTF8);
;;;93     	}
;;;94     	else
;;;95     	{
;;;96     		GUI_SetFont(&GUI_FontTahomaBold19);
000010  4829              LDR      r0,|L2.184|
000012  bf00              NOP      
                  |L2.20|
000014  f7fffffe          BL       GUI_SetFont
;;;97     	}
;;;98     
;;;99     	GUI_SetColor(GUI_GREEN);
000018  f44f407f          MOV      r0,#0xff00
00001c  f7fffffe          BL       GUI_SetColor
;;;100    	GUI_SetTextMode(GUI_TM_TRANS);
000020  2002              MOVS     r0,#2
000022  f7fffffe          BL       GUI_SetTextMode
;;;101    	sprintf(szTemp, "%s:%s%06ld", _DeviceNo, g_sDeviceIDConfig.aNamePrefix,g_sDeviceIDConfig.nDeviceID);
000026  4b25              LDR      r3,|L2.188|
000028  4d26              LDR      r5,|L2.196|
00002a  4c25              LDR      r4,|L2.192|
00002c  f8d30006          LDR      r0,[r3,#6]  ; g_sDeviceIDConfig
000030  9000              STR      r0,[sp,#0]
000032  7828              LDRB     r0,[r5,#0]  ; g_Language
000034  a124              ADR      r1,|L2.200|
000036  1c5b              ADDS     r3,r3,#1
000038  f8540020          LDR      r0,[r4,r0,LSL #2]
00003c  f8d020bc          LDR      r2,[r0,#0xbc]
000040  a801              ADD      r0,sp,#4
000042  f7fffffe          BL       __2sprintf
;;;102    	GUI_DispStringAt(szTemp, 10, 10);
000046  220a              MOVS     r2,#0xa
000048  4611              MOV      r1,r2
00004a  a801              ADD      r0,sp,#4
00004c  f7fffffe          BL       GUI_DispStringAt
;;;103    	sprintf(szTemp, "%s:%s", _Software, FW_VERSION);
000050  7828              LDRB     r0,[r5,#0]  ; g_Language
000052  a320              ADR      r3,|L2.212|
000054  a124              ADR      r1,|L2.232|
000056  f8540020          LDR      r0,[r4,r0,LSL #2]
00005a  f8d020b8          LDR      r2,[r0,#0xb8]
00005e  a801              ADD      r0,sp,#4
000060  f7fffffe          BL       __2sprintf
;;;104    	GUI_DispStringAt(szTemp, 10, 35);
000064  2223              MOVS     r2,#0x23
000066  210a              MOVS     r1,#0xa
000068  a801              ADD      r0,sp,#4
00006a  f7fffffe          BL       GUI_DispStringAt
;;;105    	sprintf(szTemp, "%s:%s", _Hardware, HW_VERSION);
00006e  7828              LDRB     r0,[r5,#0]  ; g_Language
000070  a31f              ADR      r3,|L2.240|
000072  a11d              ADR      r1,|L2.232|
000074  f8540020          LDR      r0,[r4,r0,LSL #2]
000078  f8d020b4          LDR      r2,[r0,#0xb4]
00007c  a801              ADD      r0,sp,#4
00007e  f7fffffe          BL       __2sprintf
;;;106    	GUI_DispStringAt(szTemp, 10, 60);
000082  223c              MOVS     r2,#0x3c
000084  210a              MOVS     r1,#0xa
000086  a801              ADD      r0,sp,#4
000088  f7fffffe          BL       GUI_DispStringAt
;;;107    
;;;108    	GUI_DrawBitmap(&bmStartUpLogo, (LCD_XSIZE - bmStartUpLogo.XSize) >> 1, ((LCD_YSIZE - Bottom_Height - bmStartUpLogo.YSize) >> 1) + 60);
00008c  481c              LDR      r0,|L2.256|
00008e  223c              MOVS     r2,#0x3c
000090  8841              LDRH     r1,[r0,#2]  ; bmStartUpLogo
000092  8800              LDRH     r0,[r0,#0]  ; bmStartUpLogo
000094  f5c17191          RSB      r1,r1,#0x122
000098  eb020261          ADD      r2,r2,r1,ASR #1
00009c  f1c000f0          RSB      r0,r0,#0xf0
0000a0  1041              ASRS     r1,r0,#1
0000a2  4817              LDR      r0,|L2.256|
0000a4  f7fffffe          BL       GUI_DrawBitmap
;;;109    
;;;110    	WM_Activate();
0000a8  f7fffffe          BL       WM_Activate
;;;111    }
0000ac  b00f              ADD      sp,sp,#0x3c
0000ae  bd30              POP      {r4,r5,pc}
                  |L2.176|
0000b0  4814              LDR      r0,|L2.260|
0000b2  e7af              B        |L2.20|
;;;112    
                          ENDP

                  |L2.180|
                          DCD      g_sSystemParam
                  |L2.184|
                          DCD      GUI_FontTahomaBold19
                  |L2.188|
                          DCD      g_sDeviceIDConfig
                  |L2.192|
                          DCD      Strings
                  |L2.196|
                          DCD      g_Language
                  |L2.200|
0000c8  25733a25          DCB      "%s:%s%06ld",0
0000cc  73253036
0000d0  6c6400  
0000d3  00                DCB      0
                  |L2.212|
0000d4  53545f45          DCB      "ST_Eagle8_4G_V307",0
0000d8  61676c65
0000dc  385f3447
0000e0  5f563330
0000e4  3700    
0000e6  00                DCB      0
0000e7  00                DCB      0
                  |L2.232|
0000e8  25733a25          DCB      "%s:%s",0
0000ec  7300    
0000ee  00                DCB      0
0000ef  00                DCB      0
                  |L2.240|
0000f0  48575f56          DCB      "HW_V2017_1218",0
0000f4  32303137
0000f8  5f313231
0000fc  3800    
0000fe  00                DCB      0
0000ff  00                DCB      0
                  |L2.256|
                          DCD      bmStartUpLogo
                  |L2.260|
                          DCD      GUI_Font16_UTF8

                          AREA ||i.GPRS_Variable_Init||, CODE, READONLY, ALIGN=2

                  GPRS_Variable_Init PROC
;;;263    #if SERVER_USE_XING_JIKONG_GU
;;;264    static void GPRS_Variable_Init(void)
000000  b510              PUSH     {r4,lr}
;;;265    {
;;;266    	GPRS_Power_Control(eGPRSPowerRestart, __FILE__, __LINE__); //开机就启动GPRS 
000002  f44f7285          MOV      r2,#0x10a
000006  a108              ADR      r1,|L3.40|
000008  2002              MOVS     r0,#2
00000a  f7fffffe          BL       GPRS_Power_Control
;;;267    	g_sXingJiKongGU.bReveiceAckFromServer=false;//g_ReveiceAckFromServer=false;
00000e  480a              LDR      r0,|L3.56|
000010  2100              MOVS     r1,#0
;;;268    	g_sXingJiKongGU.bResult_Packet_Flag=false;// g_Result_Packet_Flag=false;
;;;269    	g_sXingJiKongGU.bSingal_Strength=false;//g_Singal_Strength=false;
;;;270    	g_sXingJiKongGU.bAlcValue_Excessive_Flag=false;//g_nAlcValue_Excessive_Flag=false;//added by lxl 20180821
;;;271    	g_sXingJiKongGU.bDeviceState=true;
000012  2201              MOVS     r2,#1
000014  7041              STRB     r1,[r0,#1]            ;267
000016  7001              STRB     r1,[r0,#0]            ;268
000018  7081              STRB     r1,[r0,#2]            ;269
00001a  70c1              STRB     r1,[r0,#3]            ;270
00001c  7102              STRB     r2,[r0,#4]
;;;272    	g_sXingJiKongGU.bHeartRate=false;
00001e  7141              STRB     r1,[r0,#5]
;;;273    	g_sXingJiKongGU.bDeviceStart=true;
000020  7182              STRB     r2,[r0,#6]
;;;274    	g_sXingJiKongGU.bOpenDevice=true;//已开机 added by lxl 20181107
000022  71c2              STRB     r2,[r0,#7]
;;;275    	g_sXingJiKongGU.bAdministration=false;//已开机 added by lxl 20181107
000024  7201              STRB     r1,[r0,#8]
;;;276    }
000026  bd10              POP      {r4,pc}
;;;277    #endif
                          ENDP

                  |L3.40|
000028  2e2e5c55          DCB      "..\\User\\app.c",0
00002c  7365725c
000030  6170702e
000034  6300    
000036  00                DCB      0
000037  00                DCB      0
                  |L3.56|
                          DCD      ||area_number.15||

                          AREA ||i.Loop_1000ms_Hook||, CODE, READONLY, ALIGN=1

                  Loop_1000ms_Hook PROC
;;;256    
;;;257    void Loop_1000ms_Hook(void)
000000  b510              PUSH     {r4,lr}
;;;258    {
;;;259    	Gps_Data_Parse();
000002  f7fffffe          BL       Gps_Data_Parse
;;;260    	Low_Power_Alarm();
000006  e8bd4010          POP      {r4,lr}
00000a  f7ffbffe          B.W      Low_Power_Alarm
;;;261    }
;;;262    
                          ENDP


                          AREA ||i.Loop_100ms_Hook||, CODE, READONLY, ALIGN=2

                  Loop_100ms_Hook PROC
;;;227    
;;;228    void Loop_100ms_Hook(void)
000000  b570              PUSH     {r4-r6,lr}
;;;229    {
;;;230    	if(g_bSpiHardwareBusBusy == false)
000002  4c1b              LDR      r4,|L5.112|
000004  7820              LDRB     r0,[r4,#0]  ; g_bSpiHardwareBusBusy
000006  b928              CBNZ     r0,|L5.20|
;;;231    	{
;;;232    		Rtc_Gpio_Init();
000008  f7fffffe          BL       Rtc_Gpio_Init
;;;233    		Rtc_Get_Time(&g_sDateTime, eDEC_Format);
00000c  2101              MOVS     r1,#1
00000e  4819              LDR      r0,|L5.116|
000010  f7fffffe          BL       Rtc_Get_Time
                  |L5.20|
;;;234    	}
;;;235    	WM_SendMessageNoPara(GetLastWinFromList(), WM_UPDATE_TIME);
000014  f7fffffe          BL       GetLastWinFromList
000018  f2404101          MOV      r1,#0x401
00001c  f7fffffe          BL       WM_SendMessageNoPara
;;;236    
;;;237    
;;;238    	if(pApp->eWorkState == eWorkNormal)
000020  6860              LDR      r0,[r4,#4]  ; pApp
;;;239    	{
;;;240    		if(g_sSystemParam.nAutoSleepTime && Get_System_Time() > pApp->nStartIdleTime + g_sSystemParam.nAutoSleepTime)
000022  4d15              LDR      r5,|L5.120|
000024  7800              LDRB     r0,[r0,#0]            ;238
000026  2801              CMP      r0,#1                 ;238
000028  d001              BEQ      |L5.46|
;;;241    		{
;;;242    			System_Enter_Sleep_Mode();
;;;243    		}
;;;244    	}
;;;245    	else if(pApp->eWorkState == eWorkSleep)
00002a  b178              CBZ      r0,|L5.76|
00002c  e01c              B        |L5.104|
                  |L5.46|
00002e  f8d5000e          LDR      r0,[r5,#0xe]          ;240  ; g_sSystemParam
000032  b1c8              CBZ      r0,|L5.104|
000034  f7fffffe          BL       Get_System_Time
000038  6861              LDR      r1,[r4,#4]            ;240  ; pApp
00003a  f8d5200e          LDR      r2,[r5,#0xe]          ;240  ; g_sSystemParam
00003e  6849              LDR      r1,[r1,#4]            ;240
000040  4411              ADD      r1,r1,r2              ;240
000042  4288              CMP      r0,r1                 ;240
000044  d910              BLS      |L5.104|
000046  f7fffffe          BL       System_Enter_Sleep_Mode
00004a  e00d              B        |L5.104|
                  |L5.76|
;;;246    	{
;;;247    		if(g_sSystemParam.nAutoSleepTime && Get_System_Time() < pApp->nStartIdleTime + g_sSystemParam.nAutoSleepTime)
00004c  f8d5000e          LDR      r0,[r5,#0xe]  ; g_sSystemParam
000050  b150              CBZ      r0,|L5.104|
000052  f7fffffe          BL       Get_System_Time
000056  6861              LDR      r1,[r4,#4]  ; pApp
000058  f8d5200e          LDR      r2,[r5,#0xe]  ; g_sSystemParam
00005c  6849              LDR      r1,[r1,#4]
00005e  4411              ADD      r1,r1,r2
000060  4288              CMP      r0,r1
000062  d201              BCS      |L5.104|
;;;248    		{
;;;249    			System_Exit_Sleep_Mode();
000064  f7fffffe          BL       System_Exit_Sleep_Mode
                  |L5.104|
;;;250    		}
;;;251    	}
;;;252    
;;;253    	/*自动关机检查*/
;;;254    	System_Power_Down_Check();//自动
000068  e8bd4070          POP      {r4-r6,lr}
00006c  f7ffbffe          B.W      System_Power_Down_Check
;;;255    }
;;;256    
                          ENDP

                  |L5.112|
                          DCD      ||.data||
                  |L5.116|
                          DCD      g_sDateTime
                  |L5.120|
                          DCD      g_sSystemParam

                          AREA ||i.Loop_10ms_Hook||, CODE, READONLY, ALIGN=2

                  Loop_10ms_Hook PROC
;;;204    
;;;205    void Loop_10ms_Hook(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;206    {
;;;207    	int x,y;
;;;208    	static char i= 0;
;;;209    	if(++i == 2)
000002  4c0d              LDR      r4,|L6.56|
000004  7860              LDRB     r0,[r4,#1]  ; i
000006  1c40              ADDS     r0,r0,#1
000008  b2c0              UXTB     r0,r0
00000a  7060              STRB     r0,[r4,#1]
00000c  2802              CMP      r0,#2
00000e  d111              BNE      |L6.52|
;;;210    	{
;;;211    		i = 0;
000010  2000              MOVS     r0,#0
000012  7060              STRB     r0,[r4,#1]
;;;212    		GUI_TOUCH_Exec();
000014  f7fffffe          BL       GUI_TOUCH_Exec
;;;213    		GUI_TOUCH_GetUnstable(&x,&y);
000018  a901              ADD      r1,sp,#4
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       GUI_TOUCH_GetUnstable
;;;214    		if(x > 0 && y > 0)
000020  9800              LDR      r0,[sp,#0]
000022  2800              CMP      r0,#0
000024  dd06              BLE      |L6.52|
000026  9801              LDR      r0,[sp,#4]
000028  2800              CMP      r0,#0
00002a  dd03              BLE      |L6.52|
;;;215    		{
;;;216    			pApp->nStartIdleTime = Get_System_Time();
00002c  f7fffffe          BL       Get_System_Time
000030  6861              LDR      r1,[r4,#4]  ; pApp
000032  6048              STR      r0,[r1,#4]
                  |L6.52|
;;;217    		}
;;;218    	}
;;;219    }
000034  bd1c              POP      {r2-r4,pc}
;;;220    
                          ENDP

000036  0000              DCW      0x0000
                  |L6.56|
                          DCD      ||.data||

                          AREA ||i.Loop_50ms_Hook||, CODE, READONLY, ALIGN=1

                  Loop_50ms_Hook PROC
;;;220    
;;;221    void Loop_50ms_Hook(void)
000000  f7ffbffe          B.W      GPRS_HeartRate_Packet_Upload
;;;222    {
;;;223    	#if SERVER_USE_XING_JIKONG_GU
;;;224    	GPRS_HeartRate_Packet_Upload();
;;;225    	#endif
;;;226    }
;;;227    
                          ENDP


                          AREA ||i.Low_Power_Alarm||, CODE, READONLY, ALIGN=2

                  Low_Power_Alarm PROC
;;;177    
;;;178    void Low_Power_Alarm(void)
000000  b530              PUSH     {r4,r5,lr}
;;;179    {
;;;180    	#define LOW_POWER_TIP_INTERVAL	60
;;;181    
;;;182    	sDialogWindowProperty s;
;;;183    	static unsigned long nCnt = LOW_POWER_TIP_INTERVAL;
;;;184    	
;;;185    	if(++nCnt > LOW_POWER_TIP_INTERVAL && Adc_Get_Battery_Volume() == 0)
000002  4c18              LDR      r4,|L8.100|
000004  b08d              SUB      sp,sp,#0x34           ;179
000006  68a0              LDR      r0,[r4,#8]  ; nCnt
000008  1c40              ADDS     r0,r0,#1
00000a  60a0              STR      r0,[r4,#8]  ; nCnt
00000c  283c              CMP      r0,#0x3c
00000e  d922              BLS      |L8.86|
000010  f7fffffe          BL       Adc_Get_Battery_Volume
000014  b9f8              CBNZ     r0,|L8.86|
;;;186    	{
;;;187    		nCnt = 0;
000016  2500              MOVS     r5,#0
;;;188    		s.nWinType = eDialogOK;
000018  60a5              STR      r5,[r4,#8]  ; nCnt
00001a  f88d5000          STRB     r5,[sp,#0]
;;;189    		s.pFont = _GetFont(Font_Content);
00001e  2004              MOVS     r0,#4
000020  f7fffffe          BL       _GetFont
;;;190    		s.pContent = _LowPowerTip;
000024  4911              LDR      r1,|L8.108|
000026  9002              STR      r0,[sp,#8]
000028  480f              LDR      r0,|L8.104|
00002a  7809              LDRB     r1,[r1,#0]  ; g_Language
00002c  f8500021          LDR      r0,[r0,r1,LSL #2]
000030  f8d002f8          LDR      r0,[r0,#0x2f8]
;;;191    		s.nContentColor = GUI_RED;
000034  9001              STR      r0,[sp,#4]
000036  20ff              MOVS     r0,#0xff
;;;192    		s.nBackGroundColor = GUI_LIGHTGRAY;
000038  9003              STR      r0,[sp,#0xc]
00003a  480d              LDR      r0,|L8.112|
;;;193    		s.nAutoCloseTime = 3;
00003c  9004              STR      r0,[sp,#0x10]
00003e  2003              MOVS     r0,#3
000040  f88d0014          STRB     r0,[sp,#0x14]
;;;194    		s.pFunMiddleOK = NULL;
;;;195    		CW_ShowDialog_Create(GetLastWinFromList(),(void *)&s);
000044  9508              STR      r5,[sp,#0x20]
000046  f7fffffe          BL       GetLastWinFromList
00004a  4669              MOV      r1,sp
00004c  f7fffffe          BL       CW_ShowDialog_Create
;;;196    		Voc_Cmd(eVOC_LOW_POWER);
000050  2004              MOVS     r0,#4
000052  f7fffffe          BL       Voc_Cmd
                  |L8.86|
;;;197    	}
;;;198    	
;;;199    	if(nCnt == 10)
000056  68a0              LDR      r0,[r4,#8]  ; nCnt
000058  280a              CMP      r0,#0xa
00005a  d101              BNE      |L8.96|
;;;200    	{
;;;201    		Voc_Close();
00005c  f7fffffe          BL       Voc_Close
                  |L8.96|
;;;202    	}
;;;203    }
000060  b00d              ADD      sp,sp,#0x34
000062  bd30              POP      {r4,r5,pc}
;;;204    
                          ENDP

                  |L8.100|
                          DCD      ||.data||
                  |L8.104|
                          DCD      Strings
                  |L8.108|
                          DCD      g_Language
                  |L8.112|
                          DCD      0x00d3d3d3

                          AREA ||i.System_Enter_Sleep_Mode||, CODE, READONLY, ALIGN=2

                  System_Enter_Sleep_Mode PROC
;;;112    
;;;113    void System_Enter_Sleep_Mode(void)
000000  4808              LDR      r0,|L9.36|
;;;114    {
000002  b510              PUSH     {r4,lr}
;;;115    	if(pApp->eWorkState == eWorkNormal)
000004  6840              LDR      r0,[r0,#4]  ; pApp
000006  7801              LDRB     r1,[r0,#0]
000008  2901              CMP      r1,#1
00000a  d109              BNE      |L9.32|
;;;116    	{
;;;117    		pApp->eWorkState = eWorkSleep;
00000c  2100              MOVS     r1,#0
00000e  7001              STRB     r1,[r0,#0]
;;;118    		LCD_Off();
000010  f7fffffe          BL       LCD_L0_Off
;;;119    		Gpio_Ctrl(eGpio_System_Work_Led,true);
000014  2101              MOVS     r1,#1
000016  e8bd4010          POP      {r4,lr}
00001a  4608              MOV      r0,r1
00001c  f7ffbffe          B.W      Gpio_Ctrl
                  |L9.32|
;;;120    	}
;;;121    }
000020  bd10              POP      {r4,pc}
;;;122    
                          ENDP

000022  0000              DCW      0x0000
                  |L9.36|
                          DCD      ||.data||

                          AREA ||i.System_Exit_Sleep_Mode||, CODE, READONLY, ALIGN=2

                  System_Exit_Sleep_Mode PROC
;;;122    
;;;123    void System_Exit_Sleep_Mode(void)
000000  4808              LDR      r0,|L10.36|
;;;124    {
000002  b510              PUSH     {r4,lr}
;;;125    	if(pApp->eWorkState == eWorkSleep)
000004  6840              LDR      r0,[r0,#4]  ; pApp
000006  7801              LDRB     r1,[r0,#0]
000008  2900              CMP      r1,#0                 ;124
00000a  d109              BNE      |L10.32|
;;;126    	{
;;;127    		pApp->eWorkState = eWorkNormal;
00000c  2101              MOVS     r1,#1
00000e  7001              STRB     r1,[r0,#0]
;;;128    		LCD_On();
000010  f7fffffe          BL       LCD_L0_On
;;;129    		Gpio_Ctrl(eGpio_System_Work_Led,false);
000014  2100              MOVS     r1,#0
000016  e8bd4010          POP      {r4,lr}
00001a  2001              MOVS     r0,#1
00001c  f7ffbffe          B.W      Gpio_Ctrl
                  |L10.32|
;;;130    	}
;;;131    }
000020  bd10              POP      {r4,pc}
;;;132    
                          ENDP

000022  0000              DCW      0x0000
                  |L10.36|
                          DCD      ||.data||

                          AREA ||i.System_Power_Down_Check||, CODE, READONLY, ALIGN=2

                  System_Power_Down_Check PROC
;;;153    
;;;154    void System_Power_Down_Check(void)
000000  b570              PUSH     {r4-r6,lr}
;;;155    {
;;;156    	/*按键持续2秒后关机且当超标时所有信息均录入完毕才可手动关机*/
;;;157    #if SERVER_USE_XING_JIKONG_GU
;;;158    	if(Get_Key_PressDurationTime(eKey_OK) > 2000 && g_bLongKeyEvent[KeyValueToKeyIndex(eKey_OK)]&&(g_sXingJiKongGU.bAlcValue_Excessive_Flag==false))//g_nAlcValue_Excessive_Flag==false按键控制关机   20180821
000002  200d              MOVS     r0,#0xd
000004  f7fffffe          BL       Get_Key_PressDurationTime
000008  4c12              LDR      r4,|L11.84|
00000a  f5b06ffa          CMP      r0,#0x7d0
00000e  d907              BLS      |L11.32|
000010  200d              MOVS     r0,#0xd
000012  f7fffffe          BL       KeyValueToKeyIndex
000016  4910              LDR      r1,|L11.88|
000018  5c08              LDRB     r0,[r1,r0]
00001a  b108              CBZ      r0,|L11.32|
00001c  78e0              LDRB     r0,[r4,#3]  ; g_sXingJiKongGU
00001e  b198              CBZ      r0,|L11.72|
                  |L11.32|
;;;159    #else
;;;160    	if(Get_Key_PressDurationTime(eKey_OK) > 2000 && g_bLongKeyEvent[KeyValueToKeyIndex(eKey_OK)])
;;;161    #endif
;;;162    	{		
;;;163    		Buzzer_Beep(eBUZ_DEVICE_OK);
;;;164    		System_Power_Down_Sub();
;;;165    	}
;;;166    
;;;167    	/*自动关机检查*/  //空闲时间且当超标时所有信息均录入完毕才可自动关机 20180821
;;;168    #if SERVER_USE_XING_JIKONG_GU
;;;169    	if(g_sSystemParam.nAutoPowerOffTime && (Get_System_Time() > pApp->nStartIdleTime + g_sSystemParam.nAutoPowerOffTime)&&(g_sXingJiKongGU.bAlcValue_Excessive_Flag==false)) //g_nAlcValue_Excessive_Flag==false
000020  4d0e              LDR      r5,|L11.92|
000022  f8d50012          LDR      r0,[r5,#0x12]  ; g_sSystemParam
000026  2800              CMP      r0,#0
000028  d012              BEQ      |L11.80|
00002a  f7fffffe          BL       Get_System_Time
00002e  490c              LDR      r1,|L11.96|
000030  f8d52012          LDR      r2,[r5,#0x12]  ; g_sSystemParam
000034  6849              LDR      r1,[r1,#4]  ; pApp
000036  6849              LDR      r1,[r1,#4]
000038  4411              ADD      r1,r1,r2
00003a  4288              CMP      r0,r1
00003c  d908              BLS      |L11.80|
00003e  78e0              LDRB     r0,[r4,#3]  ; g_sXingJiKongGU
000040  2800              CMP      r0,#0
000042  d105              BNE      |L11.80|
                  |L11.68|
;;;170    #else
;;;171    	if(g_sSystemParam.nAutoPowerOffTime && (Get_System_Time() > pApp->nStartIdleTime + g_sSystemParam.nAutoPowerOffTime))
;;;172    #endif
;;;173    	{
;;;174    		System_Power_Down_Sub();
000044  f7fffffe          BL       System_Power_Down_Sub
                  |L11.72|
000048  2002              MOVS     r0,#2                 ;163
00004a  f7fffffe          BL       Buzzer_Beep
00004e  e7f9              B        |L11.68|
                  |L11.80|
;;;175    	}
;;;176    }
000050  bd70              POP      {r4-r6,pc}
;;;177    
                          ENDP

000052  0000              DCW      0x0000
                  |L11.84|
                          DCD      ||area_number.15||
                  |L11.88|
                          DCD      g_bLongKeyEvent
                  |L11.92|
                          DCD      g_sSystemParam
                  |L11.96|
                          DCD      ||.data||

                          AREA ||i.System_Power_Down_Sub||, CODE, READONLY, ALIGN=2

                  System_Power_Down_Sub PROC
;;;132    
;;;133    void System_Power_Down_Sub(void)
000000  f7fffffe          BL       Data_Record_Full_Save
;;;134    {
;;;135    #if ALWAYS_SAVE_TEST_RESULT
;;;136    	Data_Record_Full_Save();
;;;137    #endif
;;;138    
;;;139    #if SERVER_USE_XING_JIKONG_GU
;;;140    	g_sXingJiKongGU.bDeviceState=false; //为什么没有低电量关机
000004  4910              LDR      r1,|L12.72|
000006  2000              MOVS     r0,#0
000008  7108              STRB     r0,[r1,#4]
;;;141    	Device_Close_Packet_Upload();
00000a  f7fffffe          BL       Device_Close_Packet_Upload
;;;142    #endif
;;;143    
;;;144    	WM_Deactivate();
00000e  f7fffffe          BL       WM_Deactivate
;;;145    	GUI_Clear();
000012  f7fffffe          BL       GUI_Clear
;;;146    	GUI_DrawBitmap(&bmShutDown, (LCD_XSIZE-bmShutDown.XSize)>>1,(LCD_YSIZE-Bottom_Height-bmShutDown.YSize)>>1);
000016  480d              LDR      r0,|L12.76|
000018  8841              LDRH     r1,[r0,#2]  ; bmShutDown
00001a  8800              LDRH     r0,[r0,#0]  ; bmShutDown
00001c  f5c17191          RSB      r1,r1,#0x122
000020  104a              ASRS     r2,r1,#1
000022  f1c000f0          RSB      r0,r0,#0xf0
000026  1041              ASRS     r1,r0,#1
000028  4808              LDR      r0,|L12.76|
00002a  f7fffffe          BL       GUI_DrawBitmap
;;;147    	delay_ms(1000);
00002e  f44f707a          MOV      r0,#0x3e8
000032  f7fffffe          BL       delay_ms
;;;148    	Gpio_Ctrl(eGpio_Power_On,false);
000036  2100              MOVS     r1,#0
000038  4608              MOV      r0,r1
00003a  f7fffffe          BL       Gpio_Ctrl
;;;149    	TRACE_PRINTF("System power down!\r\n");
00003e  a004              ADR      r0,|L12.80|
000040  f7fffffe          BL       User_Debug_Printf
;;;150    	__disable_irq();
000044  b672              CPSID    i
                  |L12.70|
;;;151    	while(1);
000046  e7fe              B        |L12.70|
;;;152    }
;;;153    
                          ENDP

                  |L12.72|
                          DCD      ||area_number.15||
                  |L12.76|
                          DCD      bmShutDown
                  |L12.80|
000050  53797374          DCB      "System power down!\r\n",0
000054  656d2070
000058  6f776572
00005c  20646f77
000060  6e210d0a
000064  00      
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_sSystem
                          %        28

                          AREA ||area_number.15||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.15||, ||.bss||
                  g_sXingJiKongGU
                          %        9

                          AREA ||.data||, DATA, ALIGN=2

                  g_bSpiHardwareBusBusy
000000  00                DCB      0x00
                  i
000001  000000            DCB      0x00,0x00,0x00
                  pApp
                          DCD      g_sSystem
                  nCnt
                          DCD      0x0000003c
