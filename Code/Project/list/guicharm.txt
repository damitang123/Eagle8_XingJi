; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\guicharm.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guicharm.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\Core\GUICharM.c]
                          THUMB

                          AREA ||i.GUIMONO_DispChar||, CODE, READONLY, ALIGN=2

                  GUIMONO_DispChar PROC
;;;38     */
;;;39     void GUIMONO_DispChar(U16P c) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;40       int c0, c1;
;;;41       const unsigned char GUI_UNI_PTR * pd;
;;;42       int x = GUI_Context.DispPosX;
000004  f8dfb11c          LDR      r11,|L1.292|
000008  b091              SUB      sp,sp,#0x44           ;39
;;;43       int y = GUI_Context.DispPosY;
;;;44       /* do some checking if drawing is actually necessary ... */
;;;45       const GUI_FONT_MONO GUI_UNI_PTR * pMono = GUI_Context.pAFont->p.pMono;
;;;46       unsigned int FirstChar = pMono->FirstChar;
;;;47       /* translate character into 2 characters to display : c0,c1 */
;;;48       /* Check if regular character first. */
;;;49       if ((c >= (U16P)FirstChar) &&(c <= (U16P)pMono->LastChar)) {
;;;50         pd = pMono->pData;
;;;51         c0 = ((int)c) - FirstChar;
;;;52         c1 = -1;
00000a  f04f35ff          MOV      r5,#0xffffffff
00000e  f9bb2026          LDRSH    r2,[r11,#0x26]        ;42  ; GUI_Context
000012  9206              STR      r2,[sp,#0x18]         ;43
000014  f8db301c          LDR      r3,[r11,#0x1c]        ;45  ; GUI_Context
000018  f9bba028          LDRSH    r10,[r11,#0x28]       ;43  ; GUI_Context
00001c  699c              LDR      r4,[r3,#0x18]         ;46
00001e  89a1              LDRH     r1,[r4,#0xc]          ;46
000020  4281              CMP      r1,r0                 ;49
000022  d806              BHI      |L1.50|
000024  89e2              LDRH     r2,[r4,#0xe]          ;49
000026  4282              CMP      r2,r0                 ;49
000028  d303              BCC      |L1.50|
00002a  1a47              SUBS     r7,r0,r1              ;51
00002c  f8d48000          LDR      r8,[r4,#0]
000030  e012              B        |L1.88|
                  |L1.50|
000032  e9d48101          LDRD     r8,r1,[r4,#4]
;;;53       } else {
;;;54         /* Check if character is in translation table */
;;;55         GUI_FONT_TRANSINFO const GUI_UNI_PTR * pti = pMono->pTrans;
;;;56         pd = pMono->pTransData;
;;;57         if (pti) {
000036  2900              CMP      r1,#0
000038  d06b              BEQ      |L1.274|
;;;58           FirstChar = pti->FirstChar;
00003a  880a              LDRH     r2,[r1,#0]
;;;59           if ((c >= (U16P)FirstChar) && (c <= (U16P)pti->LastChar)) {
00003c  4282              CMP      r2,r0
00003e  d868              BHI      |L1.274|
000040  884d              LDRH     r5,[r1,#2]
000042  4285              CMP      r5,r0
000044  d365              BCC      |L1.274|
;;;60             GUI_FONT_TRANSLIST const GUI_UNI_PTR * ptl;
;;;61             c -= pti->FirstChar;
000046  1a80              SUBS     r0,r0,r2
;;;62             ptl = pti->pList;
000048  6849              LDR      r1,[r1,#4]
00004a  b280              UXTH     r0,r0                 ;61
;;;63             ptl += c;
00004c  eb010080          ADD      r0,r1,r0,LSL #2
;;;64             c0  = ptl->c0;
000050  f9b07000          LDRSH    r7,[r0,#0]
;;;65             c1  = ptl->c1;
000054  f9b05002          LDRSH    r5,[r0,#2]
                  |L1.88|
;;;66           } else {
;;;67             c0 = c1 = -1;
;;;68           }
;;;69         } else {
;;;70           c0 = c1 = -1;
;;;71         }
;;;72       }
;;;73       /* Draw first character if it is valid */
;;;74       if (c0!=-1) {
000058  1c78              ADDS     r0,r7,#1
00005a  d05a              BEQ      |L1.274|
;;;75         int BytesPerChar = GUI_Context.pAFont->YSize*pMono->BytesPerLine;
00005c  7d18              LDRB     r0,[r3,#0x14]
00005e  7ca2              LDRB     r2,[r4,#0x12]
000060  4601              MOV      r1,r0
000062  fb00f902          MUL      r9,r0,r2
;;;76         GUI_DRAWMODE DrawMode;
;;;77         int XSize = pMono->XSize;
000066  7c20              LDRB     r0,[r4,#0x10]
000068  e9cd1008          STRD     r1,r0,[sp,#0x20]
;;;78         int YSize = GUI_Context.pAFont->YSize;
;;;79         /* Select the right drawing mode */
;;;80         DrawMode = GUI_Context.TextMode;
00006c  f9bb602e          LDRSH    r6,[r11,#0x2e]  ; GUI_Context
;;;81         /* call drawing routine */
;;;82         {
;;;83           U8 OldMode = LCD_SetDrawMode(DrawMode);
000070  4630              MOV      r0,r6
000072  f7fffffe          BL       LCD_SetDrawMode
000076  b2c0              UXTB     r0,r0
;;;84           LCD_DrawBitmap( x, y,
000078  900e              STR      r0,[sp,#0x38]
00007a  fb078009          MLA      r0,r7,r9,r8
00007e  7ca2              LDRB     r2,[r4,#0x12]
000080  2701              MOVS     r7,#1
000082  f8cdb014          STR      r11,[sp,#0x14]
000086  9702              STR      r7,[sp,#8]
000088  e9cd2003          STRD     r2,r0,[sp,#0xc]
00008c  f8db001c          LDR      r0,[r11,#0x1c]  ; GUI_Context
000090  e9dd3208          LDRD     r3,r2,[sp,#0x20]
000094  7dc1              LDRB     r1,[r0,#0x17]
000096  7d80              LDRB     r0,[r0,#0x16]
000098  e9cd0100          STRD     r0,r1,[sp,#0]
00009c  4651              MOV      r1,r10
00009e  9806              LDR      r0,[sp,#0x18]
0000a0  f7fffffe          BL       LCD_DrawBitmap
;;;85                              XSize, YSize,
;;;86                              GUI_Context.pAFont->XMag,  GUI_Context.pAFont->YMag,
;;;87                              1,     /* Bits per Pixel */
;;;88                              pMono->BytesPerLine,
;;;89                              pd + c0* BytesPerChar,
;;;90                              &LCD_BKCOLORINDEX
;;;91                              );
;;;92           if (c1 != -1) {
0000a4  1c68              ADDS     r0,r5,#1
0000a6  d016              BEQ      |L1.214|
;;;93             LCD_SetDrawMode(DrawMode | LCD_DRAWMODE_TRANS);
0000a8  f0460002          ORR      r0,r6,#2
0000ac  f7fffffe          BL       LCD_SetDrawMode
;;;94             LCD_DrawBitmap( x, y,
0000b0  7ca2              LDRB     r2,[r4,#0x12]
0000b2  fb058109          MLA      r1,r5,r9,r8
0000b6  e9cd1b04          STRD     r1,r11,[sp,#0x10]
0000ba  e9cd7202          STRD     r7,r2,[sp,#8]
0000be  f8db001c          LDR      r0,[r11,#0x1c]  ; GUI_Context
0000c2  e9dd3208          LDRD     r3,r2,[sp,#0x20]
0000c6  7dc1              LDRB     r1,[r0,#0x17]
0000c8  7d80              LDRB     r0,[r0,#0x16]
0000ca  e9cd0100          STRD     r0,r1,[sp,#0]
0000ce  4651              MOV      r1,r10
0000d0  9806              LDR      r0,[sp,#0x18]
0000d2  f7fffffe          BL       LCD_DrawBitmap
                  |L1.214|
;;;95                                XSize, YSize,
;;;96                                GUI_Context.pAFont->XMag,  GUI_Context.pAFont->YMag,
;;;97                                1,     /* Bits per Pixel */
;;;98                                pMono->BytesPerLine,
;;;99                                pd + c1* BytesPerChar,
;;;100                               &LCD_BKCOLORINDEX
;;;101                               );
;;;102          }
;;;103          /* Fill empty pixel lines */
;;;104          if (GUI_Context.pAFont->YDist > GUI_Context.pAFont->YSize) {
0000d6  f8db001c          LDR      r0,[r11,#0x1c]  ; GUI_Context
0000da  465d              MOV      r5,r11
0000dc  7d41              LDRB     r1,[r0,#0x15]
0000de  7d00              LDRB     r0,[r0,#0x14]
0000e0  4281              CMP      r1,r0
0000e2  d913              BLS      |L1.268|
;;;105            if (DrawMode != LCD_DRAWMODE_TRANS) {
0000e4  2e02              CMP      r6,#2
0000e6  d011              BEQ      |L1.268|
;;;106              LCD_SetDrawMode(DrawMode ^ LCD_DRAWMODE_REV);  /* Reverse so we can fill with BkColor */
0000e8  f0860004          EOR      r0,r6,#4
0000ec  f7fffffe          BL       LCD_SetDrawMode
;;;107              LCD_FillRect(x, 
0000f0  69e8              LDR      r0,[r5,#0x1c]  ; GUI_Context
0000f2  7d03              LDRB     r3,[r0,#0x14]
0000f4  7d42              LDRB     r2,[r0,#0x15]
0000f6  7d85              LDRB     r5,[r0,#0x16]
0000f8  fb03a102          MLA      r1,r3,r2,r10
0000fc  eb02030a          ADD      r3,r2,r10
000100  9a09              LDR      r2,[sp,#0x24]
000102  9806              LDR      r0,[sp,#0x18]
000104  fb020205          MLA      r2,r2,r5,r0
000108  f7fffffe          BL       LCD_FillRect
                  |L1.268|
;;;108                           y + GUI_Context.pAFont->YSize * GUI_Context.pAFont->YDist, 
;;;109                           x + XSize * GUI_Context.pAFont->XMag, 
;;;110                           y + GUI_Context.pAFont->YDist);
;;;111            }
;;;112          }
;;;113          LCD_SetDrawMode(OldMode);
00010c  980e              LDR      r0,[sp,#0x38]
00010e  f7fffffe          BL       LCD_SetDrawMode
                  |L1.274|
;;;114        } 
;;;115      }
;;;116      GUI_Context.DispPosX+=pMono->XDist;
000112  f8bb1026          LDRH     r1,[r11,#0x26]  ; GUI_Context
000116  7c62              LDRB     r2,[r4,#0x11]
000118  4411              ADD      r1,r1,r2
00011a  f8ab1026          STRH     r1,[r11,#0x26]
;;;117    }
00011e  b011              ADD      sp,sp,#0x44
000120  e8bd8ff0          POP      {r4-r11,pc}
;;;118    
                          ENDP

                  |L1.292|
                          DCD      GUI_Context

                          AREA ||i.GUIMONO_GetCharDistX||, CODE, READONLY, ALIGN=2

                  GUIMONO_GetCharDistX PROC
;;;122    */
;;;123    int GUIMONO_GetCharDistX(U16P c) {
000000  4802              LDR      r0,|L2.12|
;;;124      const GUI_FONT_MONO GUI_UNI_PTR * pMono = GUI_Context.pAFont->p.pMono;
000002  69c0              LDR      r0,[r0,#0x1c]  ; GUI_Context
000004  6980              LDR      r0,[r0,#0x18]
;;;125      GUI_USE_PARA(c);
;;;126      return pMono->XDist;
000006  7c40              LDRB     r0,[r0,#0x11]
;;;127    }
000008  4770              BX       lr
;;;128    
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      GUI_Context

                          AREA ||i.GUIMONO_GetFontInfo||, CODE, READONLY, ALIGN=1

                  GUIMONO_GetFontInfo PROC
;;;132    */
;;;133    void GUIMONO_GetFontInfo(const GUI_FONT GUI_UNI_PTR * pFont, GUI_FONTINFO* pfi) {
000000  2002              MOVS     r0,#2
;;;134      GUI_USE_PARA(pFont);
;;;135      pfi->Flags = GUI_FONTINFO_FLAG_MONO;
000002  8008              STRH     r0,[r1,#0]
;;;136    }
000004  4770              BX       lr
;;;137    
                          ENDP


                          AREA ||i.GUIMONO_IsInFont||, CODE, READONLY, ALIGN=1

                  GUIMONO_IsInFont PROC
;;;141    */
;;;142    char GUIMONO_IsInFont(const GUI_FONT GUI_UNI_PTR * pFont, U16 c) {
000000  6980              LDR      r0,[r0,#0x18]
;;;143      const GUI_FONT_MONO GUI_UNI_PTR * pMono = pFont->p.pMono;
;;;144      unsigned int FirstChar = pMono->FirstChar;
000002  8982              LDRH     r2,[r0,#0xc]
;;;145      /* Check if regular character first. */
;;;146      if ((c >= (U16P)FirstChar) &&(c <= (U16P)pMono->LastChar)) {
000004  428a              CMP      r2,r1
000006  d802              BHI      |L4.14|
000008  89c2              LDRH     r2,[r0,#0xe]
00000a  428a              CMP      r2,r1
00000c  d210              BCS      |L4.48|
                  |L4.14|
;;;147        return 1;  /* Yes, we have it ! */
;;;148      } else {
;;;149       /* Check if character is in translation table */
;;;150        GUI_FONT_TRANSINFO const GUI_UNI_PTR * pti;
;;;151        pti = pMono->pTrans;
00000e  6880              LDR      r0,[r0,#8]
;;;152        if (pti) {
000010  b180              CBZ      r0,|L4.52|
;;;153          if ((c >= pti->FirstChar) && (c <= pti->LastChar)) {
000012  8802              LDRH     r2,[r0,#0]
000014  428a              CMP      r2,r1
000016  d80d              BHI      |L4.52|
000018  8843              LDRH     r3,[r0,#2]
00001a  428b              CMP      r3,r1
00001c  d30a              BCC      |L4.52|
;;;154            const GUI_FONT_TRANSLIST GUI_UNI_PTR * pList;
;;;155            pList = pti->pList + c - pti->FirstChar;
00001e  6840              LDR      r0,[r0,#4]
000020  eb000081          ADD      r0,r0,r1,LSL #2
000024  eba00082          SUB      r0,r0,r2,LSL #2
;;;156            if (pList->c0 >= 0) {
000028  f9b00000          LDRSH    r0,[r0,#0]
00002c  2800              CMP      r0,#0
00002e  db01              BLT      |L4.52|
                  |L4.48|
;;;157              return 1;  /* Yes, we have it ! */
000030  2001              MOVS     r0,#1
;;;158            }
;;;159          }
;;;160        }
;;;161      }
;;;162      return 0;  /* No, we can not display this character */
;;;163    }
000032  4770              BX       lr
                  |L4.52|
000034  2000              MOVS     r0,#0                 ;162
000036  4770              BX       lr
;;;164    
                          ENDP

