; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\guidev_writeex.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guidev_writeex.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\MemDev\GUIDEV_WriteEx.c]
                          THUMB

                          AREA ||i.GUI_MEMDEV_WriteEx||, CODE, READONLY, ALIGN=2

                  GUI_MEMDEV_WriteEx PROC
;;;261    */
;;;262    void GUI_MEMDEV_WriteEx(GUI_MEMDEV_Handle hMem, int xMag, int yMag, int Alpha) {
000000  b51c              PUSH     {r2-r4,lr}
000002  e9cd2300          STRD     r2,r3,[sp,#0]
;;;263      GUI_MEMDEV_WriteExAt(hMem, GUI_POS_AUTO, GUI_POS_AUTO, xMag, yMag, Alpha);
000006  460b              MOV      r3,r1
000008  4902              LDR      r1,|L1.20|
00000a  460a              MOV      r2,r1
00000c  f7fffffe          BL       GUI_MEMDEV_WriteExAt
;;;264    }
000010  bd1c              POP      {r2-r4,pc}
;;;265    
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      0xfffff001

                          AREA ||i.GUI_MEMDEV_WriteExAt||, CODE, READONLY, ALIGN=2

                  GUI_MEMDEV_WriteExAt PROC
;;;239    */
;;;240    void GUI_MEMDEV_WriteExAt(GUI_MEMDEV_Handle hMem, int x, int y, int xMag, int yMag, int Alpha) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b083              SUB      sp,sp,#0xc
000006  4690              MOV      r8,r2
000008  e9ddba10          LDRD     r11,r10,[sp,#0x40]
00000c  460c              MOV      r4,r1
00000e  ea5f0900          MOVS     r9,r0
000012  d018              BEQ      |L2.70|
;;;241      if (hMem) {
;;;242        GUI_MEMDEV* pDevData;
;;;243        GUI_RECT ClipRectPrev;
;;;244        GUI_LOCK();
;;;245        pDevData = (GUI_MEMDEV*) GUI_ALLOC_h2p(hMem);
000014  f7fffffe          BL       GUI_ALLOC_h2p
;;;246        if (x == GUI_POS_AUTO) {
000018  f64071ff          MOV      r1,#0xfff
00001c  1909              ADDS     r1,r1,r4
00001e  d103              BNE      |L2.40|
;;;247          x = pDevData->x0;
000020  f9b04000          LDRSH    r4,[r0,#0]
;;;248          y = pDevData->y0;
000024  f9b08002          LDRSH    r8,[r0,#2]
                  |L2.40|
;;;249        }
;;;250        ClipRectPrev = GUI_Context.ClipRect;
000028  4f08              LDR      r7,|L2.76|
00002a  e9d75602          LDRD     r5,r6,[r7,#8]
;;;251        LCD_SetClipRectMax();
00002e  f7fffffe          BL       LCD_SetClipRectMax
000032  e9cdba00          STRD     r11,r10,[sp,#0]
;;;252        _WriteExToActiveAt(hMem, x, y, xMag, yMag, Alpha);
000036  4642              MOV      r2,r8
000038  4621              MOV      r1,r4
00003a  4648              MOV      r0,r9
00003c  9b06              LDR      r3,[sp,#0x18]
00003e  f7fffffe          BL       _WriteExToActiveAt
000042  e9c75602          STRD     r5,r6,[r7,#8]
                  |L2.70|
;;;253        GUI_Context.ClipRect = ClipRectPrev;
;;;254        GUI_UNLOCK();
;;;255      }
;;;256    }
000046  b007              ADD      sp,sp,#0x1c
000048  e8bd8ff0          POP      {r4-r11,pc}
;;;257    
                          ENDP

                  |L2.76|
                          DCD      GUI_Context

                          AREA ||i._DrawBitmapEx||, CODE, READONLY, ALIGN=2

                  _DrawBitmapEx PROC
;;;149    */
;;;150    static void _DrawBitmapEx(int x0, int y0, int xOff, int yOff, int xSize, int ySize, int xMag, int yMag,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;151                              int Alpha, int BmpSizeX, int BmpSizeY, int bpp, int BytesPerLine, const U8* pData) {
000004  b089              SUB      sp,sp,#0x24
000006  4688              MOV      r8,r1
;;;152      int y, yi, yMin, yMax, yEnd, yPrev;
;;;153      yMin = GUI_Context.ClipRect.y0;
000008  4931              LDR      r1,|L3.208|
00000a  e9dd5b17          LDRD     r5,r11,[sp,#0x5c]     ;151
00000e  e9dd201b          LDRD     r2,r0,[sp,#0x6c]      ;151
000012  f9b1900a          LDRSH    r9,[r1,#0xa]  ; GUI_Context
;;;154      yMax = GUI_Context.ClipRect.y1;
000016  f9b1100e          LDRSH    r1,[r1,#0xe]  ; GUI_Context
00001a  461c              MOV      r4,r3                 ;151
00001c  9f19              LDR      r7,[sp,#0x64]
;;;155      if (xMag < 0) {
00001e  9107              STR      r1,[sp,#0x1c]
000020  ea5f030b          MOVS     r3,r11
;;;156        x0 -= (BmpSizeX - (xOff << 1) - xSize) * xMag / 1000;
000024  f44f717a          MOV      r1,#0x3e8
000028  d50b              BPL      |L3.66|
00002a  9b0b              LDR      r3,[sp,#0x2c]
00002c  eba20343          SUB      r3,r2,r3,LSL #1
000030  9a16              LDR      r2,[sp,#0x58]
000032  1a9a              SUBS     r2,r3,r2
000034  fb02f20b          MUL      r2,r2,r11
000038  fb92f3f1          SDIV     r3,r2,r1
00003c  9a09              LDR      r2,[sp,#0x24]
00003e  1ad2              SUBS     r2,r2,r3
000040  9209              STR      r2,[sp,#0x24]
                  |L3.66|
;;;157      }
;;;158      if (yMag < 0) {
000042  2f00              CMP      r7,#0
000044  da05              BGE      |L3.82|
000046  1e40              SUBS     r0,r0,#1
;;;159        y0 -= (BmpSizeY - 1) * yMag / 1000;
000048  4378              MULS     r0,r7,r0
00004a  fb90f2f1          SDIV     r2,r0,r1
00004e  eba80802          SUB      r8,r8,r2
                  |L3.82|
;;;160      }
;;;161      yEnd  = y0 + GUI__DivideRound32(((I32)(yOff) * yMag), 1000);
000052  fb04f007          MUL      r0,r4,r7
000056  f44f717a          MOV      r1,#0x3e8
00005a  f7fffffe          BL       GUI__DivideRound32
00005e  eb000608          ADD      r6,r0,r8
;;;162      yPrev = yEnd + 1;
000062  1c70              ADDS     r0,r6,#1
;;;163      for (yi = yOff; yi < (yOff + ySize); yi++) {
000064  eb040a05          ADD      r10,r4,r5
000068  9006              STR      r0,[sp,#0x18]
00006a  e02c              B        |L3.198|
                  |L3.108|
;;;164        y = yEnd;
;;;165        yEnd = y0 + GUI__DivideRound32(((I32)(yi + 1) * yMag), 1000);
00006c  1c60              ADDS     r0,r4,#1
00006e  4635              MOV      r5,r6                 ;164
000070  4378              MULS     r0,r7,r0
000072  f44f717a          MOV      r1,#0x3e8
000076  f7fffffe          BL       GUI__DivideRound32
00007a  eb000608          ADD      r6,r0,r8
;;;166        if (y != yPrev) {
00007e  9806              LDR      r0,[sp,#0x18]
000080  4285              CMP      r5,r0
000082  d01f              BEQ      |L3.196|
;;;167          yPrev = y;
000084  9506              STR      r5,[sp,#0x18]
                  |L3.134|
;;;168          do {
;;;169            if ((y >= yMin) && (y <= yMax)) {
000086  454d              CMP      r5,r9
000088  db13              BLT      |L3.178|
00008a  9807              LDR      r0,[sp,#0x1c]
00008c  4285              CMP      r5,r0
00008e  dc10              BGT      |L3.178|
;;;170              _DrawBitmapLineEx(x0, y, xOff, yi, xSize, xMag, Alpha, bpp, BytesPerLine, pData);
000090  e9dd231e          LDRD     r2,r3,[sp,#0x78]
000094  f10d0c08          ADD      r12,sp,#8
000098  981a              LDR      r0,[sp,#0x68]
00009a  991d              LDR      r1,[sp,#0x74]
00009c  e88c000f          STM      r12,{r0-r3}
0000a0  9916              LDR      r1,[sp,#0x58]
0000a2  e9cd1b00          STRD     r1,r11,[sp,#0]
0000a6  4623              MOV      r3,r4
0000a8  4629              MOV      r1,r5
0000aa  9a0b              LDR      r2,[sp,#0x2c]
0000ac  9809              LDR      r0,[sp,#0x24]
0000ae  f7fffffe          BL       _DrawBitmapLineEx
                  |L3.178|
;;;171            }
;;;172          } while ((yMag < 0) ? (--y > yEnd) : (++y < yEnd));
0000b2  2f00              CMP      r7,#0
0000b4  da03              BGE      |L3.190|
0000b6  1e6d              SUBS     r5,r5,#1
0000b8  42b5              CMP      r5,r6
0000ba  dce4              BGT      |L3.134|
0000bc  e002              B        |L3.196|
                  |L3.190|
0000be  1c6d              ADDS     r5,r5,#1
0000c0  42b5              CMP      r5,r6
0000c2  dbe0              BLT      |L3.134|
                  |L3.196|
0000c4  1c64              ADDS     r4,r4,#1
                  |L3.198|
0000c6  45a2              CMP      r10,r4                ;163
0000c8  dcd0              BGT      |L3.108|
;;;173        }
;;;174      }
;;;175    }
0000ca  b00d              ADD      sp,sp,#0x34
0000cc  e8bd8ff0          POP      {r4-r11,pc}
;;;176    
                          ENDP

                  |L3.208|
                          DCD      GUI_Context

                          AREA ||i._DrawBitmapLineEx||, CODE, READONLY, ALIGN=2

                  _DrawBitmapLineEx PROC
;;;85     */
;;;86     static void _DrawBitmapLineEx(int x0, int y0, int xOff, int yOff, int xSize, int xMag, int Alpha,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;87                                   int bpp, int BytesPerLine, const U8* pData) {
000004  b083              SUB      sp,sp,#0xc
000006  4606              MOV      r6,r0
;;;88       int x, xi, xAct, xStart, xMagAbs, xiMag, xMin, xMax, Cached;
;;;89       LCD_PIXELINDEX Index = 0, IndexPrev = 0;
;;;90       /* Use clipping rect */
;;;91       xMin = GUI_Context.ClipRect.x0 - x0;
000008  4955              LDR      r1,|L4.352|
00000a  2000              MOVS     r0,#0                 ;89
00000c  f8ddc050          LDR      r12,[sp,#0x50]        ;89
000010  9000              STR      r0,[sp,#0]
000012  f9b12008          LDRSH    r2,[r1,#8]  ; GUI_Context
;;;92       xMax = GUI_Context.ClipRect.x1 - x0;
000016  f9b1100c          LDRSH    r1,[r1,#0xc]  ; GUI_Context
00001a  f8dda044          LDR      r10,[sp,#0x44]        ;89
00001e  1b89              SUBS     r1,r1,r6
000020  eba20906          SUB      r9,r2,r6              ;91
;;;93       /* Init some values */
;;;94       xMagAbs =  (xMag > 0) ? xMag : -xMag;
000024  9102              STR      r1,[sp,#8]
000026  f1ba0f00          CMP      r10,#0
00002a  dd01              BLE      |L4.48|
00002c  4652              MOV      r2,r10
00002e  e001              B        |L4.52|
                  |L4.48|
000030  f1ca0200          RSB      r2,r10,#0
                  |L4.52|
000034  4693              MOV      r11,r2
;;;95       x       =  (xOff * xMagAbs) / 1000;
000036  9905              LDR      r1,[sp,#0x14]
000038  f44f727a          MOV      r2,#0x3e8
00003c  fb01f10b          MUL      r1,r1,r11
;;;96       xiMag   =  (xOff * xMagAbs) % 1000;
000040  fb91f4f2          SDIV     r4,r1,r2
000044  fb91f5f2          SDIV     r5,r1,r2              ;95
000048  fb021714          MLS      r7,r2,r4,r1
;;;97       xStart  = -1;
;;;98       Cached  =  0;
00004c  2100              MOVS     r1,#0
00004e  fb03f30c          MUL      r3,r3,r12
000052  f04f34ff          MOV      r4,#0xffffffff        ;97
;;;99       for (xi = 0; xi < xSize; xi++) {
000056  4688              MOV      r8,r1
000058  9301              STR      r3,[sp,#4]
00005a  e047              B        |L4.236|
                  |L4.92|
;;;100        xiMag += xMagAbs;
00005c  445f              ADD      r7,r7,r11
;;;101        if (xiMag >= 1000) {  
00005e  f5b77f7a          CMP      r7,#0x3e8
000062  db41              BLT      |L4.232|
;;;102          if (x <= xMax) {
000064  9a02              LDR      r2,[sp,#8]
000066  4295              CMP      r5,r2
000068  dc69              BGT      |L4.318|
;;;103            xAct  = (xMag > 0) ? xi : xSize - xi - 1;
00006a  f1ba0f00          CMP      r10,#0
00006e  dd01              BLE      |L4.116|
000070  4642              MOV      r2,r8
000072  e002              B        |L4.122|
                  |L4.116|
000074  eba30208          SUB      r2,r3,r8
000078  1e52              SUBS     r2,r2,#1
                  |L4.122|
;;;104            Index = _GetPixelIndex(pData, xOff + xAct, yOff, bpp, BytesPerLine);
00007a  9b05              LDR      r3,[sp,#0x14]
00007c  f8ddc054          LDR      r12,[sp,#0x54]
000080  441a              ADD      r2,r2,r3
000082  9b13              LDR      r3,[sp,#0x4c]
000084  2b08              CMP      r3,#8
000086  9b01              LDR      r3,[sp,#4]
000088  d008              BEQ      |L4.156|
00008a  eb0c0242          ADD      r2,r12,r2,LSL #1
00008e  5a9a              LDRH     r2,[r3,r2]
                  |L4.144|
;;;105            if ((Index != IndexPrev) || (xStart == -1)) {
000090  9200              STR      r2,[sp,#0]
000092  4282              CMP      r2,r0
000094  d105              BNE      |L4.162|
000096  1c62              ADDS     r2,r4,#1
000098  d01c              BEQ      |L4.212|
00009a  e01e              B        |L4.218|
                  |L4.156|
00009c  4462              ADD      r2,r2,r12
00009e  5c9a              LDRB     r2,[r3,r2]
0000a0  e7f6              B        |L4.144|
                  |L4.162|
;;;106              if ((xStart != -1) && (x > xMin)) {
0000a2  1c61              ADDS     r1,r4,#1
0000a4  d016              BEQ      |L4.212|
0000a6  4649              MOV      r1,r9
0000a8  454d              CMP      r5,r9
0000aa  dd13              BLE      |L4.212|
;;;107                /* Clear cache */
;;;108                if (xStart < xMin) {
0000ac  454c              CMP      r4,r9
0000ae  da00              BGE      |L4.178|
;;;109                  xStart = xMin;
0000b0  460c              MOV      r4,r1
                  |L4.178|
;;;110                }
;;;111                LCD_SetColorIndex(IndexPrev);
0000b2  f7fffffe          BL       LCD_SetColorIndex
;;;112                if (Alpha == 256 || !GUI_Context.hDevData) {
0000b6  9812              LDR      r0,[sp,#0x48]
0000b8  f5b07f80          CMP      r0,#0x100
0000bc  d036              BEQ      |L4.300|
0000be  4828              LDR      r0,|L4.352|
0000c0  f8b00050          LDRH     r0,[r0,#0x50]  ; GUI_Context
0000c4  b390              CBZ      r0,|L4.300|
;;;113                  LCDDEV_L0_DrawHLine(x0 + xStart, y0, x0 + x - 1);
;;;114                } else {
;;;115                  _DrawHLineAlpha(x0 + xStart, y0, x0 + x - 1, Alpha);
0000c6  1972              ADDS     r2,r6,r5
0000c8  1930              ADDS     r0,r6,r4
0000ca  1e52              SUBS     r2,r2,#1
0000cc  9b12              LDR      r3,[sp,#0x48]
0000ce  9904              LDR      r1,[sp,#0x10]
0000d0  f7fffffe          BL       _DrawHLineAlpha
                  |L4.212|
;;;116                }
;;;117              }
;;;118              IndexPrev = Index;
;;;119              xStart    = x;
;;;120              Cached    = 1;
0000d4  9800              LDR      r0,[sp,#0]
0000d6  462c              MOV      r4,r5                 ;119
0000d8  2101              MOVS     r1,#1
                  |L4.218|
0000da  f44f727a          MOV      r2,#0x3e8             ;95
                  |L4.222|
0000de  1c6d              ADDS     r5,r5,#1              ;95
0000e0  f5a7777a          SUB      r7,r7,#0x3e8          ;95
;;;121            }
;;;122            do {
;;;123              x++;
;;;124              xiMag -= 1000;
;;;125            } while (xiMag >= 1000);
0000e4  4297              CMP      r7,r2
0000e6  dafa              BGE      |L4.222|
                  |L4.232|
0000e8  f1080801          ADD      r8,r8,#1              ;99
                  |L4.236|
0000ec  9b10              LDR      r3,[sp,#0x40]         ;99
0000ee  4598              CMP      r8,r3                 ;99
0000f0  dbb4              BLT      |L4.92|
                  |L4.242|
;;;126          } else {
;;;127            x = xMax + 1;
;;;128            break;
;;;129          }
;;;130        }
;;;131      }
;;;132      if (Cached && (x > xMin)) {
0000f2  2900              CMP      r1,#0
0000f4  d030              BEQ      |L4.344|
0000f6  4648              MOV      r0,r9
0000f8  454d              CMP      r5,r9
0000fa  dd2d              BLE      |L4.344|
;;;133        /* Clear cache */
;;;134        if (xStart < xMin) {
0000fc  454c              CMP      r4,r9
0000fe  da00              BGE      |L4.258|
;;;135          xStart = xMin;
000100  4604              MOV      r4,r0
                  |L4.258|
;;;136        }
;;;137        LCD_SetColorIndex(Index);
000102  9800              LDR      r0,[sp,#0]
000104  f7fffffe          BL       LCD_SetColorIndex
;;;138        if (Alpha == 256 || !GUI_Context.hDevData) {
000108  9812              LDR      r0,[sp,#0x48]
00010a  f5b07f80          CMP      r0,#0x100
00010e  d018              BEQ      |L4.322|
000110  4813              LDR      r0,|L4.352|
000112  f8b00050          LDRH     r0,[r0,#0x50]  ; GUI_Context
000116  b1a0              CBZ      r0,|L4.322|
;;;139          LCDDEV_L0_DrawHLine(x0 + xStart, y0, x0 + x - 1);
;;;140        } else {
;;;141          _DrawHLineAlpha(x0 + xStart, y0, x0 + x - 1, Alpha);
000118  9b12              LDR      r3,[sp,#0x48]
00011a  9904              LDR      r1,[sp,#0x10]
00011c  1972              ADDS     r2,r6,r5
00011e  1930              ADDS     r0,r6,r4
000120  b007              ADD      sp,sp,#0x1c
000122  1e52              SUBS     r2,r2,#1
000124  e8bd4ff0          POP      {r4-r11,lr}
000128  f7ffbffe          B.W      _DrawHLineAlpha
                  |L4.300|
00012c  490c              LDR      r1,|L4.352|
00012e  1972              ADDS     r2,r6,r5              ;113
000130  1930              ADDS     r0,r6,r4              ;113
000132  6cc9              LDR      r1,[r1,#0x4c]         ;113  ; GUI_Context
000134  1e52              SUBS     r2,r2,#1              ;113
000136  690b              LDR      r3,[r1,#0x10]         ;113
000138  9904              LDR      r1,[sp,#0x10]         ;113
00013a  4798              BLX      r3                    ;113
00013c  e7ca              B        |L4.212|
                  |L4.318|
00013e  1c55              ADDS     r5,r2,#1              ;127
000140  e7d7              B        |L4.242|
                  |L4.322|
000142  4907              LDR      r1,|L4.352|
000144  1972              ADDS     r2,r6,r5              ;139
000146  1930              ADDS     r0,r6,r4              ;139
000148  6cc9              LDR      r1,[r1,#0x4c]         ;139  ; GUI_Context
00014a  1e52              SUBS     r2,r2,#1              ;139
00014c  690b              LDR      r3,[r1,#0x10]         ;139
00014e  9904              LDR      r1,[sp,#0x10]         ;139
000150  b007              ADD      sp,sp,#0x1c           ;139
000152  e8bd4ff0          POP      {r4-r11,lr}           ;139
000156  4718              BX       r3                    ;139
                  |L4.344|
;;;142        }
;;;143      }
;;;144    }
000158  b007              ADD      sp,sp,#0x1c
00015a  e8bd8ff0          POP      {r4-r11,pc}
;;;145    
                          ENDP

00015e  0000              DCW      0x0000
                  |L4.352|
                          DCD      GUI_Context

                          AREA ||i._DrawHLineAlpha||, CODE, READONLY, ALIGN=2

                  _DrawHLineAlpha PROC
;;;53     */
;;;54     static void _DrawHLineAlpha(int x0, int y, int x1, int Intens) {
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;55       GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000004  4f26              LDR      r7,|L5.160|
000006  4680              MOV      r8,r0                 ;54
000008  469b              MOV      r11,r3                ;54
00000a  4614              MOV      r4,r2                 ;54
00000c  468a              MOV      r10,r1                ;54
00000e  f9b70050          LDRSH    r0,[r7,#0x50]  ; GUI_Context
000012  f7fffffe          BL       GUI_ALLOC_h2p
;;;56       GUI_USAGE_h hUsage = pDev->hUsage; 
000016  f9b06018          LDRSH    r6,[r0,#0x18]
;;;57       LCD_COLOR Color1, Color2;
;;;58       int Len = x1 - x0 + 1;
00001a  eba40408          SUB      r4,r4,r8
00001e  4605              MOV      r5,r0                 ;55
000020  1c64              ADDS     r4,r4,#1
;;;59       if (hUsage) {
000022  b16e              CBZ      r6,|L5.64|
;;;60         GUI_USAGE_AddHLine(GUI_USAGE_H2P(hUsage), x0, y, Len);
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       GUI_ALLOC_h2p
00002a  4681              MOV      r9,r0
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       GUI_ALLOC_h2p
000032  6880              LDR      r0,[r0,#8]
000034  4623              MOV      r3,r4
000036  4652              MOV      r2,r10
000038  6846              LDR      r6,[r0,#4]
00003a  4641              MOV      r1,r8
00003c  4648              MOV      r0,r9
00003e  47b0              BLX      r6
                  |L5.64|
;;;61       }
;;;62       Color1 = LCD_Index2Color(LCD_COLORINDEX);
000040  8878              LDRH     r0,[r7,#2]  ; GUI_Context
000042  f7fffffe          BL       LCD_Index2Color
000046  4606              MOV      r6,r0
;;;63       if (pDev->BitsPerPixel == 8) {
000048  6928              LDR      r0,[r5,#0x10]
;;;64         U8* pData;
;;;65         pData  = (U8*) GUI_MEMDEV__XY2PTR(x0, y);
;;;66         while (Len--) {
;;;67           Color2 = LCD_Index2Color(*(pData));
;;;68           Color2 = LCD_MixColors256(Color1, Color2, Intens);
;;;69           *(pData++) = LCD_Color2Index(Color2);
;;;70         }
;;;71       } else {
;;;72         U16* pData;
;;;73         pData  = (U16*) GUI_MEMDEV__XY2PTR(x0, y);
00004a  4651              MOV      r1,r10
00004c  2808              CMP      r0,#8                 ;63
00004e  4640              MOV      r0,r8
000050  d003              BEQ      |L5.90|
000052  f7fffffe          BL       GUI_MEMDEV__XY2PTR
000056  4605              MOV      r5,r0
;;;74         while (Len--) {
000058  e01f              B        |L5.154|
                  |L5.90|
00005a  f7fffffe          BL       GUI_MEMDEV__XY2PTR
00005e  4605              MOV      r5,r0                 ;65
000060  e00b              B        |L5.122|
                  |L5.98|
000062  7828              LDRB     r0,[r5,#0]            ;67
000064  f7fffffe          BL       LCD_Index2Color
000068  4601              MOV      r1,r0                 ;67
00006a  465a              MOV      r2,r11                ;68
00006c  4630              MOV      r0,r6                 ;68
00006e  f7fffffe          BL       LCD_MixColors256
000072  f7fffffe          BL       LCD_Color2Index
000076  f8050b01          STRB     r0,[r5],#1            ;69
                  |L5.122|
00007a  1e64              SUBS     r4,r4,#1              ;69
00007c  d2f1              BCS      |L5.98|
                  |L5.126|
;;;75           Color2 = LCD_Index2Color(*(pData));
;;;76           Color2 = LCD_MixColors256(Color1, Color2, Intens);
;;;77           *(pData++) = LCD_Color2Index(Color2);
;;;78         }
;;;79       }
;;;80     }
00007e  e8bd9ff0          POP      {r4-r12,pc}
                  |L5.130|
000082  8828              LDRH     r0,[r5,#0]            ;75
000084  f7fffffe          BL       LCD_Index2Color
000088  4601              MOV      r1,r0                 ;75
00008a  465a              MOV      r2,r11                ;76
00008c  4630              MOV      r0,r6                 ;76
00008e  f7fffffe          BL       LCD_MixColors256
000092  f7fffffe          BL       LCD_Color2Index
000096  f8250b02          STRH     r0,[r5],#2            ;77
                  |L5.154|
00009a  1e64              SUBS     r4,r4,#1              ;77
00009c  d2f1              BCS      |L5.130|
00009e  e7ee              B        |L5.126|
;;;81     
                          ENDP

                  |L5.160|
                          DCD      GUI_Context

                          AREA ||i._WriteExToActiveAt||, CODE, READONLY, ALIGN=2

                  _WriteExToActiveAt PROC
;;;180    */
;;;181    static void _WriteExToActiveAt(GUI_MEMDEV_Handle hMem, int x, int y, int xMag, int yMag, int Alpha) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
;;;182      GUI_MEMDEV* pDev;
;;;183      GUI_USAGE_h hUsage; 
;;;184      GUI_USAGE*  pUsage;
;;;185      U8* pData;
;;;186      int yAct, yPrev, ySize, yi;
;;;187      int BytesPerLine, bpp;
;;;188      pDev         = GUI_MEMDEV_H2P(hMem);
000006  f8dd9068          LDR      r9,[sp,#0x68]
00000a  f7fffffe          BL       GUI_ALLOC_h2p
00000e  4605              MOV      r5,r0
;;;189      hUsage       = pDev->hUsage;
000010  f9b01018          LDRSH    r1,[r0,#0x18]
;;;190      ySize        = pDev->YSize;
000014  f9b08006          LDRSH    r8,[r0,#6]
;;;191      BytesPerLine = pDev->BytesPerLine;
000018  68c0              LDR      r0,[r0,#0xc]
;;;192      pData        = (U8*)(pDev + 1);
;;;193      bpp          = pDev->BitsPerPixel;
;;;194      yPrev = y + 1;
00001a  9e0f              LDR      r6,[sp,#0x3c]
00001c  900b              STR      r0,[sp,#0x2c]         ;193
00001e  f8d5b010          LDR      r11,[r5,#0x10]
000022  1c76              ADDS     r6,r6,#1
000024  f1050a2c          ADD      r10,r5,#0x2c          ;192
;;;195      if (hUsage) {
000028  2900              CMP      r1,#0
00002a  d07a              BEQ      |L6.290|
;;;196        int xOff, xSize, y0;
;;;197        pUsage = GUI_USAGE_H2P(hUsage);
00002c  4608              MOV      r0,r1
00002e  f7fffffe          BL       GUI_ALLOC_h2p
000032  4607              MOV      r7,r0
;;;198        for (yi = 0; yi < ySize; yi++) {
000034  2400              MOVS     r4,#0
000036  e06e              B        |L6.278|
                  |L6.56|
;;;199          yAct = y + GUI__DivideRound32(((I32)(yi) * yMag), 1000);
000038  fb04f009          MUL      r0,r4,r9
00003c  f44f717a          MOV      r1,#0x3e8
000040  f7fffffe          BL       GUI__DivideRound32
000044  4601              MOV      r1,r0
000046  980f              LDR      r0,[sp,#0x3c]
000048  4408              ADD      r0,r0,r1
;;;200          if (yAct != yPrev) {
00004a  900c              STR      r0,[sp,#0x30]
00004c  42b0              CMP      r0,r6
00004e  d061              BEQ      |L6.276|
;;;201            xOff  = 0;
000050  2000              MOVS     r0,#0
;;;202            xSize = GUI_USAGE_GetNextDirty(pUsage, &xOff, yi);
000052  900a              STR      r0,[sp,#0x28]
000054  68b8              LDR      r0,[r7,#8]
000056  4622              MOV      r2,r4
000058  a90a              ADD      r1,sp,#0x28
00005a  6943              LDR      r3,[r0,#0x14]
00005c  4638              MOV      r0,r7
00005e  4798              BLX      r3
;;;203            if (xSize == pDev->XSize) {
000060  f9b51004          LDRSH    r1,[r5,#4]
000064  4606              MOV      r6,r0                 ;202
000066  42b1              CMP      r1,r6
000068  d151              BNE      |L6.270|
;;;204              /* If the entire line is affected, calculate the number of entire lines */
;;;205              y0 = yi;
;;;206              while (GUI_USAGE_GetNextDirty(pUsage, &xOff, yi + 1) == xSize) {
00006a  940c              STR      r4,[sp,#0x30]
00006c  e000              B        |L6.112|
                  |L6.110|
00006e  1c64              ADDS     r4,r4,#1
                  |L6.112|
000070  68b8              LDR      r0,[r7,#8]
000072  1c62              ADDS     r2,r4,#1
000074  a90a              ADD      r1,sp,#0x28
000076  6943              LDR      r3,[r0,#0x14]
000078  4638              MOV      r0,r7
00007a  4798              BLX      r3
00007c  42b0              CMP      r0,r6
00007e  d0f6              BEQ      |L6.110|
;;;207                yi++;
;;;208              }
;;;209              _DrawBitmapEx(x, y, 0, y0, pDev->XSize, yi - y0 + 1, xMag, yMag, Alpha,
000080  f9b53006          LDRSH    r3,[r5,#6]
000084  990b              LDR      r1,[sp,#0x2c]
000086  e9cd3b06          STRD     r3,r11,[sp,#0x18]
00008a  e9cd1a08          STRD     r1,r10,[sp,#0x20]
00008e  f9b50004          LDRSH    r0,[r5,#4]
000092  991b              LDR      r1,[sp,#0x6c]
000094  9a10              LDR      r2,[sp,#0x40]
000096  e9cd2902          STRD     r2,r9,[sp,#8]
00009a  e9cd1004          STRD     r1,r0,[sp,#0x10]
00009e  990c              LDR      r1,[sp,#0x30]
0000a0  2200              MOVS     r2,#0
0000a2  1a61              SUBS     r1,r4,r1
0000a4  1c49              ADDS     r1,r1,#1
0000a6  e9cd0100          STRD     r0,r1,[sp,#0]
0000aa  e9dd010e          LDRD     r0,r1,[sp,#0x38]
0000ae  9b0c              LDR      r3,[sp,#0x30]
0000b0  f7fffffe          BL       _DrawBitmapEx
;;;210                            pDev->XSize, pDev->YSize, bpp, BytesPerLine, pData);
;;;211              yPrev = y + GUI__DivideRound32(((I32)(yi) * yMag), 1000);
0000b4  fb04f009          MUL      r0,r4,r9
0000b8  f44f717a          MOV      r1,#0x3e8
0000bc  f7fffffe          BL       GUI__DivideRound32
0000c0  990f              LDR      r1,[sp,#0x3c]
0000c2  1846              ADDS     r6,r0,r1
0000c4  e026              B        |L6.276|
;;;212            } else {
;;;213              /* Draw the partial line which needs to be drawn */
;;;214              while (xSize) {
;;;215                _DrawBitmapEx(x, y, xOff, yi, xSize, 1, xMag, yMag, Alpha,
0000c6  bf00              NOP      
                  |L6.200|
0000c8  f9b53006          LDRSH    r3,[r5,#6]
0000cc  990b              LDR      r1,[sp,#0x2c]
0000ce  e9cd3b06          STRD     r3,r11,[sp,#0x18]
0000d2  e9cd1a08          STRD     r1,r10,[sp,#0x20]
0000d6  f9b51004          LDRSH    r1,[r5,#4]
0000da  f10d0c04          ADD      r12,sp,#4
0000de  2001              MOVS     r0,#1
0000e0  9b10              LDR      r3,[sp,#0x40]
0000e2  9a1b              LDR      r2,[sp,#0x6c]
0000e4  9600              STR      r6,[sp,#0]
0000e6  e88c0209          STM      r12,{r0,r3,r9}
0000ea  e9cd2104          STRD     r2,r1,[sp,#0x10]
0000ee  e9dd010e          LDRD     r0,r1,[sp,#0x38]
0000f2  4623              MOV      r3,r4
0000f4  9a0a              LDR      r2,[sp,#0x28]
0000f6  f7fffffe          BL       _DrawBitmapEx
;;;216                              pDev->XSize, pDev->YSize, bpp, BytesPerLine, pData);
;;;217                xOff += xSize;
0000fa  980a              LDR      r0,[sp,#0x28]
;;;218                xSize = GUI_USAGE_GetNextDirty(pUsage, &xOff, yi);
0000fc  4622              MOV      r2,r4
0000fe  4430              ADD      r0,r0,r6              ;217
000100  900a              STR      r0,[sp,#0x28]
000102  68b8              LDR      r0,[r7,#8]
000104  a90a              ADD      r1,sp,#0x28
000106  6943              LDR      r3,[r0,#0x14]
000108  4638              MOV      r0,r7
00010a  4798              BLX      r3
00010c  4606              MOV      r6,r0
                  |L6.270|
00010e  2e00              CMP      r6,#0                 ;214
000110  d1da              BNE      |L6.200|
;;;219              }
;;;220              yPrev = yAct;
000112  9e0c              LDR      r6,[sp,#0x30]
                  |L6.276|
000114  1c64              ADDS     r4,r4,#1
                  |L6.278|
000116  4544              CMP      r4,r8                 ;198
000118  db8e              BLT      |L6.56|
                  |L6.282|
;;;221            }
;;;222          }
;;;223        }
;;;224      } else {
;;;225        _DrawBitmapEx(x, y, 0, 0, pDev->XSize, ySize, xMag, yMag, Alpha,
;;;226                      pDev->XSize, pDev->YSize, bpp, BytesPerLine, pData);
;;;227      }
;;;228    }
00011a  b011              ADD      sp,sp,#0x44
00011c  e8bd8ff0          POP      {r4-r11,pc}
000120  e7ff              B        |L6.290|
                  |L6.290|
000122  990b              LDR      r1,[sp,#0x2c]         ;225
000124  e9cd8b06          STRD     r8,r11,[sp,#0x18]     ;225
000128  e9cd1a08          STRD     r1,r10,[sp,#0x20]     ;225
00012c  f9b50004          LDRSH    r0,[r5,#4]            ;225
000130  991b              LDR      r1,[sp,#0x6c]         ;225
000132  e9cd1004          STRD     r1,r0,[sp,#0x10]      ;225
000136  9b10              LDR      r3,[sp,#0x40]         ;225
000138  4641              MOV      r1,r8                 ;225
00013a  e88d020b          STM      sp,{r0,r1,r3,r9}      ;225
00013e  e9dd010e          LDRD     r0,r1,[sp,#0x38]      ;225
000142  2300              MOVS     r3,#0                 ;225
000144  461a              MOV      r2,r3                 ;225
000146  f7fffffe          BL       _DrawBitmapEx
00014a  e7e6              B        |L6.282|
;;;229    
                          ENDP

