; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\lcdrle16.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\lcdrle16.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\Core\LCDRLE16.c]
                          THUMB

                          AREA ||i._DrawBitmap_RLE||, CODE, READONLY, ALIGN=2

                  _DrawBitmap_RLE PROC
;;;81     */
;;;82     static void _DrawBitmap_RLE(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, int xMag, int yMag) {
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;83       LCD_PIXELINDEX OldColorIndex, PixelIndex;
;;;84       int xi, y, xL, yL;
;;;85       const U8 GUI_UNI_PTR * pPixelOrg;
;;;86       char NoTrans, IsMagnified;
;;;87       pPixelOrg     = pPixel;
;;;88       NoTrans       = !(GUI_Context.DrawMode & LCD_DRAWMODE_TRANS);
000004  4868              LDR      r0,|L1.424|
000006  b085              SUB      sp,sp,#0x14           ;82
000008  468a              MOV      r10,r1                ;82
00000a  7c01              LDRB     r1,[r0,#0x10]  ; GUI_Context
00000c  4690              MOV      r8,r2                 ;82
00000e  f3410140          SBFX     r1,r1,#1,#1
000012  1c49              ADDS     r1,r1,#1
000014  f8ddb050          LDR      r11,[sp,#0x50]
;;;89       IsMagnified   = ((yMag | xMag) != 1);
000018  9a13              LDR      r2,[sp,#0x4c]
00001a  9101              STR      r1,[sp,#4]
00001c  9e12              LDR      r6,[sp,#0x48]         ;88
00001e  ea4b0102          ORR      r1,r11,r2
000022  4699              MOV      r9,r3                 ;82
000024  2901              CMP      r1,#1
000026  d001              BEQ      |L1.44|
000028  2101              MOVS     r1,#1
00002a  e000              B        |L1.46|
                  |L1.44|
00002c  2100              MOVS     r1,#0
                  |L1.46|
;;;90       OldColorIndex = LCD_ACOLORINDEX[1];
00002e  4c5e              LDR      r4,|L1.424|
000030  9100              STR      r1,[sp,#0]
000032  8860              LDRH     r0,[r4,#2]  ; GUI_Context
;;;91       _DisplayMode   = LCD_GetFixedPaletteEx(GUI_Context.SelLayer);
000034  9003              STR      r0,[sp,#0xc]
000036  7c60              LDRB     r0,[r4,#0x11]  ; GUI_Context
000038  f7fffffe          BL       LCD_GetFixedPaletteEx
00003c  4d5b              LDR      r5,|L1.428|
;;;92       _DisplaySwapRB = LCD_GetSwapRBEx(GUI_Context.SelLayer);
00003e  6068              STR      r0,[r5,#4]  ; _DisplayMode
000040  7c60              LDRB     r0,[r4,#0x11]  ; GUI_Context
000042  f7fffffe          BL       LCD_GetSwapRBEx
000046  7028              STRB     r0,[r5,#0]
;;;93      /* Check if we can limit the number of lines due to clipping) */
;;;94       if (yMag == 1) {
000048  f1bb0f01          CMP      r11,#1
00004c  d108              BNE      |L1.96|
;;;95         if (ysize > GUI_Context.ClipRect.y1 - y0 + 1) {
00004e  4620              MOV      r0,r4
000050  f9b0100e          LDRSH    r1,[r0,#0xe]  ; GUI_Context
000054  eba1000a          SUB      r0,r1,r10
000058  1c41              ADDS     r1,r0,#1
00005a  4549              CMP      r1,r9
00005c  da00              BGE      |L1.96|
00005e  4689              MOV      r9,r1
                  |L1.96|
;;;96           ysize = GUI_Context.ClipRect.y1 - y0 + 1;
;;;97         }
;;;98       }
;;;99       /* Init variables for looping */
;;;100      xi = y = 0;
000060  2400              MOVS     r4,#0
;;;101      /* Check if we can use the cache to save some unnecessary iterations */
;;;102      if (!IsMagnified) {
;;;103        int yDiff = GUI_Context.ClipRect.y0 - y0;
;;;104        if ((_Cache.pPixelStart == pPixel) && (yDiff > _Cache.y)) {
000062  4853              LDR      r0,|L1.432|
000064  9900              LDR      r1,[sp,#0]            ;102
000066  4625              MOV      r5,r4                 ;100
000068  b979              CBNZ     r1,|L1.138|
00006a  494f              LDR      r1,|L1.424|
00006c  9b12              LDR      r3,[sp,#0x48]
00006e  f9b1200a          LDRSH    r2,[r1,#0xa]          ;103  ; GUI_Context
000072  68c1              LDR      r1,[r0,#0xc]  ; _Cache
000074  eba2020a          SUB      r2,r2,r10             ;103
000078  4299              CMP      r1,r3
00007a  d106              BNE      |L1.138|
00007c  6841              LDR      r1,[r0,#4]  ; _Cache
00007e  4291              CMP      r1,r2
000080  da03              BGE      |L1.138|
;;;105          /* Accept cache values */
;;;106          y      = _Cache.y;
000082  460d              MOV      r5,r1
;;;107          xi     = _Cache.x;
;;;108          pPixel = _Cache.pPixel;
000084  6804              LDR      r4,[r0,#0]  ; _Cache
000086  6881              LDR      r1,[r0,#8]  ; _Cache
000088  9112              STR      r1,[sp,#0x48]
                  |L1.138|
;;;109        }
;;;110      }
;;;111      /* Init values for caching */
;;;112      _Cache.pPixel = _Cache.pPixelStart = pPixelOrg;
00008a  4849              LDR      r0,|L1.432|
;;;113      _Cache.x = _Cache.y = 0;
00008c  2100              MOVS     r1,#0
00008e  60c6              STR      r6,[r0,#0xc]  ; _Cache
000090  e9c01601          STRD     r1,r6,[r0,#4]
;;;114      /* Repeat until we have reached bottom */
;;;115      for (; y < ysize; ) {
000094  6001              STR      r1,[r0,#0]  ; _Cache
000096  e07e              B        |L1.406|
                  |L1.152|
;;;116        U8 NumCompressedPixels = *pPixel++;
000098  9812              LDR      r0,[sp,#0x48]
00009a  f8107b01          LDRB     r7,[r0],#1
;;;117        if (NumCompressedPixels) {
00009e  9012              STR      r0,[sp,#0x48]
0000a0  b3df              CBZ      r7,|L1.282|
;;;118          PixelIndex = _GetPixelIndex(&pPixel);
0000a2  a812              ADD      r0,sp,#0x48
0000a4  f7fffffe          BL       _GetPixelIndex
;;;119          /* Save cache info */
;;;120          _Cache.pPixel = pPixel - 3;
0000a8  4941              LDR      r1,|L1.432|
;;;121          _Cache.x      = xi;
0000aa  9a12              LDR      r2,[sp,#0x48]
0000ac  1ed2              SUBS     r2,r2,#3
0000ae  600c              STR      r4,[r1,#0]  ; _Cache
0000b0  e9c15201          STRD     r5,r2,[r1,#4]
;;;122          _Cache.y      = y;
;;;123          LCD_ACOLORINDEX[1] = PixelIndex;
0000b4  493c              LDR      r1,|L1.424|
0000b6  8048              STRH     r0,[r1,#2]
;;;124          while (NumCompressedPixels) {
;;;125            int xi1 = xi + NumCompressedPixels;
;;;126            if (xi1 >= xsize) {
;;;127              xi1 = xsize;
;;;128            }
;;;129            NumCompressedPixels -= (xi1 - xi);
;;;130            if (PixelIndex || NoTrans) {  /* Skip transparent pixels */
0000b8  9901              LDR      r1,[sp,#4]
0000ba  4308              ORRS     r0,r0,r1
0000bc  9002              STR      r0,[sp,#8]
                  |L1.190|
0000be  19e6              ADDS     r6,r4,r7              ;125
0000c0  4640              MOV      r0,r8                 ;126
0000c2  4546              CMP      r6,r8                 ;126
0000c4  db00              BLT      |L1.200|
0000c6  4606              MOV      r6,r0                 ;127
                  |L1.200|
0000c8  1b32              SUBS     r2,r6,r4              ;129
0000ca  1ab8              SUBS     r0,r7,r2              ;129
0000cc  b2c7              UXTB     r7,r0                 ;129
0000ce  9802              LDR      r0,[sp,#8]
0000d0  b1d8              CBZ      r0,|L1.266|
;;;131              if (IsMagnified) {
0000d2  9800              LDR      r0,[sp,#0]
0000d4  2800              CMP      r0,#0
0000d6  9805              LDR      r0,[sp,#0x14]
0000d8  d00f              BEQ      |L1.250|
;;;132                xL = xMag * xi + x0;
0000da  9913              LDR      r1,[sp,#0x4c]
;;;133                yL = yMag * y + y0;
;;;134                LCD_FillRect(xL, yL, xL + xMag * (xi1 - xi) -1 , yL + yMag - 1);
0000dc  f8ddc04c          LDR      r12,[sp,#0x4c]
0000e0  fb010004          MLA      r0,r1,r4,r0           ;132
0000e4  fb0ba105          MLA      r1,r11,r5,r10         ;133
0000e8  1e44              SUBS     r4,r0,#1
0000ea  eb01030b          ADD      r3,r1,r11
0000ee  fb0c4202          MLA      r2,r12,r2,r4
0000f2  1e5b              SUBS     r3,r3,#1
0000f4  f7fffffe          BL       LCD_FillRect
0000f8  e007              B        |L1.266|
                  |L1.250|
;;;135              } else {
;;;136                LCD_DrawHLine(x0 + xi, y + y0, xi1 + x0 - 1);
0000fa  1832              ADDS     r2,r6,r0
0000fc  9805              LDR      r0,[sp,#0x14]
0000fe  eb05010a          ADD      r1,r5,r10
000102  4420              ADD      r0,r0,r4
000104  1e52              SUBS     r2,r2,#1
000106  f7fffffe          BL       LCD_DrawHLine
                  |L1.266|
;;;137              }
;;;138            }
;;;139            xi = xi1;
;;;140            if (xi1 == xsize) {
00010a  4634              MOV      r4,r6
00010c  4546              CMP      r6,r8
00010e  d101              BNE      |L1.276|
;;;141              y++;
;;;142              xi = 0;
000110  2400              MOVS     r4,#0
000112  1c6d              ADDS     r5,r5,#1
                  |L1.276|
000114  2f00              CMP      r7,#0                 ;124
000116  d1d2              BNE      |L1.190|
000118  e03d              B        |L1.406|
                  |L1.282|
00011a  e7ff              B        |L1.284|
                  |L1.284|
;;;143            }
;;;144          }
;;;145        } else {
;;;146          U8 NumPixels = *pPixel++;
00011c  f8106b01          LDRB     r6,[r0],#1
000120  9012              STR      r0,[sp,#0x48]
                  |L1.290|
;;;147          do {
;;;148            PixelIndex = _GetPixelIndex(&pPixel);
000122  a812              ADD      r0,sp,#0x48
000124  f7fffffe          BL       _GetPixelIndex
;;;149            if (PixelIndex || NoTrans) {  /* Skip transparent pixels */
000128  9901              LDR      r1,[sp,#4]
00012a  4301              ORRS     r1,r1,r0
00012c  d028              BEQ      |L1.384|
;;;150              int x = x0 + xi;
00012e  9905              LDR      r1,[sp,#0x14]
000130  190b              ADDS     r3,r1,r4
;;;151              if (IsMagnified) {
000132  9900              LDR      r1,[sp,#0]
000134  b181              CBZ      r1,|L1.344|
;;;152                LCD_SetColorIndex(PixelIndex);
000136  f7fffffe          BL       LCD_SetColorIndex
;;;153                xL = xMag * xi + x0;
00013a  9913              LDR      r1,[sp,#0x4c]
00013c  9805              LDR      r0,[sp,#0x14]
;;;154                yL = yMag * y + y0;
;;;155                LCD_FillRect(xL, yL, xL + xMag - 1 , yL + yMag - 1);
00013e  9a13              LDR      r2,[sp,#0x4c]
000140  fb010004          MLA      r0,r1,r4,r0           ;153
000144  fb0ba105          MLA      r1,r11,r5,r10         ;154
000148  eb01030b          ADD      r3,r1,r11
00014c  4402              ADD      r2,r2,r0
00014e  1e52              SUBS     r2,r2,#1
000150  1e5b              SUBS     r3,r3,#1
000152  f7fffffe          BL       LCD_FillRect
000156  e013              B        |L1.384|
                  |L1.344|
;;;156              } else {
;;;157                if ((y + y0) >= GUI_Context.ClipRect.y0) {
000158  4a13              LDR      r2,|L1.424|
00015a  eb05010a          ADD      r1,r5,r10
00015e  f9b2700a          LDRSH    r7,[r2,#0xa]  ; GUI_Context
000162  42b9              CMP      r1,r7
000164  db0c              BLT      |L1.384|
;;;158                  if (x >= GUI_Context.ClipRect.x0) {
000166  f9b27008          LDRSH    r7,[r2,#8]  ; GUI_Context
00016a  429f              CMP      r7,r3
00016c  dc08              BGT      |L1.384|
;;;159                    if (x <= GUI_Context.ClipRect.x1) {
00016e  f9b2700c          LDRSH    r7,[r2,#0xc]  ; GUI_Context
000172  429f              CMP      r7,r3
000174  db04              BLT      |L1.384|
;;;160                      LCDDEV_L0_SetPixelIndex(x, y + y0, PixelIndex);
000176  6cd2              LDR      r2,[r2,#0x4c]  ; GUI_Context
000178  6a57              LDR      r7,[r2,#0x24]
00017a  4602              MOV      r2,r0
00017c  4618              MOV      r0,r3
00017e  47b8              BLX      r7
                  |L1.384|
000180  1c64              ADDS     r4,r4,#1
;;;161                    }
;;;162                  }
;;;163                }
;;;164              }
;;;165            }
;;;166            if (++xi >= xsize) {
000182  4544              CMP      r4,r8
000184  db03              BLT      |L1.398|
;;;167              y++;
;;;168              xi = 0;
000186  2400              MOVS     r4,#0
000188  1c6d              ADDS     r5,r5,#1
;;;169              if (y >= ysize) {
00018a  454d              CMP      r5,r9
00018c  da03              BGE      |L1.406|
                  |L1.398|
00018e  1e76              SUBS     r6,r6,#1
;;;170                break;
;;;171              }
;;;172            }
;;;173          } while (--NumPixels);
000190  f01606ff          ANDS     r6,r6,#0xff
000194  d1c5              BNE      |L1.290|
                  |L1.406|
000196  454d              CMP      r5,r9                 ;115
000198  f6ffaf7e          BLT      |L1.152|
;;;174        }
;;;175      }
;;;176      LCD_ACOLORINDEX[1] = OldColorIndex;
00019c  4802              LDR      r0,|L1.424|
00019e  9903              LDR      r1,[sp,#0xc]
0001a0  8041              STRH     r1,[r0,#2]
;;;177    }
0001a2  b009              ADD      sp,sp,#0x24
0001a4  e8bd8ff0          POP      {r4-r11,pc}
;;;178    
                          ENDP

                  |L1.424|
                          DCD      GUI_Context
                  |L1.428|
                          DCD      ||.data||
                  |L1.432|
                          DCD      ||.bss||

                          AREA ||i._DrawBitmap_RLE16||, CODE, READONLY, ALIGN=2

                  _DrawBitmap_RLE16 PROC
;;;182    */
;;;183    static void _DrawBitmap_RLE16(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
000000  b5fe              PUSH     {r1-r7,lr}
;;;184      GUI_USE_PARA(pLogPal);
;;;185      _BitmapSwapRB = 0;
000002  f8dfc018          LDR      r12,|L2.28|
000006  e9dd560a          LDRD     r5,r6,[sp,#0x28]      ;183
00000a  2700              MOVS     r7,#0
00000c  9c08              LDR      r4,[sp,#0x20]
00000e  f88c7001          STRB     r7,[r12,#1]
000012  e88d0070          STM      sp,{r4-r6}
;;;186      _DrawBitmap_RLE(x0, y0, xsize, ysize, pPixel, xMag, yMag);
000016  f7fffffe          BL       _DrawBitmap_RLE
;;;187    }
00001a  bdfe              POP      {r1-r7,pc}
;;;188    
                          ENDP

                  |L2.28|
                          DCD      ||.data||

                          AREA ||i._DrawBitmap_RLEM16||, CODE, READONLY, ALIGN=2

                  _DrawBitmap_RLEM16 PROC
;;;192    */
;;;193    static void _DrawBitmap_RLEM16(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
000000  b5fe              PUSH     {r1-r7,lr}
;;;194      GUI_USE_PARA(pLogPal);
;;;195      _BitmapSwapRB = 1;
000002  f8dfc018          LDR      r12,|L3.28|
000006  e9dd560a          LDRD     r5,r6,[sp,#0x28]      ;193
00000a  2701              MOVS     r7,#1
00000c  9c08              LDR      r4,[sp,#0x20]
00000e  f88c7001          STRB     r7,[r12,#1]
000012  e88d0070          STM      sp,{r4-r6}
;;;196      _DrawBitmap_RLE(x0, y0, xsize, ysize, pPixel, xMag, yMag);
000016  f7fffffe          BL       _DrawBitmap_RLE
;;;197    }
00001a  bdfe              POP      {r1-r7,pc}
;;;198    
                          ENDP

                  |L3.28|
                          DCD      ||.data||

                          AREA ||i._GetPixelIndex||, CODE, READONLY, ALIGN=2

                  _GetPixelIndex PROC
;;;66     */
;;;67     static LCD_PIXELINDEX _GetPixelIndex(const U8 GUI_UNI_PTR ** ppPixel) {
000000  b510              PUSH     {r4,lr}
000002  6801              LDR      r1,[r0,#0]
000004  4602              MOV      r2,r0
000006  f8110b01          LDRB     r0,[r1],#1
00000a  f8113b01          LDRB     r3,[r1],#1
;;;68       U16 Data = _Read16(ppPixel);
;;;69       if ((_DisplayMode == 565) && (_DisplaySwapRB == _BitmapSwapRB)) {
00000e  6011              STR      r1,[r2,#0]
000010  4a0b              LDR      r2,|L4.64|
000012  ea402003          ORR      r0,r0,r3,LSL #8
000016  4611              MOV      r1,r2
000018  6853              LDR      r3,[r2,#4]  ; _DisplayMode
00001a  7849              LDRB     r1,[r1,#1]
00001c  f5a37400          SUB      r4,r3,#0x200
000020  3c35              SUBS     r4,r4,#0x35
000022  d102              BNE      |L4.42|
000024  7812              LDRB     r2,[r2,#0]  ; _DisplaySwapRB
000026  428a              CMP      r2,r1
000028  d008              BEQ      |L4.60|
                  |L4.42|
;;;70         return (LCD_PIXELINDEX)Data;
;;;71       }
;;;72       if (_BitmapSwapRB) {
00002a  b111              CBZ      r1,|L4.50|
;;;73         return LCD_Color2Index(LCD_Index2Color_M565(Data));
00002c  f7fffffe          BL       LCD_Index2Color_M565
000030  e001              B        |L4.54|
                  |L4.50|
;;;74       }
;;;75       return LCD_Color2Index(LCD_Index2Color_565(Data));
000032  f7fffffe          BL       LCD_Index2Color_565
                  |L4.54|
000036  f7fffffe          BL       LCD_Color2Index
00003a  b280              UXTH     r0,r0
                  |L4.60|
;;;76     }
00003c  bd10              POP      {r4,pc}
;;;77     
                          ENDP

00003e  0000              DCW      0x0000
                  |L4.64|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _Cache
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  GUI_BitmapMethodsRLE16
                          DCD      _DrawBitmap_RLE16
                          DCD      0x00000000

                          AREA ||area_number.9||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.constdata||
                  GUI_BitmapMethodsRLEM16
                          DCD      _DrawBitmap_RLEM16
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=2

                  _DisplaySwapRB
000000  00                DCB      0x00
                  _BitmapSwapRB
000001  000000            DCB      0x00,0x00,0x00
                  _DisplayMode
                          DCD      0x00000000
