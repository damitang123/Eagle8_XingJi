; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\framewin_setresizeable.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\framewin_setresizeable.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\Widget\FRAMEWIN_SetResizeable.c]
                          THUMB

                          AREA ||i.FRAMEWIN_SetResizeable||, CODE, READONLY, ALIGN=2

                  FRAMEWIN_SetResizeable PROC
;;;525    */
;;;526    void FRAMEWIN_SetResizeable(FRAMEWIN_Handle hObj, int State) {
000000  b510              PUSH     {r4,lr}
000002  460c              MOV      r4,r1
000004  2800              CMP      r0,#0
000006  d011              BEQ      |L1.44|
;;;527      if (hObj) {
;;;528        FRAMEWIN_Obj* pObj;
;;;529        WM_LOCK();
;;;530        pObj = FRAMEWIN_H2P(hObj);
000008  f7fffffe          BL       GUI_ALLOC_h2p
;;;531        if (pObj) {
00000c  2800              CMP      r0,#0
00000e  d00d              BEQ      |L1.44|
;;;532          if (State) {
000010  b134              CBZ      r4,|L1.32|
;;;533            GUI_HOOK_Add(&pObj->pFirstHook, &_HOOK_Resizeable, &_HOOKFUNC_Resizeable);
000012  e8bd4010          POP      {r4,lr}
000016  4a06              LDR      r2,|L1.48|
000018  4906              LDR      r1,|L1.52|
00001a  3064              ADDS     r0,r0,#0x64
00001c  f7ffbffe          B.W      GUI_HOOK_Add
                  |L1.32|
;;;534          } else {
;;;535            GUI_HOOK_Remove(&pObj->pFirstHook, &_HOOK_Resizeable);
000020  e8bd4010          POP      {r4,lr}
000024  4903              LDR      r1,|L1.52|
000026  3064              ADDS     r0,r0,#0x64
000028  f7ffbffe          B.W      GUI_HOOK_Remove
                  |L1.44|
;;;536          }
;;;537        }
;;;538        WM_UNLOCK();
;;;539      }
;;;540    }
00002c  bd10              POP      {r4,pc}
;;;541    
                          ENDP

00002e  0000              DCW      0x0000
                  |L1.48|
                          DCD      _HOOKFUNC_Resizeable
                  |L1.52|
                          DCD      ||.data||+0x10

                          AREA ||i._ChangeWindowPosSize||, CODE, READONLY, ALIGN=2

                  _ChangeWindowPosSize PROC
;;;307    */
;;;308    static void _ChangeWindowPosSize(FRAMEWIN_Handle hWin, int* px, int* py) {
000000  e92d47fc          PUSH     {r2-r10,lr}
000004  460f              MOV      r7,r1
;;;309      int dx = 0, dy = 0;
000006  2500              MOVS     r5,#0
000008  4616              MOV      r6,r2                 ;308
00000a  4681              MOV      r9,r0                 ;308
00000c  462c              MOV      r4,r5
;;;310      GUI_RECT Rect;
;;;311      WM_GetClientRectEx(hWin, &Rect);
00000e  4669              MOV      r1,sp
000010  f7fffffe          BL       WM_GetClientRectEx
;;;312      /* Calculate new size of window */
;;;313      if (_CaptureFlags & FRAMEWIN_RESIZE_X) {
000014  f8df808c          LDR      r8,|L2.164|
000018  f8d80008          LDR      r0,[r8,#8]  ; _CaptureFlags
00001c  07c1              LSLS     r1,r0,#31
00001e  d007              BEQ      |L2.48|
;;;314        dx = (_CaptureFlags & FRAMEWIN_REPOS_X) ? (_CaptureX - *px) : (*px - _CaptureX);
000020  0741              LSLS     r1,r0,#29
000022  6839              LDR      r1,[r7,#0]
000024  f8d82000          LDR      r2,[r8,#0]  ; _CaptureX
000028  d501              BPL      |L2.46|
00002a  1a55              SUBS     r5,r2,r1
00002c  e000              B        |L2.48|
                  |L2.46|
00002e  1a8d              SUBS     r5,r1,r2
                  |L2.48|
;;;315      }
;;;316      if (_CaptureFlags & FRAMEWIN_RESIZE_Y) {
000030  0781              LSLS     r1,r0,#30
000032  d507              BPL      |L2.68|
;;;317        dy = (_CaptureFlags & FRAMEWIN_REPOS_Y) ? (_CaptureY - *py) : (*py - _CaptureY);
000034  0701              LSLS     r1,r0,#28
000036  6831              LDR      r1,[r6,#0]
000038  f8d82004          LDR      r2,[r8,#4]  ; _CaptureY
00003c  d501              BPL      |L2.66|
00003e  1a54              SUBS     r4,r2,r1
000040  e000              B        |L2.68|
                  |L2.66|
000042  1a8c              SUBS     r4,r1,r2
                  |L2.68|
;;;318      }
;;;319      /* Check the minimal size of window */
;;;320      if ((Rect.x1 + dx + 1) < FRAMEWIN_MINSIZE_X) {
000044  f9bd1004          LDRSH    r1,[sp,#4]
000048  1c6a              ADDS     r2,r5,#1
00004a  440a              ADD      r2,r2,r1
00004c  2a14              CMP      r2,#0x14
00004e  da05              BGE      |L2.92|
;;;321        dx = FRAMEWIN_MINSIZE_X - Rect.x1 - 1;
000050  f1c10513          RSB      r5,r1,#0x13
;;;322        *px = _CaptureX + dx;
000054  f8d81000          LDR      r1,[r8,#0]  ; _CaptureX
000058  4429              ADD      r1,r1,r5
00005a  6039              STR      r1,[r7,#0]
                  |L2.92|
;;;323      }
;;;324      if ((Rect.y1 + dy + 1) < FRAMEWIN_MINSIZE_Y) {
00005c  f9bd1006          LDRSH    r1,[sp,#6]
000060  1c62              ADDS     r2,r4,#1
000062  440a              ADD      r2,r2,r1
000064  2a14              CMP      r2,#0x14
000066  da05              BGE      |L2.116|
;;;325        dy = FRAMEWIN_MINSIZE_Y - Rect.y1 - 1;
000068  f1c10413          RSB      r4,r1,#0x13
;;;326        *py = _CaptureY + dy;
00006c  f8d81004          LDR      r1,[r8,#4]  ; _CaptureY
000070  4421              ADD      r1,r1,r4
000072  6031              STR      r1,[r6,#0]
                  |L2.116|
;;;327      }
;;;328      /* Set new window position */
;;;329      if (_CaptureFlags & FRAMEWIN_REPOS_X) {
000074  0740              LSLS     r0,r0,#29
000076  d504              BPL      |L2.130|
;;;330        WM_MoveWindow(hWin, -dx, 0);
000078  2200              MOVS     r2,#0
00007a  4269              RSBS     r1,r5,#0
00007c  4648              MOV      r0,r9
00007e  f7fffffe          BL       WM_MoveWindow
                  |L2.130|
;;;331      }
;;;332      if (_CaptureFlags & FRAMEWIN_REPOS_Y) {
000082  f8980008          LDRB     r0,[r8,#8]  ; _CaptureFlags
000086  0700              LSLS     r0,r0,#28
000088  d504              BPL      |L2.148|
;;;333        WM_MoveWindow(hWin, 0, -dy);
00008a  4262              RSBS     r2,r4,#0
00008c  2100              MOVS     r1,#0
00008e  4648              MOV      r0,r9
000090  f7fffffe          BL       WM_MoveWindow
                  |L2.148|
;;;334      }
;;;335      /* Set new window size */
;;;336      WM_ResizeWindow(hWin, dx, dy);
000094  4622              MOV      r2,r4
000096  4629              MOV      r1,r5
000098  4648              MOV      r0,r9
00009a  f7fffffe          BL       WM_ResizeWindow
;;;337    }
00009e  e8bd87fc          POP      {r2-r10,pc}
;;;338    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L2.164|
                          DCD      ||.data||

                          AREA ||i._CheckBorderX||, CODE, READONLY, ALIGN=1

                  _CheckBorderX PROC
;;;342    */
;;;343    static int _CheckBorderX(int x, int x1, int Border) {
000000  4603              MOV      r3,r0
;;;344      int Mode = 0;
000002  2000              MOVS     r0,#0
;;;345      if (x > (x1 - Border)) {
000004  1a89              SUBS     r1,r1,r2
000006  4299              CMP      r1,r3
000008  da01              BGE      |L3.14|
;;;346        Mode = FRAMEWIN_RESIZE_X;
00000a  2001              MOVS     r0,#1
                  |L3.12|
;;;347      } else if (x < (Border)) {
;;;348        Mode = FRAMEWIN_RESIZE_X | FRAMEWIN_REPOS_X;
;;;349      }
;;;350      return Mode;
;;;351    }
00000c  4770              BX       lr
                  |L3.14|
00000e  4293              CMP      r3,r2                 ;347
000010  dafc              BGE      |L3.12|
000012  2005              MOVS     r0,#5                 ;348
000014  4770              BX       lr
;;;352    
                          ENDP


                          AREA ||i._CheckBorderY||, CODE, READONLY, ALIGN=1

                  _CheckBorderY PROC
;;;356    */
;;;357    static int _CheckBorderY(int y, int y1, int Border) {
000000  4603              MOV      r3,r0
;;;358      int Mode = 0;
000002  2000              MOVS     r0,#0
;;;359      if (y > (y1 - Border)) {
000004  1a89              SUBS     r1,r1,r2
000006  4299              CMP      r1,r3
000008  da01              BGE      |L4.14|
;;;360        Mode = FRAMEWIN_RESIZE_Y;
00000a  2002              MOVS     r0,#2
                  |L4.12|
;;;361      } else if (y < (Border)) {
;;;362        Mode = FRAMEWIN_RESIZE_Y | FRAMEWIN_REPOS_Y;
;;;363      }
;;;364      return Mode;
;;;365    }
00000c  4770              BX       lr
                  |L4.14|
00000e  4293              CMP      r3,r2                 ;361
000010  dafc              BGE      |L4.12|
000012  200a              MOVS     r0,#0xa               ;362
000014  4770              BX       lr
;;;366    
                          ENDP


                          AREA ||i._CheckReactBorder||, CODE, READONLY, ALIGN=1

                  _CheckReactBorder PROC
;;;370    */
;;;371    static int _CheckReactBorder(FRAMEWIN_Handle hWin, int x, int y) {
000000  e92d41fc          PUSH     {r2-r8,lr}
000004  460f              MOV      r7,r1
000006  4616              MOV      r6,r2
;;;372      int Mode = 0;
000008  2400              MOVS     r4,#0
;;;373      GUI_RECT r;
;;;374      WM_GetClientRectEx(hWin, &r);
00000a  4669              MOV      r1,sp
00000c  f7fffffe          BL       WM_GetClientRectEx
;;;375      if ((x >= 0) && (y >= 0) && (x <= r.x1) && (y <= r.y1)) {
000010  2f00              CMP      r7,#0
000012  db25              BLT      |L5.96|
000014  2e00              CMP      r6,#0
000016  db23              BLT      |L5.96|
000018  f9bd1004          LDRSH    r1,[sp,#4]
00001c  42b9              CMP      r1,r7
00001e  db1f              BLT      |L5.96|
000020  f9bd0006          LDRSH    r0,[sp,#6]
000024  42b0              CMP      r0,r6
000026  db1b              BLT      |L5.96|
;;;376        Mode |=     _CheckBorderX(x, r.x1, FRAMEWIN_REACT_BORDER);
000028  2203              MOVS     r2,#3
00002a  4638              MOV      r0,r7
00002c  f7fffffe          BL       _CheckBorderX
;;;377        if (Mode) {
;;;378          Mode |=   _CheckBorderY(y, r.y1, FRAMEWIN_REACT_BORDER * 4);
;;;379        } else {
;;;380          Mode |=   _CheckBorderY(y, r.y1, FRAMEWIN_REACT_BORDER);
000030  f9bd1006          LDRSH    r1,[sp,#6]
000034  0005              MOVS     r5,r0                 ;376
000036  d005              BEQ      |L5.68|
000038  220c              MOVS     r2,#0xc               ;378
00003a  4630              MOV      r0,r6                 ;378
00003c  f7fffffe          BL       _CheckBorderY
000040  4328              ORRS     r0,r0,r5              ;378
000042  e00c              B        |L5.94|
                  |L5.68|
000044  2203              MOVS     r2,#3
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       _CheckBorderY
00004c  0004              MOVS     r4,r0
;;;381          if (Mode) {
00004e  d007              BEQ      |L5.96|
;;;382            Mode |= _CheckBorderX(x, r.x1, FRAMEWIN_REACT_BORDER * 4);
000050  f9bd1004          LDRSH    r1,[sp,#4]
000054  220c              MOVS     r2,#0xc
000056  4638              MOV      r0,r7
000058  f7fffffe          BL       _CheckBorderX
00005c  4320              ORRS     r0,r0,r4
                  |L5.94|
00005e  4604              MOV      r4,r0
                  |L5.96|
;;;383          }
;;;384        }
;;;385      }
;;;386      return Mode;
000060  4620              MOV      r0,r4
;;;387    }
000062  e8bd81fc          POP      {r2-r8,pc}
;;;388    
                          ENDP


                          AREA ||i._HOOKFUNC_Resizeable||, CODE, READONLY, ALIGN=2

                  _HOOKFUNC_Resizeable PROC
;;;490    */
;;;491    static int _HOOKFUNC_Resizeable(WM_MESSAGE* pMsg) {
000000  b570              PUSH     {r4-r6,lr}
;;;492      WM_HWIN hWin = pMsg->hWin;
000002  f9b06004          LDRSH    r6,[r0,#4]
000006  4604              MOV      r4,r0                 ;491
;;;493      if (WM_HasCaptured(hWin) && (_CaptureFlags == 0)) {
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       WM_HasCaptured
00000e  4d10              LDR      r5,|L6.80|
000010  b110              CBZ      r0,|L6.24|
000012  68a8              LDR      r0,[r5,#8]  ; _CaptureFlags
000014  2800              CMP      r0,#0
000016  d00d              BEQ      |L6.52|
                  |L6.24|
;;;494        return 0;
;;;495      }
;;;496      if (FRAMEWIN_IsMinimized(hWin) || FRAMEWIN_IsMaximized(hWin)) {
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       FRAMEWIN_IsMinimized
00001e  b940              CBNZ     r0,|L6.50|
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       FRAMEWIN_IsMaximized
000026  b920              CBNZ     r0,|L6.50|
;;;497        return 0;
;;;498      }
;;;499      switch(pMsg->MsgId) {
000028  6820              LDR      r0,[r4,#0]
00002a  280c              CMP      r0,#0xc
00002c  d003              BEQ      |L6.54|
00002e  2818              CMP      r0,#0x18
000030  d007              BEQ      |L6.66|
                  |L6.50|
;;;500      case WM_TOUCH:
;;;501        return _OnTouch(hWin, pMsg);
;;;502    #if (GUI_SUPPORT_MOUSE & GUI_SUPPORT_CURSOR)
;;;503      case WM_MOUSEOVER:
;;;504        return _OnMouseOver(hWin, pMsg);
;;;505    #endif
;;;506      case WM_CAPTURE_RELEASED:
;;;507      #if GUI_SUPPORT_CURSOR
;;;508        _SetResizeCursor(0);
;;;509      #endif
;;;510        _CaptureFlags = 0;
;;;511        return 1;
;;;512      }
;;;513      return 0;
000032  2000              MOVS     r0,#0
                  |L6.52|
;;;514    }
000034  bd70              POP      {r4-r6,pc}
                  |L6.54|
000036  4621              MOV      r1,r4                 ;501
000038  4630              MOV      r0,r6                 ;501
00003a  e8bd4070          POP      {r4-r6,lr}            ;501
00003e  f7ffbffe          B.W      _OnTouch
                  |L6.66|
000042  2000              MOVS     r0,#0                 ;508
000044  f7fffffe          BL       _SetResizeCursor
000048  2000              MOVS     r0,#0                 ;510
00004a  60a8              STR      r0,[r5,#8]            ;511  ; _CaptureFlags
00004c  2001              MOVS     r0,#1                 ;511
00004e  bd70              POP      {r4-r6,pc}
;;;515    
                          ENDP

                  |L6.80|
                          DCD      ||.data||

                          AREA ||i._OnTouch||, CODE, READONLY, ALIGN=2

                  _OnTouch PROC
;;;392    */
;;;393    static int _OnTouch(FRAMEWIN_Handle hWin, WM_MESSAGE* pMsg) {
000000  b57c              PUSH     {r2-r6,lr}
000002  688c              LDR      r4,[r1,#8]
000004  4606              MOV      r6,r0
000006  b384              CBZ      r4,|L7.106|
;;;394      const GUI_PID_STATE* pState = (const GUI_PID_STATE*)pMsg->Data.p;
;;;395      if (pState) {  /* Something happened in our area (pressed or released) */
;;;396        int x, y, Mode;
;;;397        x    = pState->x;
000008  6820              LDR      r0,[r4,#0]
;;;398        y    = pState->y;
00000a  9000              STR      r0,[sp,#0]
00000c  6862              LDR      r2,[r4,#4]
;;;399        Mode = _CheckReactBorder(hWin, x, y);
00000e  4601              MOV      r1,r0
000010  4630              MOV      r0,r6
000012  9201              STR      r2,[sp,#4]
000014  f7fffffe          BL       _CheckReactBorder
000018  4605              MOV      r5,r0
;;;400        if (pState->Pressed == 1) {
00001a  7a20              LDRB     r0,[r4,#8]
;;;401          if (_CaptureFlags & FRAMEWIN_RESIZE) {
00001c  4c14              LDR      r4,|L7.112|
00001e  2801              CMP      r0,#1                 ;400
000020  d00b              BEQ      |L7.58|
;;;402            _ChangeWindowPosSize(hWin, &x, &y);
;;;403            _SetCapture(hWin, x, y, 0);
;;;404            return 1;
;;;405          } else if (Mode) {
;;;406            WM_SetFocus(hWin);
;;;407            WM_BringToTop(hWin);
;;;408            _SetCapture(hWin, x, y, Mode);
;;;409            return 1;
;;;410          }
;;;411          #if (GUI_SUPPORT_MOUSE & GUI_SUPPORT_CURSOR)
;;;412          else if (_CaptureFlags) {
;;;413            WM_ReleaseCapture();
;;;414            return 1;
;;;415          }
;;;416          #endif
;;;417        } else if (WM_HasCaptured(hWin)) {
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       WM_HasCaptured
000028  b1f8              CBZ      r0,|L7.106|
;;;418          _CaptureFlags &= ~(FRAMEWIN_RESIZE);
00002a  68a0              LDR      r0,[r4,#8]  ; _CaptureFlags
00002c  f020000f          BIC      r0,r0,#0xf
;;;419          #if (GUI_SUPPORT_MOUSE & GUI_SUPPORT_CURSOR)
;;;420            if (!Mode)
;;;421          #endif
;;;422          {
;;;423            WM_ReleaseCapture();
000030  60a0              STR      r0,[r4,#8]  ; _CaptureFlags
000032  f7fffffe          BL       WM_ReleaseCapture
                  |L7.54|
;;;424          }
;;;425          return 1;
000036  2001              MOVS     r0,#1
;;;426        }
;;;427      }
;;;428      return 0;
;;;429    }
000038  bd7c              POP      {r2-r6,pc}
                  |L7.58|
00003a  7a20              LDRB     r0,[r4,#8]            ;401  ; _CaptureFlags
00003c  0700              LSLS     r0,r0,#28             ;401
00003e  d006              BEQ      |L7.78|
000040  aa01              ADD      r2,sp,#4              ;402
000042  4669              MOV      r1,sp                 ;402
000044  4630              MOV      r0,r6                 ;402
000046  f7fffffe          BL       _ChangeWindowPosSize
00004a  2300              MOVS     r3,#0                 ;403
00004c  e007              B        |L7.94|
                  |L7.78|
00004e  b165              CBZ      r5,|L7.106|
000050  4630              MOV      r0,r6                 ;406
000052  f7fffffe          BL       WM_SetFocus
000056  4630              MOV      r0,r6                 ;407
000058  f7fffffe          BL       WM_BringToTop
00005c  462b              MOV      r3,r5                 ;408
                  |L7.94|
00005e  e9dd1200          LDRD     r1,r2,[sp,#0]         ;403
000062  4630              MOV      r0,r6                 ;403
000064  f7fffffe          BL       _SetCapture
000068  e7e5              B        |L7.54|
                  |L7.106|
00006a  e7ff              B        |L7.108|
                  |L7.108|
00006c  2000              MOVS     r0,#0                 ;428
00006e  bd7c              POP      {r2-r6,pc}
;;;430    
                          ENDP

                  |L7.112|
                          DCD      ||.data||

                          AREA ||i._SetCapture||, CODE, READONLY, ALIGN=2

                  _SetCapture PROC
;;;282    */
;;;283    static void _SetCapture(FRAMEWIN_Handle hWin, int x, int y, int Mode) {
000000  b570              PUSH     {r4-r6,lr}
;;;284      if ((_CaptureFlags & FRAMEWIN_REPOS_X) == 0) {
000002  4d0f              LDR      r5,|L8.64|
000004  4606              MOV      r6,r0                 ;283
000006  461c              MOV      r4,r3                 ;283
000008  68a8              LDR      r0,[r5,#8]  ; _CaptureFlags
00000a  0743              LSLS     r3,r0,#29
00000c  d400              BMI      |L8.16|
;;;285        _CaptureX = x;
00000e  6029              STR      r1,[r5,#0]  ; _CaptureX
                  |L8.16|
;;;286      }
;;;287      if ((_CaptureFlags & FRAMEWIN_REPOS_Y) == 0) {
000010  0700              LSLS     r0,r0,#28
000012  d400              BMI      |L8.22|
;;;288        _CaptureY = y;
000014  606a              STR      r2,[r5,#4]  ; _CaptureY
                  |L8.22|
;;;289      }
;;;290      if (Mode) {
000016  2c00              CMP      r4,#0
000018  d010              BEQ      |L8.60|
;;;291        if (WM_HasCaptured(hWin) == 0) {
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       WM_HasCaptured
000020  b918              CBNZ     r0,|L8.42|
;;;292          WM_SetCapture(hWin, 0);
000022  2100              MOVS     r1,#0
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       WM_SetCapture
                  |L8.42|
;;;293        }
;;;294      #if GUI_SUPPORT_CURSOR
;;;295        _SetResizeCursor(Mode);
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       _SetResizeCursor
;;;296      #endif
;;;297        if (Mode & FRAMEWIN_MOUSEOVER) {
000030  06e0              LSLS     r0,r4,#27
000032  d500              BPL      |L8.54|
;;;298          Mode = 0;
000034  2400              MOVS     r4,#0
                  |L8.54|
;;;299        }
;;;300        _CaptureFlags = (Mode | FRAMEWIN_MOUSEOVER);
000036  f0440010          ORR      r0,r4,#0x10
00003a  60a8              STR      r0,[r5,#8]  ; _CaptureFlags
                  |L8.60|
;;;301      }
;;;302    }
00003c  bd70              POP      {r4-r6,pc}
;;;303    
                          ENDP

00003e  0000              DCW      0x0000
                  |L8.64|
                          DCD      ||.data||

                          AREA ||i._SetResizeCursor||, CODE, READONLY, ALIGN=2

                  _SetResizeCursor PROC
;;;247    #if GUI_SUPPORT_CURSOR
;;;248    static void _SetResizeCursor(int Mode) {
000000  b510              PUSH     {r4,lr}
;;;249      const GUI_CURSOR GUI_UNI_PTR * pNewCursor = NULL;
;;;250      if (Mode) {
;;;251        int Direction;
;;;252        Direction = Mode & (FRAMEWIN_RESIZE_X | FRAMEWIN_RESIZE_Y);
;;;253        if (Direction == FRAMEWIN_RESIZE_X) {
;;;254          pNewCursor = &_ResizeCursorH;
;;;255        } else if (Direction == FRAMEWIN_RESIZE_Y) {
;;;256          pNewCursor = &_ResizeCursorV;
;;;257        } else {
;;;258          Direction = Mode & (FRAMEWIN_REPOS_X | FRAMEWIN_REPOS_Y);
;;;259          if ((Direction == (FRAMEWIN_REPOS_X | FRAMEWIN_REPOS_Y)) || !Direction) {
;;;260            pNewCursor = &_ResizeCursorDD;
;;;261          } else {
;;;262            pNewCursor = &_ResizeCursorDU;
;;;263          }
;;;264        }
;;;265      }
;;;266      if (pNewCursor) {
;;;267        const GUI_CURSOR GUI_UNI_PTR * pOldCursor;
;;;268        pOldCursor = GUI_CURSOR_Select(pNewCursor);
;;;269        if (_pOldCursor == NULL) {
000002  4c13              LDR      r4,|L9.80|
000004  b1e0              CBZ      r0,|L9.64|
000006  f0000103          AND      r1,r0,#3              ;252
00000a  2901              CMP      r1,#1                 ;253
00000c  d00f              BEQ      |L9.46|
00000e  2902              CMP      r1,#2                 ;255
000010  d010              BEQ      |L9.52|
000012  f000000c          AND      r0,r0,#0xc            ;258
000016  280c              CMP      r0,#0xc               ;259
000018  d00f              BEQ      |L9.58|
00001a  b170              CBZ      r0,|L9.58|
00001c  480d              LDR      r0,|L9.84|
                  |L9.30|
00001e  b178              CBZ      r0,|L9.64|
000020  f7fffffe          BL       GUI_CURSOR_Select
000024  68e1              LDR      r1,[r4,#0xc]  ; _pOldCursor
000026  2900              CMP      r1,#0
000028  d100              BNE      |L9.44|
                  |L9.42|
;;;270          _pOldCursor = pOldCursor;
00002a  60e0              STR      r0,[r4,#0xc]  ; _pOldCursor
                  |L9.44|
;;;271        }
;;;272      } else if (_pOldCursor) {
;;;273        GUI_CURSOR_Select(_pOldCursor);
;;;274        _pOldCursor = NULL;
;;;275      }
;;;276    }
00002c  bd10              POP      {r4,pc}
                  |L9.46|
00002e  4809              LDR      r0,|L9.84|
000030  3824              SUBS     r0,r0,#0x24           ;254
000032  e7f4              B        |L9.30|
                  |L9.52|
000034  4807              LDR      r0,|L9.84|
000036  3818              SUBS     r0,r0,#0x18           ;256
000038  e7f1              B        |L9.30|
                  |L9.58|
00003a  4806              LDR      r0,|L9.84|
00003c  380c              SUBS     r0,r0,#0xc            ;260
00003e  e7ee              B        |L9.30|
                  |L9.64|
000040  68e0              LDR      r0,[r4,#0xc]          ;272  ; _pOldCursor
000042  2800              CMP      r0,#0                 ;272
000044  d0f2              BEQ      |L9.44|
000046  f7fffffe          BL       GUI_CURSOR_Select
00004a  2000              MOVS     r0,#0                 ;274
00004c  e7ed              B        |L9.42|
;;;277    #endif
                          ENDP

00004e  0000              DCW      0x0000
                  |L9.80|
                          DCD      ||.data||
                  |L9.84|
                          DCD      ||area_number.16||+0x24

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _ColorsCursor
                          DCD      0x000000ff
                          DCD      0x00000000
                          DCD      0x00ffffff

                          AREA ||area_number.13||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.constdata||
                  _PalCursor
                          DCD      0x00000003
000004  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      _ColorsCursor

                          AREA ||area_number.14||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.14||, ||.constdata||
                  _acResizeCursorH
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  00000000          DCB      0x00,0x00,0x00,0x00
000010  00000000          DCB      0x00,0x00,0x00,0x00
000014  00400040          DCB      0x00,0x40,0x00,0x40
000018  00014000          DCB      0x00,0x01,0x40,0x00
00001c  50000640          DCB      0x50,0x00,0x06,0x40
000020  0064001a          DCB      0x00,0x64,0x00,0x1a
000024  55556900          DCB      0x55,0x55,0x69,0x00
000028  6aaaaaaa          DCB      0x6a,0xaa,0xaa,0xaa
00002c  401a5555          DCB      0x40,0x1a,0x55,0x55
000030  69000640          DCB      0x69,0x00,0x06,0x40
000034  00640001          DCB      0x00,0x64,0x00,0x01
000038  40005000          DCB      0x40,0x00,0x50,0x00
00003c  00400040          DCB      0x00,0x40,0x00,0x40
000040  00000000          DCB      0x00,0x00,0x00,0x00
000044  00000000          DCB      0x00,0x00,0x00,0x00
000048  00000000          DCB      0x00,0x00,0x00,0x00
00004c  00000000          DCB      0x00,0x00,0x00,0x00
000050  00000000          DCB      0x00,0x00,0x00,0x00
000054  00                DCB      0x00

                          AREA ||area_number.15||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.constdata||
                  _bmResizeCursorH
000000  00110011          DCW      0x0011,0x0011
000004  00050002          DCW      0x0005,0x0002
                          DCD      _acResizeCursorH
                          DCD      _PalCursor
                          DCD      0x00000000

                          AREA ||area_number.16||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.constdata||
                  _ResizeCursorH
                          DCD      _bmResizeCursorH
                          DCD      0x00000008
                          DCD      0x00000008
                  _ResizeCursorV
                          DCD      _bmResizeCursorV
                          DCD      0x00000008
                          DCD      0x00000008
                  _ResizeCursorDD
                          DCD      _bmResizeCursorDD
                          DCD      0x00000008
                          DCD      0x00000008
                  _ResizeCursorDU
                          DCD      _bmResizeCursorDU
                          DCD      0x00000008
                          DCD      0x00000008

                          AREA ||area_number.17||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.17||, ||.constdata||
                  _acResizeCursorV
000000  00004000          DCB      0x00,0x00,0x40,0x00
000004  00000190          DCB      0x00,0x00,0x01,0x90
000008  00000006          DCB      0x00,0x00,0x00,0x06
00000c  a4000000          DCB      0xa4,0x00,0x00,0x00
000010  1aa90000          DCB      0x1a,0xa9,0x00,0x00
000014  00559540          DCB      0x00,0x55,0x95,0x40
000018  00000190          DCB      0x00,0x00,0x01,0x90
00001c  00000001          DCB      0x00,0x00,0x00,0x01
000020  90000000          DCB      0x90,0x00,0x00,0x00
000024  01900000          DCB      0x01,0x90,0x00,0x00
000028  00019000          DCB      0x00,0x01,0x90,0x00
00002c  00000190          DCB      0x00,0x00,0x01,0x90
000030  00000001          DCB      0x00,0x00,0x00,0x01
000034  90000000          DCB      0x90,0x00,0x00,0x00
000038  01900000          DCB      0x01,0x90,0x00,0x00
00003c  00559540          DCB      0x00,0x55,0x95,0x40
000040  00001aa9          DCB      0x00,0x00,0x1a,0xa9
000044  00000006          DCB      0x00,0x00,0x00,0x06
000048  a4000000          DCB      0xa4,0x00,0x00,0x00
00004c  01900000          DCB      0x01,0x90,0x00,0x00
000050  00004000          DCB      0x00,0x00,0x40,0x00
000054  00                DCB      0x00

                          AREA ||area_number.18||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.constdata||
                  _bmResizeCursorV
000000  00110011          DCW      0x0011,0x0011
000004  00050002          DCW      0x0005,0x0002
                          DCD      _acResizeCursorV
                          DCD      _PalCursor
                          DCD      0x00000000

                          AREA ||area_number.19||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.19||, ||.constdata||
                  _acResizeCursorDD
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000555          DCB      0x00,0x00,0x05,0x55
00000c  00000006          DCB      0x00,0x00,0x00,0x06
000010  a4000000          DCB      0xa4,0x00,0x00,0x00
000014  06900000          DCB      0x06,0x90,0x00,0x00
000018  00066400          DCB      0x00,0x06,0x64,0x00
00001c  00000519          DCB      0x00,0x00,0x05,0x19
000020  00000004          DCB      0x00,0x00,0x00,0x04
000024  06400000          DCB      0x06,0x40,0x00,0x00
000028  00019000          DCB      0x00,0x01,0x90,0x00
00002c  00000064          DCB      0x00,0x00,0x00,0x64
000030  04000000          DCB      0x04,0x00,0x00,0x00
000034  19140000          DCB      0x19,0x14,0x00,0x00
000038  00066400          DCB      0x00,0x06,0x64,0x00
00003c  000001a4          DCB      0x00,0x00,0x01,0xa4
000040  00000006          DCB      0x00,0x00,0x00,0x06
000044  a4000000          DCB      0xa4,0x00,0x00,0x00
000048  15540000          DCB      0x15,0x54,0x00,0x00
00004c  00000000          DCB      0x00,0x00,0x00,0x00
000050  00000000          DCB      0x00,0x00,0x00,0x00
000054  00                DCB      0x00

                          AREA ||area_number.20||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.constdata||
                  _bmResizeCursorDD
000000  00110011          DCW      0x0011,0x0011
000004  00050002          DCW      0x0005,0x0002
                          DCD      _acResizeCursorDD
                          DCD      _PalCursor
                          DCD      0x00000000

                          AREA ||area_number.21||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.21||, ||.constdata||
                  _acResizeCursorDU
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  15540000          DCB      0x15,0x54,0x00,0x00
000010  0006a400          DCB      0x00,0x06,0xa4,0x00
000014  000001a4          DCB      0x00,0x00,0x01,0xa4
000018  00000006          DCB      0x00,0x00,0x00,0x06
00001c  64000000          DCB      0x64,0x00,0x00,0x00
000020  19140000          DCB      0x19,0x14,0x00,0x00
000024  00640400          DCB      0x00,0x64,0x04,0x00
000028  00019000          DCB      0x00,0x01,0x90,0x00
00002c  00040640          DCB      0x00,0x04,0x06,0x40
000030  00000519          DCB      0x00,0x00,0x05,0x19
000034  00000006          DCB      0x00,0x00,0x00,0x06
000038  64000000          DCB      0x64,0x00,0x00,0x00
00003c  06900000          DCB      0x06,0x90,0x00,0x00
000040  0006a400          DCB      0x00,0x06,0xa4,0x00
000044  00000555          DCB      0x00,0x00,0x05,0x55
000048  00000000          DCB      0x00,0x00,0x00,0x00
00004c  00000000          DCB      0x00,0x00,0x00,0x00
000050  00000000          DCB      0x00,0x00,0x00,0x00
000054  00                DCB      0x00

                          AREA ||area_number.22||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.constdata||
                  _bmResizeCursorDU
000000  00110011          DCW      0x0011,0x0011
000004  00050002          DCW      0x0005,0x0002
                          DCD      _acResizeCursorDU
                          DCD      _PalCursor
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=2

                  _CaptureX
                          DCD      0x00000000
                  _CaptureY
                          DCD      0x00000000
                  _CaptureFlags
                          DCD      0x00000000
                  _pOldCursor
                          DCD      0x00000000
                  _HOOK_Resizeable
                          %        8
