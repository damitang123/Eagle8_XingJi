; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\guiaachar2.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guiaachar2.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\AntiAlias\GUIAAChar2.c]
                          THUMB

                          AREA ||i.DrawNoTrans||, CODE, READONLY, ALIGN=2

                  DrawNoTrans PROC
;;;61     */
;;;62     static void DrawNoTrans(int x0, int y0, int XSize, int YSize, int BytesPerLine, const U8*pData) {
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;63       if ((OldColorIndex   != LCD_COLORINDEX) || 
000004  481f              LDR      r0,|L1.132|
000006  4d20              LDR      r5,|L1.136|
000008  4a1e              LDR      r2,|L1.132|
00000a  8840              LDRH     r0,[r0,#2]  ; GUI_Context
00000c  8829              LDRH     r1,[r5,#0]  ; OldColorIndex
;;;64           (OldBkColorIndex != LCD_BKCOLORINDEX)) {
00000e  8817              LDRH     r7,[r2,#0]
000010  469b              MOV      r11,r3                ;62
000012  4288              CMP      r0,r1                 ;63
000014  d102              BNE      |L1.28|
000016  8869              LDRH     r1,[r5,#2]  ; OldBkColorIndex
000018  428f              CMP      r7,r1
00001a  d022              BEQ      |L1.98|
                  |L1.28|
;;;65         int i;
;;;66         LCD_PIXELINDEX BkColorIndex = LCD_BKCOLORINDEX;
;;;67         LCD_PIXELINDEX ColorIndex   = LCD_COLORINDEX;
00001c  4680              MOV      r8,r0
;;;68         LCD_COLOR BkColor = LCD_Index2Color(BkColorIndex);
00001e  4638              MOV      r0,r7
000020  f7fffffe          BL       LCD_Index2Color
000024  4682              MOV      r10,r0
;;;69         LCD_COLOR Color   = LCD_Index2Color(ColorIndex);
000026  4640              MOV      r0,r8
000028  f7fffffe          BL       LCD_Index2Color
;;;70         aColor[0] = BkColor;
00002c  4e17              LDR      r6,|L1.140|
00002e  4681              MOV      r9,r0                 ;69
;;;71         for (i = 1; i < 3; i++) {
000030  2401              MOVS     r4,#1
000032  f8c6a000          STR      r10,[r6,#0]  ; aColor
;;;72           U8 Intens;
;;;73           Intens = 5 * i;
000036  bf00              NOP      
                  |L1.56|
000038  eb040084          ADD      r0,r4,r4,LSL #2
00003c  b2c2              UXTB     r2,r0
;;;74           aColor[i] = LCD_AA_MixColors(Color, BkColor, Intens);
00003e  4651              MOV      r1,r10
000040  4648              MOV      r0,r9
000042  f7fffffe          BL       LCD_AA_MixColors
000046  f8460024          STR      r0,[r6,r4,LSL #2]
00004a  1c64              ADDS     r4,r4,#1
00004c  2c03              CMP      r4,#3                 ;71
00004e  dbf3              BLT      |L1.56|
;;;75         }
;;;76         aColor[3] = Color;
;;;77         LCD_GetpPalConvTableUncached(&Palette);
000050  480d              LDR      r0,|L1.136|
000052  f8c6900c          STR      r9,[r6,#0xc]  ; aColor
000056  1d00              ADDS     r0,r0,#4
000058  f7fffffe          BL       LCD_GetpPalConvTableUncached
;;;78         OldColorIndex = ColorIndex;
00005c  f8a58000          STRH     r8,[r5,#0]
;;;79         OldBkColorIndex = BkColorIndex;
000060  806f              STRH     r7,[r5,#2]
                  |L1.98|
;;;80       }
;;;81       Bitmap.XSize = XSize;
000062  4809              LDR      r0,|L1.136|
000064  9902              LDR      r1,[sp,#8]
000066  3010              ADDS     r0,r0,#0x10
000068  8001              STRH     r1,[r0,#0]
;;;82       Bitmap.YSize = YSize;
00006a  f8a0b002          STRH     r11,[r0,#2]
;;;83       Bitmap.BytesPerLine = BytesPerLine;
00006e  990e              LDR      r1,[sp,#0x38]
000070  8081              STRH     r1,[r0,#4]
;;;84       Bitmap.pData = pData;
000072  990f              LDR      r1,[sp,#0x3c]
;;;85       GL_DrawBitmap(&Bitmap, x0, y0);
000074  6081              STR      r1,[r0,#8]  ; Bitmap
000076  e9dd1200          LDRD     r1,r2,[sp,#0]
00007a  b004              ADD      sp,sp,#0x10
00007c  e8bd5ff0          POP      {r4-r12,lr}
000080  f7ffbffe          B.W      GL_DrawBitmap
;;;86     }
;;;87     
                          ENDP

                  |L1.132|
                          DCD      GUI_Context
                  |L1.136|
                          DCD      ||.data||
                  |L1.140|
                          DCD      ||.bss||

                          AREA ||i.DrawTrans||, CODE, READONLY, ALIGN=2

                  DrawTrans PROC
;;;91     */
;;;92     static void DrawTrans(int x0, int y0, int XSize, int YSize, int BytesPerLine, const U8*pData) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b081              SUB      sp,sp,#4
000006  4693              MOV      r11,r2
;;;93       int x, y;
;;;94       for (y = 0; y < YSize; y++) {
000008  f04f0800          MOV      r8,#0
;;;95         const U8 *pData0 = pData;
;;;96         U8 Rem = XSize & 3;
;;;97         for (x = 0; x < XSize - 1; x += 4) {
;;;98           LCD_SetPixelAA(x + x0    , y0 + y, aConvTable[((*pData0  ) >> 6)       ]);
00000c  f8dfa0d4          LDR      r10,|L2.228|
000010  e062              B        |L2.216|
000012  bf00              NOP                            ;96
                  |L2.20|
000014  f00b0003          AND      r0,r11,#3             ;96
000018  9d0f              LDR      r5,[sp,#0x3c]         ;96
00001a  2700              MOVS     r7,#0                 ;97
00001c  f1ab0901          SUB      r9,r11,#1             ;97
000020  9000              STR      r0,[sp,#0]            ;97
000022  e029              B        |L2.120|
                  |L2.36|
000024  7828              LDRB     r0,[r5,#0]
000026  0981              LSRS     r1,r0,#6
000028  9801              LDR      r0,[sp,#4]
00002a  f81a2021          LDRB     r2,[r10,r1,LSL #2]
00002e  9902              LDR      r1,[sp,#8]
000030  183c              ADDS     r4,r7,r0
000032  eb010608          ADD      r6,r1,r8
000036  4631              MOV      r1,r6
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       LCD_SetPixelAA
;;;99           LCD_SetPixelAA(x + x0 + 1, y0 + y, aConvTable[((*pData0  ) >> 4) & 0x03]);
00003e  7828              LDRB     r0,[r5,#0]
000040  4631              MOV      r1,r6
000042  f3c01001          UBFX     r0,r0,#4,#2
000046  f81a2020          LDRB     r2,[r10,r0,LSL #2]
00004a  1c60              ADDS     r0,r4,#1
00004c  f7fffffe          BL       LCD_SetPixelAA
;;;100          LCD_SetPixelAA(x + x0 + 2, y0 + y, aConvTable[((*pData0  ) >> 2) & 0x03]);
000050  7828              LDRB     r0,[r5,#0]
000052  f3c00181          UBFX     r1,r0,#2,#2
000056  1ca0              ADDS     r0,r4,#2
000058  f81a2021          LDRB     r2,[r10,r1,LSL #2]
00005c  4631              MOV      r1,r6
00005e  f7fffffe          BL       LCD_SetPixelAA
;;;101          LCD_SetPixelAA(x + x0 + 3, y0 + y, aConvTable[((*pData0++)     ) & 0x03]);
000062  f8150b01          LDRB     r0,[r5],#1
000066  f0000103          AND      r1,r0,#3
00006a  1ce0              ADDS     r0,r4,#3
00006c  f81a2021          LDRB     r2,[r10,r1,LSL #2]
000070  4631              MOV      r1,r6
000072  f7fffffe          BL       LCD_SetPixelAA
000076  1d3f              ADDS     r7,r7,#4
                  |L2.120|
000078  454f              CMP      r7,r9                 ;97
00007a  dbd3              BLT      |L2.36|
;;;102      	}
;;;103        if (Rem) {
00007c  9800              LDR      r0,[sp,#0]
00007e  b328              CBZ      r0,|L2.204|
;;;104          LCD_SetPixelAA(x + x0    , y0 + y, aConvTable[((*pData0  ) >> 6)       ]);
000080  7828              LDRB     r0,[r5,#0]
000082  0981              LSRS     r1,r0,#6
000084  9802              LDR      r0,[sp,#8]
000086  f81a2021          LDRB     r2,[r10,r1,LSL #2]
00008a  eb000108          ADD      r1,r0,r8
00008e  9801              LDR      r0,[sp,#4]
000090  460c              MOV      r4,r1
000092  4438              ADD      r0,r0,r7
000094  4606              MOV      r6,r0
000096  f7fffffe          BL       LCD_SetPixelAA
;;;105          if (Rem > 1) {
00009a  9800              LDR      r0,[sp,#0]
00009c  2801              CMP      r0,#1
00009e  d915              BLS      |L2.204|
;;;106            LCD_SetPixelAA(x + x0 + 1, y0 + y, aConvTable[((*pData0  ) >> 4) & 0x03]);
0000a0  7828              LDRB     r0,[r5,#0]
0000a2  4657              MOV      r7,r10
0000a4  f3c01001          UBFX     r0,r0,#4,#2
0000a8  4621              MOV      r1,r4
0000aa  f81a2020          LDRB     r2,[r10,r0,LSL #2]
0000ae  1c70              ADDS     r0,r6,#1
0000b0  f7fffffe          BL       LCD_SetPixelAA
;;;107            if (Rem > 2) {
0000b4  9800              LDR      r0,[sp,#0]
0000b6  2802              CMP      r0,#2
0000b8  d908              BLS      |L2.204|
;;;108              LCD_SetPixelAA(x + x0 + 2, y0 + y, aConvTable[((*pData0  ) >> 2) & 0x03]);
0000ba  7828              LDRB     r0,[r5,#0]
0000bc  4621              MOV      r1,r4
0000be  f3c00081          UBFX     r0,r0,#2,#2
0000c2  f8172020          LDRB     r2,[r7,r0,LSL #2]
0000c6  1cb0              ADDS     r0,r6,#2
0000c8  f7fffffe          BL       LCD_SetPixelAA
                  |L2.204|
0000cc  e9dd100e          LDRD     r1,r0,[sp,#0x38]
;;;109            }
;;;110          }
;;;111        }
;;;112        pData += BytesPerLine;
0000d0  4408              ADD      r0,r0,r1
0000d2  f1080801          ADD      r8,r8,#1              ;94
0000d6  900f              STR      r0,[sp,#0x3c]         ;94
                  |L2.216|
0000d8  9904              LDR      r1,[sp,#0x10]         ;94
0000da  4588              CMP      r8,r1                 ;94
0000dc  db9a              BLT      |L2.20|
;;;113      }
;;;114    }
0000de  b005              ADD      sp,sp,#0x14
0000e0  e8bd8ff0          POP      {r4-r11,pc}
;;;115    
                          ENDP

                  |L2.228|
                          DCD      ||.constdata||

                          AREA ||i.GUIPROP_AA2_DispChar||, CODE, READONLY, ALIGN=2

                  GUIPROP_AA2_DispChar PROC
;;;137    */
;;;138    void GUIPROP_AA2_DispChar(U16P c) {
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;139      int BytesPerLine;
;;;140      GUI_DRAWMODE DrawMode = GUI_Context.TextMode;
000004  4c17              LDR      r4,|L3.100|
000006  4605              MOV      r5,r0                 ;138
;;;141      const GUI_FONT_PROP* pProp = GUIPROP_FindChar(GUI_Context.pAFont->p.pProp, c);
000008  4629              MOV      r1,r5
00000a  69e0              LDR      r0,[r4,#0x1c]  ; GUI_Context
00000c  f9b4602e          LDRSH    r6,[r4,#0x2e]         ;140  ; GUI_Context
000010  6980              LDR      r0,[r0,#0x18]
000012  f7fffffe          BL       GUIPROP_FindChar
;;;142      if (pProp) {
000016  2800              CMP      r0,#0
000018  d021              BEQ      |L3.94|
;;;143        GUI_DRAWMODE OldDrawMode;
;;;144        const GUI_CHARINFO* pCharInfo = pProp->paCharInfo+(c-pProp->First);
00001a  6841              LDR      r1,[r0,#4]
00001c  8800              LDRH     r0,[r0,#0]
00001e  1a28              SUBS     r0,r5,r0
000020  eb0105c0          ADD      r5,r1,r0,LSL #3
;;;145        BytesPerLine = pCharInfo->BytesPerLine;
;;;146        OldDrawMode  = LCD_SetDrawMode(DrawMode);
000024  4630              MOV      r0,r6
000026  78af              LDRB     r7,[r5,#2]            ;145
000028  f7fffffe          BL       LCD_SetDrawMode
00002c  4680              MOV      r8,r0
;;;147        if (DrawMode & GUI_TM_TRANS) {
00002e  07b0              LSLS     r0,r6,#30
;;;148          DrawTrans(GUI_Context.DispPosX, 
;;;149                    GUI_Context.DispPosY,
;;;150                    pCharInfo->XSize,
;;;151                    GUI_Context.pAFont->YSize,
;;;152                    BytesPerLine,
;;;153                    (U8 const*)pCharInfo->pData
;;;154          );
;;;155        } else {
;;;156          DrawNoTrans(GUI_Context.DispPosX, 
000030  6868              LDR      r0,[r5,#4]
000032  e9cd7000          STRD     r7,r0,[sp,#0]
000036  69e0              LDR      r0,[r4,#0x1c]  ; GUI_Context
000038  782a              LDRB     r2,[r5,#0]
00003a  f9b41028          LDRSH    r1,[r4,#0x28]  ; GUI_Context
00003e  7d03              LDRB     r3,[r0,#0x14]
000040  f9b40026          LDRSH    r0,[r4,#0x26]  ; GUI_Context
000044  d502              BPL      |L3.76|
000046  f7fffffe          BL       DrawTrans
00004a  e001              B        |L3.80|
                  |L3.76|
00004c  f7fffffe          BL       DrawNoTrans
                  |L3.80|
;;;157                      GUI_Context.DispPosY,
;;;158                      pCharInfo->XSize,
;;;159                      GUI_Context.pAFont->YSize,
;;;160                      BytesPerLine,
;;;161                      (U8 const*)pCharInfo->pData
;;;162          );
;;;163        }
;;;164        LCD_SetDrawMode(OldDrawMode); /* Restore draw mode */
000050  4640              MOV      r0,r8
000052  f7fffffe          BL       LCD_SetDrawMode
;;;165        GUI_Context.DispPosX += pCharInfo->XDist;
000056  8ce0              LDRH     r0,[r4,#0x26]  ; GUI_Context
000058  7869              LDRB     r1,[r5,#1]
00005a  4408              ADD      r0,r0,r1
00005c  84e0              STRH     r0,[r4,#0x26]
                  |L3.94|
;;;166      }
;;;167    }
00005e  e8bd81fc          POP      {r2-r8,pc}
;;;168    
                          ENDP

000062  0000              DCW      0x0000
                  |L3.100|
                          DCD      GUI_Context

                          AREA ||i.GUIPROP_AA2_GetCharDistX||, CODE, READONLY, ALIGN=2

                  GUIPROP_AA2_GetCharDistX PROC
;;;172    */
;;;173    int GUIPROP_AA2_GetCharDistX(U16P c) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;174      const GUI_FONT_PROP* pProp = GUIPROP_FindChar(GUI_Context.pAFont->p.pProp, c);
000004  4806              LDR      r0,|L4.32|
000006  4621              MOV      r1,r4
000008  69c0              LDR      r0,[r0,#0x1c]  ; GUI_Context
00000a  6980              LDR      r0,[r0,#0x18]
00000c  f7fffffe          BL       GUIPROP_FindChar
;;;175      return (pProp) ? (pProp->paCharInfo+(c-pProp->First))->XSize : 0;
000010  2800              CMP      r0,#0
000012  d004              BEQ      |L4.30|
000014  6841              LDR      r1,[r0,#4]
000016  8800              LDRH     r0,[r0,#0]
000018  1a20              SUBS     r0,r4,r0
00001a  f8110030          LDRB     r0,[r1,r0,LSL #3]
                  |L4.30|
;;;176    }
00001e  bd10              POP      {r4,pc}
;;;177    
                          ENDP

                  |L4.32|
                          DCD      GUI_Context

                          AREA ||i.GUIPROP_AA2_GetFontInfo||, CODE, READONLY, ALIGN=1

                  GUIPROP_AA2_GetFontInfo PROC
;;;181    */
;;;182    void GUIPROP_AA2_GetFontInfo(const GUI_FONT * pFont, GUI_FONTINFO* pfi) {
000000  2009              MOVS     r0,#9
;;;183      GUI_USE_PARA(pFont);
;;;184      pfi->Flags = GUI_FONTINFO_FLAG_PROP | GUI_FONTINFO_FLAG_AA2;
000002  8008              STRH     r0,[r1,#0]
;;;185    }
000004  4770              BX       lr
;;;186    
                          ENDP


                          AREA ||i.GUIPROP_AA2_IsInFont||, CODE, READONLY, ALIGN=1

                  GUIPROP_AA2_IsInFont PROC
;;;190    */
;;;191    char GUIPROP_AA2_IsInFont(const GUI_FONT * pFont, U16 c) {
000000  b510              PUSH     {r4,lr}
;;;192      const GUI_FONT_PROP* pProp = GUIPROP_FindChar(pFont->p.pProp, c);
000002  6980              LDR      r0,[r0,#0x18]
000004  f7fffffe          BL       GUIPROP_FindChar
;;;193      return (pProp==NULL) ? 0 : 1;
000008  2800              CMP      r0,#0
00000a  d000              BEQ      |L6.14|
00000c  2001              MOVS     r0,#1
                  |L6.14|
;;;194    }
00000e  bd10              POP      {r4,pc}
;;;195    
                          ENDP


                          AREA ||i.GUIPROP_FindChar||, CODE, READONLY, ALIGN=2

                  GUIPROP_FindChar PROC
;;;119    */
;;;120    static const GUI_FONT_PROP* GUIPROP_FindChar(const GUI_FONT_PROP* pProp, U16P c) {
000000  4806              LDR      r0,|L7.28|
;;;121      for (pProp = GUI_Context.pAFont->p.pProp; pProp; pProp=(const GUI_FONT_PROP*) pProp->pNext) {
000002  69c0              LDR      r0,[r0,#0x1c]  ; GUI_Context
000004  6980              LDR      r0,[r0,#0x18]
000006  e006              B        |L7.22|
                  |L7.8|
;;;122        if ((c>=pProp->First) && (c<=pProp->Last))
000008  8802              LDRH     r2,[r0,#0]
00000a  428a              CMP      r2,r1
00000c  d802              BHI      |L7.20|
00000e  8842              LDRH     r2,[r0,#2]
000010  428a              CMP      r2,r1
000012  d202              BCS      |L7.26|
                  |L7.20|
000014  6880              LDR      r0,[r0,#8]            ;121
                  |L7.22|
000016  2800              CMP      r0,#0                 ;121
000018  d1f6              BNE      |L7.8|
                  |L7.26|
;;;123          break;
;;;124      }
;;;125      return pProp;
;;;126    }
00001a  4770              BX       lr
;;;127    
                          ENDP

                  |L7.28|
                          DCD      GUI_Context

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  aColor
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  aConvTable
                          DCD      0x00000000
                          DCD      0x00000005
                          DCD      0x0000000a
                          DCD      0x0000000f

                          AREA ||.data||, DATA, ALIGN=2

                  OldColorIndex
000000  0000              DCB      0x00,0x00
                  OldBkColorIndex
000002  0000              DCB      0x00,0x00
                  Palette
                          DCD      0x00000004
000008  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      aColor
                  Bitmap
000010  00000000          DCW      0x0000,0x0000
000014  00000002          DCW      0x0000,0x0002
                          DCD      0x00000000
                          DCD      Palette
                          DCD      0x00000000
