; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\jdapimin.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\jdapimin.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\JPEG\jdapimin.c]
                          THUMB

                          AREA ||i.default_decompress_parms||, CODE, READONLY, ALIGN=2

                  default_decompress_parms PROC
;;;113    LOCAL(void)
;;;114    default_decompress_parms (j_decompress_ptr cinfo)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;115    {
;;;116      /* Guess the input colorspace, and set output colorspace accordingly. */
;;;117      /* (Wish JPEG committee had provided a real way to specify this...) */
;;;118      /* Note application may override our guesses. */
;;;119      switch (cinfo->num_components) {
000004  6a42              LDR      r2,[r0,#0x24]
000006  2501              MOVS     r5,#1
;;;120      case 1:
;;;121        cinfo->jpeg_color_space = JCS_GRAYSCALE;
;;;122        cinfo->out_color_space = JCS_GRAYSCALE;
;;;123        break;
;;;124        
;;;125      case 3:
;;;126        if (cinfo->saw_JFIF_marker) {
;;;127          cinfo->jpeg_color_space = JCS_YCbCr; /* JFIF implies YCbCr */
;;;128        } else if (cinfo->saw_Adobe_marker) {
;;;129          switch (cinfo->Adobe_transform) {
;;;130          case 0:
;;;131    	cinfo->jpeg_color_space = JCS_RGB;
000008  2602              MOVS     r6,#2
00000a  4604              MOV      r4,r0                 ;115
00000c  f04f0900          MOV      r9,#0
000010  2a01              CMP      r2,#1                 ;119
000012  d028              BEQ      |L1.102|
;;;132    	break;
;;;133          case 1:
;;;134    	cinfo->jpeg_color_space = JCS_YCbCr;
;;;135    	break;
;;;136          default:
;;;137    	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
000014  2072              MOVS     r0,#0x72
000016  1ea9              SUBS     r1,r5,#2
000018  2a03              CMP      r2,#3                 ;119
00001a  d029              BEQ      |L1.112|
00001c  2a04              CMP      r2,#4                 ;119
00001e  d064              BEQ      |L1.234|
;;;138    	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
;;;139    	break;
;;;140          }
;;;141        } else {
;;;142          /* Saw no special markers, try to guess from the component IDs */
;;;143          int cid0 = cinfo->comp_info[0].component_id;
;;;144          int cid1 = cinfo->comp_info[1].component_id;
;;;145          int cid2 = cinfo->comp_info[2].component_id;
;;;146    
;;;147          if (cid0 == 1 && cid1 == 2 && cid2 == 3)
;;;148    	cinfo->jpeg_color_space = JCS_YCbCr; /* assume JFIF w/out marker */
;;;149          else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
;;;150    	cinfo->jpeg_color_space = JCS_RGB; /* ASCII 'R', 'G', 'B' */
;;;151          else {
;;;152    	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
;;;153    	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
;;;154          }
;;;155        }
;;;156        /* Always guess RGB is proper output colorspace. */
;;;157        cinfo->out_color_space = JCS_RGB;
;;;158        break;
;;;159        
;;;160      case 4:
;;;161        if (cinfo->saw_Adobe_marker) {
;;;162          switch (cinfo->Adobe_transform) {
;;;163          case 0:
;;;164    	cinfo->jpeg_color_space = JCS_CMYK;
;;;165    	break;
;;;166          case 2:
;;;167    	cinfo->jpeg_color_space = JCS_YCCK;
;;;168    	break;
;;;169          default:
;;;170    	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
;;;171    	cinfo->jpeg_color_space = JCS_YCCK; /* assume it's YCCK */
;;;172    	break;
;;;173          }
;;;174        } else {
;;;175          /* No special markers, assume straight CMYK. */
;;;176          cinfo->jpeg_color_space = JCS_CMYK;
;;;177        }
;;;178        cinfo->out_color_space = JCS_CMYK;
;;;179        break;
;;;180        
;;;181      default:
;;;182        cinfo->jpeg_color_space = JCS_UNKNOWN;
000020  f8849028          STRB     r9,[r4,#0x28]
;;;183        cinfo->out_color_space = JCS_UNKNOWN;
000024  f8849029          STRB     r9,[r4,#0x29]
                  |L1.40|
;;;184        break;
;;;185      }
;;;186    
;;;187      /* Set defaults for other decompression parameters. */
;;;188      cinfo->scale_num = 1;		/* 1:1 scaling */
000028  f8445f2c          STR      r5,[r4,#0x2c]!
;;;189      cinfo->scale_denom = 1;
00002c  483d              LDR      r0,|L1.292|
00002e  2100              MOVS     r1,#0
000030  6065              STR      r5,[r4,#4]
000032  e9c41003          STRD     r1,r0,[r4,#0xc]
;;;190      cinfo->output_gamma = 1.0;
;;;191      cinfo->buffered_image = FALSE;
;;;192      cinfo->raw_data_out = FALSE;
000036  f8c49014          STR      r9,[r4,#0x14]
;;;193      cinfo->dct_method = JDCT_DEFAULT;
00003a  f8c49018          STR      r9,[r4,#0x18]
00003e  f884901c          STRB     r9,[r4,#0x1c]
;;;194      cinfo->do_fancy_upsampling = TRUE;
000042  6225              STR      r5,[r4,#0x20]
000044  e9c45909          STRD     r5,r9,[r4,#0x24]
;;;195      cinfo->do_block_smoothing = TRUE;
;;;196      cinfo->quantize_colors = FALSE;
;;;197      /* We set these in case application only sets quantize_colors. */
;;;198      cinfo->dither_mode = JDITHER_FS;
000048  f884602c          STRB     r6,[r4,#0x2c]
;;;199    #ifdef QUANT_2PASS_SUPPORTED
;;;200      cinfo->two_pass_quantize = TRUE;
;;;201    #else
;;;202      cinfo->two_pass_quantize = FALSE;
;;;203    #endif
;;;204      cinfo->desired_number_of_colors = 256;
;;;205      cinfo->colormap = NULL;
00004c  f8c4905c          STR      r9,[r4,#0x5c]
000050  f44f7180          MOV      r1,#0x100             ;204
000054  6325              STR      r5,[r4,#0x30]
000056  e9c4190d          STRD     r1,r9,[r4,#0x34]
;;;206      /* Initialize for no mode change in buffered-image mode. */
;;;207      cinfo->enable_1pass_quant = FALSE;
;;;208      cinfo->enable_external_quant = FALSE;
;;;209      cinfo->enable_2pass_quant = FALSE;
00005a  f8c4903c          STR      r9,[r4,#0x3c]
;;;210    }
00005e  f8c49040          STR      r9,[r4,#0x40]
000062  e8bd87f0          POP      {r4-r10,pc}
                  |L1.102|
000066  f8845028          STRB     r5,[r4,#0x28]         ;121
00006a  f8845029          STRB     r5,[r4,#0x29]         ;122
00006e  e7db              B        |L1.40|
                  |L1.112|
000070  f8d42118          LDR      r2,[r4,#0x118]        ;126
000074  2703              MOVS     r7,#3                 ;119
000076  b9fa              CBNZ     r2,|L1.184|
000078  f8d42124          LDR      r2,[r4,#0x124]        ;128
00007c  b16a              CBZ      r2,|L1.154|
00007e  f8942128          LDRB     r2,[r4,#0x128]        ;129
000082  b36a              CBZ      r2,|L1.224|
000084  2a01              CMP      r2,#1                 ;129
000086  d017              BEQ      |L1.184|
000088  6822              LDR      r2,[r4,#0]            ;137
00008a  6150              STR      r0,[r2,#0x14]         ;137
00008c  6822              LDR      r2,[r4,#0]            ;137
00008e  f8940128          LDRB     r0,[r4,#0x128]        ;137
000092  6190              STR      r0,[r2,#0x18]         ;137
000094  6820              LDR      r0,[r4,#0]            ;137
000096  6842              LDR      r2,[r0,#4]            ;139
000098  e01f              B        |L1.218|
                  |L1.154|
00009a  f8d400d8          LDR      r0,[r4,#0xd8]         ;143
00009e  6803              LDR      r3,[r0,#0]            ;147
0000a0  6d42              LDR      r2,[r0,#0x54]         ;147
0000a2  f8d010a8          LDR      r1,[r0,#0xa8]         ;147
0000a6  2b01              CMP      r3,#1                 ;147
0000a8  d002              BEQ      |L1.176|
0000aa  2b52              CMP      r3,#0x52              ;149
0000ac  d007              BEQ      |L1.190|
0000ae  e00a              B        |L1.198|
                  |L1.176|
0000b0  2a02              CMP      r2,#2                 ;147
0000b2  d108              BNE      |L1.198|
0000b4  2903              CMP      r1,#3                 ;147
0000b6  d106              BNE      |L1.198|
                  |L1.184|
0000b8  f8847028          STRB     r7,[r4,#0x28]         ;148
0000bc  e012              B        |L1.228|
                  |L1.190|
0000be  2a47              CMP      r2,#0x47              ;149
0000c0  d101              BNE      |L1.198|
0000c2  2942              CMP      r1,#0x42              ;149
0000c4  d00c              BEQ      |L1.224|
                  |L1.198|
0000c6  6820              LDR      r0,[r4,#0]            ;152
0000c8  6183              STR      r3,[r0,#0x18]         ;152
0000ca  e9c02107          STRD     r2,r1,[r0,#0x1c]      ;152
0000ce  6821              LDR      r1,[r4,#0]            ;152
0000d0  206f              MOVS     r0,#0x6f              ;152
0000d2  6148              STR      r0,[r1,#0x14]         ;152
0000d4  6820              LDR      r0,[r4,#0]            ;152
0000d6  2101              MOVS     r1,#1                 ;152
0000d8  6842              LDR      r2,[r0,#4]            ;152
                  |L1.218|
0000da  4620              MOV      r0,r4                 ;137
0000dc  4790              BLX      r2                    ;137
0000de  e7eb              B        |L1.184|
                  |L1.224|
0000e0  f8846028          STRB     r6,[r4,#0x28]         ;150
                  |L1.228|
0000e4  f8846029          STRB     r6,[r4,#0x29]         ;157
0000e8  e79e              B        |L1.40|
                  |L1.234|
0000ea  f8d42124          LDR      r2,[r4,#0x124]        ;161
0000ee  2704              MOVS     r7,#4                 ;119
0000f0  b19a              CBZ      r2,|L1.282|
0000f2  f8942128          LDRB     r2,[r4,#0x128]        ;162
0000f6  b182              CBZ      r2,|L1.282|
0000f8  f04f0805          MOV      r8,#5                 ;167
0000fc  2a02              CMP      r2,#2                 ;162
0000fe  d009              BEQ      |L1.276|
000100  6822              LDR      r2,[r4,#0]            ;170
000102  6150              STR      r0,[r2,#0x14]         ;170
000104  6822              LDR      r2,[r4,#0]            ;170
000106  f8940128          LDRB     r0,[r4,#0x128]        ;170
00010a  6190              STR      r0,[r2,#0x18]         ;170
00010c  6820              LDR      r0,[r4,#0]            ;170
00010e  6842              LDR      r2,[r0,#4]            ;170
000110  4620              MOV      r0,r4                 ;170
000112  4790              BLX      r2                    ;170
                  |L1.276|
000114  f8848028          STRB     r8,[r4,#0x28]         ;167
000118  e001              B        |L1.286|
                  |L1.282|
00011a  f8847028          STRB     r7,[r4,#0x28]         ;164
                  |L1.286|
00011e  f8847029          STRB     r7,[r4,#0x29]         ;178
000122  e781              B        |L1.40|
;;;211    
                          ENDP

                  |L1.292|
                          DCD      0x3ff00000

                          AREA ||i.jpeg_CreateDecompress||, CODE, READONLY, ALIGN=1

                  jpeg_CreateDecompress PROC
;;;29     GLOBAL(void)
;;;30     jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;31     {
;;;32       int i;
;;;33     
;;;34       /* Guard against version mismatches between library and caller. */
;;;35       cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
000004  2500              MOVS     r5,#0
000006  4616              MOV      r6,r2                 ;31
000008  4604              MOV      r4,r0                 ;31
;;;36       if (version != JPEG_LIB_VERSION)
00000a  6045              STR      r5,[r0,#4]
00000c  293e              CMP      r1,#0x3e
00000e  d00b              BEQ      |L2.40|
;;;37         ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
000010  6822              LDR      r2,[r4,#0]
000012  200c              MOVS     r0,#0xc
000014  6150              STR      r0,[r2,#0x14]
000016  6822              LDR      r2,[r4,#0]
000018  203e              MOVS     r0,#0x3e
00001a  6190              STR      r0,[r2,#0x18]
00001c  6820              LDR      r0,[r4,#0]
00001e  61c1              STR      r1,[r0,#0x1c]
000020  6820              LDR      r0,[r4,#0]
000022  6801              LDR      r1,[r0,#0]
000024  4620              MOV      r0,r4
000026  4788              BLX      r1
                  |L2.40|
;;;38       if (structsize != SIZEOF(struct jpeg_decompress_struct))
000028  f44f78e8          MOV      r8,#0x1d0
00002c  4546              CMP      r6,r8
00002e  d00b              BEQ      |L2.72|
;;;39         ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
000030  6821              LDR      r1,[r4,#0]
000032  2015              MOVS     r0,#0x15
000034  6148              STR      r0,[r1,#0x14]
000036  6821              LDR      r1,[r4,#0]
000038  f8c18018          STR      r8,[r1,#0x18]
00003c  6820              LDR      r0,[r4,#0]
00003e  61c6              STR      r6,[r0,#0x1c]
000040  6820              LDR      r0,[r4,#0]
000042  6801              LDR      r1,[r0,#0]
000044  4620              MOV      r0,r4
000046  4788              BLX      r1
                  |L2.72|
;;;40     	     (int) SIZEOF(struct jpeg_decompress_struct), (int) structsize);
;;;41     
;;;42       /* For debugging purposes, we zero the whole master structure.
;;;43        * But the application has already set the err pointer, and may have set
;;;44        * client_data, so we have to save and restore those fields.
;;;45        * Note: if application hasn't set client_data, tools like Purify may
;;;46        * complain here.
;;;47        */
;;;48       {
;;;49         struct jpeg_error_mgr * err = cinfo->err;
;;;50         void * client_data = cinfo->client_data; /* ignore Purify complaint here */
;;;51         MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
000048  4641              MOV      r1,r8
00004a  4620              MOV      r0,r4
00004c  6827              LDR      r7,[r4,#0]
00004e  68e6              LDR      r6,[r4,#0xc]
000050  f7fffffe          BL       __aeabi_memclr4
;;;52         cinfo->err = err;
;;;53         cinfo->client_data = client_data;
;;;54       }
;;;55       cinfo->is_decompressor = TRUE;
000054  2001              MOVS     r0,#1
000056  6027              STR      r7,[r4,#0]
000058  e9c46003          STRD     r6,r0,[r4,#0xc]
;;;56     
;;;57       /* Initialize a memory manager instance for this object */
;;;58       jinit_memory_mgr((j_common_ptr) cinfo);
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       jinit_memory_mgr
;;;59     
;;;60       /* Zero out pointers to permanent structures. */
;;;61       cinfo->progress = NULL;
;;;62       cinfo->src = NULL;
000062  60a5              STR      r5,[r4,#8]
;;;63     
;;;64       for (i = 0; i < NUM_QUANT_TBLS; i++)
000064  2000              MOVS     r0,#0
000066  61a5              STR      r5,[r4,#0x18]
                  |L2.104|
;;;65         cinfo->quant_tbl_ptrs[i] = NULL;
000068  eb040180          ADD      r1,r4,r0,LSL #2
00006c  1c40              ADDS     r0,r0,#1
00006e  f8c150a4          STR      r5,[r1,#0xa4]         ;64
000072  2804              CMP      r0,#4                 ;64
000074  dbf8              BLT      |L2.104|
;;;66     
;;;67       for (i = 0; i < NUM_HUFF_TBLS; i++) {
000076  2000              MOVS     r0,#0
                  |L2.120|
;;;68         cinfo->dc_huff_tbl_ptrs[i] = NULL;
000078  eb040180          ADD      r1,r4,r0,LSL #2
;;;69         cinfo->ac_huff_tbl_ptrs[i] = NULL;
00007c  1c40              ADDS     r0,r0,#1
00007e  f8415fb4          STR      r5,[r1,#0xb4]!        ;68
000082  2804              CMP      r0,#4                 ;67
000084  610d              STR      r5,[r1,#0x10]         ;67
000086  dbf7              BLT      |L2.120|
;;;70       }
;;;71     
;;;72       /* Initialize marker processor so application can override methods
;;;73        * for COM, APPn markers before calling jpeg_read_header.
;;;74        */
;;;75       cinfo->marker_list = NULL;
;;;76       jinit_marker_reader(cinfo);
000088  4620              MOV      r0,r4
00008a  f8c45130          STR      r5,[r4,#0x130]
00008e  f7fffffe          BL       jinit_marker_reader
;;;77     
;;;78       /* And initialize the overall input controller. */
;;;79       jinit_input_controller(cinfo);
000092  4620              MOV      r0,r4
000094  f7fffffe          BL       jinit_input_controller
;;;80     
;;;81       /* OK, I'm ready */
;;;82       cinfo->global_state = DSTATE_START;
000098  20c8              MOVS     r0,#0xc8
00009a  6160              STR      r0,[r4,#0x14]
;;;83     }
00009c  e8bd81f0          POP      {r4-r8,pc}
;;;84     
                          ENDP


                          AREA ||i.jpeg_abort_decompress||, CODE, READONLY, ALIGN=1

                  jpeg_abort_decompress PROC
;;;102    GLOBAL(void)
;;;103    jpeg_abort_decompress (j_decompress_ptr cinfo)
000000  f7ffbffe          B.W      jpeg_abort
;;;104    {
;;;105      jpeg_abort((j_common_ptr) cinfo); /* use common routine */
;;;106    }
;;;107    
                          ENDP


                          AREA ||i.jpeg_consume_input||, CODE, READONLY, ALIGN=1

                  jpeg_consume_input PROC
;;;286    GLOBAL(int)
;;;287    jpeg_consume_input (j_decompress_ptr cinfo)
000000  b570              PUSH     {r4-r6,lr}
;;;288    {
000002  4604              MOV      r4,r0
;;;289      int retcode = JPEG_SUSPENDED;
;;;290    
;;;291      /* NB: every possible DSTATE value should be listed in this switch */
;;;292      switch (cinfo->global_state) {
000004  6940              LDR      r0,[r0,#0x14]
000006  2500              MOVS     r5,#0                 ;289
000008  38c8              SUBS     r0,r0,#0xc8
00000a  280b              CMP      r0,#0xb
00000c  d229              BCS      |L4.98|
00000e  e8dff000          TBB      [pc,r0]
000012  0611              DCB      0x06,0x11
000014  1f212121          DCB      0x1f,0x21,0x21,0x21
000018  21212128          DCB      0x21,0x21,0x21,0x28
00001c  2100              DCB      0x21,0x00
;;;293      case DSTATE_START:
;;;294        /* Start-of-datastream actions: reset appropriate modules */
;;;295        (*cinfo->inputctl->reset_input_controller) (cinfo);
00001e  f8d401b4          LDR      r0,[r4,#0x1b4]
000022  6841              LDR      r1,[r0,#4]
000024  4620              MOV      r0,r4
000026  4788              BLX      r1
;;;296        /* Initialize application's data source module */
;;;297        (*cinfo->src->init_source) (cinfo);
000028  69a0              LDR      r0,[r4,#0x18]
00002a  6881              LDR      r1,[r0,#8]
00002c  4620              MOV      r0,r4
00002e  4788              BLX      r1
;;;298        cinfo->global_state = DSTATE_INHEADER;
000030  20c9              MOVS     r0,#0xc9
000032  6160              STR      r0,[r4,#0x14]
;;;299        /*FALLTHROUGH*/
;;;300      case DSTATE_INHEADER:
;;;301        retcode = (*cinfo->inputctl->consume_input) (cinfo);
000034  f8d401b4          LDR      r0,[r4,#0x1b4]
000038  6801              LDR      r1,[r0,#0]
00003a  4620              MOV      r0,r4
00003c  4788              BLX      r1
00003e  4605              MOV      r5,r0
;;;302        if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
000040  2801              CMP      r0,#1
000042  d118              BNE      |L4.118|
;;;303          /* Set up default parameters based on header data */
;;;304          default_decompress_parms(cinfo);
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       default_decompress_parms
;;;305          /* Set global state: ready for start_decompress */
;;;306          cinfo->global_state = DSTATE_READY;
00004a  20ca              MOVS     r0,#0xca
00004c  6160              STR      r0,[r4,#0x14]
00004e  e012              B        |L4.118|
;;;307        }
;;;308        break;
;;;309      case DSTATE_READY:
;;;310        /* Can't advance past first SOS until start_decompress is called */
;;;311        retcode = JPEG_REACHED_SOS;
000050  2501              MOVS     r5,#1
;;;312        break;
000052  e010              B        |L4.118|
;;;313      case DSTATE_PRELOAD:
;;;314      case DSTATE_PRESCAN:
;;;315      case DSTATE_SCANNING:
;;;316      case DSTATE_RAW_OK:
;;;317      case DSTATE_BUFIMAGE:
;;;318      case DSTATE_BUFPOST:
;;;319      case DSTATE_STOPPING:
;;;320        retcode = (*cinfo->inputctl->consume_input) (cinfo);
000054  f8d401b4          LDR      r0,[r4,#0x1b4]
000058  6801              LDR      r1,[r0,#0]
00005a  4620              MOV      r0,r4
00005c  4788              BLX      r1
00005e  4605              MOV      r5,r0
;;;321        break;
000060  e009              B        |L4.118|
                  |L4.98|
;;;322      default:
;;;323        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
000062  6821              LDR      r1,[r4,#0]
000064  2014              MOVS     r0,#0x14
000066  6148              STR      r0,[r1,#0x14]
000068  6821              LDR      r1,[r4,#0]
00006a  6960              LDR      r0,[r4,#0x14]
00006c  6188              STR      r0,[r1,#0x18]
00006e  6820              LDR      r0,[r4,#0]
000070  6801              LDR      r1,[r0,#0]
000072  4620              MOV      r0,r4
000074  4788              BLX      r1
                  |L4.118|
;;;324      }
;;;325      return retcode;
000076  4628              MOV      r0,r5
;;;326    }
000078  bd70              POP      {r4-r6,pc}
;;;327    
                          ENDP


                          AREA ||i.jpeg_destroy_decompress||, CODE, READONLY, ALIGN=1

                  jpeg_destroy_decompress PROC
;;;90     GLOBAL(void)
;;;91     jpeg_destroy_decompress (j_decompress_ptr cinfo)
000000  f7ffbffe          B.W      jpeg_destroy
;;;92     {
;;;93       jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
;;;94     }
;;;95     
                          ENDP


                          AREA ||i.jpeg_finish_decompress||, CODE, READONLY, ALIGN=1

                  jpeg_finish_decompress PROC
;;;368    GLOBAL(boolean)
;;;369    jpeg_finish_decompress (j_decompress_ptr cinfo)
000000  b570              PUSH     {r4-r6,lr}
;;;370    {
000002  4604              MOV      r4,r0
;;;371      if ((cinfo->global_state == DSTATE_SCANNING ||
000004  6940              LDR      r0,[r0,#0x14]
;;;372           cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
;;;373        /* Terminate final pass of non-buffered mode */
;;;374        if (cinfo->output_scanline < cinfo->output_height)
;;;375          ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
;;;376        (*cinfo->master->finish_output_pass) (cinfo);
;;;377        cinfo->global_state = DSTATE_STOPPING;
000006  25d2              MOVS     r5,#0xd2
000008  28cd              CMP      r0,#0xcd              ;371
00000a  d001              BEQ      |L6.16|
00000c  28ce              CMP      r0,#0xce              ;372
00000e  d101              BNE      |L6.20|
                  |L6.16|
000010  6c21              LDR      r1,[r4,#0x40]         ;372
000012  b171              CBZ      r1,|L6.50|
                  |L6.20|
;;;378      } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
000014  28cf              CMP      r0,#0xcf
000016  d01d              BEQ      |L6.84|
;;;379        /* Finishing after a buffered-image operation */
;;;380        cinfo->global_state = DSTATE_STOPPING;
;;;381      } else if (cinfo->global_state != DSTATE_STOPPING) {
000018  28d2              CMP      r0,#0xd2
00001a  d022              BEQ      |L6.98|
;;;382        /* STOPPING = repeat call after a suspension, anything else is error */
;;;383        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
00001c  6821              LDR      r1,[r4,#0]
00001e  2014              MOVS     r0,#0x14
000020  6148              STR      r0,[r1,#0x14]
000022  6821              LDR      r1,[r4,#0]
000024  6960              LDR      r0,[r4,#0x14]
000026  6188              STR      r0,[r1,#0x18]
000028  6820              LDR      r0,[r4,#0]
00002a  6801              LDR      r1,[r0,#0]
00002c  4620              MOV      r0,r4
00002e  4788              BLX      r1
000030  e017              B        |L6.98|
                  |L6.50|
000032  6f61              LDR      r1,[r4,#0x74]         ;374
000034  f8d4008c          LDR      r0,[r4,#0x8c]         ;374
000038  4288              CMP      r0,r1                 ;374
00003a  d206              BCS      |L6.74|
00003c  6821              LDR      r1,[r4,#0]            ;375
00003e  2043              MOVS     r0,#0x43              ;375
000040  6148              STR      r0,[r1,#0x14]         ;375
000042  6820              LDR      r0,[r4,#0]            ;375
000044  6801              LDR      r1,[r0,#0]            ;375
000046  4620              MOV      r0,r4                 ;375
000048  4788              BLX      r1                    ;375
                  |L6.74|
00004a  f8d401a4          LDR      r0,[r4,#0x1a4]        ;376
00004e  6841              LDR      r1,[r0,#4]            ;376
000050  4620              MOV      r0,r4                 ;376
000052  4788              BLX      r1                    ;376
                  |L6.84|
000054  6165              STR      r5,[r4,#0x14]         ;380
000056  e004              B        |L6.98|
                  |L6.88|
;;;384      }
;;;385      /* Read until EOI */
;;;386      while (! cinfo->inputctl->eoi_reached) {
;;;387        if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
000058  6801              LDR      r1,[r0,#0]
00005a  4620              MOV      r0,r4
00005c  4788              BLX      r1
00005e  2800              CMP      r0,#0
000060  d00c              BEQ      |L6.124|
                  |L6.98|
000062  f8d401b4          LDR      r0,[r4,#0x1b4]        ;386
000066  6941              LDR      r1,[r0,#0x14]         ;386
000068  2900              CMP      r1,#0                 ;386
00006a  d0f5              BEQ      |L6.88|
;;;388          return FALSE;		/* Suspend, come back later */
;;;389      }
;;;390      /* Do final cleanup */
;;;391      (*cinfo->src->term_source) (cinfo);
00006c  69a0              LDR      r0,[r4,#0x18]
00006e  6981              LDR      r1,[r0,#0x18]
000070  4620              MOV      r0,r4
000072  4788              BLX      r1
;;;392      /* We can use jpeg_abort to release memory and reset global_state */
;;;393      jpeg_abort((j_common_ptr) cinfo);
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       jpeg_abort
;;;394      return TRUE;
00007a  2001              MOVS     r0,#1
                  |L6.124|
;;;395    }
00007c  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||i.jpeg_has_multiple_scans||, CODE, READONLY, ALIGN=1

                  jpeg_has_multiple_scans PROC
;;;348    GLOBAL(boolean)
;;;349    jpeg_has_multiple_scans (j_decompress_ptr cinfo)
000000  b510              PUSH     {r4,lr}
;;;350    {
000002  4604              MOV      r4,r0
;;;351      /* Only valid after jpeg_read_header completes */
;;;352      if (cinfo->global_state < DSTATE_READY ||
000004  6940              LDR      r0,[r0,#0x14]
000006  38ca              SUBS     r0,r0,#0xca
000008  2809              CMP      r0,#9
00000a  d309              BCC      |L7.32|
;;;353          cinfo->global_state > DSTATE_STOPPING)
;;;354        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
00000c  6821              LDR      r1,[r4,#0]
00000e  2014              MOVS     r0,#0x14
000010  6148              STR      r0,[r1,#0x14]
000012  6821              LDR      r1,[r4,#0]
000014  6960              LDR      r0,[r4,#0x14]
000016  6188              STR      r0,[r1,#0x18]
000018  6820              LDR      r0,[r4,#0]
00001a  6801              LDR      r1,[r0,#0]
00001c  4620              MOV      r0,r4
00001e  4788              BLX      r1
                  |L7.32|
;;;355      return cinfo->inputctl->has_multiple_scans;
000020  f8d401b4          LDR      r0,[r4,#0x1b4]
000024  6900              LDR      r0,[r0,#0x10]
;;;356    }
000026  bd10              POP      {r4,pc}
;;;357    
                          ENDP


                          AREA ||i.jpeg_input_complete||, CODE, READONLY, ALIGN=1

                  jpeg_input_complete PROC
;;;333    GLOBAL(boolean)
;;;334    jpeg_input_complete (j_decompress_ptr cinfo)
000000  b510              PUSH     {r4,lr}
;;;335    {
000002  4604              MOV      r4,r0
;;;336      /* Check for valid jpeg object */
;;;337      if (cinfo->global_state < DSTATE_START ||
000004  6940              LDR      r0,[r0,#0x14]
000006  38c8              SUBS     r0,r0,#0xc8
000008  280b              CMP      r0,#0xb
00000a  d309              BCC      |L8.32|
;;;338          cinfo->global_state > DSTATE_STOPPING)
;;;339        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
00000c  6821              LDR      r1,[r4,#0]
00000e  2014              MOVS     r0,#0x14
000010  6148              STR      r0,[r1,#0x14]
000012  6821              LDR      r1,[r4,#0]
000014  6960              LDR      r0,[r4,#0x14]
000016  6188              STR      r0,[r1,#0x18]
000018  6820              LDR      r0,[r4,#0]
00001a  6801              LDR      r1,[r0,#0]
00001c  4620              MOV      r0,r4
00001e  4788              BLX      r1
                  |L8.32|
;;;340      return cinfo->inputctl->eoi_reached;
000020  f8d401b4          LDR      r0,[r4,#0x1b4]
000024  6940              LDR      r0,[r0,#0x14]
;;;341    }
000026  bd10              POP      {r4,pc}
;;;342    
                          ENDP


                          AREA ||i.jpeg_read_header||, CODE, READONLY, ALIGN=1

                  jpeg_read_header PROC
;;;240    GLOBAL(int)
;;;241    jpeg_read_header (j_decompress_ptr cinfo, boolean require_image)
000000  b570              PUSH     {r4-r6,lr}
;;;242    {
000002  4604              MOV      r4,r0
;;;243      int retcode;
;;;244    
;;;245      if (cinfo->global_state != DSTATE_START &&
000004  6940              LDR      r0,[r0,#0x14]
000006  460e              MOV      r6,r1                 ;242
000008  28c8              CMP      r0,#0xc8
00000a  d00b              BEQ      |L9.36|
;;;246          cinfo->global_state != DSTATE_INHEADER)
00000c  28c9              CMP      r0,#0xc9
00000e  d009              BEQ      |L9.36|
;;;247        ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
000010  6821              LDR      r1,[r4,#0]
000012  2014              MOVS     r0,#0x14
000014  6148              STR      r0,[r1,#0x14]
000016  6821              LDR      r1,[r4,#0]
000018  6960              LDR      r0,[r4,#0x14]
00001a  6188              STR      r0,[r1,#0x18]
00001c  6820              LDR      r0,[r4,#0]
00001e  6801              LDR      r1,[r0,#0]
000020  4620              MOV      r0,r4
000022  4788              BLX      r1
                  |L9.36|
;;;248    
;;;249      retcode = jpeg_consume_input(cinfo);
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       jpeg_consume_input
00002a  0005              MOVS     r5,r0
;;;250    
;;;251      switch (retcode) {
00002c  d00e              BEQ      |L9.76|
00002e  2d01              CMP      r5,#1
000030  d00c              BEQ      |L9.76|
000032  2d02              CMP      r5,#2
000034  d10a              BNE      |L9.76|
;;;252      case JPEG_REACHED_SOS:
;;;253        retcode = JPEG_HEADER_OK;
;;;254        break;
;;;255      case JPEG_REACHED_EOI:
;;;256        if (require_image)		/* Complain if application wanted an image */
000036  b136              CBZ      r6,|L9.70|
;;;257          ERREXIT(cinfo, JERR_NO_IMAGE);
000038  6821              LDR      r1,[r4,#0]
00003a  2033              MOVS     r0,#0x33
00003c  6148              STR      r0,[r1,#0x14]
00003e  6820              LDR      r0,[r4,#0]
000040  6801              LDR      r1,[r0,#0]
000042  4620              MOV      r0,r4
000044  4788              BLX      r1
                  |L9.70|
;;;258        /* Reset to start state; it would be safer to require the application to
;;;259         * call jpeg_abort, but we can't change it now for compatibility reasons.
;;;260         * A side effect is to free any temporary memory (there shouldn't be any).
;;;261         */
;;;262        jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       jpeg_abort
                  |L9.76|
;;;263        retcode = JPEG_HEADER_TABLES_ONLY;
;;;264        break;
;;;265      case JPEG_SUSPENDED:
;;;266        /* no work */
;;;267        break;
;;;268      }
;;;269    
;;;270      return retcode;
00004c  4628              MOV      r0,r5
;;;271    }
00004e  bd70              POP      {r4-r6,pc}
;;;272    
                          ENDP

