; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\guicharp.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guicharp.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\Core\GUICharP.c]
                          THUMB

                          AREA ||i.GUIPROP_DispChar||, CODE, READONLY, ALIGN=2

                  GUIPROP_DispChar PROC
;;;101    */
;;;102    void GUIPROP_DispChar(U16P c) {
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;103      int BytesPerLine;
;;;104      GUI_DRAWMODE DrawMode = GUI_Context.TextMode;
000004  4c35              LDR      r4,|L1.220|
000006  4606              MOV      r6,r0                 ;102
000008  b087              SUB      sp,sp,#0x1c           ;102
;;;105      const GUI_FONT_PROP GUI_UNI_PTR * pProp = GUIPROP_FindChar(GUI_Context.pAFont->p.pProp, c);
00000a  69e0              LDR      r0,[r4,#0x1c]  ; GUI_Context
00000c  f9b4802e          LDRSH    r8,[r4,#0x2e]         ;104  ; GUI_Context
000010  4631              MOV      r1,r6
000012  6980              LDR      r0,[r0,#0x18]
000014  f7fffffe          BL       GUIPROP_FindChar
;;;106      if (pProp) {
000018  2800              CMP      r0,#0
00001a  d05c              BEQ      |L1.214|
;;;107        GUI_DRAWMODE OldDrawMode;
;;;108    	const GUI_CHARINFO GUI_UNI_PTR * pCharInfo;
;;;109    #if USE_GBK_FONT
;;;110    	if(USE_FLASH_FONT)
;;;111    	{
;;;112    		/*获取字符c的实际宽度.字体图形矩阵等信息*/
;;;113    		if(c<0x1000)
;;;114    		 	pCharInfo= pProp->paCharInfo;
;;;115    		else if((c>>8)>=0x81)
;;;116    			pCharInfo= pProp->paCharInfo+1;
;;;117    
;;;118    		/*从FLASH中获取字符字体图形.*/
;;;119    		Extern_FLASH_Read_GBK_FontImage(c);
;;;120    	}
;;;121    #elif USE_UNICODE_FONT
;;;122    	if(USE_FLASH_FONT)
00001c  4a30              LDR      r2,|L1.224|
00001e  69e1              LDR      r1,[r4,#0x1c]  ; GUI_Context
000020  4291              CMP      r1,r2
000022  d008              BEQ      |L1.54|
000024  4a2f              LDR      r2,|L1.228|
000026  4291              CMP      r1,r2
000028  d005              BEQ      |L1.54|
00002a  4a2f              LDR      r2,|L1.232|
00002c  4291              CMP      r1,r2
00002e  d002              BEQ      |L1.54|
000030  4a2e              LDR      r2,|L1.236|
000032  4291              CMP      r1,r2
000034  d108              BNE      |L1.72|
                  |L1.54|
;;;123    	{
;;;124    		/*获取字符c的实际宽度.字体图形矩阵等信息*/
;;;125    		if(aUnicode_Width)
000036  492e              LDR      r1,|L1.240|
000038  6845              LDR      r5,[r0,#4]
00003a  7809              LDRB     r1,[r1,#0]  ; aUnicode_Width
00003c  b101              CBZ      r1,|L1.64|
00003e  3508              ADDS     r5,r5,#8
                  |L1.64|
;;;126    			pCharInfo= pProp->paCharInfo+1;
;;;127    		else
;;;128    			pCharInfo= pProp->paCharInfo;
;;;129    
;;;130    		/*从FLASH中获取字符字体图形.*/
;;;131    		Extern_FLASH_Read_Unicode_FontImage(c);
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       Extern_FLASH_Read_Unicode_FontImage
000046  e004              B        |L1.82|
                  |L1.72|
;;;132    	}
;;;133    #endif
;;;134    	else
;;;135    	{
;;;136    	   	pCharInfo = pProp->paCharInfo+(c-pProp->First);
000048  6841              LDR      r1,[r0,#4]
00004a  8800              LDRH     r0,[r0,#0]
00004c  1a30              SUBS     r0,r6,r0
00004e  eb0105c0          ADD      r5,r1,r0,LSL #3
                  |L1.82|
;;;137    	}
;;;138        BytesPerLine = pCharInfo->BytesPerLine;
;;;139        OldDrawMode  = LCD_SetDrawMode(DrawMode);
000052  4640              MOV      r0,r8
000054  78ae              LDRB     r6,[r5,#2]            ;138
000056  f7fffffe          BL       LCD_SetDrawMode
00005a  4681              MOV      r9,r0
;;;140        LCD_DrawBitmap( GUI_Context.DispPosX, GUI_Context.DispPosY,
00005c  6868              LDR      r0,[r5,#4]
00005e  2101              MOVS     r1,#1
000060  e9cd0404          STRD     r0,r4,[sp,#0x10]
000064  e9cd1602          STRD     r1,r6,[sp,#8]
000068  69e0              LDR      r0,[r4,#0x1c]  ; GUI_Context
00006a  7dc2              LDRB     r2,[r0,#0x17]
00006c  7d81              LDRB     r1,[r0,#0x16]
00006e  e9cd1200          STRD     r1,r2,[sp,#0]
000072  7d03              LDRB     r3,[r0,#0x14]
000074  782a              LDRB     r2,[r5,#0]
000076  f9b41028          LDRSH    r1,[r4,#0x28]  ; GUI_Context
00007a  f9b40026          LDRSH    r0,[r4,#0x26]  ; GUI_Context
00007e  f7fffffe          BL       LCD_DrawBitmap
;;;141                           pCharInfo->XSize,
;;;142    											 GUI_Context.pAFont->YSize,
;;;143                           GUI_Context.pAFont->XMag,
;;;144    											 GUI_Context.pAFont->YMag,
;;;145                           1,     /* Bits per Pixel */
;;;146                           BytesPerLine,
;;;147                           pCharInfo->pData,
;;;148                           &LCD_BKCOLORINDEX
;;;149                           );
;;;150        /* Fill empty pixel lines */
;;;151        if (GUI_Context.pAFont->YDist > GUI_Context.pAFont->YSize) {
000082  69e0              LDR      r0,[r4,#0x1c]  ; GUI_Context
000084  7d47              LDRB     r7,[r0,#0x15]
000086  7d06              LDRB     r6,[r0,#0x14]
000088  42b7              CMP      r7,r6
00008a  d919              BLS      |L1.192|
;;;152          int YMag = GUI_Context.pAFont->YMag;
00008c  7dc0              LDRB     r0,[r0,#0x17]
;;;153          int YDist = GUI_Context.pAFont->YDist * YMag;
00008e  4347              MULS     r7,r0,r7
;;;154          int YSize = GUI_Context.pAFont->YSize * YMag;
000090  4346              MULS     r6,r0,r6
;;;155          if (DrawMode != LCD_DRAWMODE_TRANS) {
000092  f1b80f02          CMP      r8,#2
000096  d013              BEQ      |L1.192|
;;;156            LCD_COLOR OldColor = GUI_GetColor();
000098  f7fffffe          BL       GUI_GetColor
00009c  4680              MOV      r8,r0
;;;157            GUI_SetColor(GUI_GetBkColor());
00009e  f7fffffe          BL       GUI_GetBkColor
0000a2  f7fffffe          BL       GUI_SetColor
;;;158            LCD_FillRect(GUI_Context.DispPosX, 
0000a6  f9b40026          LDRSH    r0,[r4,#0x26]  ; GUI_Context
0000aa  7829              LDRB     r1,[r5,#0]
0000ac  1842              ADDS     r2,r0,r1
0000ae  f9b41028          LDRSH    r1,[r4,#0x28]  ; GUI_Context
0000b2  19cb              ADDS     r3,r1,r7
0000b4  4431              ADD      r1,r1,r6
0000b6  f7fffffe          BL       LCD_FillRect
;;;159                         GUI_Context.DispPosY + YSize, 
;;;160                         GUI_Context.DispPosX + pCharInfo->XSize, 
;;;161                         GUI_Context.DispPosY + YDist);
;;;162            GUI_SetColor(OldColor);
0000ba  4640              MOV      r0,r8
0000bc  f7fffffe          BL       GUI_SetColor
                  |L1.192|
;;;163          }
;;;164        }
;;;165        LCD_SetDrawMode(OldDrawMode); /* Restore draw mode */
0000c0  4648              MOV      r0,r9
0000c2  f7fffffe          BL       LCD_SetDrawMode
;;;166        GUI_Context.DispPosX += pCharInfo->XDist * GUI_Context.pAFont->XMag;
0000c6  69e2              LDR      r2,[r4,#0x1c]  ; GUI_Context
0000c8  f9b40026          LDRSH    r0,[r4,#0x26]  ; GUI_Context
0000cc  7869              LDRB     r1,[r5,#1]
0000ce  7d92              LDRB     r2,[r2,#0x16]
0000d0  fb010002          MLA      r0,r1,r2,r0
0000d4  84e0              STRH     r0,[r4,#0x26]
                  |L1.214|
;;;167      }
;;;168    }
0000d6  b007              ADD      sp,sp,#0x1c
0000d8  e8bd83f0          POP      {r4-r9,pc}
;;;169    
                          ENDP

                  |L1.220|
                          DCD      GUI_Context
                  |L1.224|
                          DCD      GUI_Font16_Unicode
                  |L1.228|
                          DCD      GUI_Font16_UTF8
                  |L1.232|
                          DCD      GUI_Font16_UTF8X2
                  |L1.236|
                          DCD      GUI_Font16_UTF8X3
                  |L1.240|
                          DCD      aUnicode_Width

                          AREA ||i.GUIPROP_FindChar||, CODE, READONLY, ALIGN=2

                  GUIPROP_FindChar PROC
;;;62     */
;;;63     static const GUI_FONT_PROP GUI_UNI_PTR * GUIPROP_FindChar(const GUI_FONT_PROP GUI_UNI_PTR* pProp, U16P c) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;64     #if USE_GBK_FONT
;;;65     	if(USE_FLASH_FONT)
;;;66     	{
;;;67     		/*如果是外部FLASH汉字,则不需要遍历链表.*/
;;;68     		return pProp;
;;;69     	}
;;;70     #elif USE_UNICODE_FONT
;;;71     	if(USE_FLASH_FONT)
000004  480e              LDR      r0,|L2.64|
000006  4a0f              LDR      r2,|L2.68|
000008  69c0              LDR      r0,[r0,#0x1c]  ; GUI_Context
00000a  4290              CMP      r0,r2
00000c  d008              BEQ      |L2.32|
00000e  4a0e              LDR      r2,|L2.72|
000010  4290              CMP      r0,r2
000012  d005              BEQ      |L2.32|
000014  4a0d              LDR      r2,|L2.76|
000016  4290              CMP      r0,r2
000018  d002              BEQ      |L2.32|
00001a  4a0d              LDR      r2,|L2.80|
00001c  4290              CMP      r0,r2
00001e  d10a              BNE      |L2.54|
                  |L2.32|
;;;72     	{
;;;73     		/*如果是外部FLASH汉字,则不需要遍历链表.*/
;;;74     		Extern_FLASH_Read_Unicode_FontImage(c);
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       Extern_FLASH_Read_Unicode_FontImage
;;;75     		return pProp;
000026  e008              B        |L2.58|
                  |L2.40|
;;;76     	}
;;;77     #endif
;;;78     else
;;;79     {
;;;80       for (; pProp; pProp = pProp->pNext) {
;;;81         if ((c>=pProp->First) && (c<=pProp->Last))
000028  8820              LDRH     r0,[r4,#0]
00002a  4288              CMP      r0,r1
00002c  d802              BHI      |L2.52|
00002e  8860              LDRH     r0,[r4,#2]
000030  4288              CMP      r0,r1
000032  d202              BCS      |L2.58|
                  |L2.52|
000034  68a4              LDR      r4,[r4,#8]            ;80
                  |L2.54|
000036  2c00              CMP      r4,#0                 ;80
000038  d1f6              BNE      |L2.40|
                  |L2.58|
;;;82           break;
;;;83       }
;;;84     }
;;;85       return pProp;
00003a  4620              MOV      r0,r4
;;;86     }
00003c  bd10              POP      {r4,pc}
;;;87     
                          ENDP

00003e  0000              DCW      0x0000
                  |L2.64|
                          DCD      GUI_Context
                  |L2.68|
                          DCD      GUI_Font16_Unicode
                  |L2.72|
                          DCD      GUI_Font16_UTF8
                  |L2.76|
                          DCD      GUI_Font16_UTF8X2
                  |L2.80|
                          DCD      GUI_Font16_UTF8X3

                          AREA ||i.GUIPROP_GetCharDistX||, CODE, READONLY, ALIGN=2

                  GUIPROP_GetCharDistX PROC
;;;173    */
;;;174    int GUIPROP_GetCharDistX(U16P c) {
000000  b570              PUSH     {r4-r6,lr}
;;;175      const GUI_FONT_PROP GUI_UNI_PTR * pProp = GUIPROP_FindChar(GUI_Context.pAFont->p.pProp, c);
000002  4d15              LDR      r5,|L3.88|
000004  4604              MOV      r4,r0                 ;174
000006  4621              MOV      r1,r4
000008  69e8              LDR      r0,[r5,#0x1c]  ; GUI_Context
00000a  6980              LDR      r0,[r0,#0x18]
00000c  f7fffffe          BL       GUIPROP_FindChar
;;;176    #if USE_GBK_FONT
;;;177    if(USE_FLASH_FONT)
;;;178    {
;;;179    	if(c<0x1000)
;;;180    		return (pProp) ? (pProp->paCharInfo+0)->XSize * GUI_Context.pAFont->XMag : 0;
;;;181    	else if((c>>8)>=0x81)
;;;182    		return (pProp) ? (pProp->paCharInfo+1)->XSize * GUI_Context.pAFont->XMag : 0;
;;;183    }
;;;184    #elif USE_UNICODE_FONT
;;;185    if(USE_FLASH_FONT)
000010  4912              LDR      r1,|L3.92|
000012  69ea              LDR      r2,[r5,#0x1c]  ; GUI_Context
000014  428a              CMP      r2,r1
000016  d008              BEQ      |L3.42|
000018  4911              LDR      r1,|L3.96|
00001a  428a              CMP      r2,r1
00001c  d005              BEQ      |L3.42|
00001e  4911              LDR      r1,|L3.100|
000020  428a              CMP      r2,r1
000022  d002              BEQ      |L3.42|
000024  4910              LDR      r1,|L3.104|
000026  428a              CMP      r2,r1
000028  d10c              BNE      |L3.68|
                  |L3.42|
;;;186    {
;;;187    	if(aUnicode_Width)
00002a  4910              LDR      r1,|L3.108|
00002c  7809              LDRB     r1,[r1,#0]  ; aUnicode_Width
00002e  b121              CBZ      r1,|L3.58|
;;;188    		return (pProp) ? (pProp->paCharInfo+1)->XSize * GUI_Context.pAFont->XMag : 0;
000030  2800              CMP      r0,#0
000032  d010              BEQ      |L3.86|
000034  6840              LDR      r0,[r0,#4]
000036  7a00              LDRB     r0,[r0,#8]
000038  e00b              B        |L3.82|
                  |L3.58|
;;;189    	else
;;;190    		return (pProp) ? (pProp->paCharInfo+0)->XSize * GUI_Context.pAFont->XMag : 0;
00003a  2800              CMP      r0,#0
00003c  d00b              BEQ      |L3.86|
00003e  6840              LDR      r0,[r0,#4]
000040  7800              LDRB     r0,[r0,#0]
000042  e006              B        |L3.82|
                  |L3.68|
;;;191    }
;;;192    #endif
;;;193    else
;;;194    {
;;;195      	return (pProp) ? (pProp->paCharInfo+(c-pProp->First))->XSize * GUI_Context.pAFont->XMag : 0;
000044  2800              CMP      r0,#0
000046  d006              BEQ      |L3.86|
000048  6841              LDR      r1,[r0,#4]
00004a  8800              LDRH     r0,[r0,#0]
00004c  1a20              SUBS     r0,r4,r0
00004e  f8110030          LDRB     r0,[r1,r0,LSL #3]
                  |L3.82|
000052  7d91              LDRB     r1,[r2,#0x16]
000054  4348              MULS     r0,r1,r0
                  |L3.86|
;;;196    }
;;;197    }
000056  bd70              POP      {r4-r6,pc}
;;;198    
                          ENDP

                  |L3.88|
                          DCD      GUI_Context
                  |L3.92|
                          DCD      GUI_Font16_Unicode
                  |L3.96|
                          DCD      GUI_Font16_UTF8
                  |L3.100|
                          DCD      GUI_Font16_UTF8X2
                  |L3.104|
                          DCD      GUI_Font16_UTF8X3
                  |L3.108|
                          DCD      aUnicode_Width

                          AREA ||i.GUIPROP_GetFontInfo||, CODE, READONLY, ALIGN=1

                  GUIPROP_GetFontInfo PROC
;;;202    */
;;;203    void GUIPROP_GetFontInfo(const GUI_FONT GUI_UNI_PTR * pFont, GUI_FONTINFO* pfi) {
000000  2001              MOVS     r0,#1
;;;204      GUI_USE_PARA(pFont);
;;;205      pfi->Flags = GUI_FONTINFO_FLAG_PROP;
000002  8008              STRH     r0,[r1,#0]
;;;206    }
000004  4770              BX       lr
;;;207    
                          ENDP


                          AREA ||i.GUIPROP_IsInFont||, CODE, READONLY, ALIGN=1

                  GUIPROP_IsInFont PROC
;;;211    */
;;;212    char GUIPROP_IsInFont(const GUI_FONT GUI_UNI_PTR * pFont, U16 c) {
000000  b510              PUSH     {r4,lr}
;;;213      const GUI_FONT_PROP GUI_UNI_PTR * pProp = GUIPROP_FindChar(pFont->p.pProp, c);
000002  6980              LDR      r0,[r0,#0x18]
000004  f7fffffe          BL       GUIPROP_FindChar
;;;214      return (pProp==NULL) ? 0 : 1;
000008  2800              CMP      r0,#0
00000a  d000              BEQ      |L5.14|
00000c  2001              MOVS     r0,#1
                  |L5.14|
;;;215    }
00000e  bd10              POP      {r4,pc}
;;;216    
                          ENDP

