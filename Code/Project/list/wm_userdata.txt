; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\wm_userdata.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\wm_userdata.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\WM\WM_UserData.c]
                          THUMB

                          AREA ||i.WM_GetUserData||, CODE, READONLY, ALIGN=1

                  WM_GetUserData PROC
;;;63     */
;;;64     int WM_GetUserData(WM_HWIN hWin, void* pDest, int NumBytes) {
000000  b570              PUSH     {r4-r6,lr}
000002  460d              MOV      r5,r1
000004  4614              MOV      r4,r2
000006  0006              MOVS     r6,r0
000008  d00c              BEQ      |L1.36|
;;;65       if (hWin) {
;;;66         WM_Obj *pWin;
;;;67         NumBytes = _CalcNumBytes(hWin, NumBytes);
00000a  4611              MOV      r1,r2
00000c  f7fffffe          BL       _CalcNumBytes
000010  4604              MOV      r4,r0
;;;68         WM_LOCK();
;;;69         pWin = WM_H2P(hWin);
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GUI_ALLOC_h2p
;;;70         memcpy(pDest, pWin + 1, NumBytes);
000018  f1000120          ADD      r1,r0,#0x20
00001c  4622              MOV      r2,r4
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       __aeabi_memcpy
                  |L1.36|
;;;71         WM_UNLOCK();
;;;72       }
;;;73       return NumBytes;
000024  4620              MOV      r0,r4
;;;74     }
000026  bd70              POP      {r4-r6,pc}
;;;75     
                          ENDP


                          AREA ||i.WM_SetUserData||, CODE, READONLY, ALIGN=1

                  WM_SetUserData PROC
;;;84     */
;;;85     int WM_SetUserData(WM_HWIN hWin, const void* pSrc, int NumBytes) {
000000  b570              PUSH     {r4-r6,lr}
000002  460c              MOV      r4,r1
000004  4615              MOV      r5,r2
000006  0006              MOVS     r6,r0
000008  d00b              BEQ      |L2.34|
;;;86       if (hWin) {
;;;87         WM_Obj *pWin;
;;;88         NumBytes = _CalcNumBytes(hWin, NumBytes);
00000a  4611              MOV      r1,r2
00000c  f7fffffe          BL       _CalcNumBytes
000010  4605              MOV      r5,r0
;;;89         WM_LOCK();
;;;90         pWin = WM_H2P(hWin);
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GUI_ALLOC_h2p
;;;91         memcpy(pWin + 1, pSrc, NumBytes);
000018  462a              MOV      r2,r5
00001a  4621              MOV      r1,r4
00001c  3020              ADDS     r0,r0,#0x20
00001e  f7fffffe          BL       __aeabi_memcpy
                  |L2.34|
;;;92         WM_UNLOCK();
;;;93       }
;;;94       return NumBytes;
000022  4628              MOV      r0,r5
;;;95     }
000024  bd70              POP      {r4-r6,pc}
;;;96     
                          ENDP


                          AREA ||i._CalcNumBytes||, CODE, READONLY, ALIGN=1

                  _CalcNumBytes PROC
;;;42     */
;;;43     static int _CalcNumBytes(WM_HWIN hWin, int NumBytes) {
000000  b510              PUSH     {r4,lr}
000002  460c              MOV      r4,r1
;;;44       return Min(GUI_ALLOC_GetSize(hWin) - sizeof(WM_Obj), NumBytes);
000004  f7fffffe          BL       GUI_ALLOC_GetSize
000008  3820              SUBS     r0,r0,#0x20
00000a  42a0              CMP      r0,r4
00000c  db00              BLT      |L3.16|
00000e  4620              MOV      r0,r4
                  |L3.16|
;;;45     }
000010  bd10              POP      {r4,pc}
;;;46     
                          ENDP

