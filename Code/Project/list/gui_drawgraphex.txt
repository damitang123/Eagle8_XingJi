; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\gui_drawgraphex.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui_drawgraphex.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\Core\GUI_DrawGraphEx.c]
                          THUMB

                          AREA ||i.GUI_DrawGraphEx||, CODE, READONLY, ALIGN=2

                  GUI_DrawGraphEx PROC
;;;154    */  
;;;155    void GUI_DrawGraphEx(I16 *pay, int NumPoints, int x0, int y0, int Numerator, int Denominator) {
000000  e92d47fc          PUSH     {r2-r10,lr}
000004  4681              MOV      r9,r0
;;;156      GUI_LOCK();
;;;157      #if (GUI_WINSUPPORT)
;;;158        WM_ADDORG(x0,y0);
000006  480d              LDR      r0,|L1.60|
000008  4688              MOV      r8,r1                 ;155
00000a  e9dd760a          LDRD     r7,r6,[sp,#0x28]      ;155
00000e  6c41              LDR      r1,[r0,#0x44]  ; GUI_Context
000010  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
000012  188d              ADDS     r5,r1,r2
000014  18c4              ADDS     r4,r0,r3
;;;159        WM_ITERATE_START(NULL); {
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       WM__InitIVRSearch
00001c  e009              B        |L1.50|
                  |L1.30|
;;;160      #endif
;;;161      _DrawGraph(pay, NumPoints, x0, y0, Numerator, Denominator);
00001e  e9cd7600          STRD     r7,r6,[sp,#0]
000022  4623              MOV      r3,r4
000024  462a              MOV      r2,r5
000026  4641              MOV      r1,r8
000028  4648              MOV      r0,r9
00002a  f7fffffe          BL       _DrawGraph
;;;162      #if (GUI_WINSUPPORT)
;;;163        } WM_ITERATE_END();
00002e  f7fffffe          BL       WM__GetNextIVR
                  |L1.50|
000032  2800              CMP      r0,#0
000034  d1f3              BNE      |L1.30|
;;;164      #endif
;;;165      GUI_UNLOCK();
;;;166    }
000036  e8bd87fc          POP      {r2-r10,pc}
;;;167    
                          ENDP

00003a  0000              DCW      0x0000
                  |L1.60|
                          DCD      GUI_Context

                          AREA ||i._DrawGraph||, CODE, READONLY, ALIGN=2

                  _DrawGraph PROC
;;;44     */
;;;45     static void _DrawGraph(I16 * pay, int NumPoints, int xOff, int yOff, int Numerator, int Denominator) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  4680              MOV      r8,r0
;;;46       int i;
;;;47       int y0, y1;
;;;48       int yClip0, yClip1;
;;;49       int Method;
;;;50       /* Perform high level clipping in x */
;;;51       yClip0 = GUI_Context.pClipRect_HL->y0;
000006  485f              LDR      r0,|L2.388|
000008  b085              SUB      sp,sp,#0x14           ;45
00000a  4689              MOV      r9,r1                 ;45
00000c  6940              LDR      r0,[r0,#0x14]  ; GUI_Context
00000e  e9dda712          LDRD     r10,r7,[sp,#0x48]     ;45
000012  f9b01002          LDRSH    r1,[r0,#2]
;;;52       yClip1 = GUI_Context.pClipRect_HL->y1;
000016  9103              STR      r1,[sp,#0xc]
000018  f9b01006          LDRSH    r1,[r0,#6]
;;;53       if ((Numerator == 0) || (Denominator == 0) || (NumPoints <= 0)) {
00001c  9102              STR      r1,[sp,#8]
00001e  461d              MOV      r5,r3                 ;45
000020  ea5f010a          MOVS     r1,r10
000024  d07e              BEQ      |L2.292|
000026  2f00              CMP      r7,#0
000028  d07c              BEQ      |L2.292|
00002a  f1b90f00          CMP      r9,#0
00002e  dd79              BLE      |L2.292|
000030  1c49              ADDS     r1,r1,#1
;;;54         return;
;;;55       }
;;;56       if (Numerator == -1) {
000032  d021              BEQ      |L2.120|
;;;57         if (Denominator == 1) {
;;;58           Method = SWAPSIGN;
;;;59         } else {
;;;60           Method = SWAPSIGN_DIVIDE;
;;;61         }
;;;62       } else if (Numerator == 1) {
000034  f1ba0f01          CMP      r10,#1
000038  d024              BEQ      |L2.132|
;;;63         if (Denominator == 1) {
;;;64           Method = 0;
;;;65         } else {
;;;66           Method = DIVIDE;
;;;67         }
;;;68       } else {
;;;69         if (Denominator == 1) {
00003a  2f01              CMP      r7,#1
00003c  d028              BEQ      |L2.144|
;;;70           Method = MULTIPLY;
;;;71         } else {
;;;72           Method = MULTIPLY_DIVIDE;
00003e  2605              MOVS     r6,#5
                  |L2.64|
;;;73         }
;;;74       }
;;;75       i = 0;
000040  2400              MOVS     r4,#0
;;;76       if (GUI_Context.pClipRect_HL) {
000042  b180              CBZ      r0,|L2.102|
;;;77         if (xOff < GUI_Context.pClipRect_HL->x0) {
000044  f9b01000          LDRSH    r1,[r0,#0]
000048  9a07              LDR      r2,[sp,#0x1c]
00004a  4291              CMP      r1,r2
00004c  dd00              BLE      |L2.80|
;;;78           i = GUI_Context.pClipRect_HL->x0 - xOff;
00004e  1a8c              SUBS     r4,r1,r2
                  |L2.80|
;;;79         }
;;;80         if (xOff + NumPoints - 1 > GUI_Context.pClipRect_HL->x1) {
000050  eb020109          ADD      r1,r2,r9
000054  f9b00004          LDRSH    r0,[r0,#4]
000058  1e49              SUBS     r1,r1,#1
00005a  4281              CMP      r1,r0
00005c  dd03              BLE      |L2.102|
;;;81           NumPoints = GUI_Context.pClipRect_HL->x1 - xOff + 1;
00005e  9907              LDR      r1,[sp,#0x1c]
000060  1a40              SUBS     r0,r0,r1
000062  f1000901          ADD      r9,r0,#1
                  |L2.102|
;;;82         }
;;;83       }
;;;84       /* Start drawing if there is something left to do after x-clipping */
;;;85       if (i < NumPoints) {
000066  454c              CMP      r4,r9
000068  da5c              BGE      |L2.292|
;;;86         switch (Method) {
00006a  2e06              CMP      r6,#6
00006c  d236              BCS      |L2.220|
00006e  e8dff006          TBB      [pc,r6]
000072  3511              DCB      0x35,0x11
000074  15191f25          DCB      0x15,0x19,0x1f,0x25
                  |L2.120|
000078  2f01              CMP      r7,#1                 ;57
00007a  d001              BEQ      |L2.128|
00007c  2602              MOVS     r6,#2                 ;60
00007e  e7df              B        |L2.64|
                  |L2.128|
000080  2601              MOVS     r6,#1                 ;58
000082  e7dd              B        |L2.64|
                  |L2.132|
000084  2f01              CMP      r7,#1                 ;63
000086  d001              BEQ      |L2.140|
000088  2603              MOVS     r6,#3                 ;66
00008a  e7d9              B        |L2.64|
                  |L2.140|
00008c  2600              MOVS     r6,#0                 ;64
00008e  e7d7              B        |L2.64|
                  |L2.144|
000090  2604              MOVS     r6,#4                 ;70
000092  e7d5              B        |L2.64|
;;;87         case SWAPSIGN:
;;;88           y0 = -*(pay + i++) + yOff;
000094  f9380014          LDRSH    r0,[r8,r4,LSL #1]
000098  1a29              SUBS     r1,r5,r0
;;;89           break;
00009a  e015              B        |L2.200|
;;;90         case SWAPSIGN_DIVIDE:
;;;91           y0 = (U32)(-*(pay + i++) + yOff) / (U32)Denominator;
00009c  f9380014          LDRSH    r0,[r8,r4,LSL #1]
0000a0  1a28              SUBS     r0,r5,r0
;;;92           break;
0000a2  e002              B        |L2.170|
;;;93         case DIVIDE:
;;;94           y0 = (U32)(*(pay + i++) + yOff) / (U32)Denominator;
0000a4  f9380014          LDRSH    r0,[r8,r4,LSL #1]
0000a8  4428              ADD      r0,r0,r5
                  |L2.170|
0000aa  fbb0f1f7          UDIV     r1,r0,r7              ;91
0000ae  e00b              B        |L2.200|
;;;95           break;
;;;96         case MULTIPLY:
;;;97           y0 = (U32)(*(pay + i++) + yOff) * (U32)Numerator;
0000b0  f9380014          LDRSH    r0,[r8,r4,LSL #1]
0000b4  1941              ADDS     r1,r0,r5
0000b6  fb01f10a          MUL      r1,r1,r10
;;;98           break;
0000ba  e005              B        |L2.200|
;;;99         case MULTIPLY_DIVIDE:
;;;100          y0 = (U32)(*(pay + i++) + yOff) * (U32)Numerator / (U32)Denominator;
0000bc  f9380014          LDRSH    r0,[r8,r4,LSL #1]
0000c0  4428              ADD      r0,r0,r5
0000c2  fb00f00a          MUL      r0,r0,r10
;;;101          break;
0000c6  e7f0              B        |L2.170|
                  |L2.200|
0000c8  1c64              ADDS     r4,r4,#1
;;;102        default:
;;;103          y0 = *(pay + i++) + yOff;
;;;104        }
;;;105        /* Iterate */
;;;106        for (; i < NumPoints; i++) {
0000ca  454c              CMP      r4,r9
0000cc  da56              BGE      |L2.380|
;;;107          /* Perform high level clipping in y */
;;;108          switch (Method) {
0000ce  2e06              CMP      r6,#6
0000d0  d244              BCS      |L2.348|
0000d2  e8dff006          TBB      [pc,r6]
0000d6  4307              DCB      0x43,0x07
0000d8  0b31353b          DCB      0x0b,0x31,0x35,0x3b
                  |L2.220|
0000dc  f9380014          LDRSH    r0,[r8,r4,LSL #1]     ;103
0000e0  1941              ADDS     r1,r0,r5              ;103
0000e2  e7f1              B        |L2.200|
;;;109          case SWAPSIGN:
;;;110            y1 = -*(pay + i) + yOff;
0000e4  f9380014          LDRSH    r0,[r8,r4,LSL #1]
0000e8  1a28              SUBS     r0,r5,r0
;;;111            break;
0000ea  e003              B        |L2.244|
;;;112          case SWAPSIGN_DIVIDE:
;;;113            y1 = (U32)(-*(pay + i) + yOff) / (U32)Denominator;
0000ec  f9380014          LDRSH    r0,[r8,r4,LSL #1]
0000f0  1a28              SUBS     r0,r5,r0
;;;114            break;
0000f2  e030              B        |L2.342|
                  |L2.244|
0000f4  4683              MOV      r11,r0                ;110
;;;115          case DIVIDE:
;;;116            y1 = (U32)(*(pay + i) + yOff) / (U32)Denominator;
;;;117            break;
;;;118          case MULTIPLY:
;;;119            y1 = (U32)(*(pay + i) + yOff) * (U32)Numerator;
;;;120            break;
;;;121          case MULTIPLY_DIVIDE:
;;;122            y1 = (U32)(*(pay + i) + yOff) * (U32)Numerator / (U32)Denominator;
;;;123            break;
;;;124          default:
;;;125            y1 = *(pay + i) + yOff;
;;;126          }
;;;127          if ((y0 >= yClip0) || (y1 >= yClip0)) {
0000f6  9803              LDR      r0,[sp,#0xc]
0000f8  4281              CMP      r1,r0
0000fa  da02              BGE      |L2.258|
0000fc  9a03              LDR      r2,[sp,#0xc]
0000fe  4593              CMP      r11,r2
000100  db3a              BLT      |L2.376|
                  |L2.258|
;;;128            if ((y0 <= yClip1) || (y1 <= yClip1)) {
000102  9802              LDR      r0,[sp,#8]
000104  4281              CMP      r1,r0
000106  dd02              BLE      |L2.270|
000108  9a02              LDR      r2,[sp,#8]
00010a  4593              CMP      r11,r2
00010c  dc34              BGT      |L2.376|
                  |L2.270|
;;;129              int y01;
;;;130              y01 = (y1 + y0) / 2;
00010e  eb0b0001          ADD      r0,r11,r1
000112  eb0070d0          ADD      r0,r0,r0,LSR #31
000116  1040              ASRS     r0,r0,#1
;;;131              if (y0 <= y1) {
000118  9000              STR      r0,[sp,#0]
;;;132                LCD_DrawVLine(i + xOff - 1, y0, y01);
;;;133                LCD_DrawVLine(i + xOff, y01, y1);
;;;134              } else {
;;;135                LCD_DrawVLine(i + xOff - 1, y01, y0);
00011a  9807              LDR      r0,[sp,#0x1c]
00011c  4559              CMP      r1,r11                ;131
00011e  4420              ADD      r0,r0,r4
000120  9001              STR      r0,[sp,#4]            ;131
000122  e000              B        |L2.294|
                  |L2.292|
000124  e02a              B        |L2.380|
                  |L2.294|
000126  dc1d              BGT      |L2.356|
000128  1e40              SUBS     r0,r0,#1              ;132
00012a  9a00              LDR      r2,[sp,#0]            ;132
00012c  f7fffffe          BL       LCD_DrawVLine
000130  e9dd1000          LDRD     r1,r0,[sp,#0]         ;133
000134  465a              MOV      r2,r11                ;133
000136  e01d              B        |L2.372|
000138  f9380014          LDRSH    r0,[r8,r4,LSL #1]     ;116
00013c  4428              ADD      r0,r0,r5              ;116
00013e  e00a              B        |L2.342|
000140  f9380014          LDRSH    r0,[r8,r4,LSL #1]     ;119
000144  4428              ADD      r0,r0,r5              ;119
000146  fb00f00a          MUL      r0,r0,r10             ;119
00014a  e7d3              B        |L2.244|
00014c  f9380014          LDRSH    r0,[r8,r4,LSL #1]     ;122
000150  4428              ADD      r0,r0,r5              ;122
000152  fb00f00a          MUL      r0,r0,r10             ;122
                  |L2.342|
000156  fbb0f0f7          UDIV     r0,r0,r7              ;122
00015a  e7cb              B        |L2.244|
                  |L2.348|
00015c  f9380014          LDRSH    r0,[r8,r4,LSL #1]     ;125
000160  4428              ADD      r0,r0,r5              ;125
000162  e7c7              B        |L2.244|
                  |L2.356|
000164  460a              MOV      r2,r1
000166  1e40              SUBS     r0,r0,#1
000168  9900              LDR      r1,[sp,#0]
00016a  f7fffffe          BL       LCD_DrawVLine
;;;136                LCD_DrawVLine(i + xOff, y1, y01);
00016e  e9dd2000          LDRD     r2,r0,[sp,#0]
000172  4659              MOV      r1,r11
                  |L2.372|
000174  f7fffffe          BL       LCD_DrawVLine
                  |L2.376|
;;;137              }
;;;138            }
;;;139          }
;;;140          y0 = y1;
000178  4659              MOV      r1,r11
00017a  e7a5              B        |L2.200|
                  |L2.380|
;;;141        }
;;;142      }
;;;143    }
00017c  b009              ADD      sp,sp,#0x24
00017e  e8bd8ff0          POP      {r4-r11,pc}
;;;144    
                          ENDP

000182  0000              DCW      0x0000
                  |L2.388|
                          DCD      GUI_Context
