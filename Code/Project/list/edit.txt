; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\edit.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\edit.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\Widget\EDIT.c]
                          THUMB

                          AREA ||i.EDIT_AddKey||, CODE, READONLY, ALIGN=1

                  EDIT_AddKey PROC
;;;578    */
;;;579    void EDIT_AddKey(EDIT_Handle hObj, int Key) {
000000  b570              PUSH     {r4-r6,lr}
000002  460e              MOV      r6,r1
000004  0005              MOVS     r5,r0
000006  d078              BEQ      |L1.250|
;;;580      if (hObj) {
;;;581        EDIT_Obj* pObj;
;;;582        WM_LOCK();
;;;583        pObj = EDIT_H2P(hObj);
000008  f7fffffe          BL       GUI_ALLOC_h2p
00000c  0004              MOVS     r4,r0
;;;584        if (pObj) {
00000e  d074              BEQ      |L1.250|
;;;585          if (pObj->pfAddKeyEx) {
000010  6ce2              LDR      r2,[r4,#0x4c]
000012  b11a              CBZ      r2,|L1.28|
;;;586            pObj->pfAddKeyEx(hObj, Key);
000014  4631              MOV      r1,r6
000016  4628              MOV      r0,r5
000018  4790              BLX      r2
00001a  e069              B        |L1.240|
                  |L1.28|
;;;587          } else {
;;;588            switch (Key) {
00001c  2e12              CMP      r6,#0x12
00001e  d047              BEQ      |L1.176|
000020  dc06              BGT      |L1.48|
000022  2e08              CMP      r6,#8
000024  d04b              BEQ      |L1.190|
000026  2e10              CMP      r6,#0x10
000028  d044              BEQ      |L1.180|
00002a  2e11              CMP      r6,#0x11
00002c  d106              BNE      |L1.60|
00002e  e018              B        |L1.98|
                  |L1.48|
000030  2e13              CMP      r6,#0x13
000032  d027              BEQ      |L1.132|
000034  2e1d              CMP      r6,#0x1d
000036  d04d              BEQ      |L1.212|
000038  2e1e              CMP      r6,#0x1e
00003a  d046              BEQ      |L1.202|
                  |L1.60|
;;;589            case GUI_KEY_UP:
;;;590              if (pObj->hpText) {
;;;591                char* pText;
;;;592                U16 Char;
;;;593                pText  = (char*) GUI_ALLOC_h2p(pObj->hpText);
;;;594                pText += GUI_UC__NumChars2NumBytes(pText, pObj->CursorPos);
;;;595                Char   = GUI_UC_GetCharCode(pText);
;;;596                if (Char < 0x7f) {  
;;;597                  *pText = Char + 1;
;;;598                  WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
;;;599                }
;;;600              }
;;;601              break;
;;;602            case GUI_KEY_DOWN:
;;;603              if (pObj->hpText) {
;;;604                char* pText;
;;;605                U16 Char;
;;;606                pText  = (char*) GUI_ALLOC_h2p(pObj->hpText);
;;;607                pText += GUI_UC__NumChars2NumBytes(pText, pObj->CursorPos);
;;;608                Char   = GUI_UC_GetCharCode(pText);
;;;609                if (Char > 0x20) {  
;;;610                  *pText = Char - 1;
;;;611                  WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
;;;612                }
;;;613              }
;;;614              break;
;;;615            case GUI_KEY_RIGHT:
;;;616              EDIT__SetCursorPos(pObj, pObj->CursorPos + 1);
;;;617              break;
;;;618            case GUI_KEY_LEFT:
;;;619              EDIT__SetCursorPos(pObj, pObj->CursorPos - 1);
;;;620              break;
;;;621            case GUI_KEY_BACKSPACE:
;;;622              EDIT__SetCursorPos(pObj, pObj->CursorPos - 1);
;;;623              _DeleteChar(hObj, pObj);
;;;624              break;
;;;625            case GUI_KEY_DELETE:
;;;626              _DeleteChar(hObj, pObj);
;;;627              break;
;;;628            case GUI_KEY_INSERT:
;;;629              if (pObj->EditMode == GUI_EDIT_MODE_OVERWRITE) {
;;;630                pObj->EditMode = GUI_EDIT_MODE_INSERT;
;;;631              } else {
;;;632                pObj->EditMode = GUI_EDIT_MODE_OVERWRITE;
;;;633                EDIT__SetCursorPos(pObj, pObj->CursorPos);
;;;634              }
;;;635              break;
;;;636            default:
;;;637              if (Key >= 0x20) {
00003c  2e20              CMP      r6,#0x20
00003e  db57              BLT      |L1.240|
;;;638                if (pObj->EditMode != GUI_EDIT_MODE_INSERT) {
000040  f8940048          LDRB     r0,[r4,#0x48]
000044  b118              CBZ      r0,|L1.78|
;;;639                  _DeleteChar(hObj, pObj);
000046  4621              MOV      r1,r4
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       _DeleteChar
                  |L1.78|
;;;640                }
;;;641                if (_InsertChar(hObj, pObj, Key)) {
00004e  b2b2              UXTH     r2,r6
000050  4621              MOV      r1,r4
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       _InsertChar
000058  b348              CBZ      r0,|L1.174|
;;;642                  EDIT__SetCursorPos(pObj, pObj->CursorPos + 1);
00005a  6c21              LDR      r1,[r4,#0x40]
00005c  4620              MOV      r0,r4
                  |L1.94|
00005e  1c49              ADDS     r1,r1,#1
000060  e02a              B        |L1.184|
                  |L1.98|
000062  f9b40028          LDRSH    r0,[r4,#0x28]         ;590
000066  b310              CBZ      r0,|L1.174|
000068  f7fffffe          BL       GUI_ALLOC_h2p
00006c  4606              MOV      r6,r0                 ;593
00006e  6c21              LDR      r1,[r4,#0x40]         ;594
000070  f7fffffe          BL       GUI_UC__NumChars2NumBytes
000074  1984              ADDS     r4,r0,r6              ;594
000076  4620              MOV      r0,r4                 ;595
000078  f7fffffe          BL       GUI_UC_GetCharCode
00007c  287f              CMP      r0,#0x7f              ;596
00007e  d237              BCS      |L1.240|
000080  1c40              ADDS     r0,r0,#1              ;596
000082  e00f              B        |L1.164|
                  |L1.132|
000084  f9b40028          LDRSH    r0,[r4,#0x28]         ;603
000088  b188              CBZ      r0,|L1.174|
00008a  f7fffffe          BL       GUI_ALLOC_h2p
00008e  4606              MOV      r6,r0                 ;606
000090  6c21              LDR      r1,[r4,#0x40]         ;607
000092  f7fffffe          BL       GUI_UC__NumChars2NumBytes
000096  1984              ADDS     r4,r0,r6              ;607
000098  4620              MOV      r0,r4                 ;608
00009a  f7fffffe          BL       GUI_UC_GetCharCode
00009e  2820              CMP      r0,#0x20              ;609
0000a0  d926              BLS      |L1.240|
0000a2  1e40              SUBS     r0,r0,#1              ;609
                  |L1.164|
0000a4  7020              STRB     r0,[r4,#0]            ;610
0000a6  2105              MOVS     r1,#5                 ;611
0000a8  4628              MOV      r0,r5                 ;611
0000aa  f7fffffe          BL       WM_NotifyParent
                  |L1.174|
0000ae  e01f              B        |L1.240|
                  |L1.176|
0000b0  6c21              LDR      r1,[r4,#0x40]         ;617
0000b2  e7d4              B        |L1.94|
                  |L1.180|
0000b4  6c21              LDR      r1,[r4,#0x40]         ;619
0000b6  1e49              SUBS     r1,r1,#1              ;619
                  |L1.184|
0000b8  f7fffffe          BL       EDIT__SetCursorPos
0000bc  e018              B        |L1.240|
                  |L1.190|
0000be  6c21              LDR      r1,[r4,#0x40]         ;622
0000c0  1e49              SUBS     r1,r1,#1              ;622
0000c2  f7fffffe          BL       EDIT__SetCursorPos
0000c6  4621              MOV      r1,r4                 ;623
0000c8  e000              B        |L1.204|
                  |L1.202|
0000ca  4601              MOV      r1,r0                 ;626
                  |L1.204|
0000cc  4628              MOV      r0,r5                 ;626
0000ce  f7fffffe          BL       _DeleteChar
0000d2  e00d              B        |L1.240|
                  |L1.212|
0000d4  f8940048          LDRB     r0,[r4,#0x48]         ;629
0000d8  2801              CMP      r0,#1                 ;629
0000da  d006              BEQ      |L1.234|
0000dc  2001              MOVS     r0,#1                 ;632
0000de  f8840048          STRB     r0,[r4,#0x48]         ;632
0000e2  4620              MOV      r0,r4                 ;633
0000e4  6c21              LDR      r1,[r4,#0x40]         ;633
0000e6  e7e7              B        |L1.184|
0000e8  e007              B        |L1.250|
                  |L1.234|
0000ea  2000              MOVS     r0,#0                 ;630
0000ec  f8840048          STRB     r0,[r4,#0x48]         ;630
                  |L1.240|
;;;643                }
;;;644              }
;;;645            }
;;;646          }
;;;647          EDIT_Invalidate(hObj);
0000f0  4628              MOV      r0,r5
0000f2  e8bd4070          POP      {r4-r6,lr}
0000f6  f7ffbffe          B.W      WM_InvalidateWindow
                  |L1.250|
;;;648        }
;;;649        WM_UNLOCK();
;;;650      }
;;;651    }
0000fa  bd70              POP      {r4-r6,pc}
;;;652    
                          ENDP


                          AREA ||i.EDIT_Callback||, CODE, READONLY, ALIGN=1

                  EDIT_Callback PROC
;;;438    */
;;;439    void EDIT_Callback (WM_MESSAGE * pMsg) {
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;440      int IsEnabled;
;;;441      EDIT_Handle hObj;
;;;442      EDIT_Obj*   pObj;
;;;443      hObj = (EDIT_Handle) pMsg->hWin;       
000004  f9b05004          LDRSH    r5,[r0,#4]
000008  4604              MOV      r4,r0                 ;439
;;;444      pObj = (EDIT_Obj *)GUI_ALLOC_h2p(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       GUI_ALLOC_h2p
000010  4606              MOV      r6,r0
;;;445      IsEnabled = WM__IsEnabled(hObj);
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       WM__IsEnabled
000018  4607              MOV      r7,r0
;;;446      /* Let widget handle the standard messages */
;;;447      if (WIDGET_HandleActive(hObj, pMsg) == 0) {
00001a  4621              MOV      r1,r4
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       WIDGET_HandleActive
000022  2800              CMP      r0,#0
000024  d043              BEQ      |L2.174|
;;;448        return;
;;;449      }
;;;450      switch (pMsg->MsgId) {
000026  6820              LDR      r0,[r4,#0]
000028  280b              CMP      r0,#0xb
00002a  d01d              BEQ      |L2.104|
00002c  280c              CMP      r0,#0xc
00002e  d004              BEQ      |L2.58|
000030  280e              CMP      r0,#0xe
000032  d01e              BEQ      |L2.114|
000034  280f              CMP      r0,#0xf
000036  d135              BNE      |L2.164|
000038  e010              B        |L2.92|
                  |L2.58|
00003a  68a0              LDR      r0,[r4,#8]
00003c  b160              CBZ      r0,|L2.88|
00003e  7a01              LDRB     r1,[r0,#8]
000040  b129              CBZ      r1,|L2.78|
000042  6801              LDR      r1,[r0,#0]
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       EDIT_SetCursorAtPixel
00004a  2101              MOVS     r1,#1
00004c  e000              B        |L2.80|
                  |L2.78|
00004e  2102              MOVS     r1,#2
                  |L2.80|
000050  4628              MOV      r0,r5
000052  f7fffffe          BL       WM_NotifyParent
000056  e025              B        |L2.164|
                  |L2.88|
000058  2103              MOVS     r1,#3
00005a  e7f9              B        |L2.80|
                  |L2.92|
;;;451      case WM_TOUCH:
;;;452        _OnTouch(hObj, pObj, pMsg);
;;;453        break;
;;;454      case WM_PAINT:
;;;455        GUI_DEBUG_LOG("EDIT: _Callback(WM_PAINT)\n");
;;;456        _Paint(pObj, hObj);
00005c  4629              MOV      r1,r5
00005e  4630              MOV      r0,r6
000060  e8bd41f0          POP      {r4-r8,lr}
000064  f7ffbffe          B.W      _Paint
                  |L2.104|
000068  f1060028          ADD      r0,r6,#0x28
00006c  f7fffffe          BL       GUI_ALLOC_FreePtr
;;;457        return;
;;;458      case WM_DELETE:
;;;459        GUI_DEBUG_LOG("EDIT: _Callback(WM_DELETE)\n");
;;;460        _Delete(pObj);
;;;461        break;       /* No return here ... WM_DefaultProc needs to be called */
000070  e018              B        |L2.164|
                  |L2.114|
;;;462      case WM_KEY:
;;;463        if (IsEnabled) {
000072  b1bf              CBZ      r7,|L2.164|
;;;464          if ( ((const WM_KEY_INFO*)(pMsg->Data.p))->PressedCnt >0) {
000074  68a0              LDR      r0,[r4,#8]
000076  6841              LDR      r1,[r0,#4]
000078  2900              CMP      r1,#0
00007a  dd13              BLE      |L2.164|
;;;465            int Key = ((const WM_KEY_INFO*)(pMsg->Data.p))->Key;
;;;466            switch (Key) {
00007c  6801              LDR      r1,[r0,#0]
00007e  290a              CMP      r1,#0xa
000080  d010              BEQ      |L2.164|
000082  dc06              BGT      |L2.146|
000084  2905              CMP      r1,#5
000086  d00d              BEQ      |L2.164|
000088  2906              CMP      r1,#6
00008a  d00b              BEQ      |L2.164|
00008c  2909              CMP      r1,#9
00008e  d104              BNE      |L2.154|
000090  e008              B        |L2.164|
                  |L2.146|
000092  290d              CMP      r1,#0xd
000094  d006              BEQ      |L2.164|
000096  291b              CMP      r1,#0x1b
000098  d004              BEQ      |L2.164|
                  |L2.154|
;;;467              case GUI_KEY_ENTER:
;;;468              case GUI_KEY_ESCAPE:
;;;469              case GUI_KEY_TAB:
;;;470              case GUI_KEY_BACKTAB:
;;;471              case GUI_KEY_LEFT_FUN:
;;;472              case GUI_KEY_RIGHT_FUN:
;;;473                break;                    /* Send to parent by not doing anything */
;;;474              default:
;;;475                EDIT_AddKey(hObj, Key);
00009a  4628              MOV      r0,r5
00009c  e8bd41f0          POP      {r4-r8,lr}
0000a0  f7ffbffe          B.W      EDIT_AddKey
                  |L2.164|
;;;476                return;
;;;477            }
;;;478          }
;;;479        }
;;;480        break;
;;;481      }
;;;482      WM_DefaultProc(pMsg);
0000a4  4620              MOV      r0,r4
0000a6  e8bd41f0          POP      {r4-r8,lr}
0000aa  f7ffbffe          B.W      WM_DefaultProc
                  |L2.174|
;;;483    }
0000ae  e8bd81f0          POP      {r4-r8,pc}
;;;484    
                          ENDP


                          AREA ||i.EDIT_CreateEx||, CODE, READONLY, ALIGN=2

                  EDIT_CreateEx PROC
;;;494    */
;;;495    EDIT_Handle EDIT_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent, int WinFlags, int ExFlags,
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;496                              int Id, int MaxLen)
;;;497    {
000004  460c              MOV      r4,r1
000006  e9dd510a          LDRD     r5,r1,[sp,#0x28]
00000a  e9dd760d          LDRD     r7,r6,[sp,#0x34]
;;;498      EDIT_Handle hObj;
;;;499      GUI_USE_PARA(ExFlags);
;;;500      WM_LOCK();
;;;501      /* Alloc memory for obj */
;;;502      WinFlags |= WM_CF_LATE_CLIP;    /* Always use late clipping since widget is optimized for it. */
00000e  b289              UXTH     r1,r1
;;;503      hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WM_CF_SHOW | WinFlags, EDIT_Callback,
000010  f4415180          ORR      r1,r1,#0x1000
000014  f0410102          ORR      r1,r1,#2
000018  f04f0e50          MOV      lr,#0x50
00001c  f8dfc05c          LDR      r12,|L3.124|
000020  e9cd5100          STRD     r5,r1,[sp,#0]
000024  e9cdce02          STRD     r12,lr,[sp,#8]
000028  4621              MOV      r1,r4
00002a  f7fffffe          BL       WM_CreateWindowAsChild
00002e  0005              MOVS     r5,r0
;;;504                                    sizeof(EDIT_Obj) - sizeof(WM_Obj));
;;;505      if (hObj) {
000030  d01f              BEQ      |L3.114|
;;;506        EDIT_Obj* pObj;
;;;507        pObj = (EDIT_Obj *)GUI_ALLOC_h2p(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
000032  f7fffffe          BL       GUI_ALLOC_h2p
000036  4604              MOV      r4,r0
;;;508        /* init widget specific variables */
;;;509        WIDGET__Init(&pObj->Widget, Id, WIDGET_STATE_FOCUSSABLE);
000038  2210              MOVS     r2,#0x10
00003a  4639              MOV      r1,r7
00003c  f7fffffe          BL       WIDGET__Init
;;;510        /* init member variables */
;;;511        EDIT_INIT_ID(pObj);
;;;512        pObj->Props         = EDIT__DefaultProps;
000040  221c              MOVS     r2,#0x1c
000042  490f              LDR      r1,|L3.128|
000044  f1040054          ADD      r0,r4,#0x54
000048  f7fffffe          BL       __aeabi_memcpy4
;;;513        pObj->XSizeCursor   = 1;
00004c  2001              MOVS     r0,#1
00004e  f8840049          STRB     r0,[r4,#0x49]
;;;514        pObj->MaxLen        = (MaxLen == 0) ? 8 : MaxLen;
000052  b906              CBNZ     r6,|L3.86|
000054  2608              MOVS     r6,#8
                  |L3.86|
000056  b231              SXTH     r1,r6
000058  8561              STRH     r1,[r4,#0x2a]
;;;515        pObj->BufferSize    = 0;
00005a  2000              MOVS     r0,#0
00005c  85a0              STRH     r0,[r4,#0x2c]
;;;516        pObj->hpText        = 0;
00005e  8520              STRH     r0,[r4,#0x28]
;;;517        if (_IncrementBuffer(pObj, pObj->MaxLen + 1) == 0) {
000060  4620              MOV      r0,r4
000062  1c49              ADDS     r1,r1,#1
000064  f7fffffe          BL       _IncrementBuffer
000068  b918              CBNZ     r0,|L3.114|
;;;518          GUI_DEBUG_ERROROUT("EDIT_Create failed to alloc buffer");
;;;519          EDIT_Delete(hObj);
00006a  4628              MOV      r0,r5
00006c  f7fffffe          BL       WM_DeleteWindow
;;;520          hObj = 0;
000070  2500              MOVS     r5,#0
                  |L3.114|
;;;521        }
;;;522      }
;;;523      WM_UNLOCK();
;;;524      return hObj;
;;;525    }
000072  b004              ADD      sp,sp,#0x10
000074  4628              MOV      r0,r5                 ;524
000076  e8bd81f0          POP      {r4-r8,pc}
;;;526    
                          ENDP

00007a  0000              DCW      0x0000
                  |L3.124|
                          DCD      EDIT_Callback
                  |L3.128|
                          DCD      ||.data||

                          AREA ||i.EDIT_GetText||, CODE, READONLY, ALIGN=1

                  EDIT_GetText PROC
;;;754    */
;;;755    void EDIT_GetText(EDIT_Handle hObj, char* sDest, int MaxLen) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4614              MOV      r4,r2
000006  000d              MOVS     r5,r1
000008  d01c              BEQ      |L4.68|
;;;756      if (sDest) {
;;;757        *sDest = 0;
00000a  2600              MOVS     r6,#0
00000c  702e              STRB     r6,[r5,#0]
;;;758        if (hObj) {
00000e  2800              CMP      r0,#0
000010  d018              BEQ      |L4.68|
;;;759          EDIT_Obj* pObj;
;;;760          WM_LOCK();
;;;761          pObj = EDIT_H2P(hObj);
000012  f7fffffe          BL       GUI_ALLOC_h2p
;;;762          if (pObj->hpText) {
000016  f9b00028          LDRSH    r0,[r0,#0x28]
00001a  2800              CMP      r0,#0
00001c  d012              BEQ      |L4.68|
;;;763            char* pText;
;;;764            int NumChars, NumBytes;
;;;765            pText = (char*) GUI_ALLOC_h2p(pObj->hpText);
00001e  f7fffffe          BL       GUI_ALLOC_h2p
000022  4607              MOV      r7,r0
;;;766            NumChars = GUI__GetNumChars(pText);
000024  f7fffffe          BL       GUI__GetNumChars
000028  4601              MOV      r1,r0
;;;767            if (NumChars > MaxLen) {
00002a  42a0              CMP      r0,r4
00002c  dd00              BLE      |L4.48|
;;;768              NumChars = MaxLen;
00002e  4621              MOV      r1,r4
                  |L4.48|
;;;769            }
;;;770            NumBytes = GUI_UC__NumChars2NumBytes(pText, NumChars);
000030  4638              MOV      r0,r7
000032  f7fffffe          BL       GUI_UC__NumChars2NumBytes
000036  4604              MOV      r4,r0
;;;771            memcpy(sDest, pText, NumBytes);
000038  4602              MOV      r2,r0
00003a  4639              MOV      r1,r7
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       __aeabi_memcpy
;;;772            *(sDest + NumBytes) = 0;
000042  552e              STRB     r6,[r5,r4]
                  |L4.68|
;;;773          }
;;;774          WM_UNLOCK();
;;;775        }
;;;776      }
;;;777    }
000044  e8bd81f0          POP      {r4-r8,pc}
;;;778    
                          ENDP


                          AREA ||i.EDIT_GetValue||, CODE, READONLY, ALIGN=1

                  EDIT_GetValue PROC
;;;782    */
;;;783    I32  EDIT_GetValue(EDIT_Handle hObj) {
000000  b510              PUSH     {r4,lr}
000002  0001              MOVS     r1,r0
;;;784      EDIT_Obj* pObj;
;;;785      I32 r = 0;
000004  f04f0000          MOV      r0,#0
000008  d003              BEQ      |L5.18|
;;;786      if (hObj) {
;;;787        WM_LOCK();
;;;788        pObj = EDIT_H2P(hObj);
00000a  4608              MOV      r0,r1
00000c  f7fffffe          BL       GUI_ALLOC_h2p
;;;789        r = pObj->CurrentValue;
000010  6bc0              LDR      r0,[r0,#0x3c]
                  |L5.18|
;;;790        WM_UNLOCK();
;;;791      }
;;;792      return r;
;;;793    }
000012  bd10              POP      {r4,pc}
;;;794    
                          ENDP


                          AREA ||i.EDIT_SetBkColor||, CODE, READONLY, ALIGN=1

                  EDIT_SetBkColor PROC
;;;673    */
;;;674    void EDIT_SetBkColor(EDIT_Handle hObj, unsigned int Index, GUI_COLOR color) {
000000  b570              PUSH     {r4-r6,lr}
000002  4615              MOV      r5,r2
000004  460c              MOV      r4,r1
000006  0006              MOVS     r6,r0
000008  d00d              BEQ      |L6.38|
;;;675      EDIT_Obj* pObj;
;;;676      if (hObj == 0)
;;;677        return;
;;;678      WM_LOCK();
;;;679      pObj = EDIT_H2P(hObj);
00000a  f7fffffe          BL       GUI_ALLOC_h2p
;;;680      if (pObj) {
00000e  2800              CMP      r0,#0
000010  d009              BEQ      |L6.38|
;;;681        if (Index < GUI_COUNTOF(pObj->Props.aBkColor)) {
000012  2c02              CMP      r4,#2
000014  d207              BCS      |L6.38|
;;;682          pObj->Props.aBkColor[Index] = color;
000016  eb000084          ADD      r0,r0,r4,LSL #2
;;;683          EDIT_Invalidate(hObj);
00001a  6685              STR      r5,[r0,#0x68]
00001c  4630              MOV      r0,r6
00001e  e8bd4070          POP      {r4-r6,lr}
000022  f7ffbffe          B.W      WM_InvalidateWindow
                  |L6.38|
;;;684        }
;;;685      }
;;;686      WM_UNLOCK();
;;;687    }
000026  bd70              POP      {r4-r6,pc}
;;;688    
                          ENDP


                          AREA ||i.EDIT_SetCursorAtPixel||, CODE, READONLY, ALIGN=1

                  EDIT_SetCursorAtPixel PROC
;;;536    */
;;;537    void EDIT_SetCursorAtPixel(EDIT_Handle hObj, int xPos) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  460d              MOV      r5,r1
000006  ea5f0800          MOVS     r8,r0
00000a  d04b              BEQ      |L7.164|
;;;538      if (hObj) {
;;;539        EDIT_Obj* pObj;
;;;540        WM_LOCK();
;;;541        pObj = EDIT_H2P(hObj);
00000c  f7fffffe          BL       GUI_ALLOC_h2p
000010  4604              MOV      r4,r0
;;;542        if (pObj->hpText) {    
000012  f9b00028          LDRSH    r0,[r0,#0x28]
000016  2800              CMP      r0,#0
000018  d044              BEQ      |L7.164|
;;;543          const GUI_FONT GUI_UNI_PTR *pOldFont;
;;;544          int xSize, TextWidth, NumChars;
;;;545          const char GUI_UNI_PTR * pText;
;;;546          pText = (char*) GUI_ALLOC_h2p(pObj->hpText);
00001a  f7fffffe          BL       GUI_ALLOC_h2p
00001e  4682              MOV      r10,r0
;;;547          pOldFont = GUI_SetFont(pObj->Props.pFont);
000020  6de0              LDR      r0,[r4,#0x5c]
000022  f7fffffe          BL       GUI_SetFont
000026  4681              MOV      r9,r0
;;;548          xSize = WM_GetWindowSizeX(hObj);
000028  4640              MOV      r0,r8
00002a  f7fffffe          BL       WM_GetWindowSizeX
00002e  4607              MOV      r7,r0
;;;549          TextWidth = GUI_GetStringDistX(pText);
000030  4650              MOV      r0,r10
000032  f7fffffe          BL       GUI_GetStringDistX
000036  4606              MOV      r6,r0
;;;550          switch (pObj->Props.Align & GUI_TA_HORIZONTAL) {
000038  f8940054          LDRB     r0,[r4,#0x54]
00003c  f0000003          AND      r0,r0,#3
000040  2801              CMP      r0,#1
000042  d016              BEQ      |L7.114|
000044  2802              CMP      r0,#2
000046  d00d              BEQ      |L7.100|
;;;551          case GUI_TA_HCENTER:
;;;552            xPos -= (xSize - TextWidth + 1) / 2;
;;;553            break;
;;;554          case GUI_TA_RIGHT:
;;;555            xPos -= xSize - TextWidth - (pObj->Props.Border + EDIT_XOFF);
;;;556            break;
;;;557          default:
;;;558            xPos -= (pObj->Props.Border + EDIT_XOFF) + pObj->Widget.pEffect->EffectSize;
000048  6a21              LDR      r1,[r4,#0x20]
00004a  6da0              LDR      r0,[r4,#0x58]
00004c  6949              LDR      r1,[r1,#0x14]
00004e  4408              ADD      r0,r0,r1
000050  1a2d              SUBS     r5,r5,r0
000052  1e6d              SUBS     r5,r5,#1
                  |L7.84|
;;;559          }
;;;560          NumChars = GUI__GetNumChars(pText);
000054  4650              MOV      r0,r10
000056  f7fffffe          BL       GUI__GetNumChars
00005a  4601              MOV      r1,r0
;;;561          if (xPos < 0) {
00005c  2d00              CMP      r5,#0
00005e  da0e              BGE      |L7.126|
;;;562            EDIT__SetCursorPos(pObj, 0);
000060  2100              MOVS     r1,#0
000062  e014              B        |L7.142|
                  |L7.100|
000064  1bb8              SUBS     r0,r7,r6              ;552
000066  1c40              ADDS     r0,r0,#1              ;552
000068  eb0070d0          ADD      r0,r0,r0,LSR #31      ;552
00006c  eba50560          SUB      r5,r5,r0,ASR #1       ;552
000070  e7f0              B        |L7.84|
                  |L7.114|
000072  6da1              LDR      r1,[r4,#0x58]         ;555
000074  1bb8              SUBS     r0,r7,r6              ;555
000076  1a40              SUBS     r0,r0,r1              ;555
000078  1a2d              SUBS     r5,r5,r0              ;555
00007a  1c6d              ADDS     r5,r5,#1              ;555
00007c  e7ea              B        |L7.84|
                  |L7.126|
;;;563          } else if (xPos > TextWidth) {
00007e  42b5              CMP      r5,r6
000080  dc05              BGT      |L7.142|
;;;564            EDIT__SetCursorPos(pObj, NumChars);
;;;565          } else {
;;;566            EDIT__SetCursorPos(pObj, GUI__GetCursorPosChar(pText, xPos, NumChars));
000082  4602              MOV      r2,r0
000084  4629              MOV      r1,r5
000086  4650              MOV      r0,r10
000088  f7fffffe          BL       GUI__GetCursorPosChar
00008c  4601              MOV      r1,r0
                  |L7.142|
00008e  4620              MOV      r0,r4                 ;564
000090  f7fffffe          BL       EDIT__SetCursorPos
;;;567          }
;;;568          GUI_SetFont(pOldFont);
000094  4648              MOV      r0,r9
000096  f7fffffe          BL       GUI_SetFont
;;;569          EDIT_Invalidate(hObj);
00009a  4640              MOV      r0,r8
00009c  e8bd47f0          POP      {r4-r10,lr}
0000a0  f7ffbffe          B.W      WM_InvalidateWindow
                  |L7.164|
;;;570        }
;;;571        WM_UNLOCK();
;;;572      }
;;;573    }
0000a4  e8bd87f0          POP      {r4-r10,pc}
;;;574    
                          ENDP


                          AREA ||i.EDIT_SetFont||, CODE, READONLY, ALIGN=1

                  EDIT_SetFont PROC
;;;656    */
;;;657    void EDIT_SetFont(EDIT_Handle hObj, const GUI_FONT GUI_UNI_PTR * pfont) {
000000  b570              PUSH     {r4-r6,lr}
000002  460c              MOV      r4,r1
000004  0005              MOVS     r5,r0
000006  d009              BEQ      |L8.28|
;;;658      EDIT_Obj* pObj;
;;;659      if (hObj == 0)
;;;660        return;
;;;661      WM_LOCK();
;;;662      pObj = EDIT_H2P(hObj);
000008  f7fffffe          BL       GUI_ALLOC_h2p
;;;663      if (pObj) {
00000c  2800              CMP      r0,#0
00000e  d005              BEQ      |L8.28|
;;;664        pObj->Props.pFont = pfont;
;;;665        EDIT_Invalidate(hObj);
000010  65c4              STR      r4,[r0,#0x5c]
000012  4628              MOV      r0,r5
000014  e8bd4070          POP      {r4-r6,lr}
000018  f7ffbffe          B.W      WM_InvalidateWindow
                  |L8.28|
;;;666      }
;;;667      WM_UNLOCK();
;;;668    }
00001c  bd70              POP      {r4-r6,pc}
;;;669    
                          ENDP


                          AREA ||i.EDIT_SetMaxLen||, CODE, READONLY, ALIGN=1

                  EDIT_SetMaxLen PROC
;;;806    */
;;;807    void EDIT_SetMaxLen(EDIT_Handle  hObj, int MaxLen) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  460d              MOV      r5,r1
000006  0007              MOVS     r7,r0
000008  d023              BEQ      |L9.82|
;;;808      if (hObj) {
;;;809        EDIT_Obj* pObj;
;;;810        WM_LOCK();
;;;811        pObj = EDIT_H2P(hObj);
00000a  f7fffffe          BL       GUI_ALLOC_h2p
00000e  4604              MOV      r4,r0
;;;812        if (MaxLen != pObj->MaxLen) {
000010  f9b0002a          LDRSH    r0,[r0,#0x2a]
000014  42a8              CMP      r0,r5
000016  d01c              BEQ      |L9.82|
;;;813          if (MaxLen < pObj->MaxLen) {
000018  dd0f              BLE      |L9.58|
;;;814            if (pObj->hpText) {
00001a  f9b40028          LDRSH    r0,[r4,#0x28]
00001e  b160              CBZ      r0,|L9.58|
;;;815              char* pText;
;;;816              int   NumChars;
;;;817              pText    = (char*) GUI_ALLOC_h2p(pObj->hpText);
000020  f7fffffe          BL       GUI_ALLOC_h2p
000024  4606              MOV      r6,r0
;;;818              NumChars = GUI__GetNumChars(pText);
000026  f7fffffe          BL       GUI__GetNumChars
;;;819              if (NumChars > MaxLen) {
00002a  42a8              CMP      r0,r5
00002c  dd05              BLE      |L9.58|
;;;820                int NumBytes;
;;;821                NumBytes = GUI_UC__NumChars2NumBytes(pText, MaxLen);
00002e  4629              MOV      r1,r5
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       GUI_UC__NumChars2NumBytes
;;;822                *(pText + NumBytes) = 0;
000036  2100              MOVS     r1,#0
000038  5431              STRB     r1,[r6,r0]
                  |L9.58|
;;;823              }
;;;824            }
;;;825          }
;;;826          _IncrementBuffer(pObj, MaxLen - pObj->BufferSize + 1);
00003a  8da0              LDRH     r0,[r4,#0x2c]
00003c  1a29              SUBS     r1,r5,r0
00003e  4620              MOV      r0,r4
000040  1c49              ADDS     r1,r1,#1
000042  f7fffffe          BL       _IncrementBuffer
;;;827          pObj->MaxLen = MaxLen;
000046  8565              STRH     r5,[r4,#0x2a]
;;;828          EDIT_Invalidate(hObj);
000048  4638              MOV      r0,r7
00004a  e8bd41f0          POP      {r4-r8,lr}
00004e  f7ffbffe          B.W      WM_InvalidateWindow
                  |L9.82|
;;;829        }
;;;830        WM_UNLOCK();
;;;831      }
;;;832    }
000052  e8bd81f0          POP      {r4-r8,pc}
;;;833    
                          ENDP


                          AREA ||i.EDIT_SetText||, CODE, READONLY, ALIGN=1

                  EDIT_SetText PROC
;;;711    */
;;;712    void EDIT_SetText(EDIT_Handle hObj, const char* s) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4688              MOV      r8,r1
000006  ea5f0900          MOVS     r9,r0
00000a  d041              BEQ      |L10.144|
;;;713      if (hObj) {
;;;714        EDIT_Obj* pObj;
;;;715        WM_LOCK();
;;;716        pObj = EDIT_H2P(hObj);
00000c  f7fffffe          BL       GUI_ALLOC_h2p
000010  4604              MOV      r4,r0
;;;717        if (s) {
000012  f1b80f00          CMP      r8,#0
000016  d02f              BEQ      |L10.120|
;;;718          int NumBytesNew, NumBytesOld = 0;
;;;719          int NumCharsNew;
;;;720          if (pObj->hpText) {
000018  f9b40028          LDRSH    r0,[r4,#0x28]
00001c  2600              MOVS     r6,#0                 ;718
00001e  b120              CBZ      r0,|L10.42|
;;;721            char* pText;
;;;722            pText       = (char*) GUI_ALLOC_h2p(pObj->hpText);
000020  f7fffffe          BL       GUI_ALLOC_h2p
;;;723            NumBytesOld = strlen(pText) + 1;
000024  f7fffffe          BL       strlen
000028  1c46              ADDS     r6,r0,#1
                  |L10.42|
;;;724          }
;;;725          NumCharsNew = GUI__GetNumChars(s);
00002a  4640              MOV      r0,r8
00002c  f7fffffe          BL       GUI__GetNumChars
000030  4605              MOV      r5,r0
;;;726          if (NumCharsNew > pObj->MaxLen) {
000032  f9b4002a          LDRSH    r0,[r4,#0x2a]
000036  42a8              CMP      r0,r5
000038  da00              BGE      |L10.60|
;;;727            NumCharsNew = pObj->MaxLen;
00003a  4605              MOV      r5,r0
                  |L10.60|
;;;728          }
;;;729          NumBytesNew = GUI_UC__NumChars2NumBytes(s, NumCharsNew) + 1;
00003c  4629              MOV      r1,r5
00003e  4640              MOV      r0,r8
000040  f7fffffe          BL       GUI_UC__NumChars2NumBytes
000044  1c47              ADDS     r7,r0,#1
;;;730          if (_IsSpaceInBuffer(pObj, NumBytesNew - NumBytesOld)) {
000046  1bb9              SUBS     r1,r7,r6
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       _IsSpaceInBuffer
00004e  b1d0              CBZ      r0,|L10.134|
;;;731            char* pText;
;;;732            pText = (char*) GUI_ALLOC_h2p(pObj->hpText);
000050  f9b40028          LDRSH    r0,[r4,#0x28]
000054  f7fffffe          BL       GUI_ALLOC_h2p
;;;733            memcpy(pText, s, NumBytesNew);
000058  463a              MOV      r2,r7
00005a  4641              MOV      r1,r8
00005c  f7fffffe          BL       __aeabi_memcpy
;;;734            pObj->CursorPos = NumCharsNew;
;;;735            if (pObj->CursorPos == pObj->MaxLen) {
000060  6425              STR      r5,[r4,#0x40]
000062  f9b4002a          LDRSH    r0,[r4,#0x2a]
000066  4285              CMP      r5,r0
000068  d10d              BNE      |L10.134|
;;;736              if (pObj->EditMode == GUI_EDIT_MODE_OVERWRITE) {
00006a  f8940048          LDRB     r0,[r4,#0x48]
00006e  2801              CMP      r0,#1
000070  d109              BNE      |L10.134|
000072  1e6d              SUBS     r5,r5,#1
;;;737                pObj->CursorPos--;
000074  6425              STR      r5,[r4,#0x40]
000076  e006              B        |L10.134|
                  |L10.120|
;;;738              }
;;;739            }
;;;740          }
;;;741        } else {
;;;742          GUI_ALLOC_FreePtr(&pObj->hpText);
000078  f1040028          ADD      r0,r4,#0x28
00007c  f7fffffe          BL       GUI_ALLOC_FreePtr
;;;743          pObj->BufferSize = 0;
000080  2000              MOVS     r0,#0
000082  85a0              STRH     r0,[r4,#0x2c]
;;;744          pObj->CursorPos  = 0;
000084  6420              STR      r0,[r4,#0x40]
                  |L10.134|
;;;745        }
;;;746        EDIT_Invalidate(hObj);
000086  4648              MOV      r0,r9
000088  e8bd47f0          POP      {r4-r10,lr}
00008c  f7ffbffe          B.W      WM_InvalidateWindow
                  |L10.144|
;;;747        WM_UNLOCK();
;;;748      }
;;;749    }
000090  e8bd87f0          POP      {r4-r10,pc}
;;;750    
                          ENDP


                          AREA ||i.EDIT_SetTextAlign||, CODE, READONLY, ALIGN=1

                  EDIT_SetTextAlign PROC
;;;837    */
;;;838    void EDIT_SetTextAlign(EDIT_Handle hObj, int Align) {
000000  b570              PUSH     {r4-r6,lr}
000002  460c              MOV      r4,r1
000004  0005              MOVS     r5,r0
000006  d009              BEQ      |L11.28|
;;;839      EDIT_Obj* pObj;
;;;840      if (hObj == 0)
;;;841        return;
;;;842      WM_LOCK();
;;;843      pObj = EDIT_H2P(hObj);
000008  f7fffffe          BL       GUI_ALLOC_h2p
;;;844      if (pObj) {
00000c  2800              CMP      r0,#0
00000e  d005              BEQ      |L11.28|
;;;845        pObj->Props.Align = Align;
;;;846        EDIT_Invalidate(hObj);
000010  6544              STR      r4,[r0,#0x54]
000012  4628              MOV      r0,r5
000014  e8bd4070          POP      {r4-r6,lr}
000018  f7ffbffe          B.W      WM_InvalidateWindow
                  |L11.28|
;;;847      }
;;;848      WM_UNLOCK();
;;;849    }
00001c  bd70              POP      {r4-r6,pc}
;;;850    
                          ENDP


                          AREA ||i.EDIT_SetTextColor||, CODE, READONLY, ALIGN=1

                  EDIT_SetTextColor PROC
;;;692    */
;;;693    void EDIT_SetTextColor(EDIT_Handle hObj, unsigned int Index, GUI_COLOR color) {
000000  b570              PUSH     {r4-r6,lr}
000002  4615              MOV      r5,r2
000004  460c              MOV      r4,r1
000006  0006              MOVS     r6,r0
000008  d00d              BEQ      |L12.38|
;;;694      EDIT_Obj* pObj;
;;;695      if (hObj == 0)
;;;696        return;
;;;697      WM_LOCK();
;;;698      pObj = EDIT_H2P(hObj);
00000a  f7fffffe          BL       GUI_ALLOC_h2p
;;;699      if (pObj) {
00000e  2800              CMP      r0,#0
000010  d009              BEQ      |L12.38|
;;;700        if (Index < GUI_COUNTOF(pObj->Props.aTextColor)) {
000012  2c02              CMP      r4,#2
000014  d207              BCS      |L12.38|
;;;701          pObj->Props.aTextColor[Index] = color;
000016  eb000084          ADD      r0,r0,r4,LSL #2
;;;702          EDIT_Invalidate(hObj);
00001a  6605              STR      r5,[r0,#0x60]
00001c  4630              MOV      r0,r6
00001e  e8bd4070          POP      {r4-r6,lr}
000022  f7ffbffe          B.W      WM_InvalidateWindow
                  |L12.38|
;;;703        }
;;;704      }
;;;705      WM_UNLOCK();
;;;706    }
000026  bd70              POP      {r4-r6,pc}
;;;707    
                          ENDP


                          AREA ||i.EDIT_SetValue||, CODE, READONLY, ALIGN=1

                  EDIT_SetValue PROC
;;;798    */
;;;799    void EDIT_SetValue(EDIT_Handle hObj, I32 Value) {
000000  2200              MOVS     r2,#0
;;;800      _SetValue(hObj, Value, 0);
000002  f7ffbffe          B.W      _SetValue
;;;801    }
;;;802    
                          ENDP


                          AREA ||i.EDIT__GetCurrentChar||, CODE, READONLY, ALIGN=1

                  EDIT__GetCurrentChar PROC
;;;380    */
;;;381    U16 EDIT__GetCurrentChar(EDIT_Obj* pObj) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;382      U16 Char = 0;
000004  2000              MOVS     r0,#0
;;;383      if (pObj->hpText) {
000006  f9b41028          LDRSH    r1,[r4,#0x28]
00000a  2900              CMP      r1,#0                 ;381
00000c  d00b              BEQ      |L14.38|
00000e  4608              MOV      r0,r1                 ;381
;;;384        const char* pText;
;;;385        pText  = (const char*) GUI_ALLOC_h2p(pObj->hpText);
000010  f7fffffe          BL       GUI_ALLOC_h2p
000014  4605              MOV      r5,r0
;;;386        pText += GUI_UC__NumChars2NumBytes(pText, pObj->CursorPos);
000016  6c21              LDR      r1,[r4,#0x40]
000018  f7fffffe          BL       GUI_UC__NumChars2NumBytes
00001c  4428              ADD      r0,r0,r5
;;;387        Char   = GUI_UC_GetCharCode(pText);
00001e  e8bd4070          POP      {r4-r6,lr}
000022  f7ffbffe          B.W      GUI_UC_GetCharCode
                  |L14.38|
;;;388      }
;;;389      return Char;
;;;390    }
000026  bd70              POP      {r4-r6,pc}
;;;391    
                          ENDP


                          AREA ||i.EDIT__SetCursorPos||, CODE, READONLY, ALIGN=1

                  EDIT__SetCursorPos PROC
;;;397    */
;;;398    void EDIT__SetCursorPos(EDIT_Obj* pObj, int CursorPos) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;399      if (pObj->hpText) {
000004  f9b00028          LDRSH    r0,[r0,#0x28]
000008  460c              MOV      r4,r1                 ;398
00000a  2800              CMP      r0,#0                 ;398
00000c  d019              BEQ      |L15.66|
;;;400        char* pText;
;;;401        int NumChars, Offset;
;;;402        pText    = (char*) GUI_ALLOC_h2p(pObj->hpText);
00000e  f7fffffe          BL       GUI_ALLOC_h2p
;;;403        NumChars = GUI__GetNumChars(pText);
000012  f7fffffe          BL       GUI__GetNumChars
;;;404        Offset   = (pObj->EditMode == GUI_EDIT_MODE_INSERT) ? 0 : 1;
000016  f8951048          LDRB     r1,[r5,#0x48]
00001a  b101              CBZ      r1,|L15.30|
00001c  2101              MOVS     r1,#1
                  |L15.30|
;;;405        if (CursorPos < 0) {
00001e  2c00              CMP      r4,#0
000020  da00              BGE      |L15.36|
;;;406          CursorPos = 0;
000022  2400              MOVS     r4,#0
                  |L15.36|
;;;407        }
;;;408        if (CursorPos > NumChars) {
000024  4284              CMP      r4,r0
000026  dd00              BLE      |L15.42|
;;;409          CursorPos = NumChars;
000028  4604              MOV      r4,r0
                  |L15.42|
;;;410        }
;;;411        if (CursorPos > (pObj->MaxLen - Offset)) {
00002a  f9b5002a          LDRSH    r0,[r5,#0x2a]
00002e  1a40              SUBS     r0,r0,r1
000030  42a0              CMP      r0,r4
000032  da00              BGE      |L15.54|
;;;412          CursorPos = pObj->MaxLen - Offset;
000034  4604              MOV      r4,r0
                  |L15.54|
;;;413        }
;;;414        if (pObj->CursorPos != CursorPos) {
000036  6c28              LDR      r0,[r5,#0x40]
000038  42a0              CMP      r0,r4
00003a  d000              BEQ      |L15.62|
;;;415          pObj->CursorPos = CursorPos;
00003c  642c              STR      r4,[r5,#0x40]
                  |L15.62|
;;;416        }
;;;417        pObj->SelSize = 0;
00003e  2000              MOVS     r0,#0
000040  6468              STR      r0,[r5,#0x44]
                  |L15.66|
;;;418      }
;;;419    }
000042  bd70              POP      {r4-r6,pc}
;;;420    
                          ENDP


                          AREA ||i.EDIT__SetValueUnsigned||, CODE, READONLY, ALIGN=1

                  EDIT__SetValueUnsigned PROC
;;;424    */
;;;425    void EDIT__SetValueUnsigned(EDIT_Handle hObj, I32 Value) {
000000  2201              MOVS     r2,#1
;;;426      _SetValue(hObj, Value, 1);
000002  f7ffbffe          B.W      _SetValue
;;;427    }
;;;428    
                          ENDP


                          AREA ||i._DeleteChar||, CODE, READONLY, ALIGN=1

                  _DeleteChar PROC
;;;253    */
;;;254    static void _DeleteChar(EDIT_Handle hObj, EDIT_Obj* pObj) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
;;;255      if (pObj->hpText) {
000004  f9b10028          LDRSH    r0,[r1,#0x28]
000008  460c              MOV      r4,r1                 ;254
00000a  2800              CMP      r0,#0                 ;254
00000c  d019              BEQ      |L17.66|
;;;256        unsigned CursorOffset;
;;;257        char* pText;
;;;258        pText = (char*) GUI_ALLOC_h2p(pObj->hpText);
00000e  f7fffffe          BL       GUI_ALLOC_h2p
000012  4605              MOV      r5,r0
;;;259        CursorOffset = GUI_UC__NumChars2NumBytes(pText, pObj->CursorPos);
000014  6c21              LDR      r1,[r4,#0x40]
000016  f7fffffe          BL       GUI_UC__NumChars2NumBytes
00001a  4604              MOV      r4,r0
;;;260        if (CursorOffset < strlen(pText)) {
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       strlen
000022  42a0              CMP      r0,r4
000024  d90d              BLS      |L17.66|
;;;261          int NumBytes;
;;;262          pText += CursorOffset;
000026  442c              ADD      r4,r4,r5
;;;263          NumBytes = GUI_UC_GetCharSize(pText);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       GUI_UC_GetCharSize
;;;264          strcpy(pText, pText + NumBytes);
00002e  1821              ADDS     r1,r4,r0
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       strcpy
;;;265          WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
000036  4630              MOV      r0,r6
000038  e8bd4070          POP      {r4-r6,lr}
00003c  2105              MOVS     r1,#5
00003e  f7ffbffe          B.W      WM_NotifyParent
                  |L17.66|
;;;266        }
;;;267      }
;;;268    }
000042  bd70              POP      {r4-r6,pc}
;;;269    
                          ENDP


                          AREA ||i._IncrementBuffer||, CODE, READONLY, ALIGN=1

                  _IncrementBuffer PROC
;;;180    */
;;;181    static int _IncrementBuffer(EDIT_Obj* pObj, unsigned AddBytes) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;182      WM_HMEM hNew;
;;;183      int NewSize;
;;;184      NewSize = pObj->BufferSize + AddBytes;
000004  8d80              LDRH     r0,[r0,#0x2c]
000006  1846              ADDS     r6,r0,r1
;;;185      hNew    = GUI_ALLOC_Realloc(pObj->hpText, NewSize);
000008  f9b40028          LDRSH    r0,[r4,#0x28]
00000c  4631              MOV      r1,r6
00000e  f7fffffe          BL       GUI_ALLOC_Realloc
000012  0005              MOVS     r5,r0
;;;186      if (hNew) {
000014  d009              BEQ      |L18.42|
;;;187        if (!(pObj->hpText)) {
000016  8d20              LDRH     r0,[r4,#0x28]
000018  b920              CBNZ     r0,|L18.36|
;;;188          char* pText;
;;;189          pText  = (char*) GUI_ALLOC_h2p(hNew);
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       GUI_ALLOC_h2p
;;;190          *pText = 0;
000020  2100              MOVS     r1,#0
000022  7001              STRB     r1,[r0,#0]
                  |L18.36|
;;;191        }
;;;192        pObj->BufferSize = NewSize;
000024  85a6              STRH     r6,[r4,#0x2c]
;;;193        pObj->hpText     = hNew;
000026  8525              STRH     r5,[r4,#0x28]
;;;194        return 1;
000028  2001              MOVS     r0,#1
                  |L18.42|
;;;195      }
;;;196      return 0;
;;;197    }
00002a  bd70              POP      {r4-r6,pc}
;;;198    
                          ENDP


                          AREA ||i._InsertChar||, CODE, READONLY, ALIGN=1

                  _InsertChar PROC
;;;275    */
;;;276    static int _InsertChar(EDIT_Handle hObj, EDIT_Obj* pObj, U16 Char) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4680              MOV      r8,r0
000006  f9b1002a          LDRSH    r0,[r1,#0x2a]
00000a  4616              MOV      r6,r2
00000c  460c              MOV      r4,r1
00000e  2800              CMP      r0,#0
000010  dd0d              BLE      |L19.46|
000012  f9b41028          LDRSH    r1,[r4,#0x28]
000016  2000              MOVS     r0,#0
000018  b121              CBZ      r1,|L19.36|
00001a  4608              MOV      r0,r1
00001c  f7fffffe          BL       GUI_ALLOC_h2p
000020  f7fffffe          BL       GUI__GetNumChars
                  |L19.36|
000024  f9b4102a          LDRSH    r1,[r4,#0x2a]
000028  1c40              ADDS     r0,r0,#1
00002a  4288              CMP      r0,r1
00002c  dc24              BGT      |L19.120|
                  |L19.46|
;;;277      if (_IsCharsAvailable(pObj, 1)) {
;;;278        int BytesNeeded;
;;;279        BytesNeeded = GUI_UC__CalcSizeOfChar(Char);
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       GUI_UC__CalcSizeOfChar
000034  4605              MOV      r5,r0
;;;280        if (_IsSpaceInBuffer(pObj, BytesNeeded)) {
000036  4601              MOV      r1,r0
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       _IsSpaceInBuffer
00003e  b1d8              CBZ      r0,|L19.120|
;;;281          int CursorOffset;
;;;282          char* pText;
;;;283          pText = (char*) GUI_ALLOC_h2p(pObj->hpText);
000040  f9b40028          LDRSH    r0,[r4,#0x28]
000044  f7fffffe          BL       GUI_ALLOC_h2p
000048  4607              MOV      r7,r0
;;;284          CursorOffset = GUI_UC__NumChars2NumBytes(pText, pObj->CursorPos);
00004a  6c21              LDR      r1,[r4,#0x40]
00004c  f7fffffe          BL       GUI_UC__NumChars2NumBytes
;;;285          pText += CursorOffset;
000050  183c              ADDS     r4,r7,r0
;;;286          memmove(pText + BytesNeeded, pText, strlen(pText) + 1);
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       strlen
000058  1c42              ADDS     r2,r0,#1
00005a  1960              ADDS     r0,r4,r5
00005c  4621              MOV      r1,r4
00005e  f7fffffe          BL       __aeabi_memmove
;;;287          GUI_UC_Encode(pText, Char);
000062  4631              MOV      r1,r6
000064  4620              MOV      r0,r4
000066  f7fffffe          BL       GUI_UC_Encode
;;;288          WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
00006a  2105              MOVS     r1,#5
00006c  4640              MOV      r0,r8
00006e  f7fffffe          BL       WM_NotifyParent
;;;289          return 1;
000072  2001              MOVS     r0,#1
                  |L19.116|
;;;290        }
;;;291      }
;;;292      return 0;
;;;293    }
000074  e8bd81f0          POP      {r4-r8,pc}
                  |L19.120|
000078  2000              MOVS     r0,#0                 ;292
00007a  e7fb              B        |L19.116|
;;;294    
                          ENDP


                          AREA ||i._IsSpaceInBuffer||, CODE, READONLY, ALIGN=1

                  _IsSpaceInBuffer PROC
;;;209    */
;;;210    static int _IsSpaceInBuffer(EDIT_Obj* pObj, int BytesNeeded) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;211      int NumBytes = 0;
;;;212      if (pObj->hpText) {
000006  f9b42028          LDRSH    r2,[r4,#0x28]
00000a  2000              MOVS     r0,#0                 ;211
00000c  b122              CBZ      r2,|L20.24|
00000e  4610              MOV      r0,r2                 ;210
;;;213        NumBytes = strlen((char*)GUI_ALLOC_h2p(pObj->hpText));
000010  f7fffffe          BL       GUI_ALLOC_h2p
000014  f7fffffe          BL       strlen
                  |L20.24|
;;;214      }
;;;215      BytesNeeded = (BytesNeeded + NumBytes + 1) - pObj->BufferSize;
000018  8da1              LDRH     r1,[r4,#0x2c]
00001a  4428              ADD      r0,r0,r5
00001c  1a41              SUBS     r1,r0,r1
00001e  1c49              ADDS     r1,r1,#1
;;;216      if (BytesNeeded > 0) {
000020  2900              CMP      r1,#0
000022  dd05              BLE      |L20.48|
;;;217        if (!_IncrementBuffer(pObj, BytesNeeded + EDIT_REALLOC_SIZE)) {
000024  4620              MOV      r0,r4
000026  3110              ADDS     r1,r1,#0x10
000028  f7fffffe          BL       _IncrementBuffer
00002c  2800              CMP      r0,#0
00002e  d000              BEQ      |L20.50|
                  |L20.48|
;;;218          return 0;
;;;219        }
;;;220      }
;;;221      return 1;
000030  2001              MOVS     r0,#1
                  |L20.50|
;;;222    }
000032  bd70              POP      {r4-r6,pc}
;;;223    
                          ENDP


                          AREA ||i._Paint||, CODE, READONLY, ALIGN=1

                  _Paint PROC
;;;100    */
;;;101    static void _Paint(EDIT_Obj* pObj, EDIT_Handle hObj) {
000000  e92d43f0          PUSH     {r4-r9,lr}
000004  4604              MOV      r4,r0
;;;102      GUI_RECT rFillRect, rInside, rText, rInvert;
;;;103      const char GUI_UNI_PTR * pText = NULL;
000006  f04f0900          MOV      r9,#0
00000a  b087              SUB      sp,sp,#0x1c           ;101
;;;104      int IsEnabled, CursorWidth = 0;
00000c  464d              MOV      r5,r9
;;;105      IsEnabled = WM__IsEnabled(hObj);
00000e  4608              MOV      r0,r1
000010  f7fffffe          BL       WM__IsEnabled
;;;106      /* Set colors and font */
;;;107      LCD_SetBkColor(pObj->Props.aBkColor[IsEnabled]);
000014  eb040080          ADD      r0,r4,r0,LSL #2
000018  6e80              LDR      r0,[r0,#0x68]
00001a  f7fffffe          BL       LCD_SetBkColor
;;;108      LCD_SetColor(pObj->Props.aTextColor[0]);
00001e  6e20              LDR      r0,[r4,#0x60]
000020  f7fffffe          BL       LCD_SetColor
;;;109      GUI_SetFont(pObj->Props.pFont);
000024  6de0              LDR      r0,[r4,#0x5c]
000026  f7fffffe          BL       GUI_SetFont
;;;110      /* Calculate size */
;;;111      WIDGET__GetInsideRect(&pObj->Widget, &rFillRect);
00002a  a904              ADD      r1,sp,#0x10
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       WIDGET__GetInsideRect
;;;112      if (pObj->hpText) {
000032  f9b40028          LDRSH    r0,[r4,#0x28]
000036  b110              CBZ      r0,|L21.62|
;;;113        pText = (const char*) GUI_ALLOC_h2p(pObj->hpText);
000038  f7fffffe          BL       GUI_ALLOC_h2p
00003c  4681              MOV      r9,r0
                  |L21.62|
00003e  e9dd0104          LDRD     r0,r1,[sp,#0x10]
000042  e9cd0102          STRD     r0,r1,[sp,#8]
;;;114      }
;;;115      rInside = rFillRect;
;;;116      rInside.x0 += pObj->Props.Border + EDIT_XOFF;
000046  f8bd1008          LDRH     r1,[sp,#8]
00004a  f8b40058          LDRH     r0,[r4,#0x58]
;;;117      rInside.x1 -= pObj->Props.Border + EDIT_XOFF;
;;;118      GUI__CalcTextRect(pText, &rInside, &rText, pObj->Props.Align);
00004e  466a              MOV      r2,sp
000050  4401              ADD      r1,r1,r0              ;116
000052  1c49              ADDS     r1,r1,#1              ;116
000054  f8ad1008          STRH     r1,[sp,#8]            ;116
000058  f8bd100c          LDRH     r1,[sp,#0xc]          ;117
00005c  1a08              SUBS     r0,r1,r0              ;117
00005e  1e40              SUBS     r0,r0,#1              ;117
000060  f8ad000c          STRH     r0,[sp,#0xc]          ;117
000064  a902              ADD      r1,sp,#8
000066  4648              MOV      r0,r9
000068  6d63              LDR      r3,[r4,#0x54]
00006a  f7fffffe          BL       GUI__CalcTextRect
;;;119      /* Calculate position and size of cursor */
;;;120      if (pObj->Widget.State & WIDGET_STATE_FOCUS) {
00006e  f8940026          LDRB     r0,[r4,#0x26]
000072  07c0              LSLS     r0,r0,#31
000074  d043              BEQ      |L21.254|
;;;121        int NumChars;
;;;122        CursorWidth = ((pObj->XSizeCursor > 0) ? (pObj->XSizeCursor) : (1));
000076  f8945049          LDRB     r5,[r4,#0x49]
00007a  b905              CBNZ     r5,|L21.126|
00007c  2501              MOVS     r5,#1
                  |L21.126|
;;;123        NumChars    = GUI__GetNumChars(pText);
00007e  4648              MOV      r0,r9
000080  f7fffffe          BL       GUI__GetNumChars
000084  4607              MOV      r7,r0
;;;124        if (pText) {
000086  f1b90f00          CMP      r9,#0
00008a  d038              BEQ      |L21.254|
;;;125          U16 Char;
;;;126          int i, IsRTL = 0;
00008c  2000              MOVS     r0,#0
;;;127          if ((pObj->EditMode != GUI_EDIT_MODE_INSERT) || (pObj->SelSize)) {
00008e  9006              STR      r0,[sp,#0x18]
000090  f8940048          LDRB     r0,[r4,#0x48]
000094  b908              CBNZ     r0,|L21.154|
000096  6c60              LDR      r0,[r4,#0x44]
000098  b308              CBZ      r0,|L21.222|
                  |L21.154|
;;;128            if (pObj->CursorPos < NumChars) {
00009a  6c21              LDR      r1,[r4,#0x40]
00009c  42b9              CMP      r1,r7
00009e  da1e              BGE      |L21.222|
;;;129              if (pObj->SelSize) {
0000a0  6c60              LDR      r0,[r4,#0x44]
0000a2  b1a0              CBZ      r0,|L21.206|
;;;130                CursorWidth = 0;
0000a4  2500              MOVS     r5,#0
;;;131                for (i = pObj->CursorPos; i < (int)(pObj->CursorPos + pObj->SelSize); i++) {
0000a6  460e              MOV      r6,r1
0000a8  e009              B        |L21.190|
                  |L21.170|
;;;132                  Char = GUI__GetCursorCharacter(pText, i, NumChars, 0);
0000aa  2300              MOVS     r3,#0
0000ac  463a              MOV      r2,r7
0000ae  4631              MOV      r1,r6
0000b0  4648              MOV      r0,r9
0000b2  f7fffffe          BL       GUI__GetCursorCharacter
;;;133                  CursorWidth += GUI_GetCharDistX(Char);
0000b6  f7fffffe          BL       GUI_GetCharDistX
0000ba  4405              ADD      r5,r5,r0
0000bc  1c76              ADDS     r6,r6,#1
                  |L21.190|
0000be  e9d40110          LDRD     r0,r1,[r4,#0x40]
0000c2  4408              ADD      r0,r0,r1              ;131
0000c4  42b0              CMP      r0,r6                 ;131
0000c6  dcf0              BGT      |L21.170|
;;;134                }
;;;135                if (!CursorWidth) {
0000c8  b94d              CBNZ     r5,|L21.222|
;;;136                  CursorWidth = 1;
0000ca  2501              MOVS     r5,#1
0000cc  e007              B        |L21.222|
                  |L21.206|
;;;137                }
;;;138              } else {
;;;139                Char = GUI__GetCursorCharacter(pText, pObj->CursorPos, NumChars, &IsRTL);
0000ce  ab06              ADD      r3,sp,#0x18
0000d0  463a              MOV      r2,r7
0000d2  4648              MOV      r0,r9
0000d4  f7fffffe          BL       GUI__GetCursorCharacter
;;;140                CursorWidth = GUI_GetCharDistX(Char);
0000d8  f7fffffe          BL       GUI_GetCharDistX
0000dc  4605              MOV      r5,r0
                  |L21.222|
0000de  e9dd6000          LDRD     r6,r0,[sp,#0]
;;;141              }
;;;142            }
;;;143          }
;;;144          rInvert = rText;
0000e2  4680              MOV      r8,r0
;;;145          if (IsRTL) {
0000e4  9806              LDR      r0,[sp,#0x18]
0000e6  b110              CBZ      r0,|L21.238|
;;;146            rInvert.x0 -= CursorWidth;
0000e8  1b70              SUBS     r0,r6,r5
0000ea  f360060f          BFI      r6,r0,#0,#16
                  |L21.238|
;;;147          }
;;;148          rInvert.x0 += GUI__GetCursorPosX(pText, pObj->CursorPos, NumChars);
0000ee  463a              MOV      r2,r7
0000f0  4648              MOV      r0,r9
0000f2  6c21              LDR      r1,[r4,#0x40]
0000f4  f7fffffe          BL       GUI__GetCursorPosX
0000f8  4430              ADD      r0,r0,r6
0000fa  f360060f          BFI      r6,r0,#0,#16
                  |L21.254|
;;;149        }
;;;150      }
;;;151      /* WM loop */
;;;152      WM_ITERATE_START(NULL) {
0000fe  2000              MOVS     r0,#0
000100  f7fffffe          BL       WM__InitIVRSearch
000104  2800              CMP      r0,#0
000106  d022              BEQ      |L21.334|
000108  b237              SXTH     r7,r6
00010a  1e6d              SUBS     r5,r5,#1
00010c  ea4f4828          ASR      r8,r8,#16
;;;153        /* Set clipping rectangle */
;;;154        WM_SetUserClipRect(&rFillRect);
;;;155        /* Display text */
;;;156        WIDGET__FillStringInRect(pText, &rFillRect, &rInside, &rText);
;;;157        /* Display cursor if needed */
;;;158        if (pObj->Widget.State & WIDGET_STATE_FOCUS) {
;;;159          GUI_InvertRect(rInvert.x0, rInvert.y0, rInvert.x0 + CursorWidth - 1, rInvert.y1);
000110  443d              ADD      r5,r5,r7
000112  1436              ASRS     r6,r6,#16
                  |L21.276|
000114  a804              ADD      r0,sp,#0x10           ;154
000116  f7fffffe          BL       WM_SetUserClipRect
00011a  466b              MOV      r3,sp                 ;156
00011c  aa02              ADD      r2,sp,#8              ;156
00011e  a904              ADD      r1,sp,#0x10           ;156
000120  4648              MOV      r0,r9                 ;156
000122  f7fffffe          BL       WIDGET__FillStringInRect
000126  f8940026          LDRB     r0,[r4,#0x26]         ;158
00012a  07c0              LSLS     r0,r0,#31             ;158
00012c  d005              BEQ      |L21.314|
00012e  4643              MOV      r3,r8                 ;158
000130  462a              MOV      r2,r5                 ;158
000132  4631              MOV      r1,r6                 ;158
000134  4638              MOV      r0,r7                 ;158
000136  f7fffffe          BL       GUI_InvertRect
                  |L21.314|
;;;160        }
;;;161        WM_SetUserClipRect(NULL);
00013a  2000              MOVS     r0,#0
00013c  f7fffffe          BL       WM_SetUserClipRect
;;;162        /* Draw the 3D effect (if configured) */
;;;163        WIDGET__EFFECT_DrawDown(&pObj->Widget);
000140  4620              MOV      r0,r4
000142  f7fffffe          BL       WIDGET__EFFECT_DrawDown
;;;164      } WM_ITERATE_END();
000146  f7fffffe          BL       WM__GetNextIVR
00014a  2800              CMP      r0,#0
00014c  d1e2              BNE      |L21.276|
                  |L21.334|
;;;165    }
00014e  b007              ADD      sp,sp,#0x1c
000150  e8bd83f0          POP      {r4-r9,pc}
;;;166    
                          ENDP


                          AREA ||i._SetValue||, CODE, READONLY, ALIGN=1

                  _SetValue PROC
;;;320    */
;;;321    static void _SetValue(EDIT_Handle hObj, I32 Value, int Unsigned) {
000000  b570              PUSH     {r4-r6,lr}
000002  4616              MOV      r6,r2
000004  460c              MOV      r4,r1
000006  0005              MOVS     r5,r0
000008  d022              BEQ      |L22.80|
;;;322      EDIT_Obj* pObj;
;;;323      if (hObj) {
;;;324        WM_LOCK();
;;;325        pObj = EDIT_H2P(hObj);
00000a  f7fffffe          BL       GUI_ALLOC_h2p
;;;326        /* Put in min/max range */
;;;327        if (Unsigned) {
00000e  6b01              LDR      r1,[r0,#0x30]
000010  b136              CBZ      r6,|L22.32|
;;;328          if ((unsigned)Value < (unsigned)pObj->Min) {
000012  42a1              CMP      r1,r4
000014  d900              BLS      |L22.24|
;;;329            Value = pObj->Min;
000016  460c              MOV      r4,r1
                  |L22.24|
;;;330          }
;;;331          if ((unsigned)Value > (unsigned)pObj->Max) {
000018  6b41              LDR      r1,[r0,#0x34]
00001a  42a1              CMP      r1,r4
00001c  d306              BCC      |L22.44|
00001e  e006              B        |L22.46|
                  |L22.32|
;;;332            Value = pObj->Max;
;;;333          }
;;;334        } else {
;;;335          if (Value < pObj->Min) {
000020  42a1              CMP      r1,r4
000022  dd00              BLE      |L22.38|
;;;336            Value = pObj->Min;
000024  460c              MOV      r4,r1
                  |L22.38|
;;;337          }
;;;338          if (Value > pObj->Max) {
000026  6b41              LDR      r1,[r0,#0x34]
000028  42a1              CMP      r1,r4
00002a  da00              BGE      |L22.46|
                  |L22.44|
;;;339            Value = pObj->Max;
00002c  460c              MOV      r4,r1
                  |L22.46|
;;;340          }
;;;341        }
;;;342        if (pObj->CurrentValue != (U32)Value) {
00002e  6bc1              LDR      r1,[r0,#0x3c]
000030  42a1              CMP      r1,r4
000032  d00d              BEQ      |L22.80|
;;;343          pObj->CurrentValue = Value;
;;;344          if (pObj->pfUpdateBuffer) {
000034  63c4              STR      r4,[r0,#0x3c]
000036  6d01              LDR      r1,[r0,#0x50]
000038  b109              CBZ      r1,|L22.62|
;;;345            pObj->pfUpdateBuffer(hObj);
00003a  4628              MOV      r0,r5
00003c  4788              BLX      r1
                  |L22.62|
;;;346          }
;;;347          WM_InvalidateWindow(hObj);
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       WM_InvalidateWindow
;;;348          WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
000044  4628              MOV      r0,r5
000046  e8bd4070          POP      {r4-r6,lr}
00004a  2105              MOVS     r1,#5
00004c  f7ffbffe          B.W      WM_NotifyParent
                  |L22.80|
;;;349        }
;;;350        WM_UNLOCK();
;;;351      }
;;;352    }
000050  bd70              POP      {r4-r6,pc}
;;;353    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  EDIT__DefaultProps
                          DCD      0x0000000c
                          DCD      0x00000001
                          DCD      GUI_Font13_1
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00c0c0c0
                          DCD      0x00ffffff
