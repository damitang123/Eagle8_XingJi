; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\guicurs.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guicurs.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\Core\GUICurs.c]
                          THUMB

                          AREA ||i.GUI_CURSOR_Activate||, CODE, READONLY, ALIGN=2

                  GUI_CURSOR_Activate PROC
;;;237    */
;;;238    void GUI_CURSOR_Activate(void) {
000000  4804              LDR      r0,|L1.20|
;;;239      GUI_LOCK();
;;;240      if ((--_CursorDeActCnt) ==0) {
000002  7881              LDRB     r1,[r0,#2]  ; _CursorDeActCnt
000004  1e49              SUBS     r1,r1,#1
000006  f01101ff          ANDS     r1,r1,#0xff
00000a  7081              STRB     r1,[r0,#2]
00000c  d101              BNE      |L1.18|
;;;241        _Show();
00000e  f7ffbffe          B.W      _Show
                  |L1.18|
;;;242      }
;;;243      GUI_UNLOCK();
;;;244    }
000012  4770              BX       lr
;;;245    
                          ENDP

                  |L1.20|
                          DCD      ||.data||

                          AREA ||i.GUI_CURSOR_Deactivate||, CODE, READONLY, ALIGN=2

                  GUI_CURSOR_Deactivate PROC
;;;249    */
;;;250    void GUI_CURSOR_Deactivate(void) {
000000  4904              LDR      r1,|L2.20|
;;;251      GUI_LOCK();
;;;252      if (_CursorDeActCnt++ ==0)
000002  7888              LDRB     r0,[r1,#2]  ; _CursorDeActCnt
000004  1c42              ADDS     r2,r0,#1
000006  708a              STRB     r2,[r1,#2]
000008  2800              CMP      r0,#0                 ;250
00000a  d101              BNE      |L2.16|
;;;253        _Hide();
00000c  f7ffbffe          B.W      _Hide
                  |L2.16|
;;;254      GUI_UNLOCK();
;;;255    }
000010  4770              BX       lr
;;;256    
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
                          DCD      ||.data||

                          AREA ||i.GUI_CURSOR_GetState||, CODE, READONLY, ALIGN=2

                  GUI_CURSOR_GetState PROC
;;;328    */
;;;329    int GUI_CURSOR_GetState(void) {
000000  4801              LDR      r0,|L3.8|
;;;330      int r;
;;;331      GUI_LOCK();
;;;332      r = _CursorOn;
000002  7840              LDRB     r0,[r0,#1]  ; _CursorOn
;;;333      GUI_UNLOCK();
;;;334      return r;
;;;335    }
000004  4770              BX       lr
;;;336    
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      ||.data||

                          AREA ||i.GUI_CURSOR_Hide||, CODE, READONLY, ALIGN=2

                  GUI_CURSOR_Hide PROC
;;;294    */
;;;295    void GUI_CURSOR_Hide(void) {
000000  b510              PUSH     {r4,lr}
;;;296      GUI_LOCK();
;;;297      _Hide();
000002  f7fffffe          BL       _Hide
;;;298      _CursorOn = 0;
000006  4904              LDR      r1,|L4.24|
000008  2000              MOVS     r0,#0
00000a  7048              STRB     r0,[r1,#1]
;;;299      /* Set function pointer which window manager can use */
;;;300      GUI_CURSOR_pfTempHide   = NULL;
00000c  4903              LDR      r1,|L4.28|
;;;301      GUI_CURSOR_pfTempUnhide = NULL;
00000e  6008              STR      r0,[r1,#0]  ; GUI_CURSOR_pfTempHide
000010  4903              LDR      r1,|L4.32|
000012  6008              STR      r0,[r1,#0]  ; GUI_CURSOR_pfTempUnhide
;;;302      GUI_UNLOCK();
;;;303    }
000014  bd10              POP      {r4,pc}
;;;304    
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      ||.data||
                  |L4.28|
                          DCD      GUI_CURSOR_pfTempHide
                  |L4.32|
                          DCD      GUI_CURSOR_pfTempUnhide

                          AREA ||i.GUI_CURSOR_Select||, CODE, READONLY, ALIGN=2

                  GUI_CURSOR_Select PROC
;;;260    */
;;;261    const GUI_CURSOR GUI_UNI_PTR * GUI_CURSOR_Select(const GUI_CURSOR GUI_UNI_PTR * pCursor) {
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;262      int AllocSize;
;;;263      const GUI_BITMAP GUI_UNI_PTR * pBM;
;;;264      const GUI_CURSOR GUI_UNI_PTR * pOldCursor;
;;;265      GUI_LOCK();
;;;266      pOldCursor = _pCursor;
000004  4c1a              LDR      r4,|L5.112|
000006  4607              MOV      r7,r0                 ;261
000008  68a0              LDR      r0,[r4,#8]  ; _pCursor
00000a  4680              MOV      r8,r0
;;;267      if (pCursor != _pCursor) {
00000c  4287              CMP      r7,r0
00000e  d02b              BEQ      |L5.104|
;;;268        int i;
;;;269        pBM = pCursor->pBitmap;
;;;270        i = pBM->pPal->NumEntries > 4 ? 4 : pBM->pPal->NumEntries;
000010  683e              LDR      r6,[r7,#0]
000012  68f0              LDR      r0,[r6,#0xc]
000014  6805              LDR      r5,[r0,#0]
000016  2d04              CMP      r5,#4
000018  dd0a              BLE      |L5.48|
;;;271        while (i--) {
00001a  2503              MOVS     r5,#3
                  |L5.28|
;;;272          LCD_COLOR Color = *(pBM->pPal->pPalEntries + i);
00001c  68f0              LDR      r0,[r6,#0xc]
00001e  6880              LDR      r0,[r0,#8]
000020  f8500025          LDR      r0,[r0,r5,LSL #2]
;;;273          _ColorIndex[i] = LCD_Color2Index(Color);
000024  f7fffffe          BL       LCD_Color2Index
000028  4911              LDR      r1,|L5.112|
00002a  3128              ADDS     r1,r1,#0x28
00002c  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L5.48|
000030  1e6d              SUBS     r5,r5,#1
000032  d2f3              BCS      |L5.28|
;;;274        }
;;;275        _Hide();
000034  f7fffffe          BL       _Hide
;;;276        AllocSize = pBM->XSize * pBM->YSize * sizeof(LCD_PIXELINDEX);
000038  8830              LDRH     r0,[r6,#0]
00003a  8871              LDRH     r1,[r6,#2]
00003c  4348              MULS     r0,r1,r0
00003e  0045              LSLS     r5,r0,#1
;;;277        if (AllocSize != _AllocSize) {
000040  68e0              LDR      r0,[r4,#0xc]  ; _AllocSize
000042  4285              CMP      r5,r0
000044  d005              BEQ      |L5.82|
;;;278          GUI_ALLOC_Free(_hBuffer);
000046  f9b40004          LDRSH    r0,[r4,#4]  ; _hBuffer
00004a  f7fffffe          BL       GUI_ALLOC_Free
;;;279          _hBuffer = 0;
00004e  2000              MOVS     r0,#0
000050  80a0              STRH     r0,[r4,#4]
                  |L5.82|
;;;280        }
;;;281        _hBuffer = GUI_ALLOC_AllocZero(AllocSize);
000052  b228              SXTH     r0,r5
000054  f7fffffe          BL       GUI_ALLOC_AllocZero
000058  80a0              STRH     r0,[r4,#4]
;;;282        _CursorOn = 1;
00005a  2001              MOVS     r0,#1
00005c  7060              STRB     r0,[r4,#1]
;;;283        _pCursor = pCursor;
;;;284        _CalcRect();
00005e  60a7              STR      r7,[r4,#8]  ; _pCursor
000060  f7fffffe          BL       _CalcRect
;;;285        _Show();
000064  f7fffffe          BL       _Show
                  |L5.104|
;;;286      }
;;;287      GUI_UNLOCK();
;;;288      return pOldCursor;
000068  4640              MOV      r0,r8
;;;289    }
00006a  e8bd81f0          POP      {r4-r8,pc}
;;;290    
                          ENDP

00006e  0000              DCW      0x0000
                  |L5.112|
                          DCD      ||.data||

                          AREA ||i.GUI_CURSOR_SetPosition||, CODE, READONLY, ALIGN=2

                  GUI_CURSOR_SetPosition PROC
;;;340    */
;;;341    void GUI_CURSOR_SetPosition(int xNewPos, int yNewPos) {
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;342      int x, xStart, xStep, xEnd, xOff, xOverlapMin, xOverlapMax;
;;;343      int y, yStart, yStep, yEnd, yOff, yOverlapMin, yOverlapMax;
;;;344      int xSize;
;;;345      LCD_PIXELINDEX* pData;
;;;346      GUI_LOCK();
;;;347      if (_hBuffer) {
000004  4978              LDR      r1,|L6.488|
000006  b09b              SUB      sp,sp,#0x6c           ;341
000008  f9b10004          LDRSH    r0,[r1,#4]  ; _hBuffer
00000c  2800              CMP      r0,#0                 ;341
00000e  d06e              BEQ      |L6.238|
;;;348        if ((_x != xNewPos) | (_y != yNewPos)) {
000010  690b              LDR      r3,[r1,#0x10]  ; _x
000012  9a1b              LDR      r2,[sp,#0x6c]
000014  4293              CMP      r3,r2
000016  d001              BEQ      |L6.28|
000018  2201              MOVS     r2,#1
00001a  e000              B        |L6.30|
                  |L6.28|
00001c  2200              MOVS     r2,#0
                  |L6.30|
00001e  694c              LDR      r4,[r1,#0x14]  ; _y
000020  9b1c              LDR      r3,[sp,#0x70]
000022  429c              CMP      r4,r3
000024  d001              BEQ      |L6.42|
000026  2301              MOVS     r3,#1
000028  e000              B        |L6.44|
                  |L6.42|
00002a  2300              MOVS     r3,#0
                  |L6.44|
00002c  431a              ORRS     r2,r2,r3
00002e  d05e              BEQ      |L6.238|
;;;349          if (_CursorOn) {
000030  496d              LDR      r1,|L6.488|
000032  7849              LDRB     r1,[r1,#1]  ; _CursorOn
000034  2900              CMP      r1,#0
000036  d074              BEQ      |L6.290|
;;;350            const GUI_BITMAP GUI_UNI_PTR * pBM = _pCursor->pBitmap;
000038  4d6b              LDR      r5,|L6.488|
00003a  68a9              LDR      r1,[r5,#8]  ; _pCursor
00003c  6809              LDR      r1,[r1,#0]
;;;351            /* Save & set clip rect */
;;;352            /* Compute helper variables */
;;;353            pData = (LCD_PIXELINDEX*)GUI_ALLOC_h2p(_hBuffer);
00003e  9103              STR      r1,[sp,#0xc]
000040  f7fffffe          BL       GUI_ALLOC_h2p
;;;354            xSize = _pCursor->pBitmap->XSize;
000044  9011              STR      r0,[sp,#0x44]
000046  68a8              LDR      r0,[r5,#8]  ; _pCursor
000048  6802              LDR      r2,[r0,#0]
;;;355            xOff = xNewPos - _x;
00004a  981b              LDR      r0,[sp,#0x6c]
00004c  8814              LDRH     r4,[r2,#0]            ;354
00004e  9405              STR      r4,[sp,#0x14]
000050  6929              LDR      r1,[r5,#0x10]  ; _x
000052  eba00801          SUB      r8,r0,r1
;;;356            if (xOff > 0) {
;;;357              xStep  = 1;
;;;358              xStart = 0;
;;;359              xEnd   = _pCursor->pBitmap->XSize;
;;;360              xOverlapMax = xEnd -1;
;;;361              xOverlapMin = xOff;
;;;362            } else {
;;;363              xStep  = -1;
000056  f04f30ff          MOV      r0,#0xffffffff
00005a  f1b80f00          CMP      r8,#0                 ;356
00005e  dd07              BLE      |L6.112|
000060  2101              MOVS     r1,#1                 ;357
000062  9110              STR      r1,[sp,#0x40]         ;358
000064  2100              MOVS     r1,#0                 ;358
000066  910e              STR      r1,[sp,#0x38]         ;360
000068  1e61              SUBS     r1,r4,#1              ;360
00006a  46c3              MOV      r11,r8                ;361
00006c  910b              STR      r1,[sp,#0x2c]         ;361
00006e  e007              B        |L6.128|
                  |L6.112|
;;;364              xStart = xSize - 1;
000070  1e61              SUBS     r1,r4,#1
;;;365              xEnd   = -1;
;;;366              xOverlapMin = 0;
;;;367              xOverlapMax = xStart + xOff;
000072  910e              STR      r1,[sp,#0x38]
000074  9010              STR      r0,[sp,#0x40]
000076  4441              ADD      r1,r1,r8
000078  4604              MOV      r4,r0                 ;365
00007a  f04f0b00          MOV      r11,#0                ;366
00007e  910b              STR      r1,[sp,#0x2c]
                  |L6.128|
;;;368            }
;;;369            yOff = yNewPos - _y;
000080  991c              LDR      r1,[sp,#0x70]
000082  696b              LDR      r3,[r5,#0x14]  ; _y
000084  eba10903          SUB      r9,r1,r3
;;;370            if (yOff > 0) {
000088  f1b90f00          CMP      r9,#0
00008c  dd09              BLE      |L6.162|
;;;371              yStep  = 1;
00008e  2001              MOVS     r0,#1
;;;372              yStart = 0;
;;;373              yEnd   = _pCursor->pBitmap->YSize;
000090  900f              STR      r0,[sp,#0x3c]
000092  f8b2a002          LDRH     r10,[r2,#2]
000096  2500              MOVS     r5,#0                 ;372
000098  f1aa0001          SUB      r0,r10,#1
00009c  e9cd9008          STRD     r9,r0,[sp,#0x20]
;;;374              yOverlapMax = yEnd -1;
;;;375              yOverlapMin = yOff;
0000a0  e092              B        |L6.456|
                  |L6.162|
;;;376            } else {
;;;377              yStep  = -1;
;;;378              yStart = _pCursor->pBitmap->YSize - 1;
0000a2  900f              STR      r0,[sp,#0x3c]
;;;379              yEnd   = -1;
0000a4  4682              MOV      r10,r0
0000a6  8855              LDRH     r5,[r2,#2]            ;378
;;;380              yOverlapMin = 0;
0000a8  2000              MOVS     r0,#0
0000aa  1e6d              SUBS     r5,r5,#1
;;;381              yOverlapMax = yStart + yOff;
0000ac  9008              STR      r0,[sp,#0x20]
0000ae  eb050009          ADD      r0,r5,r9
0000b2  9009              STR      r0,[sp,#0x24]
0000b4  e088              B        |L6.456|
;;;382            }
;;;383            /* Restore & Draw */
;;;384            for (y = yStart; y != yEnd; y += yStep) {
;;;385              char yOverlaps;
;;;386              char yNewOverlaps;
;;;387              int yNew = y + yOff;
0000b6  bf00              NOP      
                  |L6.184|
0000b8  eb050009          ADD      r0,r5,r9
;;;388              yOverlaps    = (y >= yOverlapMin) && (y <= yOverlapMax);
0000bc  9004              STR      r0,[sp,#0x10]
0000be  9808              LDR      r0,[sp,#0x20]
0000c0  4285              CMP      r5,r0
0000c2  db04              BLT      |L6.206|
0000c4  9809              LDR      r0,[sp,#0x24]
0000c6  4285              CMP      r5,r0
0000c8  dc01              BGT      |L6.206|
0000ca  2001              MOVS     r0,#1
0000cc  e000              B        |L6.208|
                  |L6.206|
0000ce  2000              MOVS     r0,#0
                  |L6.208|
;;;389              yNewOverlaps = (yNew >= yOverlapMin) && (yNew <= yOverlapMax);
0000d0  9017              STR      r0,[sp,#0x5c]
0000d2  9904              LDR      r1,[sp,#0x10]
0000d4  9808              LDR      r0,[sp,#0x20]
0000d6  4281              CMP      r1,r0
0000d8  db05              BLT      |L6.230|
0000da  4608              MOV      r0,r1
0000dc  9909              LDR      r1,[sp,#0x24]
0000de  4288              CMP      r0,r1
0000e0  dc01              BGT      |L6.230|
0000e2  2001              MOVS     r0,#1
0000e4  e000              B        |L6.232|
                  |L6.230|
0000e6  2000              MOVS     r0,#0
                  |L6.232|
;;;390              for (x= xStart; x != xEnd; x += xStep) {
0000e8  9016              STR      r0,[sp,#0x58]
0000ea  9e0e              LDR      r6,[sp,#0x38]
0000ec  e068              B        |L6.448|
                  |L6.238|
0000ee  e078              B        |L6.482|
                  |L6.240|
;;;391                char xyOverlaps, xyNewOverlaps;
;;;392                int BitmapPixel;
;;;393                LCD_PIXELINDEX Pixel;
;;;394                LCD_PIXELINDEX* pSave = pData + x + y * xSize;
0000f0  9811              LDR      r0,[sp,#0x44]
;;;395                int xNew = x + xOff;
0000f2  eb060708          ADD      r7,r6,r8
0000f6  eb000146          ADD      r1,r0,r6,LSL #1       ;394
0000fa  9805              LDR      r0,[sp,#0x14]         ;394
;;;396                BitmapPixel = GUI_GetBitmapPixelIndex(pBM, x, y);
0000fc  462a              MOV      r2,r5
0000fe  4368              MULS     r0,r5,r0              ;394
000100  eb010040          ADD      r0,r1,r0,LSL #1       ;394
000104  9012              STR      r0,[sp,#0x48]
000106  4631              MOV      r1,r6
000108  9803              LDR      r0,[sp,#0xc]
00010a  f7fffffe          BL       GUI_GetBitmapPixelIndex
;;;397                xyOverlaps    = (x    >= xOverlapMin) && (x    <= xOverlapMax) && yOverlaps;
00010e  9018              STR      r0,[sp,#0x60]
000110  455e              CMP      r6,r11
000112  db07              BLT      |L6.292|
000114  980b              LDR      r0,[sp,#0x2c]
000116  4286              CMP      r6,r0
000118  dc04              BGT      |L6.292|
00011a  9817              LDR      r0,[sp,#0x5c]
00011c  b110              CBZ      r0,|L6.292|
00011e  2001              MOVS     r0,#1
000120  e001              B        |L6.294|
                  |L6.290|
000122  e054              B        |L6.462|
                  |L6.292|
000124  2000              MOVS     r0,#0
                  |L6.294|
;;;398                xyNewOverlaps = (xNew >= xOverlapMin) && (xNew <= xOverlapMax) && yNewOverlaps;
000126  455f              CMP      r7,r11
000128  db06              BLT      |L6.312|
00012a  990b              LDR      r1,[sp,#0x2c]
00012c  428f              CMP      r7,r1
00012e  dc03              BGT      |L6.312|
000130  9916              LDR      r1,[sp,#0x58]
000132  b109              CBZ      r1,|L6.312|
000134  2101              MOVS     r1,#1
000136  e000              B        |L6.314|
                  |L6.312|
000138  2100              MOVS     r1,#0
                  |L6.314|
;;;399                /* Restore old pixel if it was not transparent */
;;;400                if (BitmapPixel) {
00013a  9119              STR      r1,[sp,#0x64]
00013c  9918              LDR      r1,[sp,#0x60]
00013e  b1a1              CBZ      r1,|L6.362|
;;;401                  if (!xyOverlaps || (GUI_GetBitmapPixelIndex(pBM, x - xOff, y - yOff) == 0)) {
000140  b138              CBZ      r0,|L6.338|
000142  eba50209          SUB      r2,r5,r9
000146  eba60108          SUB      r1,r6,r8
00014a  9803              LDR      r0,[sp,#0xc]
00014c  f7fffffe          BL       GUI_GetBitmapPixelIndex
000150  b958              CBNZ     r0,|L6.362|
                  |L6.338|
;;;402                    _SetPixelIndex(x + _Rect.x0, y + _Rect.y0, *(pSave));
000152  9812              LDR      r0,[sp,#0x48]
000154  8802              LDRH     r2,[r0,#0]
000156  4824              LDR      r0,|L6.488|
000158  3018              ADDS     r0,r0,#0x18
00015a  f9b01002          LDRSH    r1,[r0,#2]  ; _Rect
00015e  f9b00000          LDRSH    r0,[r0,#0]  ; _Rect
000162  4429              ADD      r1,r1,r5
000164  4430              ADD      r0,r0,r6
000166  f7fffffe          BL       _SetPixelIndex
                  |L6.362|
;;;403                  }
;;;404                }
;;;405                /* Save */
;;;406                if (xyNewOverlaps) {
00016a  9819              LDR      r0,[sp,#0x64]
00016c  b140              CBZ      r0,|L6.384|
;;;407                  Pixel = *(pData + xNew + yNew * xSize);
00016e  9811              LDR      r0,[sp,#0x44]
000170  eb000247          ADD      r2,r0,r7,LSL #1
000174  e9dd0104          LDRD     r0,r1,[sp,#0x10]
000178  4348              MULS     r0,r1,r0
00017a  f8320010          LDRH     r0,[r2,r0,LSL #1]
00017e  e00b              B        |L6.408|
                  |L6.384|
;;;408                } else {
;;;409                  Pixel = _GetPixelIndex(_Rect.x0 + xNew, _Rect.y0 + yNew);
000180  4819              LDR      r0,|L6.488|
000182  9904              LDR      r1,[sp,#0x10]
000184  3018              ADDS     r0,r0,#0x18
000186  f9b02002          LDRSH    r2,[r0,#2]  ; _Rect
00018a  f9b00000          LDRSH    r0,[r0,#0]  ; _Rect
00018e  4411              ADD      r1,r1,r2
000190  4438              ADD      r0,r0,r7
000192  f7fffffe          BL       _GetPixelIndex
000196  b280              UXTH     r0,r0
                  |L6.408|
;;;410                }
;;;411                *pSave = Pixel;
000198  9912              LDR      r1,[sp,#0x48]
00019a  8008              STRH     r0,[r1,#0]
;;;412                /* Write new  ... We could write pixel by pixel here */
;;;413                if (BitmapPixel) {
00019c  9818              LDR      r0,[sp,#0x60]
00019e  b168              CBZ      r0,|L6.444|
;;;414                  LCD_PIXELINDEX NewPixel = _Log2Phys(BitmapPixel);
0001a0  f7fffffe          BL       _Log2Phys
0001a4  b282              UXTH     r2,r0
;;;415                  _SetPixelIndex(_Rect.x0 + xNew, _Rect.y0 + yNew, NewPixel);
0001a6  4810              LDR      r0,|L6.488|
0001a8  9904              LDR      r1,[sp,#0x10]
0001aa  3018              ADDS     r0,r0,#0x18
0001ac  f9b03002          LDRSH    r3,[r0,#2]  ; _Rect
0001b0  f9b00000          LDRSH    r0,[r0,#0]  ; _Rect
0001b4  4419              ADD      r1,r1,r3
0001b6  4438              ADD      r0,r0,r7
0001b8  f7fffffe          BL       _SetPixelIndex
                  |L6.444|
0001bc  9810              LDR      r0,[sp,#0x40]         ;390
0001be  4406              ADD      r6,r6,r0              ;390
                  |L6.448|
0001c0  42a6              CMP      r6,r4                 ;390
0001c2  d195              BNE      |L6.240|
0001c4  980f              LDR      r0,[sp,#0x3c]         ;384
0001c6  4405              ADD      r5,r5,r0              ;384
                  |L6.456|
0001c8  4555              CMP      r5,r10                ;384
0001ca  f47faf75          BNE      |L6.184|
                  |L6.462|
;;;416                }
;;;417              }
;;;418            }
;;;419          }
;;;420          _x = xNewPos;
0001ce  4806              LDR      r0,|L6.488|
0001d0  991b              LDR      r1,[sp,#0x6c]
;;;421          _y = yNewPos;
0001d2  6101              STR      r1,[r0,#0x10]  ; _x
0001d4  991c              LDR      r1,[sp,#0x70]
;;;422          _CalcRect();
0001d6  6141              STR      r1,[r0,#0x14]  ; _y
0001d8  b01d              ADD      sp,sp,#0x74
0001da  e8bd4ff0          POP      {r4-r11,lr}
0001de  f7ffbffe          B.W      _CalcRect
                  |L6.482|
;;;423        }
;;;424      }
;;;425      GUI_UNLOCK();
;;;426    }
0001e2  b01d              ADD      sp,sp,#0x74
0001e4  e8bd8ff0          POP      {r4-r11,pc}
;;;427    
                          ENDP

                  |L6.488|
                          DCD      ||.data||

                          AREA ||i.GUI_CURSOR_Show||, CODE, READONLY, ALIGN=2

                  GUI_CURSOR_Show PROC
;;;308    */
;;;309    void GUI_CURSOR_Show(void) {
000000  480e              LDR      r0,|L7.60|
000002  b510              PUSH     {r4,lr}
;;;310      GUI_LOCK();
;;;311      LCDDEV_L0_GetRect(&_ClipRect);
000004  6cc0              LDR      r0,[r0,#0x4c]  ; GUI_Context
000006  6a01              LDR      r1,[r0,#0x20]
000008  480d              LDR      r0,|L7.64|
00000a  4788              BLX      r1
;;;312      _Hide();
00000c  f7fffffe          BL       _Hide
;;;313      _CursorOn = 1;
000010  480b              LDR      r0,|L7.64|
000012  2101              MOVS     r1,#1
000014  3820              SUBS     r0,r0,#0x20
;;;314      /* Set function pointer which window manager can use */
;;;315      GUI_CURSOR_pfTempHide   = _TempHide;
000016  4a0c              LDR      r2,|L7.72|
000018  7041              STRB     r1,[r0,#1]            ;313
00001a  490a              LDR      r1,|L7.68|
;;;316      GUI_CURSOR_pfTempUnhide = _TempUnhide;
00001c  6011              STR      r1,[r2,#0]  ; GUI_CURSOR_pfTempHide
00001e  4a0c              LDR      r2,|L7.80|
000020  490a              LDR      r1,|L7.76|
;;;317      if (!_pCursor) {
000022  6011              STR      r1,[r2,#0]  ; GUI_CURSOR_pfTempUnhide
000024  6880              LDR      r0,[r0,#8]  ; _pCursor
000026  b118              CBZ      r0,|L7.48|
;;;318        GUI_CURSOR_Select(GUI_DEFAULT_CURSOR);
;;;319      } else {
;;;320        _Show();
000028  e8bd4010          POP      {r4,lr}
00002c  f7ffbffe          B.W      _Show
                  |L7.48|
000030  e8bd4010          POP      {r4,lr}               ;318
000034  4807              LDR      r0,|L7.84|
000036  f7ffbffe          B.W      GUI_CURSOR_Select
;;;321      }
;;;322      GUI_UNLOCK();
;;;323    }
;;;324    
                          ENDP

00003a  0000              DCW      0x0000
                  |L7.60|
                          DCD      GUI_Context
                  |L7.64|
                          DCD      ||.data||+0x20
                  |L7.68|
                          DCD      _TempHide
                  |L7.72|
                          DCD      GUI_CURSOR_pfTempHide
                  |L7.76|
                          DCD      _TempUnhide
                  |L7.80|
                          DCD      GUI_CURSOR_pfTempUnhide
                  |L7.84|
                          DCD      GUI_CursorArrowM

                          AREA ||i._CalcRect||, CODE, READONLY, ALIGN=2

                  _CalcRect PROC
;;;156    */
;;;157    static void _CalcRect(void) {
000000  4a0c              LDR      r2,|L8.52|
000002  b510              PUSH     {r4,lr}
000004  6890              LDR      r0,[r2,#8]  ; _pCursor
000006  2800              CMP      r0,#0
000008  d013              BEQ      |L8.50|
;;;158      if (_pCursor) {
;;;159        _Rect.x0 = _x - _pCursor->xHot;
00000a  8881              LDRH     r1,[r0,#4]
00000c  8a13              LDRH     r3,[r2,#0x10]  ; _x
00000e  1a5b              SUBS     r3,r3,r1
000010  f1020118          ADD      r1,r2,#0x18
000014  800b              STRH     r3,[r1,#0]
;;;160        _Rect.y0 = _y - _pCursor->yHot;
000016  8904              LDRH     r4,[r0,#8]
000018  8a92              LDRH     r2,[r2,#0x14]  ; _y
00001a  1b12              SUBS     r2,r2,r4
00001c  804a              STRH     r2,[r1,#2]
;;;161        _Rect.x1 = _Rect.x0 + _pCursor->pBitmap->XSize - 1;
00001e  6804              LDR      r4,[r0,#0]
000020  8824              LDRH     r4,[r4,#0]
000022  4423              ADD      r3,r3,r4
000024  1e5b              SUBS     r3,r3,#1
000026  808b              STRH     r3,[r1,#4]
;;;162        _Rect.y1 = _Rect.y0 + _pCursor->pBitmap->YSize - 1;
000028  6800              LDR      r0,[r0,#0]
00002a  8840              LDRH     r0,[r0,#2]
00002c  4410              ADD      r0,r0,r2
00002e  1e40              SUBS     r0,r0,#1
000030  80c8              STRH     r0,[r1,#6]
                  |L8.50|
;;;163      }
;;;164    }
000032  bd10              POP      {r4,pc}
;;;165    
                          ENDP

                  |L8.52|
                          DCD      ||.data||

                          AREA ||i._Draw||, CODE, READONLY, ALIGN=2

                  _Draw PROC
;;;126    */
;;;127    static void _Draw(void) {
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;128      int x, y, xSize, ySize;
;;;129      LCD_PIXELINDEX* pData;
;;;130      const GUI_BITMAP GUI_UNI_PTR * pBM;
;;;131      GUI_LOCK();
;;;132      if (_hBuffer) {
000004  4923              LDR      r1,|L9.148|
000006  f9b10004          LDRSH    r0,[r1,#4]  ; _hBuffer
00000a  2800              CMP      r0,#0                 ;127
00000c  d03f              BEQ      |L9.142|
;;;133        /* Save bitmap data */
;;;134        pBM = _pCursor->pBitmap;
00000e  6889              LDR      r1,[r1,#8]  ; _pCursor
;;;135        pData = (LCD_PIXELINDEX*)GUI_ALLOC_h2p(_hBuffer);
000010  f8d1a000          LDR      r10,[r1,#0]
000014  f7fffffe          BL       GUI_ALLOC_h2p
;;;136        xSize = _Rect.x1 - _Rect.x0 + 1;
000018  f8df9078          LDR      r9,|L9.148|
00001c  4606              MOV      r6,r0                 ;135
00001e  f1090918          ADD      r9,r9,#0x18
;;;137        ySize = _Rect.y1 - _Rect.y0 + 1;
;;;138        for (y = 0; y < ySize; y++) {
000022  2500              MOVS     r5,#0
000024  f9b91004          LDRSH    r1,[r9,#4]            ;136  ; _Rect
000028  f9b92000          LDRSH    r2,[r9,#0]            ;136  ; _Rect
00002c  f9b90002          LDRSH    r0,[r9,#2]            ;137  ; _Rect
000030  1a8f              SUBS     r7,r1,r2              ;136
000032  f9b91006          LDRSH    r1,[r9,#6]            ;137  ; _Rect
000036  1a08              SUBS     r0,r1,r0              ;137
000038  f1000801          ADD      r8,r0,#1              ;137
00003c  1c7f              ADDS     r7,r7,#1
00003e  e024              B        |L9.138|
                  |L9.64|
;;;139          for (x = 0; x < xSize; x++) {
000040  2400              MOVS     r4,#0
000042  e01b              B        |L9.124|
                  |L9.68|
;;;140            int BitmapPixel;
;;;141            *(pData + x) = _GetPixelIndex(_Rect.x0 + x, _Rect.y0 + y);
000044  f9b91002          LDRSH    r1,[r9,#2]  ; _Rect
000048  f9b90000          LDRSH    r0,[r9,#0]  ; _Rect
00004c  4429              ADD      r1,r1,r5
00004e  4420              ADD      r0,r0,r4
000050  f7fffffe          BL       _GetPixelIndex
000054  f8260014          STRH     r0,[r6,r4,LSL #1]
;;;142            BitmapPixel = GUI_GetBitmapPixelIndex(pBM, x, y);
000058  462a              MOV      r2,r5
00005a  4621              MOV      r1,r4
00005c  4650              MOV      r0,r10
00005e  f7fffffe          BL       GUI_GetBitmapPixelIndex
;;;143            if (BitmapPixel) {
000062  b150              CBZ      r0,|L9.122|
;;;144              _SetPixelIndex(_Rect.x0 + x, _Rect.y0 + y, _Log2Phys(BitmapPixel));
000064  f7fffffe          BL       _Log2Phys
000068  4602              MOV      r2,r0
00006a  f9b91002          LDRSH    r1,[r9,#2]  ; _Rect
00006e  f9b90000          LDRSH    r0,[r9,#0]  ; _Rect
000072  4429              ADD      r1,r1,r5
000074  4420              ADD      r0,r0,r4
000076  f7fffffe          BL       _SetPixelIndex
                  |L9.122|
00007a  1c64              ADDS     r4,r4,#1
                  |L9.124|
00007c  42bc              CMP      r4,r7                 ;139
00007e  dbe1              BLT      |L9.68|
;;;145            }
;;;146          }
;;;147          pData += pBM->XSize;
000080  f8ba0000          LDRH     r0,[r10,#0]
000084  1c6d              ADDS     r5,r5,#1
000086  eb060640          ADD      r6,r6,r0,LSL #1
                  |L9.138|
00008a  4545              CMP      r5,r8                 ;138
00008c  dbd8              BLT      |L9.64|
                  |L9.142|
;;;148        }
;;;149      }
;;;150      GUI_UNLOCK();
;;;151    }
00008e  e8bd87f0          POP      {r4-r10,pc}
;;;152    
                          ENDP

000092  0000              DCW      0x0000
                  |L9.148|
                          DCD      ||.data||

                          AREA ||i._GetPixelIndex||, CODE, READONLY, ALIGN=2

                  _GetPixelIndex PROC
;;;74     */
;;;75     static int _GetPixelIndex(int x, int y) {
000000  4a0a              LDR      r2,|L10.44|
;;;76       if ((y >= _ClipRect.y0) && (y <= _ClipRect.y1)) {
000002  f9b23002          LDRSH    r3,[r2,#2]  ; _ClipRect
000006  428b              CMP      r3,r1
000008  dc0d              BGT      |L10.38|
00000a  f9b23006          LDRSH    r3,[r2,#6]  ; _ClipRect
00000e  428b              CMP      r3,r1
000010  db09              BLT      |L10.38|
;;;77         if ((x >= _ClipRect.x0) && (x <= _ClipRect.x1)) {
000012  f9b23000          LDRSH    r3,[r2,#0]  ; _ClipRect
000016  4283              CMP      r3,r0
000018  dc05              BGT      |L10.38|
00001a  f9b22004          LDRSH    r2,[r2,#4]  ; _ClipRect
00001e  4282              CMP      r2,r0
000020  db01              BLT      |L10.38|
;;;78           return LCD_L0_GetPixelIndex(x, y);
000022  f7ffbffe          B.W      LCD_L0_GetPixelIndex
                  |L10.38|
;;;79         }
;;;80       }
;;;81       return 0;
000026  2000              MOVS     r0,#0
;;;82     }
000028  4770              BX       lr
;;;83     
                          ENDP

00002a  0000              DCW      0x0000
                  |L10.44|
                          DCD      ||.data||+0x20

                          AREA ||i._Hide||, CODE, READONLY, ALIGN=2

                  _Hide PROC
;;;169    */
;;;170    static void _Hide(void) {
000000  b510              PUSH     {r4,lr}
;;;171      if (_CursorIsVis) {
000002  4c04              LDR      r4,|L11.20|
000004  7820              LDRB     r0,[r4,#0]  ; _CursorIsVis
000006  2800              CMP      r0,#0                 ;170
000008  d003              BEQ      |L11.18|
;;;172        _Undraw();
00000a  f7fffffe          BL       _Undraw
;;;173        _CursorIsVis = 0;
00000e  2000              MOVS     r0,#0
000010  7020              STRB     r0,[r4,#0]
                  |L11.18|
;;;174      }
;;;175    }
000012  bd10              POP      {r4,pc}
;;;176    
                          ENDP

                  |L11.20|
                          DCD      ||.data||

                          AREA ||i._Log2Phys||, CODE, READONLY, ALIGN=2

                  _Log2Phys PROC
;;;113    */
;;;114    static int _Log2Phys(int Index) {
000000  2804              CMP      r0,#4
000002  da03              BGE      |L12.12|
;;;115      if (Index < 4) {
;;;116        return _ColorIndex[Index];
000004  4906              LDR      r1,|L12.32|
000006  f8310010          LDRH     r0,[r1,r0,LSL #1]
;;;117      } else {
;;;118        LCD_COLOR Color = *(_pCursor->pBitmap->pPal->pPalEntries + Index);
;;;119        return LCD_Color2Index(Color);
;;;120      }
;;;121    }
00000a  4770              BX       lr
                  |L12.12|
00000c  4904              LDR      r1,|L12.32|
00000e  3928              SUBS     r1,r1,#0x28           ;118
000010  6889              LDR      r1,[r1,#8]            ;118  ; _pCursor
000012  6809              LDR      r1,[r1,#0]            ;118
000014  68c9              LDR      r1,[r1,#0xc]          ;118
000016  6889              LDR      r1,[r1,#8]            ;118
000018  f8510020          LDR      r0,[r1,r0,LSL #2]     ;118
00001c  f7ffbffe          B.W      LCD_Color2Index
;;;122    
                          ENDP

                  |L12.32|
                          DCD      ||.data||+0x28

                          AREA ||i._SetPixelIndex||, CODE, READONLY, ALIGN=2

                  _SetPixelIndex PROC
;;;59     */
;;;60     static void _SetPixelIndex(int x, int y, int Index) {
000000  4b0c              LDR      r3,|L13.52|
000002  b430              PUSH     {r4,r5}
;;;61       if ((y >= _ClipRect.y0) && (y <= _ClipRect.y1)) {
000004  f9b34002          LDRSH    r4,[r3,#2]  ; _ClipRect
000008  428c              CMP      r4,r1
00000a  dc10              BGT      |L13.46|
00000c  f9b34006          LDRSH    r4,[r3,#6]  ; _ClipRect
000010  428c              CMP      r4,r1
000012  db0c              BLT      |L13.46|
;;;62         if ((x >= _ClipRect.x0) && (x <= _ClipRect.x1)) {
000014  f9b34000          LDRSH    r4,[r3,#0]  ; _ClipRect
000018  4284              CMP      r4,r0
00001a  dc08              BGT      |L13.46|
00001c  f9b33004          LDRSH    r3,[r3,#4]  ; _ClipRect
000020  4283              CMP      r3,r0
000022  db04              BLT      |L13.46|
;;;63           LCD_aAPI[0]->pfSetPixelIndex(x, y, Index);
000024  4b04              LDR      r3,|L13.56|
000026  681b              LDR      r3,[r3,#0]  ; LCD_aAPI
000028  6a5b              LDR      r3,[r3,#0x24]
00002a  bc30              POP      {r4,r5}
00002c  4718              BX       r3
                  |L13.46|
;;;64         }
;;;65       }
;;;66     }
00002e  bc30              POP      {r4,r5}
000030  4770              BX       lr
;;;67     
                          ENDP

000032  0000              DCW      0x0000
                  |L13.52|
                          DCD      ||.data||+0x20
                  |L13.56|
                          DCD      LCD_aAPI

                          AREA ||i._Show||, CODE, READONLY, ALIGN=2

                  _Show PROC
;;;180    */
;;;181    static void _Show(void) {
000000  4805              LDR      r0,|L14.24|
;;;182      if (_CursorOn && (_CursorDeActCnt==0)) {
000002  7841              LDRB     r1,[r0,#1]  ; _CursorOn
000004  2900              CMP      r1,#0                 ;181
000006  d006              BEQ      |L14.22|
000008  7881              LDRB     r1,[r0,#2]  ; _CursorDeActCnt
00000a  2900              CMP      r1,#0
00000c  d103              BNE      |L14.22|
;;;183        _CursorIsVis = 1;
00000e  2101              MOVS     r1,#1
000010  7001              STRB     r1,[r0,#0]
;;;184        _Draw();  
000012  f7ffbffe          B.W      _Draw
                  |L14.22|
;;;185      }
;;;186    }
000016  4770              BX       lr
;;;187    
                          ENDP

                  |L14.24|
                          DCD      ||.data||

                          AREA ||i._TempHide||, CODE, READONLY, ALIGN=2

                  _TempHide PROC
;;;208    */
;;;209    static char _TempHide(const GUI_RECT* pRect) {
000000  4908              LDR      r1,|L15.36|
000002  b510              PUSH     {r4,lr}
;;;210      if (!_CursorIsVis) {
000004  7809              LDRB     r1,[r1,#0]  ; _CursorIsVis
000006  b151              CBZ      r1,|L15.30|
;;;211        return 0;             /* Cursor not visible -> nothing to do */
;;;212      }
;;;213      if ((pRect == NULL) || GUI_RectsIntersect(pRect, &_Rect)) {
000008  b128              CBZ      r0,|L15.22|
00000a  4906              LDR      r1,|L15.36|
00000c  3118              ADDS     r1,r1,#0x18
00000e  f7fffffe          BL       GUI_RectsIntersect
000012  2800              CMP      r0,#0
000014  d002              BEQ      |L15.28|
                  |L15.22|
;;;214        _Hide();              /* Cursor needs to be hidden */
000016  f7fffffe          BL       _Hide
;;;215        return 1;
00001a  2001              MOVS     r0,#1
                  |L15.28|
;;;216      }
;;;217      return 0;               /* Cursor not affected -> nothing to do */
;;;218    }
00001c  bd10              POP      {r4,pc}
                  |L15.30|
00001e  2000              MOVS     r0,#0                 ;211
000020  bd10              POP      {r4,pc}
;;;219    
                          ENDP

000022  0000              DCW      0x0000
                  |L15.36|
                          DCD      ||.data||

                          AREA ||i._TempUnhide||, CODE, READONLY, ALIGN=1

                  _TempUnhide PROC
;;;223    */
;;;224    static void _TempUnhide(void) {
000000  f7ffbffe          B.W      _Show
;;;225      _Show();
;;;226    }
;;;227    
                          ENDP


                          AREA ||i._Undraw||, CODE, READONLY, ALIGN=2

                  _Undraw PROC
;;;90     */
;;;91     static void _Undraw(void) {
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;92       int x, y, xSize, ySize;
;;;93       LCD_PIXELINDEX* pData;
;;;94       /* Save bitmap data */
;;;95       GUI_LOCK();
;;;96       if (_hBuffer) {
000004  4c1a              LDR      r4,|L17.112|
000006  f9b40004          LDRSH    r0,[r4,#4]  ; _hBuffer
00000a  2800              CMP      r0,#0                 ;91
00000c  d02e              BEQ      |L17.108|
;;;97         pData = (LCD_PIXELINDEX*)GUI_ALLOC_h2p(_hBuffer);
00000e  f7fffffe          BL       GUI_ALLOC_h2p
000012  4606              MOV      r6,r0
;;;98         xSize = _Rect.x1 - _Rect.x0 + 1;
000014  f1040018          ADD      r0,r4,#0x18
;;;99         ySize = _Rect.y1 - _Rect.y0 + 1;
;;;100        for (y = 0; y < ySize; y++) {
000018  2500              MOVS     r5,#0
00001a  f9b01004          LDRSH    r1,[r0,#4]            ;98  ; _Rect
00001e  f9b02000          LDRSH    r2,[r0,#0]            ;98  ; _Rect
000022  4681              MOV      r9,r0                 ;98
000024  1a8f              SUBS     r7,r1,r2              ;98
000026  f9b01006          LDRSH    r1,[r0,#6]            ;99  ; _Rect
00002a  f9b02002          LDRSH    r2,[r0,#2]            ;99  ; _Rect
00002e  46a2              MOV      r10,r4                ;96
000030  1a89              SUBS     r1,r1,r2              ;99
000032  f1010801          ADD      r8,r1,#1              ;99
000036  1c7f              ADDS     r7,r7,#1              ;96
000038  e016              B        |L17.104|
                  |L17.58|
;;;101          for (x = 0; x < xSize; x++) {
00003a  2400              MOVS     r4,#0
00003c  e00b              B        |L17.86|
;;;102            _SetPixelIndex(x + _Rect.x0, y + _Rect.y0, *(pData + x));
00003e  bf00              NOP      
                  |L17.64|
000040  f9b91002          LDRSH    r1,[r9,#2]  ; _Rect
000044  f9b90000          LDRSH    r0,[r9,#0]  ; _Rect
000048  f8362014          LDRH     r2,[r6,r4,LSL #1]
00004c  4429              ADD      r1,r1,r5
00004e  4420              ADD      r0,r0,r4
000050  f7fffffe          BL       _SetPixelIndex
000054  1c64              ADDS     r4,r4,#1
                  |L17.86|
000056  42bc              CMP      r4,r7                 ;101
000058  dbf2              BLT      |L17.64|
;;;103          }
;;;104          pData += _pCursor->pBitmap->XSize;
00005a  f8da0008          LDR      r0,[r10,#8]  ; _pCursor
00005e  1c6d              ADDS     r5,r5,#1
000060  6800              LDR      r0,[r0,#0]
000062  8800              LDRH     r0,[r0,#0]
000064  eb060640          ADD      r6,r6,r0,LSL #1
                  |L17.104|
000068  4545              CMP      r5,r8                 ;100
00006a  dbe6              BLT      |L17.58|
                  |L17.108|
;;;105        }
;;;106      }
;;;107      GUI_UNLOCK();
;;;108    }
00006c  e8bd87f0          POP      {r4-r10,pc}
;;;109    
                          ENDP

                  |L17.112|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=2

                  _CursorIsVis
000000  00                DCB      0x00
                  _CursorOn
000001  00                DCB      0x00
                  _CursorDeActCnt
000002  0000              DCB      0x00,0x00
                  _hBuffer
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  _pCursor
                          DCD      0x00000000
                  _AllocSize
                          DCD      0x00000000
                  ||_x||
                          DCD      0x00000000
                  ||_y||
                          DCD      0x00000000
                  _Rect
                          %        8
                  _ClipRect
                          %        8
                  _ColorIndex
                          %        8
