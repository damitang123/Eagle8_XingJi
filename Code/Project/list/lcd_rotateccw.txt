; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\lcd_rotateccw.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\lcd_rotateccw.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\Core\LCD_RotateCCW.c]
                          THUMB

                          AREA ||i._DrawBitLine1BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine1BPP PROC
;;;37     */
;;;38     static void  _DrawBitLine1BPP(int x, int y, U8 const GUI_UNI_PTR *p, int Diff, int xsize, const LCD_PIXELINDEX*pTrans) {
000000  e92d5fff          PUSH     {r0-r12,lr}
000004  461c              MOV      r4,r3
000006  e9dd700e          LDRD     r7,r0,[sp,#0x38]
;;;39       LCD_PIXELINDEX Index0 = *(pTrans+0);
;;;40       LCD_PIXELINDEX Index1 = *(pTrans+1);
;;;41       y -= Diff;
00000a  1b0e              SUBS     r6,r1,r4
00000c  f8b09000          LDRH     r9,[r0,#0]            ;39
000010  f8b08002          LDRH     r8,[r0,#2]            ;40
;;;42       switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000014  482d              LDR      r0,|L1.204|
000016  4615              MOV      r5,r2                 ;38
000018  7c01              LDRB     r1,[r0,#0x10]  ; GUI_Context
00001a  f0110203          ANDS     r2,r1,#3
;;;43       case 0:
;;;44         do {
;;;45           LCDDEV_L0_SetPixelIndex(x, y, (*p & (0x80 >> Diff)) ? Index1 : Index0);
00001e  f04f0180          MOV      r1,#0x80
000022  d016              BEQ      |L1.82|
000024  2a01              CMP      r2,#1                 ;42
000026  d033              BEQ      |L1.144|
000028  2a02              CMP      r2,#2                 ;42
00002a  d12a              BNE      |L1.130|
00002c  4689              MOV      r9,r1
00002e  4682              MOV      r10,r0                ;42
                  |L1.48|
;;;46           y--;
;;;47     			if (++Diff == 8) {
;;;48             Diff = 0;
;;;49     				p++;
;;;50     			}
;;;51     		} while (--xsize);
;;;52         break;
;;;53       case LCD_DRAWMODE_TRANS:
;;;54         do {
;;;55       		if (*p & (0x80 >> Diff))
000030  7829              LDRB     r1,[r5,#0]
000032  fa29f004          LSR      r0,r9,r4
000036  4201              TST      r1,r0
000038  d006              BEQ      |L1.72|
;;;56             LCDDEV_L0_SetPixelIndex(x, y, Index1);
00003a  f8da004c          LDR      r0,[r10,#0x4c]  ; GUI_Context
00003e  4642              MOV      r2,r8
000040  4631              MOV      r1,r6
000042  6a43              LDR      r3,[r0,#0x24]
000044  9800              LDR      r0,[sp,#0]
000046  4798              BLX      r3
                  |L1.72|
000048  1c64              ADDS     r4,r4,#1
00004a  1e76              SUBS     r6,r6,#1
;;;57           y--;
;;;58     			if (++Diff == 8) {
00004c  2c08              CMP      r4,#8
00004e  d01a              BEQ      |L1.134|
000050  e01b              B        |L1.138|
                  |L1.82|
000052  468b              MOV      r11,r1                ;45
000054  4682              MOV      r10,r0                ;42
                  |L1.86|
000056  7829              LDRB     r1,[r5,#0]            ;45
000058  fa2bf004          LSR      r0,r11,r4             ;45
00005c  4201              TST      r1,r0                 ;45
00005e  d001              BEQ      |L1.100|
000060  4642              MOV      r2,r8                 ;45
000062  e000              B        |L1.102|
                  |L1.100|
000064  464a              MOV      r2,r9                 ;45
                  |L1.102|
000066  f8da004c          LDR      r0,[r10,#0x4c]        ;45  ; GUI_Context
00006a  4631              MOV      r1,r6                 ;45
00006c  6a43              LDR      r3,[r0,#0x24]         ;45
00006e  9800              LDR      r0,[sp,#0]            ;45
000070  4798              BLX      r3                    ;45
000072  1c64              ADDS     r4,r4,#1              ;45
000074  1e76              SUBS     r6,r6,#1              ;45
000076  2c08              CMP      r4,#8                 ;47
000078  d101              BNE      |L1.126|
00007a  2400              MOVS     r4,#0                 ;48
00007c  1c6d              ADDS     r5,r5,#1              ;48
                  |L1.126|
00007e  1e7f              SUBS     r7,r7,#1              ;48
000080  d1e9              BNE      |L1.86|
                  |L1.130|
;;;59             Diff = 0;
;;;60     				p++;
;;;61     			}
;;;62     		} while (--xsize);
;;;63         break;
;;;64       case LCD_DRAWMODE_XOR:;
;;;65         do {
;;;66       		if (*p & (0x80 >> Diff)) {
;;;67             int Pixel = LCD_L0_GetPixelIndex(x, y);
;;;68             LCDDEV_L0_SetPixelIndex(x, y, LCD_NUM_COLORS - 1 - Pixel);
;;;69           }
;;;70           y--;
;;;71     			if (++Diff == 8) {
;;;72             Diff = 0;
;;;73     				p++;
;;;74     			}
;;;75     		} while (--xsize);
;;;76         break;
;;;77     	}
;;;78     }
000082  e8bd9fff          POP      {r0-r12,pc}
                  |L1.134|
000086  2400              MOVS     r4,#0                 ;59
000088  1c6d              ADDS     r5,r5,#1              ;59
                  |L1.138|
00008a  1e7f              SUBS     r7,r7,#1              ;59
00008c  d1d0              BNE      |L1.48|
00008e  e7f8              B        |L1.130|
                  |L1.144|
000090  4688              MOV      r8,r1                 ;45
000092  4681              MOV      r9,r0                 ;42
000094  f64f7aff          MOV      r10,#0xffff           ;68
                  |L1.152|
000098  7829              LDRB     r1,[r5,#0]            ;66
00009a  fa28f004          LSR      r0,r8,r4              ;66
00009e  4201              TST      r1,r0                 ;66
0000a0  d00b              BEQ      |L1.186|
0000a2  4631              MOV      r1,r6                 ;67
0000a4  9800              LDR      r0,[sp,#0]            ;67
0000a6  f7fffffe          BL       LCD_L0_GetPixelIndex
0000aa  ebaa0200          SUB      r2,r10,r0             ;68
0000ae  f8d9004c          LDR      r0,[r9,#0x4c]         ;68  ; GUI_Context
0000b2  4631              MOV      r1,r6                 ;68
0000b4  6a43              LDR      r3,[r0,#0x24]         ;68
0000b6  9800              LDR      r0,[sp,#0]            ;68
0000b8  4798              BLX      r3                    ;68
                  |L1.186|
0000ba  1c64              ADDS     r4,r4,#1              ;68
0000bc  1e76              SUBS     r6,r6,#1              ;68
0000be  2c08              CMP      r4,#8                 ;71
0000c0  d101              BNE      |L1.198|
0000c2  2400              MOVS     r4,#0                 ;72
0000c4  1c6d              ADDS     r5,r5,#1              ;72
                  |L1.198|
0000c6  1e7f              SUBS     r7,r7,#1              ;72
0000c8  d1e6              BNE      |L1.152|
0000ca  e7da              B        |L1.130|
;;;79     
                          ENDP

                  |L1.204|
                          DCD      GUI_Context

                          AREA ||i._DrawBitmapCCW||, CODE, READONLY, ALIGN=2

                  _DrawBitmapCCW PROC
;;;162    */
;;;163    static void _DrawBitmapCCW(int x0, int y0, int xsize, int ysize, int xMul, int yMul,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;164                               int BitsPerPixel, int BytesPerLine,
;;;165                               const U8 GUI_UNI_PTR * pPixel, const LCD_PIXELINDEX* pTrans)
;;;166    {
000004  b08f              SUB      sp,sp,#0x3c
000006  461d              MOV      r5,r3
;;;167      U8  Data = 0;
;;;168      int x1, y1;
;;;169      /* Handle the optional Y-magnification */
;;;170      y1 = y0 + ysize - 1;
000008  9810              LDR      r0,[sp,#0x40]
00000a  4617              MOV      r7,r2                 ;166
00000c  4428              ADD      r0,r0,r5
00000e  1e40              SUBS     r0,r0,#1
;;;171      x1 = x0 + xsize - 1;
000010  900d              STR      r0,[sp,#0x34]
000012  980f              LDR      r0,[sp,#0x3c]
000014  9c20              LDR      r4,[sp,#0x80]         ;170
000016  4438              ADD      r0,r0,r7
000018  1e40              SUBS     r0,r0,#1
;;;172      /* Rotate positions */
;;;173      _TransformPointCCW(&x0, &y0);
00001a  900c              STR      r0,[sp,#0x30]
00001c  2600              MOVS     r6,#0                 ;167
00001e  f8dd9078          LDR      r9,[sp,#0x78]         ;170
000022  a910              ADD      r1,sp,#0x40
000024  a80f              ADD      r0,sp,#0x3c
000026  f7fffffe          BL       _TransformPointCCW
;;;174      _TransformPointCCW(&x1, &y1);
00002a  a90d              ADD      r1,sp,#0x34
00002c  a80c              ADD      r0,sp,#0x30
00002e  f7fffffe          BL       _TransformPointCCW
;;;175      /*  Handle BITMAP without magnification */
;;;176      if ((xMul == 1) && (yMul == 1)) {
000032  981c              LDR      r0,[sp,#0x70]
000034  2801              CMP      r0,#1
000036  d102              BNE      |L2.62|
000038  981d              LDR      r0,[sp,#0x74]
00003a  2801              CMP      r0,#1
00003c  d007              BEQ      |L2.78|
                  |L2.62|
;;;177        int Diff = 0;
;;;178        /* Clip top */
;;;179        if (y1 < GUI_Context.ClipRect.y0) {
;;;180          int Diff = GUI_Context.ClipRect.y0 - y1;
;;;181          xsize -= Diff;
;;;182        }
;;;183        /* Clip bottom */
;;;184        if (y0 > GUI_Context.ClipRect.y1) {
;;;185          Diff = y0 - GUI_Context.ClipRect.y1;
;;;186    			xsize -= Diff;
;;;187    			switch (BitsPerPixel) {
;;;188    			case 1:
;;;189      			pPixel += (Diff >> 3); y0 -= (Diff >> 3) << 3; Diff &= 7;
;;;190    				break;
;;;191    			}
;;;192        }
;;;193        if (ysize <= 0) {
;;;194    		  return;
;;;195        }
;;;196        /* Clip right side */
;;;197        if (x1 > GUI_Context.ClipRect.x1) {
;;;198          int Diff = x1 - GUI_Context.ClipRect.x1;
;;;199          ysize -= Diff;
;;;200        }
;;;201        /* Clip left side */
;;;202        if (x0 < GUI_Context.ClipRect.x0) {
;;;203          int Diff = GUI_Context.ClipRect.x0 - x0;
;;;204          pPixel += Diff * BytesPerLine;
;;;205          x0 += Diff;
;;;206          ysize -= Diff;
;;;207        }
;;;208        if (xsize <= 0) {
;;;209    		  return;
;;;210        }
;;;211        _DrawBitmap(x0, y0, xsize, ysize, BitsPerPixel, BytesPerLine, pPixel, Diff, pTrans);
;;;212      } else {
;;;213        /* Handle BITMAP with magnification */
;;;214        int x, y, xi, yi;
;;;215        int Shift = 8 - BitsPerPixel;
00003e  f1c90008          RSB      r0,r9,#8
;;;216        for (x = x0, xi = 0; xi < ysize; xi++, x += yMul, pPixel += BytesPerLine) {
000042  9005              STR      r0,[sp,#0x14]
000044  980f              LDR      r0,[sp,#0x3c]
000046  f04f0b00          MOV      r11,#0
00004a  9001              STR      r0,[sp,#4]
00004c  e0a4              B        |L2.408|
                  |L2.78|
00004e  4954              LDR      r1,|L2.416|
000050  9a0d              LDR      r2,[sp,#0x34]         ;179
000052  2000              MOVS     r0,#0                 ;177
000054  f9b1300a          LDRSH    r3,[r1,#0xa]          ;179  ; GUI_Context
000058  4293              CMP      r3,r2                 ;179
00005a  dd01              BLE      |L2.96|
00005c  1a9a              SUBS     r2,r3,r2              ;180
00005e  1abf              SUBS     r7,r7,r2              ;181
                  |L2.96|
000060  f9b1300e          LDRSH    r3,[r1,#0xe]          ;184  ; GUI_Context
000064  9a10              LDR      r2,[sp,#0x40]         ;184
000066  4293              CMP      r3,r2                 ;184
000068  da0c              BGE      |L2.132|
00006a  1ad0              SUBS     r0,r2,r3              ;185
00006c  1a3f              SUBS     r7,r7,r0              ;186
00006e  f1b90f01          CMP      r9,#1                 ;187
000072  d107              BNE      |L2.132|
000074  f0200307          BIC      r3,r0,#7              ;189
000078  eb0404e0          ADD      r4,r4,r0,ASR #3       ;189
00007c  1ad2              SUBS     r2,r2,r3              ;189
00007e  f0000007          AND      r0,r0,#7              ;189
000082  9210              STR      r2,[sp,#0x40]         ;189
                  |L2.132|
000084  2d00              CMP      r5,#0                 ;193
000086  dd2f              BLE      |L2.232|
000088  f9b1300c          LDRSH    r3,[r1,#0xc]          ;197  ; GUI_Context
00008c  9a0c              LDR      r2,[sp,#0x30]         ;197
00008e  4293              CMP      r3,r2                 ;197
000090  da01              BGE      |L2.150|
000092  1ad2              SUBS     r2,r2,r3              ;198
000094  1aad              SUBS     r5,r5,r2              ;199
                  |L2.150|
000096  f9b12008          LDRSH    r2,[r1,#8]            ;202  ; GUI_Context
00009a  990f              LDR      r1,[sp,#0x3c]         ;202
00009c  428a              CMP      r2,r1                 ;202
00009e  dd06              BLE      |L2.174|
0000a0  1a52              SUBS     r2,r2,r1              ;203
0000a2  9b1f              LDR      r3,[sp,#0x7c]         ;204
0000a4  4411              ADD      r1,r1,r2              ;205
0000a6  fb024403          MLA      r4,r2,r3,r4           ;204
0000aa  1aad              SUBS     r5,r5,r2              ;206
0000ac  910f              STR      r1,[sp,#0x3c]         ;206
                  |L2.174|
0000ae  2f00              CMP      r7,#0                 ;208
0000b0  dd1a              BLE      |L2.232|
0000b2  468b              MOV      r11,r1                ;211
0000b4  9910              LDR      r1,[sp,#0x40]         ;211
0000b6  46ba              MOV      r10,r7                ;211
0000b8  9e1f              LDR      r6,[sp,#0x7c]         ;211
0000ba  910a              STR      r1,[sp,#0x28]         ;211
0000bc  9006              STR      r0,[sp,#0x18]         ;211
0000be  2700              MOVS     r7,#0                 ;211
0000c0  f8dd8084          LDR      r8,[sp,#0x84]         ;211
0000c4  e00e              B        |L2.228|
0000c6  bf00              NOP                            ;211
                  |L2.200|
0000c8  f1b90f01          CMP      r9,#1                 ;211
0000cc  d108              BNE      |L2.224|
0000ce  e9cda800          STRD     r10,r8,[sp,#0]        ;211
0000d2  eb0b0007          ADD      r0,r11,r7             ;211
0000d6  4622              MOV      r2,r4                 ;211
0000d8  9b06              LDR      r3,[sp,#0x18]         ;211
0000da  990a              LDR      r1,[sp,#0x28]         ;211
0000dc  f7fffffe          BL       _DrawBitLine1BPP
                  |L2.224|
0000e0  4434              ADD      r4,r4,r6              ;211
0000e2  1c7f              ADDS     r7,r7,#1              ;211
                  |L2.228|
0000e4  42af              CMP      r7,r5                 ;211
0000e6  dbef              BLT      |L2.200|
                  |L2.232|
;;;217          int xMax = x + yMul - 1;
;;;218          if ((xMax >= GUI_Context.ClipRect.x0) && (x <= GUI_Context.ClipRect.x1)) {
;;;219            int BitsLeft = 0;
;;;220            const U8 GUI_UNI_PTR * pDataLine = pPixel;
;;;221            for (y = y0, yi = 0; yi < xsize; yi++, y -= xMul) {
;;;222              U8  Index;
;;;223              if (!BitsLeft) {
;;;224                Data = *pDataLine++;
;;;225                BitsLeft =8;
;;;226              }
;;;227              Index = Data >> Shift;
;;;228              Data    <<= BitsPerPixel;
;;;229              BitsLeft -= BitsPerPixel;
;;;230              if (Index || ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0)) {
;;;231                LCD_PIXELINDEX OldColor = LCD_COLORINDEX;
;;;232                if (pTrans) {
;;;233                  LCD_COLORINDEX = *(pTrans + Index);
;;;234                } else {
;;;235                  LCD_COLORINDEX = Index;
;;;236                }
;;;237                LCD_FillRect(x, y - xMul + 1, xMax, y);
;;;238                LCD_COLORINDEX = OldColor;
;;;239              }
;;;240            }
;;;241          }
;;;242        }
;;;243      }
;;;244    }
0000e8  b013              ADD      sp,sp,#0x4c
0000ea  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.238|
0000ee  991d              LDR      r1,[sp,#0x74]         ;217
0000f0  9801              LDR      r0,[sp,#4]            ;217
0000f2  4408              ADD      r0,r0,r1              ;217
0000f4  900b              STR      r0,[sp,#0x2c]         ;217
0000f6  492a              LDR      r1,|L2.416|
0000f8  1e40              SUBS     r0,r0,#1              ;217
0000fa  9003              STR      r0,[sp,#0xc]          ;218
0000fc  f9b12008          LDRSH    r2,[r1,#8]            ;218  ; GUI_Context
000100  4282              CMP      r2,r0                 ;218
000102  dc43              BGT      |L2.396|
000104  4608              MOV      r0,r1                 ;218
000106  f9b0100c          LDRSH    r1,[r0,#0xc]          ;218  ; GUI_Context
00010a  9801              LDR      r0,[sp,#4]            ;218
00010c  4281              CMP      r1,r0                 ;218
00010e  db3d              BLT      |L2.396|
000110  f04f0a00          MOV      r10,#0                ;219
000114  9810              LDR      r0,[sp,#0x40]         ;221
000116  9408              STR      r4,[sp,#0x20]         ;221
000118  46d0              MOV      r8,r10                ;221
00011a  9000              STR      r0,[sp,#0]            ;221
00011c  e034              B        |L2.392|
00011e  bf00              NOP                            ;223
                  |L2.288|
000120  f1ba0f00          CMP      r10,#0                ;223
000124  d105              BNE      |L2.306|
000126  9808              LDR      r0,[sp,#0x20]         ;224
000128  f04f0a08          MOV      r10,#8                ;225
00012c  f8106b01          LDRB     r6,[r0],#1            ;224
000130  9008              STR      r0,[sp,#0x20]         ;225
                  |L2.306|
000132  9905              LDR      r1,[sp,#0x14]         ;227
000134  ebaa0a09          SUB      r10,r10,r9            ;229
000138  fa36f001          LSRS     r0,r6,r1              ;227
00013c  fa06f609          LSL      r6,r6,r9              ;228
000140  b2f6              UXTB     r6,r6                 ;228
000142  d103              BNE      |L2.332|
000144  4916              LDR      r1,|L2.416|
000146  7c09              LDRB     r1,[r1,#0x10]         ;230  ; GUI_Context
000148  0789              LSLS     r1,r1,#30             ;230
00014a  d417              BMI      |L2.380|
                  |L2.332|
00014c  4914              LDR      r1,|L2.416|
00014e  8849              LDRH     r1,[r1,#2]            ;231  ; GUI_Context
000150  910a              STR      r1,[sp,#0x28]         ;232
000152  9921              LDR      r1,[sp,#0x84]         ;232
000154  b121              CBZ      r1,|L2.352|
000156  f8311010          LDRH     r1,[r1,r0,LSL #1]     ;233
00015a  4811              LDR      r0,|L2.416|
00015c  8041              STRH     r1,[r0,#2]            ;233
00015e  e001              B        |L2.356|
                  |L2.352|
000160  490f              LDR      r1,|L2.416|
000162  8048              STRH     r0,[r1,#2]            ;235
                  |L2.356|
000164  9800              LDR      r0,[sp,#0]            ;237
000166  991c              LDR      r1,[sp,#0x70]         ;237
000168  4603              MOV      r3,r0                 ;237
00016a  1a41              SUBS     r1,r0,r1              ;237
00016c  1c49              ADDS     r1,r1,#1              ;237
00016e  9a03              LDR      r2,[sp,#0xc]          ;237
000170  9801              LDR      r0,[sp,#4]            ;237
000172  f7fffffe          BL       LCD_FillRect
000176  490a              LDR      r1,|L2.416|
000178  980a              LDR      r0,[sp,#0x28]         ;238
00017a  8048              STRH     r0,[r1,#2]            ;238
                  |L2.380|
00017c  991c              LDR      r1,[sp,#0x70]         ;221
00017e  9800              LDR      r0,[sp,#0]            ;221
000180  f1080801          ADD      r8,r8,#1              ;221
000184  1a40              SUBS     r0,r0,r1              ;221
000186  9000              STR      r0,[sp,#0]            ;221
                  |L2.392|
000188  45b8              CMP      r8,r7                 ;221
00018a  dbc9              BLT      |L2.288|
                  |L2.396|
00018c  980b              LDR      r0,[sp,#0x2c]         ;216
00018e  9001              STR      r0,[sp,#4]            ;216
000190  981f              LDR      r0,[sp,#0x7c]         ;216
000192  f10b0b01          ADD      r11,r11,#1            ;216
000196  4404              ADD      r4,r4,r0              ;216
                  |L2.408|
000198  45ab              CMP      r11,r5                ;216
00019a  dba8              BLT      |L2.238|
00019c  e7a4              B        |L2.232|
;;;245    
                          ENDP

00019e  0000              DCW      0x0000
                  |L2.416|
                          DCD      GUI_Context

                          AREA ||i._Rect2TextRect||, CODE, READONLY, ALIGN=1

                  _Rect2TextRect PROC
;;;113    */
;;;114    static void _Rect2TextRect(GUI_RECT * pRect) {
000000  b510              PUSH     {r4,lr}
;;;115      int x1, y1;
;;;116      x1 = pRect->x1;
;;;117      y1 = pRect->y1;
000002  88c4              LDRH     r4,[r0,#6]
;;;118      pRect->x1 = pRect->x0 + (y1 - pRect->y0);
000004  8843              LDRH     r3,[r0,#2]
000006  8801              LDRH     r1,[r0,#0]
000008  1ae4              SUBS     r4,r4,r3
00000a  8882              LDRH     r2,[r0,#4]            ;116
00000c  440c              ADD      r4,r4,r1
;;;119      pRect->y1 = pRect->y0 + (x1 - pRect->x0);
00000e  1a51              SUBS     r1,r2,r1
000010  8084              STRH     r4,[r0,#4]            ;118
000012  4419              ADD      r1,r1,r3
000014  80c1              STRH     r1,[r0,#6]
;;;120    }
000016  bd10              POP      {r4,pc}
;;;121    
                          ENDP


                          AREA ||i._TransformPointCCW||, CODE, READONLY, ALIGN=2

                  _TransformPointCCW PROC
;;;130    */
;;;131    static void _TransformPointCCW(int * pXPos, int * pYPos) {
000000  b57c              PUSH     {r2-r6,lr}
000002  4606              MOV      r6,r0
;;;132      GUI_RECT ClientRect = {0};
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;133      int xPos, yPos, xNumPixel, yNumPixel;
;;;134      /* Get the client rectangle */
;;;135      #if GUI_WINSUPPORT
;;;136        WM_GetWindowRect(&ClientRect);
000008  9001              STR      r0,[sp,#4]
00000a  460d              MOV      r5,r1                 ;131
00000c  4668              MOV      r0,sp
00000e  f7fffffe          BL       WM_GetWindowRect
;;;137      #else
;;;138        GUI_GetClientRect(&ClientRect);
;;;139      #endif
;;;140      xNumPixel = LCD_GetXSize() - 1;
000012  f7fffffe          BL       LCD_GetXSize
000016  1e44              SUBS     r4,r0,#1
;;;141      yNumPixel = LCD_GetYSize() - 1;
000018  f7fffffe          BL       LCD_GetYSize
;;;142      if (ClientRect.x1 > xNumPixel) {
00001c  f9bd1004          LDRSH    r1,[sp,#4]
000020  1e40              SUBS     r0,r0,#1
000022  42a1              CMP      r1,r4
000024  dd01              BLE      |L4.42|
;;;143        ClientRect.x1 = xNumPixel;
000026  f8ad4004          STRH     r4,[sp,#4]
                  |L4.42|
;;;144      }
;;;145      if (ClientRect.y1 > yNumPixel) {
00002a  f9bd1006          LDRSH    r1,[sp,#6]
00002e  4281              CMP      r1,r0
000030  dd01              BLE      |L4.54|
;;;146        ClientRect.y1 = yNumPixel;
000032  f8ad0006          STRH     r0,[sp,#6]
                  |L4.54|
;;;147      }
;;;148      /* Save old positions */
;;;149      xPos = *pXPos;
;;;150      yPos = *pYPos;
;;;151      /* Rotate and add window origin */
;;;152      *pXPos = ClientRect.x0 + yPos;
000036  f9bd2000          LDRSH    r2,[sp,#0]
00003a  6828              LDR      r0,[r5,#0]
00003c  6831              LDR      r1,[r6,#0]            ;150
00003e  4410              ADD      r0,r0,r2
;;;153      *pYPos = ClientRect.y1 - xPos;
000040  6030              STR      r0,[r6,#0]
000042  f9bd0006          LDRSH    r0,[sp,#6]
000046  1a40              SUBS     r0,r0,r1
;;;154      /* Handle rotation of text rectangle */
;;;155      *pXPos = *pXPos + GUI_RectDispString.x0 - GUI_RectDispString.y0;
000048  6028              STR      r0,[r5,#0]
00004a  480c              LDR      r0,|L4.124|
00004c  6831              LDR      r1,[r6,#0]
00004e  f9b02000          LDRSH    r2,[r0,#0]  ; GUI_RectDispString
000052  4411              ADD      r1,r1,r2
000054  f9b02002          LDRSH    r2,[r0,#2]  ; GUI_RectDispString
000058  1a89              SUBS     r1,r1,r2
;;;156      *pYPos = *pYPos + GUI_RectDispString.y1 - (ClientRect.y1 - ClientRect.y0) + GUI_RectDispString.x0;
00005a  6031              STR      r1,[r6,#0]
00005c  f9b02006          LDRSH    r2,[r0,#6]  ; GUI_RectDispString
000060  6829              LDR      r1,[r5,#0]
000062  f9bd3002          LDRSH    r3,[sp,#2]
000066  4411              ADD      r1,r1,r2
000068  f9bd2006          LDRSH    r2,[sp,#6]
00006c  f9b00000          LDRSH    r0,[r0,#0]  ; GUI_RectDispString
000070  1ad2              SUBS     r2,r2,r3
000072  1a89              SUBS     r1,r1,r2
000074  4408              ADD      r0,r0,r1
000076  6028              STR      r0,[r5,#0]
;;;157    }
000078  bd7c              POP      {r2-r6,pc}
;;;158    
                          ENDP

00007a  0000              DCW      0x0000
                  |L4.124|
                          DCD      GUI_RectDispString

                          AREA ||.data||, DATA, ALIGN=2

                  LCD_APIListCCW
                          DCD      _DrawBitmapCCW
                          DCD      _Rect2TextRect
