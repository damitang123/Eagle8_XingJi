; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\guidev_measure.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guidev_measure.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\MemDev\GUIDEV_Measure.c]
                          THUMB

                          AREA ||i.GUI_MEASDEV_ClearRect||, CODE, READONLY, ALIGN=1

                  GUI_MEASDEV_ClearRect PROC
;;;312    */
;;;313    void GUI_MEASDEV_ClearRect(GUI_MEASDEV_Handle hMemDev) {
000000  b510              PUSH     {r4,lr}
000002  2800              CMP      r0,#0
000004  d008              BEQ      |L1.24|
;;;314      if (hMemDev) {
;;;315        GUI_MEASDEV* pDevData;
;;;316        GUI_LOCK();
;;;317        pDevData = (GUI_MEASDEV*)GUI_ALLOC_h2p(hMemDev);
000006  f7fffffe          BL       GUI_ALLOC_h2p
;;;318        pDevData->rUsed.x0 = GUI_XMAX;
00000a  f64071ff          MOV      r1,#0xfff
00000e  8001              STRH     r1,[r0,#0]
;;;319        pDevData->rUsed.y0 = GUI_YMAX;
000010  8041              STRH     r1,[r0,#2]
;;;320        pDevData->rUsed.x1 = GUI_XMIN;
000012  4249              RSBS     r1,r1,#0
000014  8081              STRH     r1,[r0,#4]
;;;321        pDevData->rUsed.y1 = GUI_YMIN;
000016  80c1              STRH     r1,[r0,#6]
                  |L1.24|
;;;322        GUI_UNLOCK();
;;;323      } 
;;;324    }
000018  bd10              POP      {r4,pc}
;;;325    
                          ENDP


                          AREA ||i.GUI_MEASDEV_Create||, CODE, READONLY, ALIGN=2

                  GUI_MEASDEV_Create PROC
;;;329    */
;;;330    GUI_MEASDEV_Handle GUI_MEASDEV_Create(void) {
000000  b510              PUSH     {r4,lr}
;;;331      int MemSize;
;;;332      GUI_MEASDEV_Handle hMemDev;
;;;333      MemSize = sizeof(GUI_MEASDEV);
;;;334      hMemDev = GUI_ALLOC_AllocZero(MemSize);
000002  2014              MOVS     r0,#0x14
000004  f7fffffe          BL       GUI_ALLOC_AllocZero
000008  0004              MOVS     r4,r0
;;;335      if (hMemDev) {
00000a  d00b              BEQ      |L2.36|
;;;336        GUI_MEASDEV* pDevData;
;;;337        GUI_LOCK();
;;;338        pDevData = (GUI_MEASDEV*)GUI_ALLOC_h2p(hMemDev);
00000c  f7fffffe          BL       GUI_ALLOC_h2p
;;;339        pDevData->pfColor2Index = GUI_Context.pDeviceAPI->pfColor2Index;    
000010  4905              LDR      r1,|L2.40|
000012  6cca              LDR      r2,[r1,#0x4c]  ; GUI_Context
000014  6812              LDR      r2,[r2,#0]
;;;340        pDevData->pfIndex2Color = GUI_Context.pDeviceAPI->pfIndex2Color;
000016  6082              STR      r2,[r0,#8]
000018  6cc9              LDR      r1,[r1,#0x4c]  ; GUI_Context
00001a  6849              LDR      r1,[r1,#4]
;;;341        GUI_MEASDEV_ClearRect(hMemDev);
00001c  60c1              STR      r1,[r0,#0xc]
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       GUI_MEASDEV_ClearRect
                  |L2.36|
;;;342        GUI_UNLOCK();
;;;343      } else {
;;;344        GUI_DEBUG_WARN("GUI_MEASDEV_Create: Alloc failed");
;;;345      }
;;;346      return hMemDev;
000024  4620              MOV      r0,r4
;;;347    }
000026  bd10              POP      {r4,pc}
;;;348    
                          ENDP

                  |L2.40|
                          DCD      GUI_Context

                          AREA ||i.GUI_MEASDEV_Delete||, CODE, READONLY, ALIGN=2

                  GUI_MEASDEV_Delete PROC
;;;300    */
;;;301    void GUI_MEASDEV_Delete(GUI_MEASDEV_Handle hMemDev) {
000000  b510              PUSH     {r4,lr}
000002  0004              MOVS     r4,r0
;;;302      /* Make sure memory device is not used */
;;;303      if ((GUI_Context.hDevData = hMemDev) != 0) {
000004  4805              LDR      r0,|L3.28|
000006  f8a04050          STRH     r4,[r0,#0x50]
00000a  d001              BEQ      |L3.16|
;;;304    	  GUI_SelectLCD();
00000c  f7fffffe          BL       GUI_SelectLCD
                  |L3.16|
;;;305      }
;;;306      GUI_ALLOC_Free(hMemDev);
000010  4620              MOV      r0,r4
000012  e8bd4010          POP      {r4,lr}
000016  f7ffbffe          B.W      GUI_ALLOC_Free
;;;307    }
;;;308    
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      GUI_Context

                          AREA ||i.GUI_MEASDEV_GetRect||, CODE, READONLY, ALIGN=1

                  GUI_MEASDEV_GetRect PROC
;;;370    */
;;;371    void GUI_MEASDEV_GetRect(GUI_MEASDEV_Handle hMem, GUI_RECT* pRect) {
000000  b510              PUSH     {r4,lr}
000002  460c              MOV      r4,r1
000004  2800              CMP      r0,#0
000006  d00b              BEQ      |L4.32|
;;;372      if (hMem) {
;;;373        GUI_MEASDEV* pDev;
;;;374        GUI_LOCK();
;;;375        pDev = (GUI_MEASDEV*)GUI_ALLOC_h2p(hMem);
000008  f7fffffe          BL       GUI_ALLOC_h2p
;;;376        if (pRect) {
00000c  2c00              CMP      r4,#0
00000e  d007              BEQ      |L4.32|
;;;377          pRect->x0 = pDev->rUsed.x0;
000010  8801              LDRH     r1,[r0,#0]
000012  8021              STRH     r1,[r4,#0]
;;;378          pRect->y0 = pDev->rUsed.y0;
000014  8841              LDRH     r1,[r0,#2]
000016  8061              STRH     r1,[r4,#2]
;;;379          pRect->x1 = pDev->rUsed.x1;
000018  8881              LDRH     r1,[r0,#4]
00001a  80a1              STRH     r1,[r4,#4]
;;;380          pRect->y1 = pDev->rUsed.y1;
00001c  88c0              LDRH     r0,[r0,#6]
00001e  80e0              STRH     r0,[r4,#6]
                  |L4.32|
;;;381        }
;;;382        GUI_UNLOCK();
;;;383      }
;;;384    }
000020  bd10              POP      {r4,pc}
;;;385    
                          ENDP


                          AREA ||i.GUI_MEASDEV_Select||, CODE, READONLY, ALIGN=2

                  GUI_MEASDEV_Select PROC
;;;352    */
;;;353    void GUI_MEASDEV_Select(GUI_MEASDEV_Handle hMem) {
000000  b510              PUSH     {r4,lr}
000002  0004              MOVS     r4,r0
000004  d00c              BEQ      |L5.32|
;;;354      if (hMem == 0) {
;;;355        GUI_SelectLCD();
;;;356      } else {
;;;357        #if GUI_WINSUPPORT
;;;358          WM_Deactivate();
000006  f7fffffe          BL       WM_Deactivate
;;;359        #endif
;;;360        GUI_Context.hDevData     = hMem;
00000a  4807              LDR      r0,|L5.40|
;;;361        GUI_Context.pDeviceAPI   = &_APIList;
00000c  4907              LDR      r1,|L5.44|
00000e  f8a04050          STRH     r4,[r0,#0x50]         ;360
;;;362        GUI_Context.pClipRect_HL = NULL;
000012  64c1              STR      r1,[r0,#0x4c]  ; GUI_Context
000014  2100              MOVS     r1,#0
;;;363        LCD_SetClipRectMax();
000016  6141              STR      r1,[r0,#0x14]  ; GUI_Context
000018  e8bd4010          POP      {r4,lr}
00001c  f7ffbffe          B.W      LCD_SetClipRectMax
                  |L5.32|
000020  e8bd4010          POP      {r4,lr}               ;355
000024  f7ffbffe          B.W      GUI_SelectLCD
;;;364      }
;;;365    }
;;;366    
                          ENDP

                  |L5.40|
                          DCD      GUI_Context
                  |L5.44|
                          DCD      ||.constdata||

                          AREA ||i._CalcPolyRect||, CODE, READONLY, ALIGN=2

                  _CalcPolyRect PROC
;;;205    */
;;;206    static void _CalcPolyRect(GUI_RECT *pr, const GUI_POINT* paPoint, int NumPoints) {
000000  b5f0              PUSH     {r4-r7,lr}
;;;207      int i;
;;;208      int xMin, xMax, yMin, yMax;
;;;209      xMin = GUI_XMAX;
000002  f64075ff          MOV      r5,#0xfff
;;;210      yMin = GUI_YMAX;
;;;211      xMax = GUI_XMIN;
000006  426c              RSBS     r4,r5,#0
000008  462e              MOV      r6,r5                 ;210
;;;212      yMax = GUI_YMIN;
00000a  4623              MOV      r3,r4
;;;213      for (i = 0; i  <NumPoints; i++) {
00000c  f04f0e00          MOV      lr,#0
000010  e013              B        |L6.58|
;;;214        int x = paPoint->x;
000012  bf00              NOP      
                  |L6.20|
000014  f9b1c000          LDRSH    r12,[r1,#0]
;;;215        int y = paPoint->y;
000018  f9b17002          LDRSH    r7,[r1,#2]
;;;216        if (xMin > x)
00001c  4565              CMP      r5,r12
00001e  dd00              BLE      |L6.34|
;;;217          xMin = x;
000020  4665              MOV      r5,r12
                  |L6.34|
;;;218        if (xMax < x)
000022  4564              CMP      r4,r12
000024  da00              BGE      |L6.40|
;;;219          xMax = x;
000026  4664              MOV      r4,r12
                  |L6.40|
;;;220        if (yMin > y)
000028  42be              CMP      r6,r7
00002a  dd00              BLE      |L6.46|
;;;221          yMin = y;
00002c  463e              MOV      r6,r7
                  |L6.46|
;;;222        if (yMax < y)
00002e  42bb              CMP      r3,r7
000030  da00              BGE      |L6.52|
;;;223          yMax = y;
000032  463b              MOV      r3,r7
                  |L6.52|
000034  1d09              ADDS     r1,r1,#4
000036  f10e0e01          ADD      lr,lr,#1
                  |L6.58|
00003a  4596              CMP      lr,r2                 ;213
00003c  dbea              BLT      |L6.20|
;;;224        paPoint++;
;;;225      }
;;;226      pr->x0 = xMin;
00003e  8005              STRH     r5,[r0,#0]
;;;227      pr->x1 = xMax;
000040  8084              STRH     r4,[r0,#4]
;;;228      pr->y0 = yMin;
000042  8046              STRH     r6,[r0,#2]
;;;229      pr->y1 = yMax;
000044  80c3              STRH     r3,[r0,#6]
;;;230    }
000046  bdf0              POP      {r4-r7,pc}
;;;231    
                          ENDP


                          AREA ||i._Color2Index||, CODE, READONLY, ALIGN=2

                  _Color2Index PROC
;;;178    */
;;;179    static unsigned int _Color2Index(LCD_COLOR Color) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;180      GUI_MEASDEV* pDev = GUI_MEASDEV_H2P(GUI_Context.hDevData);
000004  4804              LDR      r0,|L7.24|
000006  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
00000a  f7fffffe          BL       GUI_ALLOC_h2p
;;;181      return pDev->pfColor2Index(Color);
00000e  6881              LDR      r1,[r0,#8]
000010  4620              MOV      r0,r4
000012  e8bd4010          POP      {r4,lr}
000016  4708              BX       r1
;;;182    }
;;;183    
                          ENDP

                  |L7.24|
                          DCD      GUI_Context

                          AREA ||i._DrawBitmap||, CODE, READONLY, ALIGN=1

                  _DrawBitmap PROC
;;;101    */
;;;102    static void _DrawBitmap(int x0, int y0, int xsize, int ysize,
000000  4402              ADD      r2,r2,r0
;;;103                           int BitsPerPixel, int BytesPerLine,
;;;104                           const U8 GUI_UNI_PTR * pData, int Diff,
;;;105                           const LCD_PIXELINDEX* pTrans)
;;;106    {
;;;107      GUI_USE_PARA(BitsPerPixel);
;;;108      GUI_USE_PARA(BytesPerLine);
;;;109      GUI_USE_PARA(pData);
;;;110      GUI_USE_PARA(Diff);
;;;111      GUI_USE_PARA(pTrans);
;;;112      _MarkRect(x0, y0, x0 + xsize - 1, y0 + ysize - 1);
000002  440b              ADD      r3,r3,r1
000004  1e52              SUBS     r2,r2,#1
000006  1e5b              SUBS     r3,r3,#1
000008  f7ffbffe          B.W      _MarkRect
;;;113    }
;;;114    
                          ENDP


                          AREA ||i._DrawHLine||, CODE, READONLY, ALIGN=1

                  _DrawHLine PROC
;;;118    */
;;;119    static void _DrawHLine(int x0, int y,  int x1) {
000000  460b              MOV      r3,r1
;;;120      _MarkRect(x0, y, x1, y);
000002  f7ffbffe          B.W      _MarkRect
;;;121    }
;;;122    
                          ENDP


                          AREA ||i._DrawVLine||, CODE, READONLY, ALIGN=1

                  _DrawVLine PROC
;;;126    */
;;;127    static void _DrawVLine(int x , int y0,  int y1) {
000000  4613              MOV      r3,r2
;;;128      _MarkRect(x, y0, x, y1);
000002  4602              MOV      r2,r0
000004  f7ffbffe          B.W      _MarkRect
;;;129    }
;;;130    
                          ENDP


                          AREA ||i._FillPolygon||, CODE, READONLY, ALIGN=1

                  _FillPolygon PROC
;;;235    */
;;;236    static void _FillPolygon(const GUI_POINT* paPoint, int NumPoints, int x0, int y0) {
000000  b57c              PUSH     {r2-r6,lr}
000002  4615              MOV      r5,r2
;;;237      GUI_RECT r;
;;;238      _CalcPolyRect(&r, paPoint, NumPoints);
000004  460a              MOV      r2,r1
000006  4601              MOV      r1,r0
000008  461c              MOV      r4,r3                 ;236
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       _CalcPolyRect
;;;239      GUI_MoveRect(&r, x0, y0);
000010  4622              MOV      r2,r4
000012  4629              MOV      r1,r5
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       GUI_MoveRect
;;;240      _MarkRect(r.x0, r.y0, r.x1, r.y1);
00001a  f9bd3006          LDRSH    r3,[sp,#6]
00001e  f9bd2004          LDRSH    r2,[sp,#4]
000022  f9bd1002          LDRSH    r1,[sp,#2]
000026  f9bd0000          LDRSH    r0,[sp,#0]
00002a  f7fffffe          BL       _MarkRect
;;;241    }
00002e  bd7c              POP      {r2-r6,pc}
;;;242    
                          ENDP


                          AREA ||i._FillPolygonAA||, CODE, READONLY, ALIGN=2

                  _FillPolygonAA PROC
;;;246    */
;;;247    static void _FillPolygonAA(const GUI_POINT* paPoint, int NumPoints, int x0, int y0) {
000000  b57c              PUSH     {r2-r6,lr}
000002  4615              MOV      r5,r2
;;;248      #if GUI_SUPPORT_AA
;;;249        GUI_RECT r;
;;;250        _CalcPolyRect(&r, paPoint, NumPoints);
000004  460a              MOV      r2,r1
000006  4601              MOV      r1,r0
000008  461c              MOV      r4,r3                 ;247
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       _CalcPolyRect
;;;251        GUI_MoveRect(&r, x0, y0);
000010  4622              MOV      r2,r4
000012  4629              MOV      r1,r5
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       GUI_MoveRect
;;;252        if (GUI_Context.AA_HiResEnable) {
00001a  4816              LDR      r0,|L12.116|
00001c  f8901061          LDRB     r1,[r0,#0x61]  ; GUI_Context
000020  b1e9              CBZ      r1,|L12.94|
;;;253          r.x0 /= GUI_Context.AA_Factor;
000022  f9bd1000          LDRSH    r1,[sp,#0]
000026  f8900060          LDRB     r0,[r0,#0x60]  ; GUI_Context
00002a  fb91f1f0          SDIV     r1,r1,r0
00002e  f8ad1000          STRH     r1,[sp,#0]
;;;254          r.y0 /= GUI_Context.AA_Factor;
000032  f9bd1002          LDRSH    r1,[sp,#2]
000036  fb91f1f0          SDIV     r1,r1,r0
00003a  f8ad1002          STRH     r1,[sp,#2]
;;;255          r.x1 = (r.x1 + GUI_Context.AA_Factor - 1) / GUI_Context.AA_Factor;
00003e  f9bd1004          LDRSH    r1,[sp,#4]
000042  4401              ADD      r1,r1,r0
000044  1e49              SUBS     r1,r1,#1
000046  fb91f1f0          SDIV     r1,r1,r0
00004a  f8ad1004          STRH     r1,[sp,#4]
;;;256          r.y1 = (r.y1 + GUI_Context.AA_Factor - 1) / GUI_Context.AA_Factor;
00004e  f9bd1006          LDRSH    r1,[sp,#6]
000052  4401              ADD      r1,r1,r0
000054  1e49              SUBS     r1,r1,#1
000056  fb91f0f0          SDIV     r0,r1,r0
00005a  f8ad0006          STRH     r0,[sp,#6]
                  |L12.94|
;;;257        }
;;;258        _MarkRect(r.x0, r.y0, r.x1, r.y1);
00005e  f9bd3006          LDRSH    r3,[sp,#6]
000062  f9bd2004          LDRSH    r2,[sp,#4]
000066  f9bd1002          LDRSH    r1,[sp,#2]
00006a  f9bd0000          LDRSH    r0,[sp,#0]
00006e  f7fffffe          BL       _MarkRect
;;;259      #else
;;;260        GUI_USE_PARA(paPoint);
;;;261        GUI_USE_PARA(NumPoints);
;;;262        GUI_USE_PARA(x0);
;;;263        GUI_USE_PARA(y0);
;;;264      #endif
;;;265    }
000072  bd7c              POP      {r2-r6,pc}
;;;266    
                          ENDP

                  |L12.116|
                          DCD      GUI_Context

                          AREA ||i._FillRect||, CODE, READONLY, ALIGN=1

                  _FillRect PROC
;;;161    */
;;;162    static void _FillRect(int x0, int y0, int x1, int y1) {
000000  f7ffbffe          B.W      _MarkRect
;;;163      _MarkRect(x0, y0, x1, y1);
;;;164    }
;;;165    
                          ENDP


                          AREA ||i._GetIndexMask||, CODE, READONLY, ALIGN=2

                  _GetIndexMask PROC
;;;196    */
;;;197    static unsigned int _GetIndexMask(void) {
000000  4804              LDR      r0,|L14.20|
000002  b510              PUSH     {r4,lr}
;;;198      GUI_MEASDEV* pDev = GUI_MEASDEV_H2P(GUI_Context.hDevData);
000004  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
000008  f7fffffe          BL       GUI_ALLOC_h2p
;;;199      return pDev->pfGetIndexMask();
00000c  6900              LDR      r0,[r0,#0x10]
00000e  e8bd4010          POP      {r4,lr}
000012  4700              BX       r0
;;;200    }
;;;201    
                          ENDP

                  |L14.20|
                          DCD      GUI_Context

                          AREA ||i._GetPixelIndex||, CODE, READONLY, ALIGN=1

                  _GetPixelIndex PROC
;;;151    */
;;;152    static unsigned int _GetPixelIndex(int x, int y) { 
000000  2000              MOVS     r0,#0
;;;153      GUI_USE_PARA(x);
;;;154      GUI_USE_PARA(y);
;;;155      return 0;
;;;156    }
000002  4770              BX       lr
;;;157    
                          ENDP


                          AREA ||i._GetRect||, CODE, READONLY, ALIGN=1

                  _GetRect PROC
;;;169    */
;;;170    static void _GetRect(LCD_RECT* pRect) {
000000  f24f0101          MOV      r1,#0xf001
;;;171      pRect->x0 = pRect->y0 = -4095;
000004  8041              STRH     r1,[r0,#2]
000006  8001              STRH     r1,[r0,#0]
;;;172      pRect->x1 = pRect->y1 =  4095;
000008  f64071ff          MOV      r1,#0xfff
00000c  80c1              STRH     r1,[r0,#6]
00000e  8081              STRH     r1,[r0,#4]
;;;173    }
000010  4770              BX       lr
;;;174    
                          ENDP


                          AREA ||i._Index2Color||, CODE, READONLY, ALIGN=2

                  _Index2Color PROC
;;;187    */
;;;188    static LCD_COLOR _Index2Color(int Index) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;189      GUI_MEASDEV* pDev = GUI_MEASDEV_H2P(GUI_Context.hDevData);
000004  4804              LDR      r0,|L17.24|
000006  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
00000a  f7fffffe          BL       GUI_ALLOC_h2p
;;;190      return pDev->pfIndex2Color(Index);
00000e  68c1              LDR      r1,[r0,#0xc]
000010  4620              MOV      r0,r4
000012  e8bd4010          POP      {r4,lr}
000016  4708              BX       r1
;;;191    }
;;;192    
                          ENDP

                  |L17.24|
                          DCD      GUI_Context

                          AREA ||i._MarkPixel||, CODE, READONLY, ALIGN=2

                  _MarkPixel PROC
;;;69     */
;;;70     static void _MarkPixel(int x, int y) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;71       GUI_MEASDEV* pDev = (GUI_MEASDEV*)(GUI_MEMDEV_H2P(GUI_Context.hDevData));
000004  480e              LDR      r0,|L18.64|
000006  460c              MOV      r4,r1                 ;70
000008  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
00000c  f7fffffe          BL       GUI_ALLOC_h2p
;;;72       if (x < pDev->rUsed.x0)
000010  f9b02000          LDRSH    r2,[r0,#0]
;;;73         pDev->rUsed.x0 = x;
000014  b229              SXTH     r1,r5
000016  42aa              CMP      r2,r5                 ;72
000018  dd00              BLE      |L18.28|
00001a  8001              STRH     r1,[r0,#0]
                  |L18.28|
;;;74       if (x > pDev->rUsed.x1)
00001c  f9b02004          LDRSH    r2,[r0,#4]
000020  42aa              CMP      r2,r5
000022  da00              BGE      |L18.38|
;;;75         pDev->rUsed.x1 = x;
000024  8081              STRH     r1,[r0,#4]
                  |L18.38|
;;;76       if (y < pDev->rUsed.y0)
000026  f9b02002          LDRSH    r2,[r0,#2]
;;;77         pDev->rUsed.y0 = y;
00002a  b221              SXTH     r1,r4
00002c  42a2              CMP      r2,r4                 ;76
00002e  dd00              BLE      |L18.50|
000030  8041              STRH     r1,[r0,#2]
                  |L18.50|
;;;78       if (y > pDev->rUsed.y1)
000032  f9b02006          LDRSH    r2,[r0,#6]
000036  42a2              CMP      r2,r4
000038  da00              BGE      |L18.60|
;;;79         pDev->rUsed.y1 = y;
00003a  80c1              STRH     r1,[r0,#6]
                  |L18.60|
;;;80     }
00003c  bd70              POP      {r4-r6,pc}
;;;81     
                          ENDP

00003e  0000              DCW      0x0000
                  |L18.64|
                          DCD      GUI_Context

                          AREA ||i._MarkRect||, CODE, READONLY, ALIGN=2

                  _MarkRect PROC
;;;85     */
;;;86     static void _MarkRect(int x0, int y0, int x1, int y1) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
;;;87       GUI_MEASDEV* pDev = (GUI_MEASDEV*)(GUI_MEMDEV_H2P(GUI_Context.hDevData));
000006  480f              LDR      r0,|L19.68|
000008  461c              MOV      r4,r3                 ;86
00000a  4615              MOV      r5,r2                 ;86
00000c  460f              MOV      r7,r1                 ;86
00000e  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
000012  f7fffffe          BL       GUI_ALLOC_h2p
;;;88       if (x0 < pDev->rUsed.x0)
000016  f9b01000          LDRSH    r1,[r0,#0]
00001a  42b1              CMP      r1,r6
00001c  dd00              BLE      |L19.32|
;;;89         pDev->rUsed.x0 = x0;
00001e  8006              STRH     r6,[r0,#0]
                  |L19.32|
;;;90       if (x1 > pDev->rUsed.x1)
000020  f9b01004          LDRSH    r1,[r0,#4]
000024  42a9              CMP      r1,r5
000026  da00              BGE      |L19.42|
;;;91         pDev->rUsed.x1 = x1;
000028  8085              STRH     r5,[r0,#4]
                  |L19.42|
;;;92       if (y1 < pDev->rUsed.y0)
00002a  f9b01002          LDRSH    r1,[r0,#2]
00002e  42a1              CMP      r1,r4
000030  dd00              BLE      |L19.52|
;;;93         pDev->rUsed.y0 = y0;
000032  8047              STRH     r7,[r0,#2]
                  |L19.52|
;;;94       if (y1 > pDev->rUsed.y1)
000034  f9b01006          LDRSH    r1,[r0,#6]
000038  42a1              CMP      r1,r4
00003a  da00              BGE      |L19.62|
;;;95         pDev->rUsed.y1 = y1;
00003c  80c4              STRH     r4,[r0,#6]
                  |L19.62|
;;;96     }
00003e  e8bd81f0          POP      {r4-r8,pc}
;;;97     
                          ENDP

000042  0000              DCW      0x0000
                  |L19.68|
                          DCD      GUI_Context

                          AREA ||i._SetPixelIndex||, CODE, READONLY, ALIGN=1

                  _SetPixelIndex PROC
;;;134    */
;;;135    static void _SetPixelIndex(int x, int y, int Index) {
000000  f7ffbffe          B.W      _MarkPixel
;;;136      GUI_USE_PARA(Index);
;;;137      _MarkPixel(x, y);
;;;138    }
;;;139    
                          ENDP


                          AREA ||i._XorPixel||, CODE, READONLY, ALIGN=1

                  _XorPixel PROC
;;;143    */
;;;144    static void _XorPixel(int x, int y) {
000000  f7ffbffe          B.W      _MarkPixel
;;;145      _MarkPixel(x, y);
;;;146    }
;;;147    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _APIList
                          DCD      _Color2Index
                          DCD      _Index2Color
                          DCD      _GetIndexMask
                          DCD      _DrawBitmap
                          DCD      _DrawHLine
                          DCD      _DrawVLine
                          DCD      _FillRect
                          DCD      _GetPixelIndex
                          DCD      _GetRect
                          DCD      _SetPixelIndex
                          DCD      _XorPixel
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      _FillPolygon
                          DCD      _FillPolygonAA
                          DCD      0x00000000
                          DCD      0x00000000
