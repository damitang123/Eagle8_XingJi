; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\jdcolor.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\jdcolor.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\JPEG\jdcolor.c]
                          THUMB

                          AREA ||i.build_ycc_rgb_table||, CODE, READONLY, ALIGN=2

                  build_ycc_rgb_table PROC
;;;69     LOCAL(void)
;;;70     build_ycc_rgb_table (j_decompress_ptr cinfo)
000000  b570              PUSH     {r4-r6,lr}
;;;71     {
000002  4605              MOV      r5,r0
;;;72       my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
;;;73       int i;
;;;74       INT32 x;
;;;75       SHIFT_TEMPS
;;;76     
;;;77       cconvert->Cr_r_tab = (int *)
000004  f8d041c8          LDR      r4,[r0,#0x1c8]
000008  6840              LDR      r0,[r0,#4]
00000a  f44f6680          MOV      r6,#0x400
00000e  4632              MOV      r2,r6
000010  6803              LDR      r3,[r0,#0]
000012  2101              MOVS     r1,#1
000014  4628              MOV      r0,r5
000016  4798              BLX      r3
;;;78         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;79     				(MAXJSAMPLE+1) * SIZEOF(int));
;;;80       cconvert->Cb_b_tab = (int *)
000018  60a0              STR      r0,[r4,#8]
00001a  6868              LDR      r0,[r5,#4]
00001c  4632              MOV      r2,r6
00001e  2101              MOVS     r1,#1
000020  6803              LDR      r3,[r0,#0]
000022  4628              MOV      r0,r5
000024  4798              BLX      r3
;;;81         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;82     				(MAXJSAMPLE+1) * SIZEOF(int));
;;;83       cconvert->Cr_g_tab = (INT32 *)
000026  60e0              STR      r0,[r4,#0xc]
000028  6868              LDR      r0,[r5,#4]
00002a  4632              MOV      r2,r6
00002c  2101              MOVS     r1,#1
00002e  6803              LDR      r3,[r0,#0]
000030  4628              MOV      r0,r5
000032  4798              BLX      r3
;;;84         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;85     				(MAXJSAMPLE+1) * SIZEOF(INT32));
;;;86       cconvert->Cb_g_tab = (INT32 *)
000034  6120              STR      r0,[r4,#0x10]
000036  6868              LDR      r0,[r5,#4]
000038  4632              MOV      r2,r6
00003a  2101              MOVS     r1,#1
00003c  6803              LDR      r3,[r0,#0]
00003e  4628              MOV      r0,r5
000040  4798              BLX      r3
;;;87         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;88     				(MAXJSAMPLE+1) * SIZEOF(INT32));
;;;89     
;;;90       for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
000042  2100              MOVS     r1,#0
000044  6160              STR      r0,[r4,#0x14]
000046  f06f007f          MVN      r0,#0x7f
;;;91         /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
;;;92         /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
;;;93         /* Cr=>R value is nearest int to 1.40200 * x */
;;;94         cconvert->Cr_r_tab[i] = (int)
;;;95     		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
;;;96         /* Cb=>B value is nearest int to 1.77200 * x */
;;;97         cconvert->Cb_b_tab[i] = (int)
00004a  0172              LSLS     r2,r6,#5
                  |L1.76|
00004c  4b10              LDR      r3,|L1.144|
00004e  68a5              LDR      r5,[r4,#8]            ;94
000050  4343              MULS     r3,r0,r3              ;94
000052  f5034300          ADD      r3,r3,#0x8000         ;94
000056  141b              ASRS     r3,r3,#16             ;94
000058  f8453021          STR      r3,[r5,r1,LSL #2]     ;94
00005c  f24e23d1          MOV      r3,#0xe2d1
000060  4343              MULS     r3,r0,r3
000062  68e5              LDR      r5,[r4,#0xc]
000064  eb020343          ADD      r3,r2,r3,LSL #1
000068  141b              ASRS     r3,r3,#16
00006a  f8453021          STR      r3,[r5,r1,LSL #2]
;;;98     		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
;;;99         /* Cr=>G value is scaled-up -0.71414 * x */
;;;100        cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
00006e  4b09              LDR      r3,|L1.148|
000070  6925              LDR      r5,[r4,#0x10]
000072  4343              MULS     r3,r0,r3
000074  f8453021          STR      r3,[r5,r1,LSL #2]
;;;101        /* Cb=>G value is scaled-up -0.34414 * x */
;;;102        /* We also add in ONE_HALF so that need not do it in inner loop */
;;;103        cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
000078  4b07              LDR      r3,|L1.152|
00007a  6965              LDR      r5,[r4,#0x14]
00007c  4343              MULS     r3,r0,r3
00007e  eb020343          ADD      r3,r2,r3,LSL #1
000082  f8453021          STR      r3,[r5,r1,LSL #2]
000086  1c40              ADDS     r0,r0,#1
000088  1c49              ADDS     r1,r1,#1
00008a  29ff              CMP      r1,#0xff              ;90
00008c  ddde              BLE      |L1.76|
;;;104      }
;;;105    }
00008e  bd70              POP      {r4-r6,pc}
;;;106    
                          ENDP

                  |L1.144|
                          DCD      0x000166e9
                  |L1.148|
                          DCD      0xffff492e
                  |L1.152|
                          DCD      0xffffd3f3

                          AREA ||i.gray_rgb_convert||, CODE, READONLY, ALIGN=2

                  gray_rgb_convert PROC
;;;216    METHODDEF(void)
;;;217    gray_rgb_convert (j_decompress_ptr cinfo,
000000  b5f0              PUSH     {r4-r7,lr}
;;;218    		  JSAMPIMAGE input_buf, JDIMENSION input_row,
;;;219    		  JSAMPARRAY output_buf, int num_rows)
;;;220    {
000002  6f07              LDR      r7,[r0,#0x70]
;;;221      register JSAMPROW inptr, outptr;
;;;222      register JDIMENSION col;
;;;223      JDIMENSION num_cols = cinfo->output_width;
000004  9d05              LDR      r5,[sp,#0x14]
000006  e012              B        |L2.46|
                  |L2.8|
;;;224    
;;;225      while (--num_rows >= 0) {
;;;226        inptr = input_buf[0][input_row++];
000008  6808              LDR      r0,[r1,#0]
;;;227        outptr = *output_buf++;
;;;228        for (col = 0; col < num_cols; col++) {
00000a  2400              MOVS     r4,#0
00000c  f8506022          LDR      r6,[r0,r2,LSL #2]     ;226
000010  cb01              LDM      r3!,{r0}              ;227
000012  1c52              ADDS     r2,r2,#1
000014  e009              B        |L2.42|
;;;229          /* We can dispense with GETJSAMPLE() here */
;;;230          outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
000016  bf00              NOP      
                  |L2.24|
000018  f816c004          LDRB     r12,[r6,r4]
00001c  f880c002          STRB     r12,[r0,#2]
000020  f880c001          STRB     r12,[r0,#1]
000024  f800cb03          STRB     r12,[r0],#3
000028  1c64              ADDS     r4,r4,#1
                  |L2.42|
00002a  42bc              CMP      r4,r7                 ;228
00002c  d3f4              BCC      |L2.24|
                  |L2.46|
00002e  1e6d              SUBS     r5,r5,#1              ;228
000030  d5ea              BPL      |L2.8|
;;;231          outptr += RGB_PIXELSIZE;
;;;232        }
;;;233      }
;;;234    }
000032  bdf0              POP      {r4-r7,pc}
;;;235    
                          ENDP


                          AREA ||i.grayscale_convert||, CODE, READONLY, ALIGN=1

                  grayscale_convert PROC
;;;200    METHODDEF(void)
;;;201    grayscale_convert (j_decompress_ptr cinfo,
000000  b57c              PUSH     {r2-r6,lr}
;;;202    		   JSAMPIMAGE input_buf, JDIMENSION input_row,
;;;203    		   JSAMPARRAY output_buf, int num_rows)
;;;204    {
000002  4615              MOV      r5,r2
;;;205      jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
000004  6f00              LDR      r0,[r0,#0x70]
000006  9a06              LDR      r2,[sp,#0x18]
000008  e9cd2000          STRD     r2,r0,[sp,#0]
00000c  461c              MOV      r4,r3                 ;204
00000e  6808              LDR      r0,[r1,#0]
000010  2300              MOVS     r3,#0
000012  4622              MOV      r2,r4
000014  4629              MOV      r1,r5
000016  f7fffffe          BL       jcopy_sample_rows
;;;206    		    num_rows, cinfo->output_width);
;;;207    }
00001a  bd7c              POP      {r2-r6,pc}
;;;208    
                          ENDP


                          AREA ||i.jinit_color_deconverter||, CODE, READONLY, ALIGN=2

                  jinit_color_deconverter PROC
;;;304    GLOBAL(void)
;;;305    jinit_color_deconverter (j_decompress_ptr cinfo)
000000  b570              PUSH     {r4-r6,lr}
;;;306    {
000002  4604              MOV      r4,r0
;;;307      my_cconvert_ptr cconvert;
;;;308      int ci;
;;;309    
;;;310      cconvert = (my_cconvert_ptr)
000004  6840              LDR      r0,[r0,#4]
000006  2218              MOVS     r2,#0x18
000008  2101              MOVS     r1,#1
00000a  6803              LDR      r3,[r0,#0]
00000c  4620              MOV      r0,r4
00000e  4798              BLX      r3
;;;311        (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;312    				SIZEOF(my_color_deconverter));
;;;313      cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
;;;314      cconvert->pub.start_pass = start_pass_dcolor;
000010  493f              LDR      r1,|L4.272|
000012  f8c401c8          STR      r0,[r4,#0x1c8]
;;;315    
;;;316      /* Make sure num_components agrees with jpeg_color_space */
;;;317      switch (cinfo->jpeg_color_space) {
000016  6001              STR      r1,[r0,#0]
000018  4605              MOV      r5,r0                 ;310
00001a  f8941028          LDRB     r1,[r4,#0x28]
;;;318      case JCS_GRAYSCALE:
;;;319        if (cinfo->num_components != 1)
;;;320          ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
00001e  200a              MOVS     r0,#0xa
000020  2906              CMP      r1,#6                 ;317
000022  d210              BCS      |L4.70|
000024  e8dff001          TBB      [pc,r1]               ;317
000028  0f030707          DCB      0x0f,0x03,0x07,0x07
00002c  0b0b              DCB      0x0b,0x0b
00002e  6a61              LDR      r1,[r4,#0x24]         ;319
000030  2901              CMP      r1,#1                 ;319
000032  d10b              BNE      |L4.76|
000034  e010              B        |L4.88|
;;;321        break;
;;;322    
;;;323      case JCS_RGB:
;;;324      case JCS_YCbCr:
;;;325        if (cinfo->num_components != 3)
000036  6a61              LDR      r1,[r4,#0x24]
000038  2903              CMP      r1,#3
00003a  d107              BNE      |L4.76|
00003c  e00c              B        |L4.88|
;;;326          ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
;;;327        break;
;;;328    
;;;329      case JCS_CMYK:
;;;330      case JCS_YCCK:
;;;331        if (cinfo->num_components != 4)
00003e  6a61              LDR      r1,[r4,#0x24]
000040  2904              CMP      r1,#4
000042  d103              BNE      |L4.76|
000044  e008              B        |L4.88|
                  |L4.70|
;;;332          ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
;;;333        break;
;;;334    
;;;335      default:			/* JCS_UNKNOWN can be anything */
;;;336        if (cinfo->num_components < 1)
000046  6a61              LDR      r1,[r4,#0x24]
000048  2901              CMP      r1,#1
00004a  da05              BGE      |L4.88|
                  |L4.76|
;;;337          ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
00004c  6821              LDR      r1,[r4,#0]
00004e  6148              STR      r0,[r1,#0x14]
000050  6820              LDR      r0,[r4,#0]
000052  6801              LDR      r1,[r0,#0]
000054  4620              MOV      r0,r4
000056  4788              BLX      r1
                  |L4.88|
;;;338        break;
;;;339      }
;;;340    
;;;341      /* Set out_color_components and conversion method based on requested space.
;;;342       * Also clear the component_needed flags for any unused components,
;;;343       * so that earlier pipeline stages can avoid useless computation.
;;;344       */
;;;345    
;;;346      switch (cinfo->out_color_space) {
000058  f8941029          LDRB     r1,[r4,#0x29]
;;;347      case JCS_GRAYSCALE:
;;;348        cinfo->out_color_components = 1;
;;;349        if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
;;;350    	cinfo->jpeg_color_space == JCS_YCbCr) {
;;;351          cconvert->pub.color_convert = grayscale_convert;
;;;352          /* For color->grayscale conversion, only the Y (0) component is needed */
;;;353          for (ci = 1; ci < cinfo->num_components; ci++)
;;;354    	cinfo->comp_info[ci].component_needed = FALSE;
;;;355        } else
;;;356          ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
00005c  201b              MOVS     r0,#0x1b
00005e  2601              MOVS     r6,#1                 ;310
000060  2901              CMP      r1,#1                 ;346
000062  d00b              BEQ      |L4.124|
;;;357        break;
;;;358    
;;;359      case JCS_RGB:
;;;360        cinfo->out_color_components = RGB_PIXELSIZE;
;;;361        if (cinfo->jpeg_color_space == JCS_YCbCr) {
;;;362          cconvert->pub.color_convert = ycc_rgb_convert;
;;;363          build_ycc_rgb_table(cinfo);
;;;364        } else if (cinfo->jpeg_color_space == JCS_GRAYSCALE) {
;;;365          cconvert->pub.color_convert = gray_rgb_convert;
;;;366        } else if (cinfo->jpeg_color_space == JCS_RGB && RGB_PIXELSIZE == 3) {
;;;367          cconvert->pub.color_convert = null_convert;
000064  4a2b              LDR      r2,|L4.276|
000066  2902              CMP      r1,#2                 ;346
000068  d024              BEQ      |L4.180|
00006a  2904              CMP      r1,#4                 ;346
00006c  d032              BEQ      |L4.212|
;;;368        } else
;;;369          ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
;;;370        break;
;;;371    
;;;372      case JCS_CMYK:
;;;373        cinfo->out_color_components = 4;
;;;374        if (cinfo->jpeg_color_space == JCS_YCCK) {
;;;375          cconvert->pub.color_convert = ycck_cmyk_convert;
;;;376          build_ycc_rgb_table(cinfo);
;;;377        } else if (cinfo->jpeg_color_space == JCS_CMYK) {
;;;378          cconvert->pub.color_convert = null_convert;
;;;379        } else
;;;380          ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
;;;381        break;
;;;382    
;;;383      default:
;;;384        /* Permit null conversion to same output space */
;;;385        if (cinfo->out_color_space == cinfo->jpeg_color_space) {
00006e  f8943028          LDRB     r3,[r4,#0x28]
000072  4299              CMP      r1,r3
000074  d136              BNE      |L4.228|
;;;386          cinfo->out_color_components = cinfo->num_components;
000076  6a60              LDR      r0,[r4,#0x24]
;;;387          cconvert->pub.color_convert = null_convert;
000078  67a0              STR      r0,[r4,#0x78]
00007a  e043              B        |L4.260|
                  |L4.124|
00007c  67a6              STR      r6,[r4,#0x78]         ;349
00007e  f8941028          LDRB     r1,[r4,#0x28]         ;349
000082  2901              CMP      r1,#1                 ;349
000084  d001              BEQ      |L4.138|
000086  2903              CMP      r1,#3                 ;350
000088  d12c              BNE      |L4.228|
                  |L4.138|
00008a  4823              LDR      r0,|L4.280|
00008c  6068              STR      r0,[r5,#4]            ;353
00008e  2001              MOVS     r0,#1                 ;353
000090  2200              MOVS     r2,#0                 ;353
000092  2130              MOVS     r1,#0x30              ;354
000094  e00a              B        |L4.172|
000096  bf00              NOP                            ;354
                  |L4.152|
000098  ebc005c0          RSB      r5,r0,r0,LSL #3       ;354
00009c  eb050545          ADD      r5,r5,r5,LSL #1       ;354
0000a0  f8d430d8          LDR      r3,[r4,#0xd8]         ;354
0000a4  eb010585          ADD      r5,r1,r5,LSL #2       ;354
0000a8  1c40              ADDS     r0,r0,#1              ;354
0000aa  515a              STR      r2,[r3,r5]            ;354
                  |L4.172|
0000ac  6a63              LDR      r3,[r4,#0x24]         ;353
0000ae  4283              CMP      r3,r0                 ;353
0000b0  dcf2              BGT      |L4.152|
0000b2  e01d              B        |L4.240|
                  |L4.180|
0000b4  2103              MOVS     r1,#3                 ;360
0000b6  67a1              STR      r1,[r4,#0x78]         ;361
0000b8  f8941028          LDRB     r1,[r4,#0x28]         ;361
0000bc  2903              CMP      r1,#3                 ;361
0000be  d004              BEQ      |L4.202|
0000c0  2901              CMP      r1,#1                 ;364
0000c2  d004              BEQ      |L4.206|
0000c4  2902              CMP      r1,#2                 ;366
0000c6  d01d              BEQ      |L4.260|
0000c8  e00c              B        |L4.228|
                  |L4.202|
0000ca  4814              LDR      r0,|L4.284|
0000cc  e015              B        |L4.250|
                  |L4.206|
0000ce  4814              LDR      r0,|L4.288|
0000d0  6068              STR      r0,[r5,#4]            ;365
0000d2  e00d              B        |L4.240|
                  |L4.212|
0000d4  2104              MOVS     r1,#4                 ;373
0000d6  67a1              STR      r1,[r4,#0x78]         ;374
0000d8  f8941028          LDRB     r1,[r4,#0x28]         ;374
0000dc  2905              CMP      r1,#5                 ;374
0000de  d00b              BEQ      |L4.248|
0000e0  2904              CMP      r1,#4                 ;377
0000e2  d00f              BEQ      |L4.260|
                  |L4.228|
;;;388        } else			/* unsupported non-null conversion */
;;;389          ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
0000e4  6821              LDR      r1,[r4,#0]
0000e6  6148              STR      r0,[r1,#0x14]
0000e8  6820              LDR      r0,[r4,#0]
0000ea  6801              LDR      r1,[r0,#0]
0000ec  4620              MOV      r0,r4
0000ee  4788              BLX      r1
                  |L4.240|
;;;390        break;
;;;391      }
;;;392    
;;;393      if (cinfo->quantize_colors)
0000f0  6d60              LDR      r0,[r4,#0x54]
0000f2  b148              CBZ      r0,|L4.264|
;;;394        cinfo->output_components = 1; /* single colormapped output component */
0000f4  67e6              STR      r6,[r4,#0x7c]
;;;395      else
;;;396        cinfo->output_components = cinfo->out_color_components;
;;;397    }
0000f6  bd70              POP      {r4-r6,pc}
                  |L4.248|
0000f8  480a              LDR      r0,|L4.292|
                  |L4.250|
0000fa  6068              STR      r0,[r5,#4]            ;376
0000fc  4620              MOV      r0,r4                 ;376
0000fe  f7fffffe          BL       build_ycc_rgb_table
000102  e7f5              B        |L4.240|
                  |L4.260|
000104  606a              STR      r2,[r5,#4]            ;378
000106  e7f3              B        |L4.240|
                  |L4.264|
000108  6fa0              LDR      r0,[r4,#0x78]         ;396
00010a  67e0              STR      r0,[r4,#0x7c]         ;396
00010c  bd70              POP      {r4-r6,pc}
                          ENDP

00010e  0000              DCW      0x0000
                  |L4.272|
                          DCD      start_pass_dcolor
                  |L4.276|
                          DCD      null_convert
                  |L4.280|
                          DCD      grayscale_convert
                  |L4.284|
                          DCD      ycc_rgb_convert
                  |L4.288|
                          DCD      gray_rgb_convert
                  |L4.292|
                          DCD      ycck_cmyk_convert

                          AREA ||i.null_convert||, CODE, READONLY, ALIGN=1

                  null_convert PROC
;;;168    METHODDEF(void)
;;;169    null_convert (j_decompress_ptr cinfo,
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;170    	      JSAMPIMAGE input_buf, JDIMENSION input_row,
;;;171    	      JSAMPARRAY output_buf, int num_rows)
;;;172    {
000004  4689              MOV      r9,r1
;;;173      register JSAMPROW inptr, outptr;
;;;174      register JDIMENSION count;
;;;175      register int num_components = cinfo->num_components;
000006  f8ddc01c          LDR      r12,[sp,#0x1c]
00000a  6a47              LDR      r7,[r0,#0x24]         ;172
00000c  6f06              LDR      r6,[r0,#0x70]         ;172
00000e  e015              B        |L5.60|
                  |L5.16|
;;;176      JDIMENSION num_cols = cinfo->output_width;
;;;177      int ci;
;;;178    
;;;179      while (--num_rows >= 0) {
;;;180        for (ci = 0; ci < num_components; ci++) {
000010  2100              MOVS     r1,#0
000012  e00f              B        |L5.52|
                  |L5.20|
;;;181          inptr = input_buf[ci][input_row];
000014  f8590021          LDR      r0,[r9,r1,LSL #2]
000018  f8505022          LDR      r5,[r0,r2,LSL #2]
;;;182          outptr = output_buf[0] + ci;
00001c  6818              LDR      r0,[r3,#0]
00001e  1844              ADDS     r4,r0,r1
;;;183          for (count = num_cols; count > 0; count--) {
000020  0030              MOVS     r0,r6
000022  d006              BEQ      |L5.50|
                  |L5.36|
;;;184    	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
000024  f8158b01          LDRB     r8,[r5],#1
000028  f8848000          STRB     r8,[r4,#0]
;;;185    	outptr += num_components;
00002c  443c              ADD      r4,r4,r7
00002e  1e40              SUBS     r0,r0,#1
000030  d1f8              BNE      |L5.36|
                  |L5.50|
000032  1c49              ADDS     r1,r1,#1              ;183
                  |L5.52|
000034  42b9              CMP      r1,r7                 ;180
000036  dbed              BLT      |L5.20|
000038  1c52              ADDS     r2,r2,#1              ;180
00003a  1d1b              ADDS     r3,r3,#4              ;180
                  |L5.60|
00003c  f1bc0c01          SUBS     r12,r12,#1            ;180
000040  d5e6              BPL      |L5.16|
;;;186          }
;;;187        }
;;;188        input_row++;
;;;189        output_buf++;
;;;190      }
;;;191    }
000042  e8bd83f0          POP      {r4-r9,pc}
;;;192    
                          ENDP


                          AREA ||i.start_pass_dcolor||, CODE, READONLY, ALIGN=1

                  start_pass_dcolor PROC
;;;292    METHODDEF(void)
;;;293    start_pass_dcolor (j_decompress_ptr cinfo)
000000  4770              BX       lr
;;;294    {
;;;295      GUI_USE_PARA(cinfo);
;;;296      /* no work needed */
;;;297    }
;;;298    
                          ENDP


                          AREA ||i.ycc_rgb_convert||, CODE, READONLY, ALIGN=1

                  ycc_rgb_convert PROC
;;;119    METHODDEF(void)
;;;120    ycc_rgb_convert (j_decompress_ptr cinfo,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;121    		 JSAMPIMAGE input_buf, JDIMENSION input_row,
;;;122    		 JSAMPARRAY output_buf, int num_rows)
;;;123    {
000004  b084              SUB      sp,sp,#0x10
;;;124      my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
;;;125      register int y, cb, cr;
;;;126      register JSAMPROW outptr;
;;;127      register JSAMPROW inptr0, inptr1, inptr2;
;;;128      register JDIMENSION col;
;;;129      JDIMENSION num_cols = cinfo->output_width;
000006  6f03              LDR      r3,[r0,#0x70]
000008  f8d011c8          LDR      r1,[r0,#0x1c8]
;;;130      /* copy these pointers into registers if possible */
;;;131      register JSAMPLE * range_limit = cinfo->sample_range_limit;
00000c  9303              STR      r3,[sp,#0xc]
;;;132      register int * Crrtab = cconvert->Cr_r_tab;
00000e  f8d03144          LDR      r3,[r0,#0x144]
000012  6888              LDR      r0,[r1,#8]
;;;133      register int * Cbbtab = cconvert->Cb_b_tab;
000014  9002              STR      r0,[sp,#8]
000016  68c8              LDR      r0,[r1,#0xc]
;;;134      register INT32 * Crgtab = cconvert->Cr_g_tab;
000018  9001              STR      r0,[sp,#4]
00001a  6908              LDR      r0,[r1,#0x10]
;;;135      register INT32 * Cbgtab = cconvert->Cb_g_tab;
00001c  9000              STR      r0,[sp,#0]
00001e  f8d1e014          LDR      lr,[r1,#0x14]         ;123
000022  e035              B        |L7.144|
                  |L7.36|
;;;136      SHIFT_TEMPS
;;;137    
;;;138      while (--num_rows >= 0) {
;;;139        inptr0 = input_buf[0][input_row];
000024  9805              LDR      r0,[sp,#0x14]
000026  6800              LDR      r0,[r0,#0]
000028  f850b022          LDR      r11,[r0,r2,LSL #2]
;;;140        inptr1 = input_buf[1][input_row];
00002c  9805              LDR      r0,[sp,#0x14]
00002e  6840              LDR      r0,[r0,#4]
000030  f850a022          LDR      r10,[r0,r2,LSL #2]
;;;141        inptr2 = input_buf[2][input_row];
000034  9805              LDR      r0,[sp,#0x14]
000036  6880              LDR      r0,[r0,#8]
000038  f8509022          LDR      r9,[r0,r2,LSL #2]
;;;142        input_row++;
;;;143        outptr = *output_buf++;
00003c  9807              LDR      r0,[sp,#0x1c]
00003e  c802              LDM      r0!,{r1}
;;;144        for (col = 0; col < num_cols; col++) {
000040  9007              STR      r0,[sp,#0x1c]
000042  2000              MOVS     r0,#0
000044  1c52              ADDS     r2,r2,#1
000046  e020              B        |L7.138|
                  |L7.72|
;;;145          y  = GETJSAMPLE(inptr0[col]);
;;;146          cb = GETJSAMPLE(inptr1[col]);
;;;147          cr = GETJSAMPLE(inptr2[col]);
000048  f8194000          LDRB     r4,[r9,r0]
;;;148          /* Range-limiting is essential due to noise introduced by DCT losses. */
;;;149          outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
00004c  9f02              LDR      r7,[sp,#8]
00004e  f81b5000          LDRB     r5,[r11,r0]           ;145
000052  f81a6000          LDRB     r6,[r10,r0]           ;146
000056  f857c024          LDR      r12,[r7,r4,LSL #2]
00005a  195f              ADDS     r7,r3,r5
;;;150          outptr[RGB_GREEN] = range_limit[y +
;;;151    			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
;;;152    						 SCALEBITS))];
;;;153          outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
00005c  1c40              ADDS     r0,r0,#1
00005e  f81cc007          LDRB     r12,[r12,r7]          ;149
000062  f801cb01          STRB     r12,[r1],#1           ;149
000066  f8ddc000          LDR      r12,[sp,#0]           ;150
00006a  f85e8026          LDR      r8,[lr,r6,LSL #2]     ;150
00006e  f85c4024          LDR      r4,[r12,r4,LSL #2]    ;150
000072  4444              ADD      r4,r4,r8              ;150
000074  eb054424          ADD      r4,r5,r4,ASR #16      ;150
000078  5d1c              LDRB     r4,[r3,r4]            ;150
00007a  f8014b01          STRB     r4,[r1],#1            ;150
00007e  9c01              LDR      r4,[sp,#4]
000080  f8544026          LDR      r4,[r4,r6,LSL #2]
000084  5de4              LDRB     r4,[r4,r7]
000086  f8014b01          STRB     r4,[r1],#1
                  |L7.138|
00008a  9c03              LDR      r4,[sp,#0xc]          ;144
00008c  42a0              CMP      r0,r4                 ;144
00008e  d3db              BCC      |L7.72|
                  |L7.144|
000090  9811              LDR      r0,[sp,#0x44]         ;138
000092  1e40              SUBS     r0,r0,#1              ;138
000094  9011              STR      r0,[sp,#0x44]         ;138
000096  d5c5              BPL      |L7.36|
;;;154          outptr += RGB_PIXELSIZE;
;;;155        }
;;;156      }
;;;157    }
000098  b008              ADD      sp,sp,#0x20
00009a  e8bd8ff0          POP      {r4-r11,pc}
;;;158    
                          ENDP


                          AREA ||i.ycck_cmyk_convert||, CODE, READONLY, ALIGN=2

                  ycck_cmyk_convert PROC
;;;244    METHODDEF(void)
;;;245    ycck_cmyk_convert (j_decompress_ptr cinfo,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;246    		   JSAMPIMAGE input_buf, JDIMENSION input_row,
;;;247    		   JSAMPARRAY output_buf, int num_rows)
;;;248    {
000004  b084              SUB      sp,sp,#0x10
;;;249      my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
;;;250      register int y, cb, cr;
;;;251      register JSAMPROW outptr;
;;;252      register JSAMPROW inptr0, inptr1, inptr2, inptr3;
;;;253      register JDIMENSION col;
;;;254      JDIMENSION num_cols = cinfo->output_width;
000006  6f04              LDR      r4,[r0,#0x70]
000008  f8d031c8          LDR      r3,[r0,#0x1c8]
;;;255      /* copy these pointers into registers if possible */
;;;256      register JSAMPLE * range_limit = cinfo->sample_range_limit;
00000c  9403              STR      r4,[sp,#0xc]
;;;257      register int * Crrtab = cconvert->Cr_r_tab;
00000e  f8d05144          LDR      r5,[r0,#0x144]
000012  6898              LDR      r0,[r3,#8]
;;;258      register int * Cbbtab = cconvert->Cb_b_tab;
000014  9002              STR      r0,[sp,#8]
000016  68d8              LDR      r0,[r3,#0xc]
000018  9001              STR      r0,[sp,#4]
00001a  e9d3c004          LDRD     r12,r0,[r3,#0x10]
00001e  9000              STR      r0,[sp,#0]            ;248
000020  e042              B        |L8.168|
                  |L8.34|
;;;259      register INT32 * Crgtab = cconvert->Cr_g_tab;
;;;260      register INT32 * Cbgtab = cconvert->Cb_g_tab;
;;;261      SHIFT_TEMPS
;;;262    
;;;263      while (--num_rows >= 0) {
;;;264        inptr0 = input_buf[0][input_row];
000022  6808              LDR      r0,[r1,#0]
000024  f850e022          LDR      lr,[r0,r2,LSL #2]
;;;265        inptr1 = input_buf[1][input_row];
000028  6848              LDR      r0,[r1,#4]
00002a  f850a022          LDR      r10,[r0,r2,LSL #2]
;;;266        inptr2 = input_buf[2][input_row];
00002e  6888              LDR      r0,[r1,#8]
000030  f8509022          LDR      r9,[r0,r2,LSL #2]
;;;267        inptr3 = input_buf[3][input_row];
000034  68c8              LDR      r0,[r1,#0xc]
000036  f850b022          LDR      r11,[r0,r2,LSL #2]
;;;268        input_row++;
;;;269        outptr = *output_buf++;
00003a  9807              LDR      r0,[sp,#0x1c]
00003c  c808              LDM      r0!,{r3}
;;;270        for (col = 0; col < num_cols; col++) {
00003e  9007              STR      r0,[sp,#0x1c]
000040  2000              MOVS     r0,#0
000042  1c52              ADDS     r2,r2,#1
000044  e02d              B        |L8.162|
;;;271          y  = GETJSAMPLE(inptr0[col]);
000046  bf00              NOP      
                  |L8.72|
;;;272          cb = GETJSAMPLE(inptr1[col]);
;;;273          cr = GETJSAMPLE(inptr2[col]);
000048  f8196000          LDRB     r6,[r9,r0]
;;;274          /* Range-limiting is essential due to noise introduced by DCT losses. */
;;;275          outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
00004c  f8dd8008          LDR      r8,[sp,#8]
000050  f81e4000          LDRB     r4,[lr,r0]            ;271
000054  f81a7000          LDRB     r7,[r10,r0]           ;272
000058  f8588026          LDR      r8,[r8,r6,LSL #2]
00005c  44a0              ADD      r8,r8,r4
00005e  f1c808ff          RSB      r8,r8,#0xff
000062  f8158008          LDRB     r8,[r5,r8]
000066  f8038b01          STRB     r8,[r3],#1
;;;276          outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
00006a  f8dd8000          LDR      r8,[sp,#0]
00006e  f85c6026          LDR      r6,[r12,r6,LSL #2]
000072  f8588027          LDR      r8,[r8,r7,LSL #2]
000076  4446              ADD      r6,r6,r8
000078  eb044626          ADD      r6,r4,r6,ASR #16
00007c  f1c606ff          RSB      r6,r6,#0xff
000080  5dae              LDRB     r6,[r5,r6]
000082  f8036b01          STRB     r6,[r3],#1
;;;277    			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
;;;278    						 SCALEBITS)))];
;;;279          outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
000086  9e01              LDR      r6,[sp,#4]
000088  f8566027          LDR      r6,[r6,r7,LSL #2]
00008c  4434              ADD      r4,r4,r6
00008e  f1c404ff          RSB      r4,r4,#0xff
000092  5d2c              LDRB     r4,[r5,r4]
000094  f8034b02          STRB     r4,[r3],#2
;;;280          /* K passes through unchanged */
;;;281          outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
000098  f81b4000          LDRB     r4,[r11,r0]
00009c  f8034c01          STRB     r4,[r3,#-1]
0000a0  1c40              ADDS     r0,r0,#1
                  |L8.162|
0000a2  9c03              LDR      r4,[sp,#0xc]          ;270
0000a4  42a0              CMP      r0,r4                 ;270
0000a6  d3cf              BCC      |L8.72|
                  |L8.168|
0000a8  9811              LDR      r0,[sp,#0x44]         ;263
0000aa  1e40              SUBS     r0,r0,#1              ;263
0000ac  9011              STR      r0,[sp,#0x44]         ;263
0000ae  d5b8              BPL      |L8.34|
;;;282          outptr += 4;
;;;283        }
;;;284      }
;;;285    }
0000b0  b008              ADD      sp,sp,#0x20
0000b2  e8bd8ff0          POP      {r4-r11,pc}
;;;286    
                          ENDP

