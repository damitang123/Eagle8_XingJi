; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\jdsample.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\jdsample.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\JPEG\jdsample.c]
                          THUMB

                          AREA ||i.fullsize_upsample||, CODE, READONLY, ALIGN=1

                  fullsize_upsample PROC
;;;157    METHODDEF(void)
;;;158    fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
000000  601a              STR      r2,[r3,#0]
;;;159    		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;160    {
;;;161      GUI_USE_PARA(compptr);
;;;162      GUI_USE_PARA(cinfo);
;;;163      *output_data_ptr = input_data;
;;;164    }
000002  4770              BX       lr
;;;165    
                          ENDP


                          AREA ||i.h2v1_fancy_upsample||, CODE, READONLY, ALIGN=2

                  h2v1_fancy_upsample PROC
;;;311    METHODDEF(void)
;;;312    h2v1_fancy_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;313    		     JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;314    {
000004  4691              MOV      r9,r2
;;;315      JSAMPARRAY output_data = *output_data_ptr;
;;;316      register JSAMPROW inptr, outptr;
;;;317      register int invalue;
;;;318      register JDIMENSION colctr;
;;;319      int inrow;
;;;320    
;;;321      for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
000006  2500              MOVS     r5,#0
000008  681f              LDR      r7,[r3,#0]            ;314
00000a  e034              B        |L2.118|
                  |L2.12|
;;;322        inptr = input_data[inrow];
00000c  f8593025          LDR      r3,[r9,r5,LSL #2]
;;;323        outptr = output_data[inrow];
000010  f8572025          LDR      r2,[r7,r5,LSL #2]
;;;324        /* Special case for first column */
;;;325        invalue = GETJSAMPLE(*inptr++);
000014  f8134b01          LDRB     r4,[r3],#1
;;;326        *outptr++ = (JSAMPLE) invalue;
000018  f8024b01          STRB     r4,[r2],#1
;;;327        *outptr++ = (JSAMPLE) ((invalue * 3 + GETJSAMPLE(*inptr) + 2) >> 2);
00001c  781e              LDRB     r6,[r3,#0]
00001e  eb040444          ADD      r4,r4,r4,LSL #1
000022  1ca4              ADDS     r4,r4,#2
000024  4434              ADD      r4,r4,r6
000026  08a4              LSRS     r4,r4,#2
000028  f8024b01          STRB     r4,[r2],#1
;;;328    
;;;329        for (colctr = compptr->downsampled_width - 2; colctr > 0; colctr--) {
00002c  6a8c              LDR      r4,[r1,#0x28]
00002e  1ea4              SUBS     r4,r4,#2
000030  d016              BEQ      |L2.96|
;;;330          /* General case: 3/4 * nearer pixel + 1/4 * further pixel */
;;;331          invalue = GETJSAMPLE(*inptr++) * 3;
000032  bf00              NOP      
                  |L2.52|
000034  f8136901          LDRB     r6,[r3],#-1
000038  eb060646          ADD      r6,r6,r6,LSL #1
;;;332          *outptr++ = (JSAMPLE) ((invalue + GETJSAMPLE(inptr[-2]) + 1) >> 2);
00003c  f813cb02          LDRB     r12,[r3],#2
000040  f1060801          ADD      r8,r6,#1
000044  44c4              ADD      r12,r12,r8
000046  ea4f0c9c          LSR      r12,r12,#2
00004a  f802cb01          STRB     r12,[r2],#1
;;;333          *outptr++ = (JSAMPLE) ((invalue + GETJSAMPLE(*inptr) + 2) >> 2);
00004e  f893c000          LDRB     r12,[r3,#0]
000052  1cb6              ADDS     r6,r6,#2
000054  4466              ADD      r6,r6,r12
000056  08b6              LSRS     r6,r6,#2
000058  f8026b01          STRB     r6,[r2],#1
00005c  1e64              SUBS     r4,r4,#1
00005e  d1e9              BNE      |L2.52|
                  |L2.96|
;;;334        }
;;;335    
;;;336        /* Special case for last column */
;;;337        invalue = GETJSAMPLE(*inptr);
000060  781c              LDRB     r4,[r3,#0]
;;;338        *outptr++ = (JSAMPLE) ((invalue * 3 + GETJSAMPLE(inptr[-1]) + 1) >> 2);
000062  f8136c01          LDRB     r6,[r3,#-1]
000066  eb040344          ADD      r3,r4,r4,LSL #1
00006a  1c5b              ADDS     r3,r3,#1
00006c  4433              ADD      r3,r3,r6
00006e  089b              LSRS     r3,r3,#2
000070  7013              STRB     r3,[r2,#0]
;;;339        *outptr   = (JSAMPLE) invalue;
000072  7054              STRB     r4,[r2,#1]
000074  1c6d              ADDS     r5,r5,#1
                  |L2.118|
000076  f8d02138          LDR      r2,[r0,#0x138]        ;321
00007a  42aa              CMP      r2,r5                 ;321
00007c  dcc6              BGT      |L2.12|
;;;340      }
;;;341    }
00007e  e8bd83f0          POP      {r4-r9,pc}
;;;342    
                          ENDP


                          AREA ||i.h2v1_upsample||, CODE, READONLY, ALIGN=2

                  h2v1_upsample PROC
;;;238    METHODDEF(void)
;;;239    h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
000000  b5f0              PUSH     {r4-r7,lr}
;;;240    	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;241    {
;;;242      JSAMPARRAY output_data = *output_data_ptr;
;;;243      register JSAMPROW inptr, outptr;
;;;244      register JSAMPLE invalue;
;;;245      JSAMPROW outend;
;;;246      int inrow;
;;;247    
;;;248      GUI_USE_PARA(compptr);
;;;249      for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
000002  681f              LDR      r7,[r3,#0]
000004  2300              MOVS     r3,#0
000006  e010              B        |L3.42|
                  |L3.8|
;;;250        inptr = input_data[inrow];
;;;251        outptr = output_data[inrow];
000008  f8571023          LDR      r1,[r7,r3,LSL #2]
;;;252        outend = outptr + cinfo->output_width;
00000c  6f05              LDR      r5,[r0,#0x70]
00000e  f8524023          LDR      r4,[r2,r3,LSL #2]     ;250
000012  186e              ADDS     r6,r5,r1
;;;253        while (outptr < outend) {
000014  e006              B        |L3.36|
;;;254          invalue = *inptr++;	/* don't need GETJSAMPLE() here */
000016  bf00              NOP      
                  |L3.24|
000018  f8145b01          LDRB     r5,[r4],#1
;;;255          *outptr++ = invalue;
00001c  f8015b01          STRB     r5,[r1],#1
;;;256          *outptr++ = invalue;
000020  f8015b01          STRB     r5,[r1],#1
                  |L3.36|
000024  42b1              CMP      r1,r6                 ;253
000026  d3f7              BCC      |L3.24|
000028  1c5b              ADDS     r3,r3,#1              ;253
                  |L3.42|
00002a  f8d01138          LDR      r1,[r0,#0x138]        ;249
00002e  4299              CMP      r1,r3                 ;249
000030  dcea              BGT      |L3.8|
;;;257        }
;;;258      }
;;;259    }
000032  bdf0              POP      {r4-r7,pc}
;;;260    
                          ENDP


                          AREA ||i.h2v2_fancy_upsample||, CODE, READONLY, ALIGN=1

                  h2v2_fancy_upsample PROC
;;;352    METHODDEF(void)
;;;353    h2v2_fancy_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;354    		     JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;355    {
;;;356      JSAMPARRAY output_data = *output_data_ptr;
;;;357      register JSAMPROW inptr0, inptr1, outptr;
;;;358    #if BITS_IN_JSAMPLE == 8
;;;359      register int thiscolsum, lastcolsum, nextcolsum;
;;;360    #else
;;;361      register INT32 thiscolsum, lastcolsum, nextcolsum;
;;;362    #endif
;;;363      register JDIMENSION colctr;
;;;364      int inrow, outrow, v;
;;;365    
;;;366      inrow = outrow = 0;
000004  2600              MOVS     r6,#0
000006  46b1              MOV      r9,r6
000008  f8d3b000          LDR      r11,[r3,#0]           ;355
00000c  e05a              B        |L4.196|
                  |L4.14|
;;;367      while (outrow < cinfo->max_v_samp_factor) {
;;;368        for (v = 0; v < 2; v++) {
;;;369          /* inptr0 points to nearest input row, inptr1 points to next nearest */
;;;370          inptr0 = input_data[inrow];
00000e  9802              LDR      r0,[sp,#8]
000010  2700              MOVS     r7,#0                 ;368
000012  eb000a89          ADD      r10,r0,r9,LSL #2
000016  f8503029          LDR      r3,[r0,r9,LSL #2]
;;;371          if (v == 0)		/* next nearest is row above */
;;;372    	inptr1 = input_data[inrow-1];
;;;373          else			/* next nearest is row below */
;;;374    	inptr1 = input_data[inrow+1];
;;;375          outptr = output_data[outrow++];
;;;376    
;;;377          /* Special case for first column */
;;;378          thiscolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
;;;379          nextcolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
;;;380          *outptr++ = (JSAMPLE) ((thiscolsum * 4 + 8) >> 4);
00001a  f04f0e08          MOV      lr,#8
00001e  e058              B        |L4.210|
                  |L4.32|
000020  9802              LDR      r0,[sp,#8]            ;370
000022  f8503029          LDR      r3,[r0,r9,LSL #2]     ;370
000026  b3e7              CBZ      r7,|L4.162|
000028  f8da2004          LDR      r2,[r10,#4]           ;374
                  |L4.44|
00002c  f8131b01          LDRB     r1,[r3],#1            ;378
000030  f85b0026          LDR      r0,[r11,r6,LSL #2]    ;375
000034  eb010441          ADD      r4,r1,r1,LSL #1       ;378
000038  f8121b01          LDRB     r1,[r2],#1            ;378
;;;381          *outptr++ = (JSAMPLE) ((thiscolsum * 3 + nextcolsum + 7) >> 4);
;;;382          lastcolsum = thiscolsum; thiscolsum = nextcolsum;
;;;383    
;;;384          for (colctr = compptr->downsampled_width - 2; colctr > 0; colctr--) {
00003c  f1060601          ADD      r6,r6,#1
000040  440c              ADD      r4,r4,r1              ;378
000042  f8131b01          LDRB     r1,[r3],#1            ;379
000046  f8125b01          LDRB     r5,[r2],#1            ;379
00004a  eb010141          ADD      r1,r1,r1,LSL #1       ;379
00004e  4429              ADD      r1,r1,r5              ;379
000050  eb0e0584          ADD      r5,lr,r4,LSL #2       ;380
000054  092d              LSRS     r5,r5,#4              ;380
000056  f8005b01          STRB     r5,[r0],#1            ;380
00005a  eb040544          ADD      r5,r4,r4,LSL #1       ;381
00005e  440d              ADD      r5,r5,r1              ;381
000060  1ded              ADDS     r5,r5,#7              ;381
000062  092d              LSRS     r5,r5,#4              ;381
000064  f8005b01          STRB     r5,[r0],#1            ;381
000068  9d01              LDR      r5,[sp,#4]
00006a  6aad              LDR      r5,[r5,#0x28]
00006c  1ead              SUBS     r5,r5,#2
00006e  d017              BEQ      |L4.160|
                  |L4.112|
;;;385    	/* General case: 3/4 * nearer pixel + 1/4 * further pixel in each */
;;;386    	/* dimension, thus 9/16, 3/16, 3/16, 1/16 overall */
;;;387    	nextcolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
000070  f813cb01          LDRB     r12,[r3],#1
000074  f8128b01          LDRB     r8,[r2],#1
000078  eb0c0c4c          ADD      r12,r12,r12,LSL #1
00007c  44c4              ADD      r12,r12,r8
;;;388    	*outptr++ = (JSAMPLE) ((thiscolsum * 3 + lastcolsum + 8) >> 4);
00007e  eb010841          ADD      r8,r1,r1,LSL #1
000082  4444              ADD      r4,r4,r8
000084  3408              ADDS     r4,r4,#8
000086  0924              LSRS     r4,r4,#4
000088  f8004b01          STRB     r4,[r0],#1
;;;389    	*outptr++ = (JSAMPLE) ((thiscolsum * 3 + nextcolsum + 7) >> 4);
00008c  eb08040c          ADD      r4,r8,r12
000090  1de4              ADDS     r4,r4,#7
000092  0924              LSRS     r4,r4,#4
000094  f8004b01          STRB     r4,[r0],#1
;;;390    	lastcolsum = thiscolsum; thiscolsum = nextcolsum;
000098  460c              MOV      r4,r1
00009a  4661              MOV      r1,r12
00009c  1e6d              SUBS     r5,r5,#1
00009e  d1e7              BNE      |L4.112|
                  |L4.160|
;;;391          }
;;;392    
;;;393          /* Special case for last column */
;;;394          *outptr++ = (JSAMPLE) ((thiscolsum * 3 + lastcolsum + 8) >> 4);
0000a0  e000              B        |L4.164|
                  |L4.162|
0000a2  e016              B        |L4.210|
                  |L4.164|
0000a4  eb010241          ADD      r2,r1,r1,LSL #1
0000a8  4422              ADD      r2,r2,r4
0000aa  3208              ADDS     r2,r2,#8
0000ac  0912              LSRS     r2,r2,#4
0000ae  7002              STRB     r2,[r0,#0]
;;;395          *outptr   = (JSAMPLE) ((thiscolsum * 4 + 7) >> 4);
0000b0  2207              MOVS     r2,#7
0000b2  eb020181          ADD      r1,r2,r1,LSL #2
0000b6  0909              LSRS     r1,r1,#4
0000b8  1c7f              ADDS     r7,r7,#1
0000ba  7041              STRB     r1,[r0,#1]
0000bc  2f02              CMP      r7,#2                 ;368
0000be  dbaf              BLT      |L4.32|
;;;396        }
;;;397        inrow++;
0000c0  f1090901          ADD      r9,r9,#1
                  |L4.196|
0000c4  9800              LDR      r0,[sp,#0]            ;367
0000c6  f8d00138          LDR      r0,[r0,#0x138]        ;367
0000ca  42b0              CMP      r0,r6                 ;367
0000cc  dc9f              BGT      |L4.14|
;;;398      }
;;;399    }
0000ce  e8bd8fff          POP      {r0-r11,pc}
                  |L4.210|
0000d2  f85a2c04          LDR      r2,[r10,#-4]          ;372
0000d6  e7a9              B        |L4.44|
;;;400    
                          ENDP


                          AREA ||i.h2v2_upsample||, CODE, READONLY, ALIGN=2

                  h2v2_upsample PROC
;;;267    METHODDEF(void)
;;;268    h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;269    	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;270    {
;;;271      JSAMPARRAY output_data = *output_data_ptr;
;;;272      register JSAMPROW inptr, outptr;
;;;273      register JSAMPLE invalue;
;;;274      JSAMPROW outend;
;;;275      int inrow, outrow;
;;;276    
;;;277      GUI_USE_PARA(compptr);
;;;278      inrow = outrow = 0;
000004  2400              MOVS     r4,#0
000006  4690              MOV      r8,r2                 ;270
000008  4606              MOV      r6,r0                 ;270
00000a  4625              MOV      r5,r4
00000c  681f              LDR      r7,[r3,#0]            ;270
00000e  e01b              B        |L5.72|
                  |L5.16|
;;;279      while (outrow < cinfo->max_v_samp_factor) {
;;;280        inptr = input_data[inrow];
;;;281        outptr = output_data[outrow];
000010  f8570024          LDR      r0,[r7,r4,LSL #2]
;;;282        outend = outptr + cinfo->output_width;
000014  6f32              LDR      r2,[r6,#0x70]
000016  f8581025          LDR      r1,[r8,r5,LSL #2]     ;280
00001a  1813              ADDS     r3,r2,r0
;;;283        while (outptr < outend) {
00001c  e006              B        |L5.44|
;;;284          invalue = *inptr++;	/* don't need GETJSAMPLE() here */
00001e  bf00              NOP      
                  |L5.32|
000020  f8112b01          LDRB     r2,[r1],#1
;;;285          *outptr++ = invalue;
000024  f8002b01          STRB     r2,[r0],#1
;;;286          *outptr++ = invalue;
000028  f8002b01          STRB     r2,[r0],#1
                  |L5.44|
00002c  4298              CMP      r0,r3                 ;283
00002e  d3f7              BCC      |L5.32|
;;;287        }
;;;288        jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
000030  6f31              LDR      r1,[r6,#0x70]
000032  2001              MOVS     r0,#1
000034  e9cd0100          STRD     r0,r1,[sp,#0]
000038  463a              MOV      r2,r7
00003a  1c63              ADDS     r3,r4,#1
00003c  4621              MOV      r1,r4
00003e  4610              MOV      r0,r2
000040  f7fffffe          BL       jcopy_sample_rows
000044  1ca4              ADDS     r4,r4,#2
000046  1c6d              ADDS     r5,r5,#1
                  |L5.72|
000048  f8d60138          LDR      r0,[r6,#0x138]        ;279
00004c  42a0              CMP      r0,r4                 ;279
00004e  dcdf              BGT      |L5.16|
;;;289    		      1, cinfo->output_width);
;;;290        inrow++;
;;;291        outrow += 2;
;;;292      }
;;;293    }
000050  e8bd81fc          POP      {r2-r8,pc}
;;;294    
                          ENDP


                          AREA ||i.int_upsample||, CODE, READONLY, ALIGN=1

                  int_upsample PROC
;;;194    METHODDEF(void)
;;;195    int_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;196    	      JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;197    {
000004  4606              MOV      r6,r0
;;;198      my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
000006  f8d001c4          LDR      r0,[r0,#0x1c4]
00000a  4692              MOV      r10,r2                ;197
;;;199      JSAMPARRAY output_data = *output_data_ptr;
;;;200      register JSAMPROW inptr, outptr;
;;;201      register JSAMPLE invalue;
;;;202      register int h;
;;;203      JSAMPROW outend;
;;;204      int h_expand, v_expand;
;;;205      int inrow, outrow;
;;;206    
;;;207      h_expand = upsample->h_expand[compptr->component_index];
00000c  f1000244          ADD      r2,r0,#0x44
000010  6849              LDR      r1,[r1,#4]
000012  3048              ADDS     r0,r0,#0x48
;;;208      v_expand = upsample->v_expand[compptr->component_index];
;;;209    
;;;210      inrow = outrow = 0;
000014  2400              MOVS     r4,#0
000016  f8d39000          LDR      r9,[r3,#0]            ;207
00001a  5c8d              LDRB     r5,[r1,r2]            ;207
00001c  f8118000          LDRB     r8,[r1,r0]            ;208
000020  4627              MOV      r7,r4
000022  e022              B        |L6.106|
                  |L6.36|
;;;211      while (outrow < cinfo->max_v_samp_factor) {
;;;212        /* Generate one output row with proper horizontal expansion */
;;;213        inptr = input_data[inrow];
;;;214        outptr = output_data[outrow];
000024  f8590024          LDR      r0,[r9,r4,LSL #2]
;;;215        outend = outptr + cinfo->output_width;
000028  6f31              LDR      r1,[r6,#0x70]
00002a  f85a2027          LDR      r2,[r10,r7,LSL #2]    ;213
00002e  eb010c00          ADD      r12,r1,r0
;;;216        while (outptr < outend) {
000032  e008              B        |L6.70|
                  |L6.52|
;;;217          invalue = *inptr++;	/* don't need GETJSAMPLE() here */
000034  f8123b01          LDRB     r3,[r2],#1
;;;218          for (h = h_expand; h > 0; h--) {
000038  4629              MOV      r1,r5
00003a  e002              B        |L6.66|
                  |L6.60|
;;;219    	*outptr++ = invalue;
00003c  f8003b01          STRB     r3,[r0],#1
000040  1e49              SUBS     r1,r1,#1
                  |L6.66|
000042  2900              CMP      r1,#0                 ;218
000044  dcfa              BGT      |L6.60|
                  |L6.70|
000046  4560              CMP      r0,r12                ;216
000048  d3f4              BCC      |L6.52|
;;;220          }
;;;221        }
;;;222        /* Generate any additional output rows by duplicating the first one */
;;;223        if (v_expand > 1) {
00004a  f1b80f01          CMP      r8,#1
00004e  dd0a              BLE      |L6.102|
;;;224          jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
000050  6f31              LDR      r1,[r6,#0x70]
000052  f1a80001          SUB      r0,r8,#1
000056  e9cd0100          STRD     r0,r1,[sp,#0]
00005a  464a              MOV      r2,r9
00005c  1c63              ADDS     r3,r4,#1
00005e  4621              MOV      r1,r4
000060  4610              MOV      r0,r2
000062  f7fffffe          BL       jcopy_sample_rows
                  |L6.102|
;;;225    			v_expand-1, cinfo->output_width);
;;;226        }
;;;227        inrow++;
;;;228        outrow += v_expand;
000066  4444              ADD      r4,r4,r8
000068  1c7f              ADDS     r7,r7,#1
                  |L6.106|
00006a  f8d60138          LDR      r0,[r6,#0x138]        ;211
00006e  42a0              CMP      r0,r4                 ;211
000070  dcd8              BGT      |L6.36|
;;;229      }
;;;230    }
000072  e8bd87fc          POP      {r2-r10,pc}
;;;231    
                          ENDP


                          AREA ||i.jinit_upsampler||, CODE, READONLY, ALIGN=2

                  jinit_upsampler PROC
;;;406    GLOBAL(void)
;;;407    jinit_upsampler (j_decompress_ptr cinfo)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;408    {
000004  4604              MOV      r4,r0
;;;409      my_upsample_ptr upsample;
;;;410      int ci;
;;;411      jpeg_component_info * compptr;
;;;412      boolean need_buffer, do_fancy;
;;;413      int h_in_group, v_in_group, h_out_group, v_out_group;
;;;414    
;;;415      upsample = (my_upsample_ptr)
000006  6840              LDR      r0,[r0,#4]
000008  224c              MOVS     r2,#0x4c
00000a  2101              MOVS     r1,#1
00000c  6803              LDR      r3,[r0,#0]
00000e  4620              MOV      r0,r4
000010  4798              BLX      r3
;;;416        (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;417    				SIZEOF(my_upsampler));
;;;418      cinfo->upsample = (struct jpeg_upsampler *) upsample;
;;;419      upsample->pub.start_pass = start_pass_upsample;
000012  494f              LDR      r1,|L7.336|
000014  f8c401c4          STR      r0,[r4,#0x1c4]
;;;420      upsample->pub.upsample = sep_upsample;
000018  6001              STR      r1,[r0,#0]
00001a  494e              LDR      r1,|L7.340|
;;;421      upsample->pub.need_context_rows = FALSE; /* until we find out differently */
00001c  6041              STR      r1,[r0,#4]
00001e  2100              MOVS     r1,#0
000020  4606              MOV      r6,r0                 ;415
;;;422    
;;;423      if (cinfo->CCIR601_sampling)	/* this isn't supported */
000022  6081              STR      r1,[r0,#8]
000024  f8d4012c          LDR      r0,[r4,#0x12c]
000028  b130              CBZ      r0,|L7.56|
;;;424        ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
00002a  6820              LDR      r0,[r4,#0]
00002c  2119              MOVS     r1,#0x19
00002e  6141              STR      r1,[r0,#0x14]
000030  6820              LDR      r0,[r4,#0]
000032  6801              LDR      r1,[r0,#0]
000034  4620              MOV      r0,r4
000036  4788              BLX      r1
                  |L7.56|
;;;425    
;;;426      /* jdmainct.c doesn't support context rows when min_DCT_scaled_size = 1,
;;;427       * so don't ask for it.
;;;428       */
;;;429      do_fancy = cinfo->do_fancy_upsampling && cinfo->min_DCT_scaled_size > 1;
000038  6ce0              LDR      r0,[r4,#0x4c]
00003a  b128              CBZ      r0,|L7.72|
00003c  f8d4013c          LDR      r0,[r4,#0x13c]
000040  2801              CMP      r0,#1
000042  dd01              BLE      |L7.72|
000044  2001              MOVS     r0,#1
000046  e000              B        |L7.74|
                  |L7.72|
000048  2000              MOVS     r0,#0
                  |L7.74|
00004a  4682              MOV      r10,r0
;;;430    
;;;431      /* Verify we can handle the sampling factors, select per-component methods,
;;;432       * and create storage as needed.
;;;433       */
;;;434      for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
00004c  2700              MOVS     r7,#0
00004e  f8d450d8          LDR      r5,[r4,#0xd8]
000052  e06b              B        |L7.300|
                  |L7.84|
;;;435           ci++, compptr++) {
;;;436        /* Compute size of an "input group" after IDCT scaling.  This many samples
;;;437         * are to be converted to max_h_samp_factor * max_v_samp_factor pixels.
;;;438         */
;;;439        h_in_group = (compptr->h_samp_factor * compptr->DCT_scaled_size) /
000054  6a69              LDR      r1,[r5,#0x24]
000056  68aa              LDR      r2,[r5,#8]
000058  f8d4013c          LDR      r0,[r4,#0x13c]
00005c  434a              MULS     r2,r1,r2
00005e  fb92f2f0          SDIV     r2,r2,r0
;;;440    		 cinfo->min_DCT_scaled_size;
;;;441        v_in_group = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
000062  68eb              LDR      r3,[r5,#0xc]
;;;442    		 cinfo->min_DCT_scaled_size;
;;;443        h_out_group = cinfo->max_h_samp_factor;
;;;444        v_out_group = cinfo->max_v_samp_factor;
;;;445        upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
000064  eb060987          ADD      r9,r6,r7,LSL #2
000068  434b              MULS     r3,r1,r3              ;441
00006a  fb93f0f0          SDIV     r0,r3,r0              ;441
00006e  e9d4134d          LDRD     r1,r3,[r4,#0x134]
;;;446        need_buffer = TRUE;
;;;447        if (! compptr->component_needed) {
000072  f8c90034          STR      r0,[r9,#0x34]
000076  f8d5c030          LDR      r12,[r5,#0x30]
00007a  f1bc0f00          CMP      r12,#0
00007e  d007              BEQ      |L7.144|
;;;448          /* Don't bother to upsample an uninteresting component. */
;;;449          upsample->methods[ci] = noop_upsample;
;;;450          need_buffer = FALSE;
;;;451        } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
000080  428a              CMP      r2,r1
000082  d107              BNE      |L7.148|
000084  4298              CMP      r0,r3
000086  d105              BNE      |L7.148|
;;;452          /* Fullsize components can be processed without any work. */
;;;453          upsample->methods[ci] = fullsize_upsample;
000088  4933              LDR      r1,|L7.344|
                  |L7.138|
00008a  f8c9101c          STR      r1,[r9,#0x1c]
00008e  e04b              B        |L7.296|
                  |L7.144|
000090  4932              LDR      r1,|L7.348|
000092  e7fa              B        |L7.138|
                  |L7.148|
;;;454          need_buffer = FALSE;
;;;455        } else if (h_in_group * 2 == h_out_group &&
000094  ebb10f42          CMP      r1,r2,LSL #1
000098  d10b              BNE      |L7.178|
;;;456    	       v_in_group == v_out_group) {
00009a  4298              CMP      r0,r3
00009c  d109              BNE      |L7.178|
;;;457          /* Special cases for 2h1v upsampling */
;;;458          if (do_fancy && compptr->downsampled_width > 2)
00009e  f1ba0f00          CMP      r10,#0
0000a2  d004              BEQ      |L7.174|
0000a4  6aa8              LDR      r0,[r5,#0x28]
0000a6  2802              CMP      r0,#2
0000a8  d901              BLS      |L7.174|
;;;459    	upsample->methods[ci] = h2v1_fancy_upsample;
0000aa  492d              LDR      r1,|L7.352|
0000ac  e014              B        |L7.216|
                  |L7.174|
;;;460          else
;;;461    	upsample->methods[ci] = h2v1_upsample;
0000ae  492d              LDR      r1,|L7.356|
0000b0  e012              B        |L7.216|
                  |L7.178|
;;;462        } else if (h_in_group * 2 == h_out_group &&
0000b2  ebb10f42          CMP      r1,r2,LSL #1
0000b6  d112              BNE      |L7.222|
;;;463    	       v_in_group * 2 == v_out_group) {
0000b8  ebb30f40          CMP      r3,r0,LSL #1
0000bc  d10f              BNE      |L7.222|
;;;464          /* Special cases for 2h2v upsampling */
;;;465          if (do_fancy && compptr->downsampled_width > 2) {
0000be  f1ba0f00          CMP      r10,#0
0000c2  d008              BEQ      |L7.214|
0000c4  6aa8              LDR      r0,[r5,#0x28]
0000c6  2802              CMP      r0,#2
0000c8  d905              BLS      |L7.214|
;;;466    	upsample->methods[ci] = h2v2_fancy_upsample;
0000ca  4927              LDR      r1,|L7.360|
;;;467    	upsample->pub.need_context_rows = TRUE;
0000cc  2001              MOVS     r0,#1
0000ce  f8c9101c          STR      r1,[r9,#0x1c]
0000d2  60b0              STR      r0,[r6,#8]
0000d4  e018              B        |L7.264|
                  |L7.214|
;;;468          } else
;;;469    	upsample->methods[ci] = h2v2_upsample;
0000d6  4925              LDR      r1,|L7.364|
                  |L7.216|
0000d8  f8c9101c          STR      r1,[r9,#0x1c]
0000dc  e014              B        |L7.264|
                  |L7.222|
;;;470        } else if ((h_out_group % h_in_group) == 0 &&
0000de  fb91fcf2          SDIV     r12,r1,r2
0000e2  fb021c1c          MLS      r12,r2,r12,r1
0000e6  f1bc0f00          CMP      r12,#0
0000ea  d106              BNE      |L7.250|
;;;471    	       (v_out_group % v_in_group) == 0) {
0000ec  fb93fcf0          SDIV     r12,r3,r0
0000f0  fb003c1c          MLS      r12,r0,r12,r3
0000f4  f1bc0f00          CMP      r12,#0
0000f8  d01d              BEQ      |L7.310|
                  |L7.250|
;;;472          /* Generic integral-factors upsampling method */
;;;473          upsample->methods[ci] = int_upsample;
;;;474          upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
;;;475          upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
;;;476        } else
;;;477          ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
0000fa  6821              LDR      r1,[r4,#0]
0000fc  2026              MOVS     r0,#0x26
0000fe  6148              STR      r0,[r1,#0x14]
000100  6820              LDR      r0,[r4,#0]
000102  6801              LDR      r1,[r0,#0]
000104  4620              MOV      r0,r4
000106  4788              BLX      r1
                  |L7.264|
;;;478        if (need_buffer) {
;;;479          upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
000108  f8d41134          LDR      r1,[r4,#0x134]
00010c  6f20              LDR      r0,[r4,#0x70]
00010e  f7fffffe          BL       jround_up
000112  4602              MOV      r2,r0
000114  6860              LDR      r0,[r4,#4]
000116  f8d43138          LDR      r3,[r4,#0x138]
00011a  2101              MOVS     r1,#1
00011c  f8d0c008          LDR      r12,[r0,#8]
000120  4620              MOV      r0,r4
000122  47e0              BLX      r12
000124  f8c9000c          STR      r0,[r9,#0xc]
                  |L7.296|
000128  3554              ADDS     r5,r5,#0x54
00012a  1c7f              ADDS     r7,r7,#1
                  |L7.300|
00012c  6a60              LDR      r0,[r4,#0x24]         ;434
00012e  42b8              CMP      r0,r7                 ;434
000130  dc90              BGT      |L7.84|
;;;480    	((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;481    	 (JDIMENSION) jround_up((long) cinfo->output_width,
;;;482    				(long) cinfo->max_h_samp_factor),
;;;483    	 (JDIMENSION) cinfo->max_v_samp_factor);
;;;484        }
;;;485      }
;;;486    }
000132  e8bd87f0          POP      {r4-r10,pc}
                  |L7.310|
000136  fb91f2f2          SDIV     r2,r1,r2              ;474
00013a  fb93f0f0          SDIV     r0,r3,r0              ;475
00013e  f8df8030          LDR      r8,|L7.368|
000142  19f1              ADDS     r1,r6,r7              ;474
000144  f8c9801c          STR      r8,[r9,#0x1c]         ;474
000148  f8012f44          STRB     r2,[r1,#0x44]!        ;474
00014c  7108              STRB     r0,[r1,#4]            ;475
00014e  e7db              B        |L7.264|
                          ENDP

                  |L7.336|
                          DCD      start_pass_upsample
                  |L7.340|
                          DCD      sep_upsample
                  |L7.344|
                          DCD      fullsize_upsample
                  |L7.348|
                          DCD      noop_upsample
                  |L7.352|
                          DCD      h2v1_fancy_upsample
                  |L7.356|
                          DCD      h2v1_upsample
                  |L7.360|
                          DCD      h2v2_fancy_upsample
                  |L7.364|
                          DCD      h2v2_upsample
                  |L7.368|
                          DCD      int_upsample

                          AREA ||i.noop_upsample||, CODE, READONLY, ALIGN=1

                  noop_upsample PROC
;;;172    METHODDEF(void)
;;;173    noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
000000  2000              MOVS     r0,#0
;;;174    	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
;;;175    {
;;;176      GUI_USE_PARA(cinfo);
;;;177      GUI_USE_PARA(compptr);
;;;178      GUI_USE_PARA(input_data);
;;;179      *output_data_ptr = NULL;	/* safety check */
000002  6018              STR      r0,[r3,#0]
;;;180    }
000004  4770              BX       lr
;;;181    
                          ENDP


                          AREA ||i.sep_upsample||, CODE, READONLY, ALIGN=1

                  sep_upsample PROC
;;;88     METHODDEF(void)
;;;89     sep_upsample (j_decompress_ptr cinfo,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;90     	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
;;;91     	      JDIMENSION in_row_groups_avail,
;;;92     	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
;;;93     	      JDIMENSION out_rows_avail)
;;;94     {
;;;95       my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
;;;96       int ci;
;;;97       jpeg_component_info * compptr;
;;;98       JDIMENSION num_rows;
;;;99     
;;;100      GUI_USE_PARA(in_row_groups_avail);
;;;101      /* Fill the conversion buffer, if it's empty */
;;;102      if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
000004  f8d051c4          LDR      r5,[r0,#0x1c4]
000008  468a              MOV      r10,r1                ;94
00000a  4606              MOV      r6,r0                 ;94
00000c  e9dd9b0b          LDRD     r9,r11,[sp,#0x2c]     ;94
000010  6ae9              LDR      r1,[r5,#0x2c]
000012  f8d00138          LDR      r0,[r0,#0x138]
000016  4690              MOV      r8,r2                 ;94
000018  4281              CMP      r1,r0
00001a  db1b              BLT      |L9.84|
;;;103        for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
00001c  2400              MOVS     r4,#0
00001e  f8d670d8          LDR      r7,[r6,#0xd8]
000022  e012              B        |L9.74|
                  |L9.36|
;;;104    	 ci++, compptr++) {
;;;105          /* Invoke per-component upsample method.  Notice we pass a POINTER
;;;106           * to color_buf[ci], so that fullsize_upsample can change it.
;;;107           */
;;;108          (*upsample->methods[ci]) (cinfo, compptr,
000024  eb050084          ADD      r0,r5,r4,LSL #2
000028  f8d81000          LDR      r1,[r8,#0]
00002c  6b42              LDR      r2,[r0,#0x34]
00002e  f100030c          ADD      r3,r0,#0xc
000032  4351              MULS     r1,r2,r1
000034  f85a2024          LDR      r2,[r10,r4,LSL #2]
000038  f8d0c01c          LDR      r12,[r0,#0x1c]
00003c  eb020281          ADD      r2,r2,r1,LSL #2
000040  4639              MOV      r1,r7
000042  4630              MOV      r0,r6
000044  47e0              BLX      r12
000046  1c64              ADDS     r4,r4,#1
000048  3754              ADDS     r7,r7,#0x54
                  |L9.74|
00004a  6a70              LDR      r0,[r6,#0x24]         ;103
00004c  42a0              CMP      r0,r4                 ;103
00004e  dce9              BGT      |L9.36|
;;;109    	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
;;;110    	upsample->color_buf + ci);
;;;111        }
;;;112        upsample->next_row_out = 0;
000050  2000              MOVS     r0,#0
000052  62e8              STR      r0,[r5,#0x2c]
                  |L9.84|
;;;113      }
;;;114    
;;;115      /* Color-convert and emit rows */
;;;116    
;;;117      /* How many we have in the buffer: */
;;;118      num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
000054  f8d60138          LDR      r0,[r6,#0x138]
000058  6aea              LDR      r2,[r5,#0x2c]
00005a  1a84              SUBS     r4,r0,r2
;;;119      /* Not more than the distance to the end of the image.  Need this test
;;;120       * in case the image height is not a multiple of max_v_samp_factor:
;;;121       */
;;;122      if (num_rows > upsample->rows_to_go) 
00005c  6b28              LDR      r0,[r5,#0x30]
00005e  42a0              CMP      r0,r4
000060  d200              BCS      |L9.100|
;;;123        num_rows = upsample->rows_to_go;
000062  4604              MOV      r4,r0
                  |L9.100|
;;;124      /* And not more than what the client can accept: */
;;;125      out_rows_avail -= *out_row_ctr;
000064  f8d91000          LDR      r1,[r9,#0]
000068  ebab0001          SUB      r0,r11,r1
;;;126      if (num_rows > out_rows_avail)
00006c  4284              CMP      r4,r0
00006e  d900              BLS      |L9.114|
;;;127        num_rows = out_rows_avail;
000070  4604              MOV      r4,r0
                  |L9.114|
;;;128    
;;;129      (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
000072  9400              STR      r4,[sp,#0]
000074  980a              LDR      r0,[sp,#0x28]
000076  eb000381          ADD      r3,r0,r1,LSL #2
00007a  f8d601c8          LDR      r0,[r6,#0x1c8]
00007e  f105010c          ADD      r1,r5,#0xc
000082  6847              LDR      r7,[r0,#4]
000084  4630              MOV      r0,r6
000086  47b8              BLX      r7
;;;130    				     (JDIMENSION) upsample->next_row_out,
;;;131    				     output_buf + *out_row_ctr,
;;;132    				     (int) num_rows);
;;;133    
;;;134      /* Adjust counts */
;;;135      *out_row_ctr += num_rows;
000088  f8d90000          LDR      r0,[r9,#0]
00008c  1901              ADDS     r1,r0,r4
;;;136      upsample->rows_to_go -= num_rows;
00008e  f8c91000          STR      r1,[r9,#0]
000092  6b28              LDR      r0,[r5,#0x30]
000094  1b00              SUBS     r0,r0,r4
;;;137      upsample->next_row_out += num_rows;
000096  6328              STR      r0,[r5,#0x30]
000098  6ae8              LDR      r0,[r5,#0x2c]
00009a  4420              ADD      r0,r0,r4
;;;138      /* When the buffer is emptied, declare this input row group consumed */
;;;139      if (upsample->next_row_out >= cinfo->max_v_samp_factor)
00009c  62e8              STR      r0,[r5,#0x2c]
00009e  f8d61138          LDR      r1,[r6,#0x138]
0000a2  4288              CMP      r0,r1
0000a4  db04              BLT      |L9.176|
;;;140        (*in_row_group_ctr)++;
0000a6  f8d80000          LDR      r0,[r8,#0]
0000aa  1c40              ADDS     r0,r0,#1
0000ac  f8c80000          STR      r0,[r8,#0]
                  |L9.176|
;;;141    }
0000b0  e8bd8ff8          POP      {r3-r11,pc}
;;;142    
                          ENDP


                          AREA ||i.start_pass_upsample||, CODE, READONLY, ALIGN=1

                  start_pass_upsample PROC
;;;68     METHODDEF(void)
;;;69     start_pass_upsample (j_decompress_ptr cinfo)
000000  f8d011c4          LDR      r1,[r0,#0x1c4]
;;;70     {
;;;71       my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
;;;72     
;;;73       /* Mark the conversion buffer empty */
;;;74       upsample->next_row_out = cinfo->max_v_samp_factor;
000004  f8d02138          LDR      r2,[r0,#0x138]
;;;75       /* Initialize total-height counter for detecting bottom of image */
;;;76       upsample->rows_to_go = cinfo->output_height;
000008  62ca              STR      r2,[r1,#0x2c]
00000a  6f40              LDR      r0,[r0,#0x74]
00000c  6308              STR      r0,[r1,#0x30]
;;;77     }
00000e  4770              BX       lr
;;;78     
                          ENDP

