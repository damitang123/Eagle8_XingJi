; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\wm_getwindowsize.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\wm_getwindowsize.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\WM\WM_GetWindowSize.c]
                          THUMB

                          AREA ||i.WM_GetWindowSizeX||, CODE, READONLY, ALIGN=1

                  WM_GetWindowSizeX PROC
;;;79     */
;;;80     int WM_GetWindowSizeX(WM_HWIN hWin) {
000000  b510              PUSH     {r4,lr}
;;;81       int r;
;;;82       WM_Obj* pWin;
;;;83       WM_LOCK();
;;;84       hWin = _GetDefaultWin(hWin);
000002  f7fffffe          BL       _GetDefaultWin
;;;85       pWin = WM_H2P(hWin);
000006  f7fffffe          BL       GUI_ALLOC_h2p
;;;86       r = WM__GetWindowSizeX(pWin);
00000a  f9b01004          LDRSH    r1,[r0,#4]
00000e  f9b00000          LDRSH    r0,[r0,#0]
000012  1a08              SUBS     r0,r1,r0
000014  1c40              ADDS     r0,r0,#1
;;;87       WM_UNLOCK();
;;;88       return r;
;;;89     }
000016  bd10              POP      {r4,pc}
;;;90     
                          ENDP


                          AREA ||i.WM_GetWindowSizeY||, CODE, READONLY, ALIGN=1

                  WM_GetWindowSizeY PROC
;;;96     */
;;;97     int WM_GetWindowSizeY(WM_HWIN hWin) {
000000  b510              PUSH     {r4,lr}
;;;98       int r;
;;;99       WM_Obj* pWin;
;;;100      WM_LOCK();
;;;101      hWin = _GetDefaultWin(hWin);
000002  f7fffffe          BL       _GetDefaultWin
;;;102      pWin = WM_H2P(hWin);
000006  f7fffffe          BL       GUI_ALLOC_h2p
;;;103      r = WM__GetWindowSizeY(pWin);
00000a  f9b01006          LDRSH    r1,[r0,#6]
00000e  f9b00002          LDRSH    r0,[r0,#2]
000012  1a08              SUBS     r0,r1,r0
000014  1c40              ADDS     r0,r0,#1
;;;104      WM_UNLOCK();
;;;105      return r;
;;;106    }
000016  bd10              POP      {r4,pc}
;;;107    
                          ENDP


                          AREA ||i.WM__GetWindowSizeX||, CODE, READONLY, ALIGN=1

                  WM__GetWindowSizeX PROC
;;;53     */
;;;54     int WM__GetWindowSizeX(const WM_Obj* pWin) {
000000  f9b01004          LDRSH    r1,[r0,#4]
;;;55       return pWin->Rect.x1 - pWin->Rect.x0 +1;
000004  f9b00000          LDRSH    r0,[r0,#0]
000008  1a08              SUBS     r0,r1,r0
00000a  1c40              ADDS     r0,r0,#1
;;;56     }
00000c  4770              BX       lr
;;;57     
                          ENDP


                          AREA ||i.WM__GetWindowSizeY||, CODE, READONLY, ALIGN=1

                  WM__GetWindowSizeY PROC
;;;63     */
;;;64     int WM__GetWindowSizeY(const WM_Obj* pWin) {
000000  f9b01006          LDRSH    r1,[r0,#6]
;;;65       return pWin->Rect.y1 - pWin->Rect.y0 +1;
000004  f9b00002          LDRSH    r0,[r0,#2]
000008  1a08              SUBS     r0,r1,r0
00000a  1c40              ADDS     r0,r0,#1
;;;66     }
00000c  4770              BX       lr
;;;67     
                          ENDP


                          AREA ||i._GetDefaultWin||, CODE, READONLY, ALIGN=1

                  _GetDefaultWin PROC
;;;35     */
;;;36     static WM_HWIN _GetDefaultWin(WM_HWIN hWin) {
000000  2800              CMP      r0,#0
000002  d101              BNE      |L5.8|
;;;37       if (!hWin)
;;;38         hWin = WM_GetActiveWindow();
000004  f7ffbffe          B.W      WM_GetActiveWindow
                  |L5.8|
;;;39       return hWin;
;;;40     }
000008  4770              BX       lr
;;;41     
                          ENDP

