; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\customdisplaydriver.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\customdisplaydriver.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\LCDDriver\CustomDisplayDriver.c]
                          THUMB

                          AREA ||i.Get_Pwm_Timer_Period||, CODE, READONLY, ALIGN=2

                  Get_Pwm_Timer_Period PROC
;;;51     
;;;52     static unsigned short Get_Pwm_Timer_Period(void)
000000  b510              PUSH     {r4,lr}
;;;53     {
;;;54     	return ((Get_System_Clk_Frequency())  /
000002  f7fffffe          BL       Get_System_Clk_Frequency
000006  4902              LDR      r1,|L1.16|
000008  fbb0f0f1          UDIV     r0,r0,r1
00000c  b280              UXTH     r0,r0
;;;55     			(LCD_PWM_PRESCALER * LCD_PWM_FREQUENCY));
;;;56     }
00000e  bd10              POP      {r4,pc}
;;;57     
                          ENDP

                  |L1.16|
                          DCD      0x000186a0

                          AREA ||i.LCD_Display_Off||, CODE, READONLY, ALIGN=2

                  LCD_Display_Off PROC
;;;36     
;;;37     void LCD_Display_Off(void)
000000  b538              PUSH     {r3-r5,lr}
;;;38     {
;;;39     	GPIO_InitTypeDef GPIO_InitStructure;
;;;40     
;;;41     	TIM_Cmd(TIM4, DISABLE);
000002  2100              MOVS     r1,#0
000004  480a              LDR      r0,|L2.48|
000006  f7fffffe          BL       TIM_Cmd
;;;42     	
;;;43     	/*PWM*/
;;;44     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
00000a  f44f5480          MOV      r4,#0x1000
00000e  f8ad4000          STRH     r4,[sp,#0]
;;;45     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000012  2010              MOVS     r0,#0x10
000014  f88d0003          STRB     r0,[sp,#3]
;;;46     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000018  2003              MOVS     r0,#3
00001a  f88d0002          STRB     r0,[sp,#2]
;;;47     	GPIO_Init(GPIOD, &GPIO_InitStructure);
00001e  4669              MOV      r1,sp
000020  4804              LDR      r0,|L2.52|
000022  f7fffffe          BL       GPIO_Init
;;;48     
;;;49     	GPIOD->BRR=GPIO_Pin_12;
000026  4803              LDR      r0,|L2.52|
000028  3014              ADDS     r0,r0,#0x14
00002a  6004              STR      r4,[r0,#0]
;;;50     }
00002c  bd38              POP      {r3-r5,pc}
;;;51     
                          ENDP

00002e  0000              DCW      0x0000
                  |L2.48|
                          DCD      0x40000800
                  |L2.52|
                          DCD      0x40011400

                          AREA ||i.LCD_Display_On||, CODE, READONLY, ALIGN=2

                  LCD_Display_On PROC
;;;24     
;;;25     void LCD_Display_On(void)
000000  b508              PUSH     {r3,lr}
;;;26     {
;;;27     	GPIO_InitTypeDef GPIO_InitStructure;
;;;28     	/*PWM*/
;;;29     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
000002  f44f5080          MOV      r0,#0x1000
000006  f8ad0000          STRH     r0,[sp,#0]
;;;30     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00000a  2018              MOVS     r0,#0x18
00000c  f88d0003          STRB     r0,[sp,#3]
;;;31     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000010  2003              MOVS     r0,#3
000012  f88d0002          STRB     r0,[sp,#2]
;;;32     	GPIO_Init(GPIOD, &GPIO_InitStructure);
000016  4669              MOV      r1,sp
000018  4803              LDR      r0,|L3.40|
00001a  f7fffffe          BL       GPIO_Init
;;;33     
;;;34     	TIM_Cmd(TIM4, ENABLE);
00001e  2101              MOVS     r1,#1
000020  4802              LDR      r0,|L3.44|
000022  f7fffffe          BL       TIM_Cmd
;;;35     }
000026  bd08              POP      {r3,pc}
;;;36     
                          ENDP

                  |L3.40|
                          DCD      0x40011400
                  |L3.44|
                          DCD      0x40000800

                          AREA ||i.LCD_Driver_Init||, CODE, READONLY, ALIGN=2

                  LCD_Driver_Init PROC
;;;234    ********************************************************************/
;;;235    void LCD_Driver_Init(void)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;236    {
;;;237    	GPIO_InitTypeDef GPIO_InitStructure;
;;;238    
;;;239    	/*LCD Reset*/
;;;240    	GPIO_InitStructure.GPIO_Pin = LCD_RST_PIN;
000004  2008              MOVS     r0,#8
000006  f8ad0000          STRH     r0,[sp,#0]
;;;241    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
00000a  2010              MOVS     r0,#0x10
00000c  f88d0003          STRB     r0,[sp,#3]
;;;242    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
;;;243    	GPIO_Init(LCD_RST_PORT, &GPIO_InitStructure);
000010  4c6e              LDR      r4,|L4.460|
000012  2501              MOVS     r5,#1                 ;242
000014  f88d5002          STRB     r5,[sp,#2]            ;242
000018  4669              MOV      r1,sp
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       GPIO_Init
;;;244    
;;;245    	LCD_FSMCConfig();
000020  f7fffffe          BL       LCD_FSMCConfig
;;;246    	Lcd_Back_Light_Pwm_Init();
000024  f7fffffe          BL       Lcd_Back_Light_Pwm_Init
;;;247    
;;;248    	delay_ms(100);
000028  2064              MOVS     r0,#0x64
00002a  f7fffffe          BL       delay_ms
;;;249    
;;;250    #if LCD_DRIVER_HX8347_D
;;;251    	/* Reset LCD */
;;;252    	GPIO_ResetBits(LCD_RST_PORT, LCD_RST_PIN);
;;;253    	delay_ms(100); /* delay 100 ms */
;;;254    	GPIO_SetBits(LCD_RST_PORT, LCD_RST_PIN);
;;;255    	delay_ms(100);
;;;256    	
;;;257    	#define DelayMs(x) delay_ms(x)
;;;258    	
;;;259    	// Driving ability setting
;;;260    	LCD_WriteReg(0xEA,0x00);	 
;;;261    	LCD_WriteReg(0xEB,0x20);	 
;;;262    	LCD_WriteReg(0xEC,0x0C);	 
;;;263    	LCD_WriteReg(0xED,0xC4);	 
;;;264    	LCD_WriteReg(0xE8,0x40);	 
;;;265    	LCD_WriteReg(0xE9,0x38);	 
;;;266    	LCD_WriteReg(0xF1,0x01);	 
;;;267    	LCD_WriteReg(0xF2,0x10);	 
;;;268    	LCD_WriteReg(0x27,0xA3);	 
;;;269    
;;;270    	LCD_WriteReg(0x2E,0x007F);
;;;271    	LCD_WriteReg(0xEA,0x0000);
;;;272    	LCD_WriteReg(0xEB,0x0020);
;;;273    	LCD_WriteReg(0xEC,0x003C);
;;;274    	LCD_WriteReg(0xED,0x00C4);
;;;275    	LCD_WriteReg(0xE8,0x0040);
;;;276    	LCD_WriteReg(0xE9,0x0038);
;;;277    	LCD_WriteReg(0xF1,0x0001);
;;;278    	LCD_WriteReg(0xF2,0x0008);
;;;279    
;;;280    	//Gamma 2.2 Setting
;;;281    	LCD_WriteReg(0x40,0x0001);
;;;282    	LCD_WriteReg(0x41,0x001F);
;;;283    	LCD_WriteReg(0x42,0x0025);
;;;284    	LCD_WriteReg(0x43,0x002C);
;;;285    	LCD_WriteReg(0x44,0x001E);
;;;286    	LCD_WriteReg(0x45,0x0026);
;;;287    	LCD_WriteReg(0x46,0x0005);
;;;288    	LCD_WriteReg(0x47,0x0070);
;;;289    	LCD_WriteReg(0x48,0x0006);
;;;290    	LCD_WriteReg(0x49,0x0014);
;;;291    	LCD_WriteReg(0x4A,0x0019);
;;;292    	LCD_WriteReg(0x4B,0x001A);
;;;293    	LCD_WriteReg(0x4C,0x0017);
;;;294    	LCD_WriteReg(0x50,0x0019);
;;;295    	LCD_WriteReg(0x51,0x0021);
;;;296    	LCD_WriteReg(0x52,0x001D);
;;;297    	LCD_WriteReg(0x53,0x001A);
;;;298    	LCD_WriteReg(0x54,0x0020);
;;;299    	LCD_WriteReg(0x55,0x003E);
;;;300    	LCD_WriteReg(0x56,0x000A);
;;;301    	LCD_WriteReg(0x57,0x004A);
;;;302    	LCD_WriteReg(0x58,0x0008);
;;;303    	LCD_WriteReg(0x59,0x0005);
;;;304    	LCD_WriteReg(0x5A,0x0006);
;;;305    	LCD_WriteReg(0x5B,0x000B);
;;;306    	LCD_WriteReg(0x5C,0x0019);
;;;307    	LCD_WriteReg(0x5D,0x00CC);
;;;308    	//Power Voltage Setting
;;;309    	LCD_WriteReg(0x1B,0x001B);
;;;310    	LCD_WriteReg(0x1A,0x0005);
;;;311    	LCD_WriteReg(0x24,0x0070);
;;;312    	LCD_WriteReg(0x25,0x0058);
;;;313    	//****VCOM offset**///
;;;314    
;;;315    	LCD_WriteReg(0x16,0x88); ////#2 ÐÞ¸Ä¾µÏñ·½Ïò
;;;316    
;;;317    	LCD_WriteReg(0x23,0x0068);//0x0080
;;;318    	//Power on Setting
;;;319    	LCD_WriteReg(0x18,0x003C);//0x0036
;;;320    	LCD_WriteReg(0x19,0x0001);
;;;321    	LCD_WriteReg(0x01,0x0000);
;;;322    	LCD_WriteReg(0x1F,0x0088);
;;;323    	DelayMs(5);
;;;324    	LCD_WriteReg(0x1F,0x0080);
;;;325    	DelayMs(5);
;;;326    	LCD_WriteReg(0x1F,0x0090);
;;;327    	DelayMs(5);
;;;328    	LCD_WriteReg(0x1F,0x00D0);
;;;329    	DelayMs(5);
;;;330    	//262k/65k color selection
;;;331    	LCD_WriteReg(0x17,0x0005);
;;;332    	//SET PANEL
;;;333    	LCD_WriteReg(0x36,0x0000);
;;;334    	//Display ON Setting
;;;335    	LCD_WriteReg(0x28,0x0038);
;;;336    	delay_ms(40);
;;;337    	LCD_WriteReg(0x28,0x003C);
;;;338    	//Set GRAM Area
;;;339    	LCD_WriteReg(0x02,0x0000);
;;;340    	LCD_WriteReg(0x03,0x0000);
;;;341    	LCD_WriteReg(0x04,0x0000);
;;;342    	LCD_WriteReg(0x05,0x00EF);
;;;343    	LCD_WriteReg(0x06,0x0000);
;;;344    	LCD_WriteReg(0x07,0x0000);
;;;345    	LCD_WriteReg(0x08,0x0001);
;;;346    	LCD_WriteReg(0x09,0x003F);
;;;347    	
;;;348    #elif LCD_DRIVER_ILI9341
;;;349    
;;;350    	#define delayms(x)				delay_ms(x)
;;;351    	#define LCD_ILI9341_CMD(x) 		LCD->LCD_REG = x
;;;352    	#define LCD_ILI9341_INDEX(x)	LCD->LCD_RAM = x
;;;353    
;;;354    	GPIO_ResetBits(LCD_RST_PORT, LCD_RST_PIN);
00002e  2108              MOVS     r1,#8
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       GPIO_ResetBits
;;;355    	delayms(100);
000036  2064              MOVS     r0,#0x64
000038  f7fffffe          BL       delay_ms
;;;356    	GPIO_SetBits(LCD_RST_PORT, LCD_RST_PIN);
00003c  2108              MOVS     r1,#8
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       GPIO_SetBits
;;;357    	delayms(100);
000044  2064              MOVS     r0,#0x64
000046  f7fffffe          BL       delay_ms
;;;358    
;;;359    	LCD_ILI9341_CMD(0xCF);  
00004a  4c61              LDR      r4,|L4.464|
00004c  20cf              MOVS     r0,#0xcf
00004e  8020              STRH     r0,[r4,#0]
;;;360    	LCD_ILI9341_INDEX(0x00);   
000050  2100              MOVS     r1,#0
000052  1ca0              ADDS     r0,r4,#2
000054  8001              STRH     r1,[r0,#0]
;;;361    	LCD_ILI9341_INDEX(0xC1);
000056  23c1              MOVS     r3,#0xc1
000058  8003              STRH     r3,[r0,#0]
;;;362    	LCD_ILI9341_INDEX(0x30);
00005a  f04f0930          MOV      r9,#0x30
00005e  f8a09000          STRH     r9,[r0,#0]
;;;363    
;;;364    	LCD_ILI9341_CMD(0xED);  
000062  21ed              MOVS     r1,#0xed
000064  8021              STRH     r1,[r4,#0]
;;;365    	LCD_ILI9341_INDEX(0x64);   
000066  2164              MOVS     r1,#0x64
000068  8001              STRH     r1,[r0,#0]
;;;366    	LCD_ILI9341_INDEX(0x03);
00006a  2603              MOVS     r6,#3
00006c  8006              STRH     r6,[r0,#0]
;;;367    	LCD_ILI9341_INDEX(0x12);
00006e  2112              MOVS     r1,#0x12
000070  8001              STRH     r1,[r0,#0]
;;;368    	LCD_ILI9341_INDEX(0x81);
000072  2281              MOVS     r2,#0x81
000074  8002              STRH     r2,[r0,#0]
;;;369    
;;;370    	LCD_ILI9341_CMD(0xE8);  
000076  22e8              MOVS     r2,#0xe8
000078  8022              STRH     r2,[r4,#0]
;;;371    	LCD_ILI9341_INDEX(0x85);   
00007a  2285              MOVS     r2,#0x85
00007c  8002              STRH     r2,[r0,#0]
;;;372    	LCD_ILI9341_INDEX(0x00);
00007e  2200              MOVS     r2,#0
000080  8002              STRH     r2,[r0,#0]
;;;373    	LCD_ILI9341_INDEX(0x7A);
000082  227a              MOVS     r2,#0x7a
000084  8002              STRH     r2,[r0,#0]
;;;374    
;;;375    	LCD_ILI9341_CMD(0xCB);  
000086  22cb              MOVS     r2,#0xcb
000088  8022              STRH     r2,[r4,#0]
;;;376    	LCD_ILI9341_INDEX(0x39);   
00008a  2239              MOVS     r2,#0x39
00008c  8002              STRH     r2,[r0,#0]
;;;377    	LCD_ILI9341_INDEX(0x2C);
00008e  272c              MOVS     r7,#0x2c
000090  8007              STRH     r7,[r0,#0]
;;;378    	LCD_ILI9341_INDEX(0x00);
000092  2200              MOVS     r2,#0
000094  8002              STRH     r2,[r0,#0]
;;;379    	LCD_ILI9341_INDEX(0x34);
000096  2234              MOVS     r2,#0x34
000098  8002              STRH     r2,[r0,#0]
;;;380    	LCD_ILI9341_INDEX(0x02);
00009a  2202              MOVS     r2,#2
00009c  8002              STRH     r2,[r0,#0]
;;;381    
;;;382    	LCD_ILI9341_CMD(0xF7);
00009e  22f7              MOVS     r2,#0xf7
0000a0  8022              STRH     r2,[r4,#0]
;;;383    	LCD_ILI9341_INDEX(0x20);
0000a2  2220              MOVS     r2,#0x20
0000a4  8002              STRH     r2,[r0,#0]
;;;384    
;;;385    	LCD_ILI9341_CMD(0xEA);  
0000a6  f04f0cea          MOV      r12,#0xea
0000aa  f8a4c000          STRH     r12,[r4,#0]
;;;386    	LCD_ILI9341_INDEX(0x00);   
0000ae  f04f0c00          MOV      r12,#0
0000b2  f8a0c000          STRH     r12,[r0,#0]
;;;387    	LCD_ILI9341_INDEX(0x00);
0000b6  f8a0c000          STRH     r12,[r0,#0]
;;;388    
;;;389    	LCD_ILI9341_CMD(0xc0);
0000ba  f04f0cc0          MOV      r12,#0xc0
0000be  f8a4c000          STRH     r12,[r4,#0]
;;;390    	LCD_ILI9341_INDEX(0x21);
0000c2  f04f0c21          MOV      r12,#0x21
0000c6  f8a0c000          STRH     r12,[r0,#0]
;;;391    
;;;392    	LCD_ILI9341_CMD(0xc1);
0000ca  8023              STRH     r3,[r4,#0]
;;;393    	LCD_ILI9341_INDEX(0x11);
0000cc  f04f0c11          MOV      r12,#0x11
0000d0  f8a0c000          STRH     r12,[r0,#0]
;;;394    
;;;395    	LCD_ILI9341_CMD(0xc5);
0000d4  23c5              MOVS     r3,#0xc5
0000d6  8023              STRH     r3,[r4,#0]
;;;396    	LCD_ILI9341_INDEX(0x20);
0000d8  8002              STRH     r2,[r0,#0]
;;;397    	LCD_ILI9341_INDEX(0x37);
0000da  2237              MOVS     r2,#0x37
0000dc  8002              STRH     r2,[r0,#0]
;;;398    
;;;399    	LCD_ILI9341_CMD(0xc7);  
0000de  22c7              MOVS     r2,#0xc7
0000e0  8022              STRH     r2,[r4,#0]
;;;400    	LCD_ILI9341_INDEX(0xb0); //20170714
0000e2  22b0              MOVS     r2,#0xb0
0000e4  8002              STRH     r2,[r0,#0]
;;;401    
;;;402    	LCD_ILI9341_CMD(0x36);
0000e6  2236              MOVS     r2,#0x36
0000e8  8022              STRH     r2,[r4,#0]
;;;403    	LCD_ILI9341_INDEX(0xC8 );//Ðý×ª180
0000ea  22c8              MOVS     r2,#0xc8
0000ec  8002              STRH     r2,[r0,#0]
;;;404    
;;;405    	LCD_ILI9341_CMD(0x2A);     //set the page address ÊúÆÁÄ»ÉèÖÃ
0000ee  222a              MOVS     r2,#0x2a
0000f0  8022              STRH     r2,[r4,#0]
;;;406    	LCD_ILI9341_INDEX(0x00);
0000f2  2200              MOVS     r2,#0
0000f4  8002              STRH     r2,[r0,#0]
;;;407    	LCD_ILI9341_INDEX(0x00);
0000f6  8002              STRH     r2,[r0,#0]
;;;408    	LCD_ILI9341_INDEX(0x00);
0000f8  8002              STRH     r2,[r0,#0]
;;;409    	LCD_ILI9341_INDEX(0xEF);
0000fa  22ef              MOVS     r2,#0xef
0000fc  8002              STRH     r2,[r0,#0]
;;;410    	LCD_ILI9341_CMD(0x2B);    //set the column address
0000fe  222b              MOVS     r2,#0x2b
000100  8022              STRH     r2,[r4,#0]
;;;411    	LCD_ILI9341_INDEX(0x00);
000102  2200              MOVS     r2,#0
000104  8002              STRH     r2,[r0,#0]
;;;412    	LCD_ILI9341_INDEX(0x00);
000106  8002              STRH     r2,[r0,#0]
;;;413    	LCD_ILI9341_INDEX(0x01);
000108  8005              STRH     r5,[r0,#0]
;;;414    	LCD_ILI9341_INDEX(0x3F); 
00010a  223f              MOVS     r2,#0x3f
00010c  8002              STRH     r2,[r0,#0]
;;;415    
;;;416    	LCD_ILI9341_CMD(0xb6);
00010e  22b6              MOVS     r2,#0xb6
000110  8022              STRH     r2,[r4,#0]
;;;417    	LCD_ILI9341_INDEX(0x0a);
000112  220a              MOVS     r2,#0xa
000114  8002              STRH     r2,[r0,#0]
;;;418    	LCD_ILI9341_INDEX(0xA2);
000116  23a2              MOVS     r3,#0xa2
000118  8003              STRH     r3,[r0,#0]
;;;419    
;;;420    	LCD_ILI9341_CMD(0xb1);
00011a  23b1              MOVS     r3,#0xb1
00011c  8023              STRH     r3,[r4,#0]
;;;421    	LCD_ILI9341_INDEX(0x00);
00011e  2300              MOVS     r3,#0
000120  8003              STRH     r3,[r0,#0]
;;;422    	LCD_ILI9341_INDEX(0x1B);
000122  231b              MOVS     r3,#0x1b
000124  8003              STRH     r3,[r0,#0]
;;;423    
;;;424    	LCD_ILI9341_CMD(0xf2);
000126  23f2              MOVS     r3,#0xf2
000128  8023              STRH     r3,[r4,#0]
;;;425    	LCD_ILI9341_INDEX(0x00);
00012a  2300              MOVS     r3,#0
00012c  8003              STRH     r3,[r0,#0]
;;;426    
;;;427    	LCD_ILI9341_CMD(0x26);
00012e  2326              MOVS     r3,#0x26
000130  8023              STRH     r3,[r4,#0]
;;;428    	LCD_ILI9341_INDEX(0x01);
000132  8005              STRH     r5,[r0,#0]
;;;429    
;;;430    	LCD_ILI9341_CMD(0x3a);
000134  233a              MOVS     r3,#0x3a
000136  8023              STRH     r3,[r4,#0]
;;;431    	LCD_ILI9341_INDEX(0x55);
000138  2355              MOVS     r3,#0x55
00013a  8003              STRH     r3,[r0,#0]
;;;432    
;;;433    	LCD_ILI9341_CMD(0xE0);
00013c  23e0              MOVS     r3,#0xe0
00013e  8023              STRH     r3,[r4,#0]
;;;434    	LCD_ILI9341_INDEX(0x0f);
000140  230f              MOVS     r3,#0xf
000142  8003              STRH     r3,[r0,#0]
;;;435    	LCD_ILI9341_INDEX(0x2D);
000144  252d              MOVS     r5,#0x2d
000146  8005              STRH     r5,[r0,#0]
;;;436    	LCD_ILI9341_INDEX(0x0e);
000148  250e              MOVS     r5,#0xe
00014a  8005              STRH     r5,[r0,#0]
;;;437    	LCD_ILI9341_INDEX(0x08);
00014c  2508              MOVS     r5,#8
00014e  8005              STRH     r5,[r0,#0]
;;;438    	LCD_ILI9341_INDEX(0x12);
000150  8001              STRH     r1,[r0,#0]
;;;439    	LCD_ILI9341_INDEX(0x0a);
000152  8002              STRH     r2,[r0,#0]
;;;440    	LCD_ILI9341_INDEX(0x3d);
000154  253d              MOVS     r5,#0x3d
000156  8005              STRH     r5,[r0,#0]
;;;441    	LCD_ILI9341_INDEX(0x95);
000158  2595              MOVS     r5,#0x95
00015a  8005              STRH     r5,[r0,#0]
;;;442    	LCD_ILI9341_INDEX(0x31);
00015c  2531              MOVS     r5,#0x31
00015e  8005              STRH     r5,[r0,#0]
;;;443    	LCD_ILI9341_INDEX(0x04);
000160  2504              MOVS     r5,#4
000162  8005              STRH     r5,[r0,#0]
;;;444    	LCD_ILI9341_INDEX(0x10);
000164  2510              MOVS     r5,#0x10
000166  8005              STRH     r5,[r0,#0]
;;;445    	LCD_ILI9341_INDEX(0x09);
000168  2509              MOVS     r5,#9
00016a  8005              STRH     r5,[r0,#0]
;;;446    	LCD_ILI9341_INDEX(0x09);
00016c  8005              STRH     r5,[r0,#0]
;;;447    	LCD_ILI9341_INDEX(0x0d);
00016e  250d              MOVS     r5,#0xd
000170  8005              STRH     r5,[r0,#0]
;;;448    	LCD_ILI9341_INDEX(0x00);
000172  f04f0800          MOV      r8,#0
000176  f8a08000          STRH     r8,[r0,#0]
;;;449    
;;;450    	LCD_ILI9341_CMD(0xE1);
00017a  f04f08e1          MOV      r8,#0xe1
00017e  f8a48000          STRH     r8,[r4,#0]
;;;451    	LCD_ILI9341_INDEX(0x00);
000182  f04f0800          MOV      r8,#0
000186  f8a08000          STRH     r8,[r0,#0]
;;;452    	LCD_ILI9341_INDEX(0x12);
00018a  8001              STRH     r1,[r0,#0]
;;;453    	LCD_ILI9341_INDEX(0x17);
00018c  2117              MOVS     r1,#0x17
00018e  8001              STRH     r1,[r0,#0]
;;;454    	LCD_ILI9341_INDEX(0x03);
000190  8006              STRH     r6,[r0,#0]
;;;455    	LCD_ILI9341_INDEX(0x0d);
000192  8005              STRH     r5,[r0,#0]
;;;456    	LCD_ILI9341_INDEX(0x05);
000194  2105              MOVS     r1,#5
000196  8001              STRH     r1,[r0,#0]
;;;457    	LCD_ILI9341_INDEX(0x2c);
000198  8007              STRH     r7,[r0,#0]
;;;458    	LCD_ILI9341_INDEX(0x44);
00019a  2544              MOVS     r5,#0x44
00019c  8005              STRH     r5,[r0,#0]
;;;459    	LCD_ILI9341_INDEX(0x41);
00019e  2541              MOVS     r5,#0x41
0001a0  8005              STRH     r5,[r0,#0]
;;;460    	LCD_ILI9341_INDEX(0x05);
0001a2  8001              STRH     r1,[r0,#0]
;;;461    	LCD_ILI9341_INDEX(0x0f);
0001a4  8003              STRH     r3,[r0,#0]
;;;462    	LCD_ILI9341_INDEX(0x0a);
0001a6  8002              STRH     r2,[r0,#0]
;;;463    	LCD_ILI9341_INDEX(0x30);
0001a8  f8a09000          STRH     r9,[r0,#0]
;;;464    	LCD_ILI9341_INDEX(0x32);
0001ac  2132              MOVS     r1,#0x32
0001ae  8001              STRH     r1,[r0,#0]
;;;465    	LCD_ILI9341_INDEX(0x0F);
0001b0  8003              STRH     r3,[r0,#0]
;;;466    
;;;467    	LCD_ILI9341_CMD(0x11);
0001b2  f8a4c000          STRH     r12,[r4,#0]
;;;468    	delayms(120);  
0001b6  2078              MOVS     r0,#0x78
0001b8  f7fffffe          BL       delay_ms
;;;469    	LCD_ILI9341_CMD(0x29);
0001bc  2029              MOVS     r0,#0x29
0001be  8020              STRH     r0,[r4,#0]
;;;470    #endif
;;;471    
;;;472    	delay_ms(200);
0001c0  20c8              MOVS     r0,#0xc8
0001c2  f7fffffe          BL       delay_ms
;;;473    }
0001c6  e8bd83f8          POP      {r3-r9,pc}
;;;474    
                          ENDP

0001ca  0000              DCW      0x0000
                  |L4.460|
                          DCD      0x40011400
                  |L4.464|
                          DCD      0x6001fffe

                          AREA ||i.LCD_FSMCConfig||, CODE, READONLY, ALIGN=2

                  LCD_FSMCConfig PROC
;;;88     
;;;89     static void LCD_FSMCConfig(void)
000000  b530              PUSH     {r4,r5,lr}
;;;90     {
;;;91     	FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
;;;92     	FSMC_NORSRAMTimingInitTypeDef  p;
;;;93     	GPIO_InitTypeDef GPIO_InitStructure;
;;;94     
;;;95     	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_FSMC, ENABLE);
000002  2101              MOVS     r1,#1
000004  020c              LSLS     r4,r1,#8
000006  b097              SUB      sp,sp,#0x5c           ;90
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;96     
;;;97     	/*-- GPIO Configuration ------------------------------------------------------*/
;;;98     	/* SRAM Data lines configuration */
;;;99     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 |
00000e  f24c7003          MOV      r0,#0xc703
000012  f8ad0058          STRH     r0,[sp,#0x58]
;;;100    								  GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15;
;;;101    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000016  2018              MOVS     r0,#0x18
000018  f88d005b          STRB     r0,[sp,#0x5b]
;;;102    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001c  2003              MOVS     r0,#3
;;;103    	GPIO_Init(GPIOD, &GPIO_InitStructure);
00001e  4d26              LDR      r5,|L5.184|
000020  f88d005a          STRB     r0,[sp,#0x5a]         ;102
000024  a916              ADD      r1,sp,#0x58
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       GPIO_Init
;;;104    
;;;105    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
00002c  f64f7080          MOV      r0,#0xff80
000030  f8ad0058          STRH     r0,[sp,#0x58]
;;;106    								  GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
;;;107    	GPIO_Init(GPIOE, &GPIO_InitStructure);
000034  a916              ADD      r1,sp,#0x58
000036  4821              LDR      r0,|L5.188|
000038  f7fffffe          BL       GPIO_Init
;;;108    
;;;109    	/* SRAM Address lines configuration ---LCD_RS*/
;;;110    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
00003c  00e0              LSLS     r0,r4,#3
00003e  f8ad0058          STRH     r0,[sp,#0x58]
;;;111    	GPIO_Init(GPIOD, &GPIO_InitStructure);
000042  a916              ADD      r1,sp,#0x58
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       GPIO_Init
;;;112    
;;;113    	/* NOE and NWE configuration */
;;;114    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
00004a  2030              MOVS     r0,#0x30
00004c  f8ad0058          STRH     r0,[sp,#0x58]
;;;115    	GPIO_Init(GPIOD, &GPIO_InitStructure);
000050  a916              ADD      r1,sp,#0x58
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       GPIO_Init
;;;116    
;;;117    	/* NE1 configuration */
;;;118    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
000058  2080              MOVS     r0,#0x80
00005a  f8ad0058          STRH     r0,[sp,#0x58]
;;;119    	GPIO_Init(GPIOD, &GPIO_InitStructure);
00005e  a916              ADD      r1,sp,#0x58
000060  4628              MOV      r0,r5
000062  f7fffffe          BL       GPIO_Init
;;;120    
;;;121    
;;;122    	/* Enable FSMC clock */
;;;123    	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_FSMC, ENABLE);
000066  2101              MOVS     r1,#1
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;124    
;;;125    	/*-- FSMC Configuration ------------------------------------------------------*/
;;;126    	/*----------------------- SRAM Bank 1 ----------------------------------------*/
;;;127    	/* FSMC_Bank1_NORSRAM1 configuration */
;;;128    	p.FSMC_AddressSetupTime = 0/* 1*/;
00006e  2000              MOVS     r0,#0
;;;129    	p.FSMC_AddressHoldTime = 0;
;;;130    	p.FSMC_DataSetupTime = 4/*9*/;
000070  2104              MOVS     r1,#4
000072  e9cd0110          STRD     r0,r1,[sp,#0x40]
;;;131    	p.FSMC_BusTurnAroundDuration = 0;
;;;132    	p.FSMC_CLKDivision = 0;
000076  9012              STR      r0,[sp,#0x48]
;;;133    	p.FSMC_DataLatency = 0;
;;;134    	p.FSMC_AccessMode = FSMC_AccessMode_A;
;;;135    
;;;136    	/*  Color LCD configuration ------------------------------------
;;;137    	    LCD configured as follow:
;;;138    	    - Data/Address MUX = Disable
;;;139    	    - Memory Type = SRAM
;;;140    	    - Data Width = 16bit
;;;141    	    - Write Operation = Enable
;;;142    	    - Extended Mode = Enable
;;;143    	    - Asynchronous Wait = Disable */
;;;144    
;;;145    	FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM1;
;;;146    	FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
;;;147    	FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;
;;;148    	FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
000078  2110              MOVS     r1,#0x10
00007a  900f              STR      r0,[sp,#0x3c]         ;130
00007c  e9cd0102          STRD     r0,r1,[sp,#8]
000080  9014              STR      r0,[sp,#0x50]         ;134
000082  9015              STR      r0,[sp,#0x54]         ;145
000084  9013              STR      r0,[sp,#0x4c]         ;133
000086  9000              STR      r0,[sp,#0]            ;146
000088  9001              STR      r0,[sp,#4]
;;;149    	FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
;;;150    	FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
00008a  9004              STR      r0,[sp,#0x10]
;;;151    	FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
00008c  9005              STR      r0,[sp,#0x14]
;;;152    	FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
00008e  9006              STR      r0,[sp,#0x18]
;;;153    	FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
;;;154    	FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
000090  0209              LSLS     r1,r1,#8
000092  9007              STR      r0,[sp,#0x1c]
000094  e9cd0108          STRD     r0,r1,[sp,#0x20]
;;;155    	FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
;;;156    	FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
000098  900a              STR      r0,[sp,#0x28]
;;;157    	FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
00009a  900b              STR      r0,[sp,#0x2c]
;;;158    	FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
00009c  900c              STR      r0,[sp,#0x30]
00009e  a80f              ADD      r0,sp,#0x3c
;;;159    	FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
0000a0  900d              STR      r0,[sp,#0x34]
;;;160    
;;;161    	FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);
0000a2  900e              STR      r0,[sp,#0x38]
0000a4  4668              MOV      r0,sp
0000a6  f7fffffe          BL       FSMC_NORSRAMInit
;;;162    
;;;163    	/* Enable FSMC NOR/SRAM Bank1 */
;;;164    	FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM1, ENABLE);
0000aa  2101              MOVS     r1,#1
0000ac  2000              MOVS     r0,#0
0000ae  f7fffffe          BL       FSMC_NORSRAMCmd
;;;165    }
0000b2  b017              ADD      sp,sp,#0x5c
0000b4  bd30              POP      {r4,r5,pc}
;;;166    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L5.184|
                          DCD      0x40011400
                  |L5.188|
                          DCD      0x40011800

                          AREA ||i.LCD_ReadRAM||, CODE, READONLY, ALIGN=2

                  LCD_ReadRAM PROC
;;;210    */
;;;211    uint16_t LCD_ReadRAM(void)
000000  4902              LDR      r1,|L6.12|
;;;212    {
;;;213    	/* Write 16-bit Index (then Read Reg) */
;;;214    	LCD->LCD_REG = 0x22; /* Select GRAM Reg */
000002  2022              MOVS     r0,#0x22
000004  8008              STRH     r0,[r1,#0]
;;;215    	/* Read 16-bit Reg */
;;;216    	return LCD->LCD_RAM;
000006  1c88              ADDS     r0,r1,#2
000008  8800              LDRH     r0,[r0,#0]
;;;217    }
00000a  4770              BX       lr
;;;218    
                          ENDP

                  |L6.12|
                          DCD      0x6001fffe

                          AREA ||i.LCD_ReadReg||, CODE, READONLY, ALIGN=2

                  LCD_ReadReg PROC
;;;176    
;;;177    uint16_t LCD_ReadReg(uint8_t LCD_Reg)
000000  4902              LDR      r1,|L7.12|
;;;178    {
;;;179    	/* Write 16-bit Index (then Read Reg) */
;;;180    	LCD->LCD_REG = LCD_Reg;
000002  8008              STRH     r0,[r1,#0]
;;;181    	/* Read 16-bit Reg */
;;;182    	return (LCD->LCD_RAM);
000004  1c88              ADDS     r0,r1,#2
000006  8800              LDRH     r0,[r0,#0]
;;;183    }
000008  4770              BX       lr
;;;184    
                          ENDP

00000a  0000              DCW      0x0000
                  |L7.12|
                          DCD      0x6001fffe

                          AREA ||i.LCD_SetCursor||, CODE, READONLY, ALIGN=2

                  LCD_SetCursor PROC
;;;475    
;;;476    void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
000000  4b0a              LDR      r3,|L8.44|
;;;477    {
000002  b510              PUSH     {r4,lr}
;;;478    	LCD->LCD_REG = (0x002a);
000004  222a              MOVS     r2,#0x2a
000006  801a              STRH     r2,[r3,#0]
;;;479    	LCD->LCD_RAM = (Xpos>>8)&0x00ff;
000008  0a04              LSRS     r4,r0,#8
00000a  1c9a              ADDS     r2,r3,#2
00000c  8014              STRH     r4,[r2,#0]
;;;480    	LCD->LCD_RAM = Xpos&0x00ff;
00000e  b2c0              UXTB     r0,r0
000010  8010              STRH     r0,[r2,#0]
;;;481    	LCD->LCD_RAM = (Xpos>>8)&0x00ff;
000012  8014              STRH     r4,[r2,#0]
;;;482    	LCD->LCD_RAM = Xpos&0x00ff;
000014  8010              STRH     r0,[r2,#0]
;;;483    	LCD->LCD_REG = (0x002b);
000016  202b              MOVS     r0,#0x2b
000018  8018              STRH     r0,[r3,#0]
;;;484    	LCD->LCD_RAM = (Ypos>>8)&0x00ff;
00001a  0a08              LSRS     r0,r1,#8
00001c  8010              STRH     r0,[r2,#0]
;;;485    	LCD->LCD_RAM = Ypos&0x00ff;
00001e  b2c9              UXTB     r1,r1
000020  8011              STRH     r1,[r2,#0]
;;;486    	LCD->LCD_RAM = (Ypos>>8)&0x00ff;
000022  8010              STRH     r0,[r2,#0]
;;;487    	LCD->LCD_RAM = Ypos&0x00ff;
000024  8011              STRH     r1,[r2,#0]
;;;488    	LCD->LCD_REG = (0x002c);
000026  202c              MOVS     r0,#0x2c
000028  8018              STRH     r0,[r3,#0]
;;;489    }
00002a  bd10              POP      {r4,pc}
;;;490    
                          ENDP

                  |L8.44|
                          DCD      0x6001fffe

                          AREA ||i.LCD_SetWindow||, CODE, READONLY, ALIGN=2

                  LCD_SetWindow PROC
;;;490    
;;;491    void LCD_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
000000  b570              PUSH     {r4-r6,lr}
;;;492    {
;;;493    #if LCD_DRIVER_HX8347_D
;;;494    	LCD->LCD_REG = 0x02;
;;;495    	LCD->LCD_RAM = x0>>8;
;;;496    	LCD->LCD_REG = 0x03;
;;;497    	LCD->LCD_RAM = x0;
;;;498    	LCD->LCD_REG = 0x04;
;;;499    	LCD->LCD_RAM = x1>>8;
;;;500    	LCD->LCD_REG = 0x05;
;;;501    	LCD->LCD_RAM = x1;
;;;502    	LCD->LCD_REG = 0x06;
;;;503    	LCD->LCD_RAM = y0>>8;
;;;504    	LCD->LCD_REG = 0x07;
;;;505    	LCD->LCD_RAM = y0;
;;;506    	LCD->LCD_REG = 0x08;
;;;507    	LCD->LCD_RAM = y1>>8;
;;;508    	LCD->LCD_REG = 0x09;
;;;509    	LCD->LCD_RAM = y1;
;;;510    #else
;;;511    	LCD->LCD_REG = (0x002a);
000002  4d0c              LDR      r5,|L9.52|
000004  242a              MOVS     r4,#0x2a
000006  802c              STRH     r4,[r5,#0]
;;;512    	LCD->LCD_RAM = (x0>>8)&0x00ff;
000008  0a06              LSRS     r6,r0,#8
00000a  1cac              ADDS     r4,r5,#2
00000c  8026              STRH     r6,[r4,#0]
;;;513    	LCD->LCD_RAM = x0&0x00ff;
00000e  b2c0              UXTB     r0,r0
000010  8020              STRH     r0,[r4,#0]
;;;514    	LCD->LCD_RAM = (x1>>8)&0x00ff;
000012  0a10              LSRS     r0,r2,#8
000014  8020              STRH     r0,[r4,#0]
;;;515    	LCD->LCD_RAM = x1&0x00ff;
000016  b2d0              UXTB     r0,r2
000018  8020              STRH     r0,[r4,#0]
;;;516    	LCD->LCD_REG = (0x002b);
00001a  202b              MOVS     r0,#0x2b
00001c  8028              STRH     r0,[r5,#0]
;;;517    	LCD->LCD_RAM = (y0>>8)&0x00ff;
00001e  0a08              LSRS     r0,r1,#8
000020  8020              STRH     r0,[r4,#0]
;;;518    	LCD->LCD_RAM = y0&0x00ff;
000022  b2c8              UXTB     r0,r1
000024  8020              STRH     r0,[r4,#0]
;;;519    	LCD->LCD_RAM = (y1>>8)&0x00ff;
000026  0a18              LSRS     r0,r3,#8
000028  8020              STRH     r0,[r4,#0]
;;;520    	LCD->LCD_RAM = y1&0x00ff;
00002a  b2d8              UXTB     r0,r3
00002c  8020              STRH     r0,[r4,#0]
;;;521    	LCD->LCD_REG = (0x002c);
00002e  202c              MOVS     r0,#0x2c
000030  8028              STRH     r0,[r5,#0]
;;;522    #endif
;;;523    }
000032  bd70              POP      {r4-r6,pc}
;;;524    
                          ENDP

                  |L9.52|
                          DCD      0x6001fffe

                          AREA ||i.LCD_WriteRAM||, CODE, READONLY, ALIGN=2

                  LCD_WriteRAM PROC
;;;199    */
;;;200    void LCD_WriteRAM(uint16_t RGB_Code)
000000  4901              LDR      r1,|L10.8|
;;;201    {
;;;202    	/* Write 16-bit GRAM Reg */
;;;203    	LCD->LCD_RAM = RGB_Code;
000002  8008              STRH     r0,[r1,#0]
;;;204    }
000004  4770              BX       lr
;;;205    
                          ENDP

000006  0000              DCW      0x0000
                  |L10.8|
                          DCD      0x60020000

                          AREA ||i.LCD_WriteRAM_Prepare||, CODE, READONLY, ALIGN=2

                  LCD_WriteRAM_Prepare PROC
;;;189    */
;;;190    void LCD_WriteRAM_Prepare(void)
000000  4901              LDR      r1,|L11.8|
;;;191    {
;;;192    	LCD->LCD_REG = 0x0022;
000002  2022              MOVS     r0,#0x22
000004  8008              STRH     r0,[r1,#0]
;;;193    }
000006  4770              BX       lr
;;;194    
                          ENDP

                  |L11.8|
                          DCD      0x6001fffe

                          AREA ||i.LCD_WriteReg||, CODE, READONLY, ALIGN=2

                  LCD_WriteReg PROC
;;;168    
;;;169    void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
000000  4a02              LDR      r2,|L12.12|
;;;170    {
;;;171    	/* Write 16-bit Index, then Write Reg */
;;;172    	LCD->LCD_REG = LCD_Reg;
000002  8010              STRH     r0,[r2,#0]
;;;173    	/* Write 16-bit Reg */
;;;174    	LCD->LCD_RAM = LCD_RegValue;
000004  1c90              ADDS     r0,r2,#2
000006  8001              STRH     r1,[r0,#0]
;;;175    }
000008  4770              BX       lr
;;;176    
                          ENDP

00000a  0000              DCW      0x0000
                  |L12.12|
                          DCD      0x6001fffe

                          AREA ||i.Lcd_Back_Light_Pwm_Init||, CODE, READONLY, ALIGN=2

                  Lcd_Back_Light_Pwm_Init PROC
;;;57     
;;;58     static void Lcd_Back_Light_Pwm_Init(void)
000000  b530              PUSH     {r4,r5,lr}
;;;59     {
000002  b087              SUB      sp,sp,#0x1c
;;;60     	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;61     	TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;62     	
;;;63     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
000004  2101              MOVS     r1,#1
000006  2004              MOVS     r0,#4
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;64     	TIM_DeInit(TIM4);
00000c  4d19              LDR      r5,|L13.116|
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       TIM_DeInit
;;;65     
;;;66     	GPIO_PinRemapConfig(GPIO_Remap_TIM4, ENABLE);
000014  2101              MOVS     r1,#1
000016  0308              LSLS     r0,r1,#12
000018  f7fffffe          BL       GPIO_PinRemapConfig
;;;67     
;;;68     	TIM_TimeBaseStructure.TIM_Period = Get_Pwm_Timer_Period() - 1;    /*Timer ×Ô¶¯ÖØÔØÖµ*/
00001c  f7fffffe          BL       Get_Pwm_Timer_Period
000020  1e40              SUBS     r0,r0,#1
000022  f8ad0014          STRH     r0,[sp,#0x14]
;;;69     	TIM_TimeBaseStructure.TIM_Prescaler = LCD_PWM_PRESCALER - 1;  /*Ô¤·ÖÆµ*/
000026  2063              MOVS     r0,#0x63
000028  f8ad0010          STRH     r0,[sp,#0x10]
;;;70     	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
00002c  2400              MOVS     r4,#0
00002e  f8ad4016          STRH     r4,[sp,#0x16]
;;;71     	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
000032  f8ad4012          STRH     r4,[sp,#0x12]
;;;72     	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
000036  a904              ADD      r1,sp,#0x10
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       TIM_TimeBaseInit
;;;73     
;;;74     	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
00003e  2060              MOVS     r0,#0x60
000040  f8ad0000          STRH     r0,[sp,#0]
;;;75     	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
000044  2001              MOVS     r0,#1
000046  f8ad0002          STRH     r0,[sp,#2]
;;;76     	TIM_OCInitStructure.TIM_Pulse = Get_Pwm_Timer_Period() * 0.10;
00004a  f7fffffe          BL       Get_Pwm_Timer_Period
00004e  f7fffffe          BL       __aeabi_ui2d
000052  4a09              LDR      r2,|L13.120|
000054  4b09              LDR      r3,|L13.124|
000056  f7fffffe          BL       __aeabi_dmul
00005a  f7fffffe          BL       __aeabi_d2uiz
00005e  f8ad0006          STRH     r0,[sp,#6]
;;;77     	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
000062  f8ad4008          STRH     r4,[sp,#8]
;;;78     	TIM_OC1Init(TIM4, &TIM_OCInitStructure);
000066  4669              MOV      r1,sp
000068  4628              MOV      r0,r5
00006a  f7fffffe          BL       TIM_OC1Init
;;;79     }
00006e  b007              ADD      sp,sp,#0x1c
000070  bd30              POP      {r4,r5,pc}
;;;80     
                          ENDP

000072  0000              DCW      0x0000
                  |L13.116|
                          DCD      0x40000800
                  |L13.120|
                          DCD      0x9999999a
                  |L13.124|
                          DCD      0x3fb99999

                          AREA ||i.Lcd_Back_Light_Pwm_Pulse_Config||, CODE, READONLY, ALIGN=2

                  Lcd_Back_Light_Pwm_Pulse_Config PROC
;;;81     /*Percent ÖµÔ½´ó(×î´óÖµ Îª100),ÁÁ¶ÈÔ½¸ß.*/
;;;82     void Lcd_Back_Light_Pwm_Pulse_Config(unsigned char nPercent)
000000  b510              PUSH     {r4,lr}
;;;83     {
000002  4604              MOV      r4,r0
;;;84     	unsigned long nPluseValue;
;;;85     	nPluseValue = (unsigned long)Get_Pwm_Timer_Period() * nPercent / (float)100;
000004  f7fffffe          BL       Get_Pwm_Timer_Period
000008  4360              MULS     r0,r4,r0
00000a  f7fffffe          BL       __aeabi_ui2f
00000e  4905              LDR      r1,|L14.36|
000010  f7fffffe          BL       __aeabi_fdiv
000014  f7fffffe          BL       __aeabi_f2uiz
;;;86     	TIM_SetCompare1(TIM4, nPluseValue);
000018  b281              UXTH     r1,r0
00001a  e8bd4010          POP      {r4,lr}
00001e  4802              LDR      r0,|L14.40|
000020  f7ffbffe          B.W      TIM_SetCompare1
;;;87     }
;;;88     
                          ENDP

                  |L14.36|
                          DCD      0x42c80000
                  |L14.40|
                          DCD      0x40000800

                          AREA ||i.Touch_IC_Init||, CODE, READONLY, ALIGN=1

                  Touch_IC_Init PROC
;;;524    
;;;525    void Touch_IC_Init(void)
000000  21c2              MOVS     r1,#0xc2
;;;526    {
;;;527    	I2C_Write_Command(0x90, 0xC2);
000002  2090              MOVS     r0,#0x90
000004  f7ffbffe          B.W      I2C_Write_Command
;;;528    }
;;;529    
                          ENDP

