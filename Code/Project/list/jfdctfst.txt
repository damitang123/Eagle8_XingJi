; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\jfdctfst.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\jfdctfst.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\JPEG\jfdctfst.c]
                          THUMB

                          AREA ||i.jpeg_fdct_ifast||, CODE, READONLY, ALIGN=1

                  jpeg_fdct_ifast PROC
;;;113    GLOBAL(void)
;;;114    jpeg_fdct_ifast (DCTELEM * data)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;115    {
000004  4683              MOV      r11,r0
;;;116      DCTELEM tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
;;;117      DCTELEM tmp10, tmp11, tmp12, tmp13;
;;;118      DCTELEM z1, z2, z3, z4, z5, z11, z13;
;;;119      DCTELEM *dataptr;
;;;120      int ctr;
;;;121      SHIFT_TEMPS
;;;122    
;;;123      /* Pass 1: process rows. */
;;;124    
;;;125      dataptr = data;
;;;126      for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
000006  2307              MOVS     r3,#7
                  |L1.8|
;;;127        tmp0 = dataptr[0] + dataptr[7];
000008  f8504b1c          LDR      r4,[r0],#0x1c
00000c  f8501918          LDR      r1,[r0],#-0x18
;;;128        tmp7 = dataptr[0] - dataptr[7];
;;;129        tmp1 = dataptr[1] + dataptr[6];
000010  c840              LDM      r0!,{r6}
000012  1862              ADDS     r2,r4,r1              ;127
000014  6905              LDR      r5,[r0,#0x10]
;;;130        tmp6 = dataptr[1] - dataptr[6];
;;;131        tmp2 = dataptr[2] + dataptr[5];
000016  f850cb08          LDR      r12,[r0],#8
00001a  1a61              SUBS     r1,r4,r1              ;128
00001c  1974              ADDS     r4,r6,r5              ;129
00001e  6847              LDR      r7,[r0,#4]
000020  1b75              SUBS     r5,r6,r5              ;130
000022  eb0c0607          ADD      r6,r12,r7
;;;132        tmp5 = dataptr[2] - dataptr[5];
000026  ebac0707          SUB      r7,r12,r7
00002a  e950c801          LDRD     r12,r8,[r0,#-4]
;;;133        tmp3 = dataptr[3] + dataptr[4];
00002e  eb0c0908          ADD      r9,r12,r8
;;;134        tmp4 = dataptr[3] - dataptr[4];
000032  ebac0a08          SUB      r10,r12,r8
;;;135        
;;;136        /* Even part */
;;;137        
;;;138        tmp10 = tmp0 + tmp3;	/* phase 2 */
000036  eb020c09          ADD      r12,r2,r9
;;;139        tmp13 = tmp0 - tmp3;
;;;140        tmp11 = tmp1 + tmp2;
00003a  eb040806          ADD      r8,r4,r6
;;;141        tmp12 = tmp1 - tmp2;
00003e  1ba4              SUBS     r4,r4,r6
;;;142        
;;;143        dataptr[0] = tmp10 + tmp11; /* phase 3 */
000040  eb0c0608          ADD      r6,r12,r8
000044  f8406c10          STR      r6,[r0,#-0x10]
;;;144        dataptr[4] = tmp10 - tmp11;
000048  ebac0608          SUB      r6,r12,r8
00004c  eba20209          SUB      r2,r2,r9              ;139
000050  f8406b10          STR      r6,[r0],#0x10
;;;145        
;;;146        z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
000054  4414              ADD      r4,r4,r2
000056  26b5              MOVS     r6,#0xb5
000058  4374              MULS     r4,r6,r4
00005a  1224              ASRS     r4,r4,#8
;;;147        dataptr[2] = tmp13 + z1;	/* phase 5 */
00005c  1916              ADDS     r6,r2,r4
00005e  f8406c18          STR      r6,[r0,#-0x18]
;;;148        dataptr[6] = tmp13 - z1;
000062  1b12              SUBS     r2,r2,r4
000064  f8402c08          STR      r2,[r0,#-8]
;;;149        
;;;150        /* Odd part */
;;;151    
;;;152        tmp10 = tmp4 + tmp5;	/* phase 2 */
000068  eb0a0207          ADD      r2,r10,r7
;;;153        tmp11 = tmp5 + tmp6;
00006c  197e              ADDS     r6,r7,r5
;;;154        tmp12 = tmp6 + tmp7;
00006e  186c              ADDS     r4,r5,r1
;;;155    
;;;156        /* The rotator is modified from fig 4-8 to avoid extra negations. */
;;;157        z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
000070  1b15              SUBS     r5,r2,r4
000072  2762              MOVS     r7,#0x62
000074  437d              MULS     r5,r7,r5
;;;158        z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
000076  278b              MOVS     r7,#0x8b
000078  437a              MULS     r2,r7,r2
00007a  122d              ASRS     r5,r5,#8              ;157
;;;159        z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
00007c  f44f77a7          MOV      r7,#0x14e
000080  437c              MULS     r4,r7,r4
000082  eb052222          ADD      r2,r5,r2,ASR #8       ;158
000086  eb052424          ADD      r4,r5,r4,ASR #8
;;;160        z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */
00008a  25b5              MOVS     r5,#0xb5
00008c  436e              MULS     r6,r5,r6
00008e  1236              ASRS     r6,r6,#8
;;;161    
;;;162        z11 = tmp7 + z3;		/* phase 5 */
000090  198d              ADDS     r5,r1,r6
;;;163        z13 = tmp7 - z3;
000092  1b89              SUBS     r1,r1,r6
;;;164    
;;;165        dataptr[5] = z13 + z2;	/* phase 6 */
000094  188e              ADDS     r6,r1,r2
000096  f8406c0c          STR      r6,[r0,#-0xc]
;;;166        dataptr[3] = z13 - z2;
00009a  1a89              SUBS     r1,r1,r2
00009c  f8401c14          STR      r1,[r0,#-0x14]
;;;167        dataptr[1] = z11 + z4;
0000a0  1929              ADDS     r1,r5,r4
0000a2  f8401c1c          STR      r1,[r0,#-0x1c]
;;;168        dataptr[7] = z11 - z4;
0000a6  1b29              SUBS     r1,r5,r4
0000a8  f8401c04          STR      r1,[r0,#-4]
0000ac  1e5b              SUBS     r3,r3,#1
0000ae  d5ab              BPL      |L1.8|
;;;169    
;;;170        dataptr += DCTSIZE;		/* advance pointer to next row */
;;;171      }
;;;172    
;;;173      /* Pass 2: process columns. */
;;;174    
;;;175      dataptr = data;
0000b0  4658              MOV      r0,r11
;;;176      for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
0000b2  2207              MOVS     r2,#7
                  |L1.180|
;;;177        tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
0000b4  f8501be0          LDR      r1,[r0],#0xe0
0000b8  6804              LDR      r4,[r0,#0]
;;;178        tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
;;;179        tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
0000ba  f8506cc0          LDR      r6,[r0,#-0xc0]
0000be  190b              ADDS     r3,r1,r4              ;177
0000c0  f8505c20          LDR      r5,[r0,#-0x20]
0000c4  1b09              SUBS     r1,r1,r4              ;178
0000c6  1974              ADDS     r4,r6,r5
;;;180        tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
0000c8  1b75              SUBS     r5,r6,r5
;;;181        tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
0000ca  f8506ca0          LDR      r6,[r0,#-0xa0]
0000ce  f850cc40          LDR      r12,[r0,#-0x40]
;;;182        tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
;;;183        tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
0000d2  f8508c80          LDR      r8,[r0,#-0x80]
0000d6  eb06090c          ADD      r9,r6,r12             ;181
0000da  eba6060c          SUB      r6,r6,r12             ;182
0000de  f850cc60          LDR      r12,[r0,#-0x60]
0000e2  eb08070c          ADD      r7,r8,r12
;;;184        tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
0000e6  eba80a0c          SUB      r10,r8,r12
;;;185        
;;;186        /* Even part */
;;;187        
;;;188        tmp10 = tmp0 + tmp3;	/* phase 2 */
0000ea  eb030c07          ADD      r12,r3,r7
;;;189        tmp13 = tmp0 - tmp3;
;;;190        tmp11 = tmp1 + tmp2;
0000ee  eb040809          ADD      r8,r4,r9
0000f2  1bdb              SUBS     r3,r3,r7              ;189
;;;191        tmp12 = tmp1 - tmp2;
;;;192        
;;;193        dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
0000f4  eb0c0708          ADD      r7,r12,r8
0000f8  f8407ce0          STR      r7,[r0,#-0xe0]
;;;194        dataptr[DCTSIZE*4] = tmp10 - tmp11;
0000fc  ebac0708          SUB      r7,r12,r8
000100  eba40409          SUB      r4,r4,r9              ;191
000104  f8407c60          STR      r7,[r0,#-0x60]
;;;195        
;;;196        z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
000108  441c              ADD      r4,r4,r3
00010a  27b5              MOVS     r7,#0xb5
00010c  437c              MULS     r4,r7,r4
00010e  1224              ASRS     r4,r4,#8
;;;197        dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
000110  191f              ADDS     r7,r3,r4
000112  f8407ca0          STR      r7,[r0,#-0xa0]
;;;198        dataptr[DCTSIZE*6] = tmp13 - z1;
000116  1b1b              SUBS     r3,r3,r4
000118  f8403c20          STR      r3,[r0,#-0x20]
;;;199        
;;;200        /* Odd part */
;;;201    
;;;202        tmp10 = tmp4 + tmp5;	/* phase 2 */
00011c  eb0a0306          ADD      r3,r10,r6
;;;203        tmp11 = tmp5 + tmp6;
000120  442e              ADD      r6,r6,r5
;;;204        tmp12 = tmp6 + tmp7;
000122  186c              ADDS     r4,r5,r1
;;;205    
;;;206        /* The rotator is modified from fig 4-8 to avoid extra negations. */
;;;207        z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
000124  1b1d              SUBS     r5,r3,r4
000126  2762              MOVS     r7,#0x62
000128  437d              MULS     r5,r7,r5
;;;208        z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
00012a  278b              MOVS     r7,#0x8b
00012c  437b              MULS     r3,r7,r3
00012e  122d              ASRS     r5,r5,#8              ;207
;;;209        z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
000130  f44f77a7          MOV      r7,#0x14e
000134  437c              MULS     r4,r7,r4
000136  eb052323          ADD      r3,r5,r3,ASR #8       ;208
00013a  eb052424          ADD      r4,r5,r4,ASR #8
;;;210        z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */
00013e  25b5              MOVS     r5,#0xb5
000140  436e              MULS     r6,r5,r6
000142  1236              ASRS     r6,r6,#8
;;;211    
;;;212        z11 = tmp7 + z3;		/* phase 5 */
000144  198d              ADDS     r5,r1,r6
;;;213        z13 = tmp7 - z3;
000146  1b89              SUBS     r1,r1,r6
;;;214    
;;;215        dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
000148  18ce              ADDS     r6,r1,r3
00014a  f8406c40          STR      r6,[r0,#-0x40]
;;;216        dataptr[DCTSIZE*3] = z13 - z2;
00014e  1ac9              SUBS     r1,r1,r3
000150  f8401c80          STR      r1,[r0,#-0x80]
;;;217        dataptr[DCTSIZE*1] = z11 + z4;
000154  1929              ADDS     r1,r5,r4
000156  f8401cc0          STR      r1,[r0,#-0xc0]
;;;218        dataptr[DCTSIZE*7] = z11 - z4;
00015a  1b29              SUBS     r1,r5,r4
00015c  f84019dc          STR      r1,[r0],#-0xdc
000160  1e52              SUBS     r2,r2,#1
000162  d5a7              BPL      |L1.180|
;;;219    
;;;220        dataptr++;			/* advance pointer to next column */
;;;221      }
;;;222    }
000164  e8bd8ff0          POP      {r4-r11,pc}
;;;223    
                          ENDP

