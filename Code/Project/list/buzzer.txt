; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\buzzer.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\buzzer.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\Board_Support_Package\buzzer.c]
                          THUMB

                          AREA ||i.Buzzer_Beep||, CODE, READONLY, ALIGN=2

                  Buzzer_Beep PROC
;;;273    
;;;274    void Buzzer_Beep(EBuzzerType eBeep)
000000  2801              CMP      r0,#1
;;;275    {
000002  d027              BEQ      |L1.84|
;;;276    	if(eBeep == eBUZ_START_TEST)
;;;277    	{
;;;278    		_BeepConfig( &s_BuzStartTest);
;;;279    	}
;;;280    	else if(eBeep == eBUZ_DEVICE_OK)
000004  2802              CMP      r0,#2
000006  d027              BEQ      |L1.88|
;;;281    	{
;;;282    		_BeepConfig( &s_BuzDeviceOK);
;;;283    	}
;;;284    	else if(eBeep == eBUZ_BLOW_BREAK)
000008  2807              CMP      r0,#7
00000a  d028              BEQ      |L1.94|
;;;285    	{
;;;286    		_BeepConfig(&s_BuzBlowBreak);
;;;287    	}
;;;288    	else if(eBeep == eBUZ_REPORT_PASS)
00000c  2805              CMP      r0,#5
00000e  d029              BEQ      |L1.100|
;;;289    	{
;;;290    		_BeepConfig(&s_BuzReportPass);
;;;291    	}
;;;292    	else if(eBeep == eBUZ_REPORT_FAIL)
000010  2806              CMP      r0,#6
000012  d02a              BEQ      |L1.106|
;;;293    	{
;;;294    		_BeepConfig(&s_BuzReportFail);
;;;295    	}
;;;296    	else if(eBeep == eBUZ_REPORT)
000014  2804              CMP      r0,#4
000016  d02b              BEQ      |L1.112|
;;;297    	{
;;;298    		_BeepConfig(&s_BuzReport);
;;;299    	}
;;;300    	else if(eBeep == eBUZ_BLOW_OK)
000018  2808              CMP      r0,#8
00001a  d02c              BEQ      |L1.118|
;;;301    	{
;;;302    		_Beep(500, 0, 1);
;;;303    	}
;;;304    	else if(eBeep == eBUZ_ALRAM)
00001c  2809              CMP      r0,#9
00001e  d02f              BEQ      |L1.128|
;;;305    	{
;;;306    		_BeepConfig(&s_BuzAlarm);
;;;307    	}
;;;308    	else if(eBeep == eBUZ_ERROR)
000020  280a              CMP      r0,#0xa
000022  d030              BEQ      |L1.134|
;;;309    	{
;;;310    		_BeepConfig(&s_BuzError);
;;;311    	}
;;;312    	else if(eBeep == eBUZ_CRITICAL)
000024  280b              CMP      r0,#0xb
000026  d031              BEQ      |L1.140|
;;;313    	{
;;;314    		_Beep(100, 50, 3);
;;;315    	}
;;;316    	else if(eBeep == eBUZ_OK)
000028  280c              CMP      r0,#0xc
00002a  d033              BEQ      |L1.148|
;;;317    	{
;;;318    		_BeepConfig( &s_BuzOK);
;;;319    	}
;;;320    	else if(eBeep == eBUZ_START)
00002c  280d              CMP      r0,#0xd
00002e  d034              BEQ      |L1.154|
;;;321    	{
;;;322    		_Beep(300, 0, 1);
;;;323    	}
;;;324    	else if(eBeep == eBUZ_BREAK)
000030  280e              CMP      r0,#0xe
000032  d02b              BEQ      |L1.140|
;;;325    	{
;;;326    		_Beep(100, 50, 3);
;;;327    	}
;;;328    	else if(eBeep == eBUZ_TIMEOUT)
000034  280f              CMP      r0,#0xf
000036  d029              BEQ      |L1.140|
;;;329    	{
;;;330    		_Beep(100, 50, 3);
;;;331    	}
;;;332    	else if(eBeep == eBUZ_LINK)
000038  2811              CMP      r0,#0x11
00003a  d033              BEQ      |L1.164|
;;;333    	{
;;;334    		_Beep(30, 0, 1);
;;;335    	}
;;;336    	else if(eBeep == eBUZ_PRESSOK)
00003c  2810              CMP      r0,#0x10
00003e  d035              BEQ      |L1.172|
;;;337    	{
;;;338    		_BeepConfig( &s_BuzPressOK);
;;;339    	}
;;;340    	else if(eBeep == eBUZ_FP_IDENTIFY_FAIL)
000040  2812              CMP      r0,#0x12
000042  d036              BEQ      |L1.178|
;;;341    	{
;;;342    		_BeepConfig( &s_BuzIdentifyFail);
;;;343    	}
;;;344    	else if(eBeep == eOP)
000044  2813              CMP      r0,#0x13
000046  d138              BNE      |L1.186|
;;;345    	{
;;;346    		_Beep(110, 0, 1);
000048  2201              MOVS     r2,#1
00004a  2100              MOVS     r1,#0
00004c  f05f006e          MOVS.W   r0,#0x6e
                  |L1.80|
000050  f7ffbffe          B.W      _Beep
                  |L1.84|
000054  4819              LDR      r0,|L1.188|
000056  e02e              B        |L1.182|
                  |L1.88|
000058  4818              LDR      r0,|L1.188|
00005a  3011              ADDS     r0,r0,#0x11           ;282
00005c  e02b              B        |L1.182|
                  |L1.94|
00005e  4817              LDR      r0,|L1.188|
000060  3033              ADDS     r0,r0,#0x33           ;286
000062  e028              B        |L1.182|
                  |L1.100|
000064  4815              LDR      r0,|L1.188|
000066  3044              ADDS     r0,r0,#0x44           ;290
000068  e025              B        |L1.182|
                  |L1.106|
00006a  4814              LDR      r0,|L1.188|
00006c  3055              ADDS     r0,r0,#0x55           ;294
00006e  e022              B        |L1.182|
                  |L1.112|
000070  4812              LDR      r0,|L1.188|
000072  3066              ADDS     r0,r0,#0x66           ;298
000074  e01f              B        |L1.182|
                  |L1.118|
000076  2201              MOVS     r2,#1                 ;302
000078  2100              MOVS     r1,#0                 ;302
00007a  f44f70fa          MOV      r0,#0x1f4             ;302
00007e  e7e7              B        |L1.80|
                  |L1.128|
000080  480e              LDR      r0,|L1.188|
000082  3077              ADDS     r0,r0,#0x77           ;306
000084  e017              B        |L1.182|
                  |L1.134|
000086  480d              LDR      r0,|L1.188|
000088  3099              ADDS     r0,r0,#0x99           ;310
00008a  e014              B        |L1.182|
                  |L1.140|
00008c  2203              MOVS     r2,#3                 ;314
00008e  2132              MOVS     r1,#0x32              ;314
000090  2064              MOVS     r0,#0x64              ;314
000092  e7dd              B        |L1.80|
                  |L1.148|
000094  4809              LDR      r0,|L1.188|
000096  3022              ADDS     r0,r0,#0x22           ;318
000098  e00d              B        |L1.182|
                  |L1.154|
00009a  2201              MOVS     r2,#1                 ;322
00009c  2100              MOVS     r1,#0                 ;322
00009e  f44f7096          MOV      r0,#0x12c             ;322
0000a2  e7d5              B        |L1.80|
                  |L1.164|
0000a4  2201              MOVS     r2,#1                 ;334
0000a6  2100              MOVS     r1,#0                 ;334
0000a8  201e              MOVS     r0,#0x1e              ;334
0000aa  e7d1              B        |L1.80|
                  |L1.172|
0000ac  4803              LDR      r0,|L1.188|
0000ae  3088              ADDS     r0,r0,#0x88           ;338
0000b0  e001              B        |L1.182|
                  |L1.178|
0000b2  4802              LDR      r0,|L1.188|
0000b4  30aa              ADDS     r0,r0,#0xaa           ;342
                  |L1.182|
0000b6  f7ffbffe          B.W      _BeepConfig
                  |L1.186|
;;;347    	}
;;;348    	else
;;;349    	{
;;;350    		
;;;351    	}
;;;352    }	
0000ba  4770              BX       lr
;;;353    #endif
                          ENDP

                  |L1.188|
                          DCD      ||.constdata||

                          AREA ||i.Buzzer_Ctrl||, CODE, READONLY, ALIGN=2

                  Buzzer_Ctrl PROC
;;;355    /*被10ms 中断调用.*/
;;;356    void Buzzer_Ctrl(void)
000000  b570              PUSH     {r4-r6,lr}
;;;357    {
;;;358    	if(pBuzzerCtrl == NULL)
000002  4c15              LDR      r4,|L2.88|
000004  6860              LDR      r0,[r4,#4]            ;357  ; pBuzzerCtrl
000006  2800              CMP      r0,#0                 ;357
000008  d019              BEQ      |L2.62|
;;;359    	{
;;;360    		return;
;;;361    	}
;;;362    
;;;363    	if(s_nActionTimeCnt == pBuzzerCtrl->aCtrlTable[s_nActionStep])
00000a  7822              LDRB     r2,[r4,#0]  ; s_nActionStep
00000c  1881              ADDS     r1,r0,r2
00000e  788b              LDRB     r3,[r1,#2]
000010  7861              LDRB     r1,[r4,#1]  ; s_nActionTimeCnt
000012  428b              CMP      r3,r1
000014  d11c              BNE      |L2.80|
000016  1c52              ADDS     r2,r2,#1
;;;364    	{
;;;365    		s_nActionStep ++;
000018  b2d1              UXTB     r1,r2
00001a  7021              STRB     r1,[r4,#0]
;;;366    		s_nActionTimeCnt = 1;
00001c  2601              MOVS     r6,#1
;;;367    		if(pBuzzerCtrl->aCtrlTable[s_nActionStep] == 0)
00001e  4401              ADD      r1,r1,r0
000020  7066              STRB     r6,[r4,#1]            ;366
000022  7889              LDRB     r1,[r1,#2]
000024  2500              MOVS     r5,#0
000026  b111              CBZ      r1,|L2.46|
;;;368    		{
;;;369    			if(pBuzzerCtrl->bNeedRepeat)
;;;370    			{
;;;371    				/*步数从头开始*/
;;;372    				s_nActionStep = 0;
;;;373    				if(pBuzzerCtrl->bBuzzerDefaultState)
;;;374    				{
;;;375    					Buzzer_On();
;;;376    					s_bBuzzerCurrentState= true;
;;;377    				}
;;;378    				else
;;;379    				{
;;;380    					Buzzer_Off();
;;;381    					s_bBuzzerCurrentState= false;
;;;382    				}
;;;383    			}
;;;384    			else
;;;385    			{
;;;386    				Buzzer_Off();
;;;387    				pBuzzerCtrl = NULL;
;;;388    				return;
;;;389    			}
;;;390    		}
;;;391    		else
;;;392    		{
;;;393    			if(s_bBuzzerCurrentState)
000028  78a0              LDRB     r0,[r4,#2]  ; s_bBuzzerCurrentState
00002a  b948              CBNZ     r0,|L2.64|
00002c  e004              B        |L2.56|
                  |L2.46|
00002e  7841              LDRB     r1,[r0,#1]            ;369
000030  b151              CBZ      r1,|L2.72|
000032  7025              STRB     r5,[r4,#0]            ;372
000034  7800              LDRB     r0,[r0,#0]            ;373
000036  b118              CBZ      r0,|L2.64|
                  |L2.56|
000038  f7fffffe          BL       Buzzer_On
00003c  70a6              STRB     r6,[r4,#2]            ;376
                  |L2.62|
;;;394    			{
;;;395    				Buzzer_Off();
;;;396    				s_bBuzzerCurrentState = false;
;;;397    			}
;;;398    			else
;;;399    			{
;;;400    				Buzzer_On();
;;;401    				s_bBuzzerCurrentState = true;
;;;402    			}
;;;403    		}
;;;404    	}
;;;405    	else
;;;406    	{
;;;407    		s_nActionTimeCnt ++;
;;;408    	}
;;;409    }
00003e  bd70              POP      {r4-r6,pc}
                  |L2.64|
000040  f7fffffe          BL       Buzzer_Off
000044  70a5              STRB     r5,[r4,#2]            ;381
000046  bd70              POP      {r4-r6,pc}
                  |L2.72|
000048  f7fffffe          BL       Buzzer_Off
00004c  6065              STR      r5,[r4,#4]            ;388  ; pBuzzerCtrl
00004e  bd70              POP      {r4-r6,pc}
                  |L2.80|
000050  1c49              ADDS     r1,r1,#1
000052  7061              STRB     r1,[r4,#1]            ;407
000054  bd70              POP      {r4-r6,pc}
;;;410    
                          ENDP

000056  0000              DCW      0x0000
                  |L2.88|
                          DCD      ||.data||

                          AREA ||i.Buzzer_Init||, CODE, READONLY, ALIGN=2

                  Buzzer_Init PROC
;;;20     
;;;21     void Buzzer_Init(void)
000000  b530              PUSH     {r4,r5,lr}
;;;22     {
000002  b087              SUB      sp,sp,#0x1c
;;;23     	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;24     	TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;25     	
;;;26     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);
000004  2101              MOVS     r1,#1
000006  2002              MOVS     r0,#2
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;27     	TIM_DeInit(TIM3);
00000c  4d12              LDR      r5,|L3.88|
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       TIM_DeInit
;;;28     
;;;29     	/*Timer时基设置外设时钟频率*/
;;;30     	TIM_TimeBaseStructure.TIM_Period = 2370;	/*Timer 自动重载值*/
000014  f6401042          MOV      r0,#0x942
000018  f8ad0014          STRH     r0,[sp,#0x14]
;;;31     	TIM_TimeBaseStructure.TIM_Prescaler = 9;	/*预分频*/
00001c  2009              MOVS     r0,#9
00001e  f8ad0010          STRH     r0,[sp,#0x10]
;;;32     	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
000022  2400              MOVS     r4,#0
000024  f8ad4016          STRH     r4,[sp,#0x16]
;;;33     	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
000028  f8ad4012          STRH     r4,[sp,#0x12]
;;;34     	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
00002c  a904              ADD      r1,sp,#0x10
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       TIM_TimeBaseInit
;;;35     
;;;36     	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1; /**/
000034  2060              MOVS     r0,#0x60
000036  f8ad0000          STRH     r0,[sp,#0]
;;;37     	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
;;;38     	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
00003a  2001              MOVS     r0,#1
00003c  f8ad0002          STRH     r0,[sp,#2]
;;;39     	TIM_OCInitStructure.TIM_Pulse = 2370 / 2;	/*占空比.要符合脉冲小于周期的原则*/
000040  f24040a1          MOV      r0,#0x4a1
000044  f8ad0006          STRH     r0,[sp,#6]
000048  f8ad4008          STRH     r4,[sp,#8]            ;37
;;;40     	TIM_OC3Init(TIM3, &TIM_OCInitStructure); 
00004c  4669              MOV      r1,sp
00004e  4628              MOV      r0,r5
000050  f7fffffe          BL       TIM_OC3Init
;;;41     }
000054  b007              ADD      sp,sp,#0x1c
000056  bd30              POP      {r4,r5,pc}
;;;42     
                          ENDP

                  |L3.88|
                          DCD      0x40000400

                          AREA ||i.Buzzer_Off||, CODE, READONLY, ALIGN=2

                  Buzzer_Off PROC
;;;54     
;;;55     void Buzzer_Off(void)
000000  b538              PUSH     {r3-r5,lr}
;;;56     {
;;;57     	GPIO_InitTypeDef GPIO_InitStructure;
;;;58     	
;;;59     	TIM_Cmd(TIM3,DISABLE);
000002  2100              MOVS     r1,#0
000004  4809              LDR      r0,|L4.44|
000006  f7fffffe          BL       TIM_Cmd
;;;60     
;;;61     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
00000a  2401              MOVS     r4,#1
00000c  f8ad4000          STRH     r4,[sp,#0]
;;;62     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;63     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
000016  2002              MOVS     r0,#2
000018  f88d0002          STRB     r0,[sp,#2]
;;;64     	GPIO_Init(GPIOB, &GPIO_InitStructure);
00001c  4669              MOV      r1,sp
00001e  4804              LDR      r0,|L4.48|
000020  f7fffffe          BL       GPIO_Init
;;;65     	GPIOB->BRR=GPIO_Pin_0;
000024  4802              LDR      r0,|L4.48|
000026  3014              ADDS     r0,r0,#0x14
000028  6004              STR      r4,[r0,#0]
;;;66     }
00002a  bd38              POP      {r3-r5,pc}
;;;67     
                          ENDP

                  |L4.44|
                          DCD      0x40000400
                  |L4.48|
                          DCD      0x40010c00

                          AREA ||i.Buzzer_On||, CODE, READONLY, ALIGN=2

                  Buzzer_On PROC
;;;42     
;;;43     void Buzzer_On(void)
000000  b508              PUSH     {r3,lr}
;;;44     {
;;;45     	GPIO_InitTypeDef GPIO_InitStructure;
;;;46     
;;;47     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
000002  2001              MOVS     r0,#1
000004  f8ad0000          STRH     r0,[sp,#0]
;;;48     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000008  2018              MOVS     r0,#0x18
00000a  f88d0003          STRB     r0,[sp,#3]
;;;49     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
00000e  2002              MOVS     r0,#2
000010  f88d0002          STRB     r0,[sp,#2]
;;;50     	GPIO_Init(GPIOB, &GPIO_InitStructure);
000014  4669              MOV      r1,sp
000016  4804              LDR      r0,|L5.40|
000018  f7fffffe          BL       GPIO_Init
;;;51     	
;;;52     	TIM_Cmd(TIM3,ENABLE);
00001c  2101              MOVS     r1,#1
00001e  4803              LDR      r0,|L5.44|
000020  f7fffffe          BL       TIM_Cmd
;;;53     }
000024  bd08              POP      {r3,pc}
;;;54     
                          ENDP

000026  0000              DCW      0x0000
                  |L5.40|
                          DCD      0x40010c00
                  |L5.44|
                          DCD      0x40000400

                          AREA ||i._Beep||, CODE, READONLY, ALIGN=2

                  _Beep PROC
;;;91     
;;;92     void _Beep(unsigned short  nOnDuration, unsigned short  nOffDuration, unsigned short  nRepeatCnt)
000000  b510              PUSH     {r4,lr}
;;;93     {
;;;94     	s_sBuzzerConfig.bIsBusy = true;
000002  4b07              LDR      r3,|L6.32|
000004  2401              MOVS     r4,#1
000006  701c              STRB     r4,[r3,#0]
;;;95     	s_sBuzzerConfig.nTimeCnt = 0;
000008  2400              MOVS     r4,#0
00000a  805c              STRH     r4,[r3,#2]
;;;96     	s_sBuzzerConfig.eCurrentState = eBuzzerOn;
00000c  705c              STRB     r4,[r3,#1]
;;;97     	s_sBuzzerConfig.nOnDuration = nOnDuration / 10;
00000e  240a              MOVS     r4,#0xa
000010  fbb0f0f4          UDIV     r0,r0,r4
000014  8098              STRH     r0,[r3,#4]
;;;98     	s_sBuzzerConfig.nOffDuration = nOffDuration / 10;
000016  fbb1f0f4          UDIV     r0,r1,r4
00001a  80d8              STRH     r0,[r3,#6]
;;;99     	s_sBuzzerConfig.nRepeatCnt = nRepeatCnt;
00001c  721a              STRB     r2,[r3,#8]
;;;100    }
00001e  bd10              POP      {r4,pc}
;;;101    
                          ENDP

                  |L6.32|
                          DCD      ||.bss||

                          AREA ||i._BeepConfig||, CODE, READONLY, ALIGN=2

                  _BeepConfig PROC
;;;252    
;;;253    void _BeepConfig(const sBuzzerActionStruct *pCtrl)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;254    {
000004  0005              MOVS     r5,r0
000006  d00e              BEQ      |L7.38|
;;;255    	if(pCtrl)
;;;256    	{
;;;257    		s_nActionStep = 0;
000008  4c08              LDR      r4,|L7.44|
00000a  2600              MOVS     r6,#0
;;;258    		s_nActionTimeCnt = 1;
00000c  2701              MOVS     r7,#1
00000e  7026              STRB     r6,[r4,#0]            ;257
000010  7067              STRB     r7,[r4,#1]
;;;259    
;;;260    		if(pCtrl->bBuzzerDefaultState)
000012  7828              LDRB     r0,[r5,#0]
000014  b118              CBZ      r0,|L7.30|
;;;261    		{
;;;262    			Buzzer_On();
000016  f7fffffe          BL       Buzzer_On
;;;263    			s_bBuzzerCurrentState= true;
00001a  70a7              STRB     r7,[r4,#2]
00001c  e002              B        |L7.36|
                  |L7.30|
;;;264    		}
;;;265    		else
;;;266    		{
;;;267    			Buzzer_Off();
00001e  f7fffffe          BL       Buzzer_Off
;;;268    			s_bBuzzerCurrentState= false;
000022  70a6              STRB     r6,[r4,#2]
                  |L7.36|
;;;269    		}
;;;270    		pBuzzerCtrl = pCtrl;
000024  6065              STR      r5,[r4,#4]  ; pBuzzerCtrl
                  |L7.38|
;;;271    	}
;;;272    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;273    
                          ENDP

00002a  0000              DCW      0x0000
                  |L7.44|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  s_sBuzzerConfig
                          %        10

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  s_BuzStartTest
000000  01002828          DCB      0x01,0x00,0x28,0x28
000004  28282828          DCB      0x28,0x28,0x28,0x28
000008  00000000          DCB      0x00,0x00,0x00,0x00
                          DCDU     0x00000000
000010  00                DCB      0x00
                  s_BuzDeviceOK
000011  01003c            DCB      0x01,0x00,0x3c
000014  00000000          DCB      0x00,0x00,0x00,0x00
                          %        8
000020  0000              DCB      0x00,0x00
                  s_BuzOK
000022  0100              DCB      0x01,0x00
000024  0c000000          DCB      0x0c,0x00,0x00,0x00
                          %        8
000030  000000            DCB      0x00,0x00,0x00
                  s_BuzBlowBreak
000033  00                DCB      0x00
000034  000a140a          DCB      0x00,0x0a,0x14,0x0a
000038  0a000000          DCB      0x0a,0x00,0x00,0x00
                          %        8
                  s_BuzReportPass
000044  01003200          DCB      0x01,0x00,0x32,0x00
                          %        12
000054  00                DCB      0x00
                  s_BuzReportFail
000055  010014            DCB      0x01,0x00,0x14
000058  0f140f14          DCB      0x0f,0x14,0x0f,0x14
00005c  0f000000          DCB      0x0f,0x00,0x00,0x00
                          DCDU     0x00000000
000064  0000              DCB      0x00,0x00
                  s_BuzReport
000066  0100              DCB      0x01,0x00
000068  0c050c05          DCB      0x0c,0x05,0x0c,0x05
00006c  0c050000          DCB      0x0c,0x05,0x00,0x00
                          DCDU     0x00000000
000074  000000            DCB      0x00,0x00,0x00
                  s_BuzAlarm
000077  01                DCB      0x01
000078  00460000          DCB      0x00,0x46,0x00,0x00
                          %        12
                  s_BuzPressOK
000088  01000a00          DCB      0x01,0x00,0x0a,0x00
                          %        12
000098  00                DCB      0x00
                  s_BuzError
000099  01001e            DCB      0x01,0x00,0x1e
00009c  00000000          DCB      0x00,0x00,0x00,0x00
                          %        8
0000a8  0000              DCB      0x00,0x00
                  s_BuzIdentifyFail
0000aa  0000              DCB      0x00,0x00
0000ac  0a140a0a          DCB      0x0a,0x14,0x0a,0x0a
0000b0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCDU     0x00000000
0000b8  000000            DCB      0x00,0x00,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  s_nActionStep
000000  00                DCB      0x00
                  s_nActionTimeCnt
000001  00                DCB      0x00
                  s_bBuzzerCurrentState
000002  0000              DCB      0x00,0x00
                  pBuzzerCtrl
                          DCD      0x00000000
