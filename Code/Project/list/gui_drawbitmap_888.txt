; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\gui_drawbitmap_888.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui_drawbitmap_888.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\Core\GUI_DrawBitmap_888.c]
                          THUMB

                          AREA ||i._DrawBitmap||, CODE, READONLY, ALIGN=2

                  _DrawBitmap PROC
;;;33     */
;;;34     static void _DrawBitmap(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag, tLCDDEV_Index2Color * pfIndex2Color) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  461e              MOV      r6,r3
000008  4615              MOV      r5,r2
00000a  4689              MOV      r9,r1
00000c  4680              MOV      r8,r0
;;;35       const U32 * pData;
;;;36       int y, OldIndex, Mag, BytesPerLine, UseDrawBitmap = 0;
;;;37       U32 PrevColor;
;;;38       GUI_USE_PARA(pLogPal);
;;;39       OldIndex = LCD_GetColorIndex();
00000e  9c16              LDR      r4,[sp,#0x58]
000010  f7fffffe          BL       LCD_GetColorIndex
;;;40       PrevColor = GUI_INVALID_COLOR;
000014  9007              STR      r0,[sp,#0x1c]
000016  e9dd0118          LDRD     r0,r1,[sp,#0x60]
;;;41       pData = (const U32 *)pPixel;
;;;42       Mag = (xMag | yMag);
00001a  4308              ORRS     r0,r0,r1
00001c  00a9              LSLS     r1,r5,#2
00001e  f06f4a70          MVN      r10,#0xf0000000       ;40
;;;43       BytesPerLine = xsize * 4;
;;;44       /* Check if bitmaps color format fits to the current color conversion */
;;;45       if (Mag == 1) {
000022  9103              STR      r1,[sp,#0xc]
000024  2801              CMP      r0,#1
000026  d004              BEQ      |L1.50|
;;;46         #if GUI_SUPPORT_MEMDEV
;;;47         if (!GUI_Context.hDevData) {
;;;48         #else
;;;49         {
;;;50         #endif
;;;51           if (LCD_GetpfIndex2ColorEx(GUI_Context.SelLayer) == pfIndex2Color) {
;;;52             UseDrawBitmap = 1;
;;;53           }
;;;54         }
;;;55       }
;;;56       if (UseDrawBitmap) {
;;;57         LCD_DrawBitmap(x0, y0, xsize, ysize, 1, 1, 24, BytesPerLine, pPixel, 0);
;;;58       } else {
;;;59         if (Mag == 1) {
;;;60           /* Perform clipping */
;;;61           int x1, y1, Diff;
;;;62           y1 = y0 + ysize - 1;
;;;63           x1 = x0 + xsize - 1;
;;;64           /* Clip Y */
;;;65           if (y0 < GUI_Context.ClipRect.y0) {
;;;66             Diff = GUI_Context.ClipRect.y0 - y0;
;;;67             y0   = GUI_Context.ClipRect.y0;
;;;68             #if GUI_SUPPORT_LARGE_BITMAPS                       /* Required only for 16 bit CPUs if some bitmaps are >64kByte */
;;;69               pData += (U32)Diff * (U32)BytesPerLine / 4;
;;;70             #else
;;;71               pData += (unsigned)Diff * (unsigned)BytesPerLine / 4;
;;;72             #endif
;;;73             ysize -= Diff;
;;;74           }
;;;75           Diff = y1 - GUI_Context.ClipRect.y1;
;;;76           if (Diff > 0) {
;;;77             ysize -= Diff;
;;;78           }
;;;79           if (ysize <=0) {
;;;80     		    return;
;;;81           }
;;;82           /* Clip right side */
;;;83           Diff = x1 - GUI_Context.ClipRect.x1;
;;;84           if (Diff > 0) {
;;;85             xsize -= Diff;
;;;86           }
;;;87           /* Clip left side */
;;;88           if (x0 < GUI_Context.ClipRect.x0) {
;;;89             Diff = GUI_Context.ClipRect.x0 - x0;
;;;90     			  xsize -= Diff;
;;;91             pData += Diff; 
;;;92             x0 += Diff; 
;;;93           }
;;;94           if (xsize <=0) {
;;;95     		    return;
;;;96           }
;;;97           /* Simple, unmagnified output using LCD_L0_SetPixel() */
;;;98           for (y = 0; y < ysize; y++) {
;;;99             int x;
;;;100            const U32 * p = pData;
;;;101            for (x = 0; x < xsize; x++) {
;;;102              U32 Color;
;;;103              Color = *p++;
;;;104              if (Color != PrevColor) {
;;;105                LCD_SetColor(pfIndex2Color(Color));
;;;106                PrevColor = Color;
;;;107              }
;;;108              LCDDEV_L0_SetPixelIndex(x + x0, y + y0, LCD_COLORINDEX);
;;;109            }
;;;110            pData += BytesPerLine / 4;
;;;111          }
;;;112        } else {
;;;113          /* Magnified output using LCD_FillRect() */
;;;114          int x,y;
;;;115          int yi;
;;;116          for (y = y0, yi = 0; yi < ysize; yi++, y += yMag, pPixel += BytesPerLine) {
000028  f04f0b00          MOV      r11,#0
00002c  f8cd9000          STR      r9,[sp,#0]            ;56
000030  e0ae              B        |L1.400|
                  |L1.50|
000032  4f5b              LDR      r7,|L1.416|
000034  f8b70050          LDRH     r0,[r7,#0x50]         ;47  ; GUI_Context
000038  b9b0              CBNZ     r0,|L1.104|
00003a  7c78              LDRB     r0,[r7,#0x11]         ;51  ; GUI_Context
00003c  f7fffffe          BL       LCD_GetpfIndex2ColorEx
000040  991a              LDR      r1,[sp,#0x68]         ;51
000042  4288              CMP      r0,r1                 ;51
000044  d110              BNE      |L1.104|
000046  2001              MOVS     r0,#1                 ;57
000048  2218              MOVS     r2,#0x18              ;57
00004a  9000              STR      r0,[sp,#0]            ;57
00004c  e9cd0201          STRD     r0,r2,[sp,#4]         ;57
000050  2100              MOVS     r1,#0                 ;57
000052  e9cd4104          STRD     r4,r1,[sp,#0x10]      ;57
000056  4633              MOV      r3,r6                 ;57
000058  462a              MOV      r2,r5                 ;57
00005a  4649              MOV      r1,r9                 ;57
00005c  4640              MOV      r0,r8                 ;57
00005e  f7fffffe          BL       LCD_DrawBitmap
                  |L1.98|
;;;117            int yMax;
;;;118            yMax = y + yMag - 1;
;;;119            /* Draw if within clip area */
;;;120            if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
;;;121              int xi;
;;;122              const U32 GUI_UNI_PTR * p = pData;
;;;123              for (x = x0, xi = 0; xi < xsize; xi++, x += xMag) {
;;;124                U32 Color;
;;;125                Color = *p++;
;;;126                if (Color != PrevColor) {
;;;127                  LCD_SetColor(pfIndex2Color(Color));
;;;128                  PrevColor = Color;
;;;129                }
;;;130                LCD_FillRect(x, y, x + xMag - 1, yMax);
;;;131              }
;;;132            }
;;;133            pData += BytesPerLine / 4;
;;;134          }
;;;135        }
;;;136        GUI_SetColorIndex(OldIndex);
;;;137      }
;;;138    }
000062  b00d              ADD      sp,sp,#0x34
000064  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.104|
000068  eb090306          ADD      r3,r9,r6              ;62
00006c  eb080205          ADD      r2,r8,r5              ;63
000070  f9b7000a          LDRSH    r0,[r7,#0xa]          ;65  ; GUI_Context
000074  1e52              SUBS     r2,r2,#1              ;65
000076  1e5b              SUBS     r3,r3,#1              ;65
000078  4548              CMP      r0,r9                 ;65
00007a  dd08              BLE      |L1.142|
00007c  eba00109          SUB      r1,r0,r9              ;66
000080  4681              MOV      r9,r0                 ;67
000082  9803              LDR      r0,[sp,#0xc]          ;71
000084  4348              MULS     r0,r1,r0              ;71
000086  f0200003          BIC      r0,r0,#3              ;71
00008a  4404              ADD      r4,r4,r0              ;71
00008c  1a76              SUBS     r6,r6,r1              ;73
                  |L1.142|
00008e  f9b7000e          LDRSH    r0,[r7,#0xe]          ;75  ; GUI_Context
000092  1a18              SUBS     r0,r3,r0              ;75
000094  2800              CMP      r0,#0                 ;76
000096  dd00              BLE      |L1.154|
000098  1a36              SUBS     r6,r6,r0              ;77
                  |L1.154|
00009a  2e00              CMP      r6,#0                 ;79
00009c  dde1              BLE      |L1.98|
00009e  f9b7000c          LDRSH    r0,[r7,#0xc]          ;83  ; GUI_Context
0000a2  1a10              SUBS     r0,r2,r0              ;83
0000a4  2800              CMP      r0,#0                 ;84
0000a6  dd00              BLE      |L1.170|
0000a8  1a2d              SUBS     r5,r5,r0              ;85
                  |L1.170|
0000aa  483d              LDR      r0,|L1.416|
0000ac  f9b00008          LDRSH    r0,[r0,#8]            ;88  ; GUI_Context
0000b0  4540              CMP      r0,r8                 ;88
0000b2  dd05              BLE      |L1.192|
0000b4  eba00008          SUB      r0,r0,r8              ;89
0000b8  1a2d              SUBS     r5,r5,r0              ;90
0000ba  eb040480          ADD      r4,r4,r0,LSL #2       ;91
0000be  4480              ADD      r8,r8,r0              ;92
                  |L1.192|
0000c0  2d00              CMP      r5,#0                 ;94
0000c2  ddce              BLE      |L1.98|
0000c4  2000              MOVS     r0,#0                 ;98
0000c6  e026              B        |L1.278|
                  |L1.200|
0000c8  46a3              MOV      r11,r4                ;100
0000ca  2700              MOVS     r7,#0                 ;101
0000cc  e018              B        |L1.256|
0000ce  bf00              NOP                            ;103
                  |L1.208|
0000d0  f85b0b04          LDR      r0,[r11],#4           ;103
0000d4  9000              STR      r0,[sp,#0]            ;104
0000d6  4550              CMP      r0,r10                ;104
0000d8  d005              BEQ      |L1.230|
0000da  991a              LDR      r1,[sp,#0x68]         ;105
0000dc  4788              BLX      r1                    ;105
0000de  f7fffffe          BL       LCD_SetColor
0000e2  f8dda000          LDR      r10,[sp,#0]           ;106
                  |L1.230|
0000e6  4a2e              LDR      r2,|L1.416|
0000e8  9809              LDR      r0,[sp,#0x24]         ;108
0000ea  f8b2c002          LDRH     r12,[r2,#2]           ;108  ; GUI_Context
0000ee  6cd2              LDR      r2,[r2,#0x4c]         ;108  ; GUI_Context
0000f0  eb000109          ADD      r1,r0,r9              ;108
0000f4  eb070008          ADD      r0,r7,r8              ;108
0000f8  6a53              LDR      r3,[r2,#0x24]         ;108
0000fa  4662              MOV      r2,r12                ;108
0000fc  4798              BLX      r3                    ;108
0000fe  1c7f              ADDS     r7,r7,#1              ;108
                  |L1.256|
000100  42af              CMP      r7,r5                 ;101
000102  dbe5              BLT      |L1.208|
000104  9803              LDR      r0,[sp,#0xc]          ;110
000106  17c1              ASRS     r1,r0,#31             ;110
000108  eb007091          ADD      r0,r0,r1,LSR #30      ;110
00010c  f0200003          BIC      r0,r0,#3              ;110
000110  4404              ADD      r4,r4,r0              ;110
000112  9809              LDR      r0,[sp,#0x24]         ;98
000114  1c40              ADDS     r0,r0,#1              ;98
                  |L1.278|
000116  9009              STR      r0,[sp,#0x24]         ;98
000118  42b0              CMP      r0,r6                 ;98
00011a  dbd5              BLT      |L1.200|
00011c  e03a              B        |L1.404|
                  |L1.286|
00011e  9919              LDR      r1,[sp,#0x64]         ;118
000120  9800              LDR      r0,[sp,#0]            ;118
000122  4408              ADD      r0,r0,r1              ;118
000124  900b              STR      r0,[sp,#0x2c]         ;118
000126  491e              LDR      r1,|L1.416|
000128  1e40              SUBS     r0,r0,#1              ;118
00012a  9004              STR      r0,[sp,#0x10]         ;120
00012c  f9b1200a          LDRSH    r2,[r1,#0xa]          ;120  ; GUI_Context
000130  4282              CMP      r2,r0                 ;120
000132  dc22              BGT      |L1.378|
000134  f9b1100e          LDRSH    r1,[r1,#0xe]          ;120  ; GUI_Context
000138  9800              LDR      r0,[sp,#0]            ;120
00013a  4281              CMP      r1,r0                 ;120
00013c  db1d              BLT      |L1.378|
00013e  46a1              MOV      r9,r4                 ;122
000140  2700              MOVS     r7,#0                 ;123
000142  f8cd8018          STR      r8,[sp,#0x18]         ;123
000146  e016              B        |L1.374|
                  |L1.328|
000148  f8590b04          LDR      r0,[r9],#4            ;125
00014c  9005              STR      r0,[sp,#0x14]         ;126
00014e  4550              CMP      r0,r10                ;126
000150  d005              BEQ      |L1.350|
000152  991a              LDR      r1,[sp,#0x68]         ;127
000154  4788              BLX      r1                    ;127
000156  f7fffffe          BL       LCD_SetColor
00015a  f8dda014          LDR      r10,[sp,#0x14]        ;128
                  |L1.350|
00015e  9918              LDR      r1,[sp,#0x60]         ;130
000160  9806              LDR      r0,[sp,#0x18]         ;130
000162  9b04              LDR      r3,[sp,#0x10]         ;130
000164  1842              ADDS     r2,r0,r1              ;130
000166  920c              STR      r2,[sp,#0x30]         ;130
000168  1e52              SUBS     r2,r2,#1              ;130
00016a  9900              LDR      r1,[sp,#0]            ;130
00016c  f7fffffe          BL       LCD_FillRect
000170  9a0c              LDR      r2,[sp,#0x30]         ;123
000172  1c7f              ADDS     r7,r7,#1              ;123
000174  9206              STR      r2,[sp,#0x18]         ;123
                  |L1.374|
000176  42af              CMP      r7,r5                 ;123
000178  dbe6              BLT      |L1.328|
                  |L1.378|
00017a  9803              LDR      r0,[sp,#0xc]          ;133
00017c  f10b0b01          ADD      r11,r11,#1            ;116
000180  17c1              ASRS     r1,r0,#31             ;133
000182  eb007091          ADD      r0,r0,r1,LSR #30      ;133
000186  f0200003          BIC      r0,r0,#3              ;133
00018a  4404              ADD      r4,r4,r0              ;133
00018c  980b              LDR      r0,[sp,#0x2c]         ;116
00018e  9000              STR      r0,[sp,#0]            ;116
                  |L1.400|
000190  45b3              CMP      r11,r6                ;116
000192  dbc4              BLT      |L1.286|
                  |L1.404|
000194  9807              LDR      r0,[sp,#0x1c]         ;136
000196  b00d              ADD      sp,sp,#0x34           ;136
000198  e8bd4ff0          POP      {r4-r11,lr}           ;136
00019c  f7ffbffe          B.W      GUI_SetColorIndex
;;;139    
                          ENDP

                  |L1.416|
                          DCD      GUI_Context

                          AREA ||i._DrawBitmap_888||, CODE, READONLY, ALIGN=2

                  _DrawBitmap_888 PROC
;;;143    */
;;;144    static void _DrawBitmap_888(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b085              SUB      sp,sp,#0x14
000004  f10d0c28          ADD      r12,sp,#0x28
000008  e89c00f0          LDM      r12,{r4-r7}
;;;145      _DrawBitmap(x0, y0, xsize, ysize, pPixel, pLogPal, xMag, yMag, GUI_BitmapMethods888.pfIndex2Color);
00000c  f8dfc00c          LDR      r12,|L2.28|
000010  e88d10f0          STM      sp,{r4-r7,r12}
000014  f7fffffe          BL       _DrawBitmap
;;;146    }
000018  b005              ADD      sp,sp,#0x14
00001a  bdf0              POP      {r4-r7,pc}
;;;147    
                          ENDP

                  |L2.28|
                          DCD      LCD_Index2Color_888

                          AREA ||i._DrawBitmap_M888||, CODE, READONLY, ALIGN=2

                  _DrawBitmap_M888 PROC
;;;151    */
;;;152    static void _DrawBitmap_M888(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b085              SUB      sp,sp,#0x14
000004  f10d0c28          ADD      r12,sp,#0x28
000008  e89c00f0          LDM      r12,{r4-r7}
;;;153      _DrawBitmap(x0, y0, xsize, ysize, pPixel, pLogPal, xMag, yMag, GUI_BitmapMethodsM888.pfIndex2Color);
00000c  f8dfc00c          LDR      r12,|L3.28|
000010  e88d10f0          STM      sp,{r4-r7,r12}
000014  f7fffffe          BL       _DrawBitmap
;;;154    }
000018  b005              ADD      sp,sp,#0x14
00001a  bdf0              POP      {r4-r7,pc}
;;;155    
                          ENDP

                  |L3.28|
                          DCD      LCD_Index2Color_M888

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  GUI_BitmapMethods888
                          DCD      _DrawBitmap_888
                          DCD      LCD_Index2Color_888

                          AREA ||area_number.7||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.constdata||
                  GUI_BitmapMethodsM888
                          DCD      _DrawBitmap_M888
                          DCD      LCD_Index2Color_M888
