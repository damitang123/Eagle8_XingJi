; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\gui_getbitmappixelindex.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui_getbitmappixelindex.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\Core\GUI_GetBitmapPixelIndex.c]
                          THUMB

                          AREA ||i.GUI_GetBitmapPixelIndex||, CODE, READONLY, ALIGN=1

                  GUI_GetBitmapPixelIndex PROC
;;;31     */
;;;32     int GUI_GetBitmapPixelIndex(const GUI_BITMAP GUI_UNI_PTR * pBMP, unsigned x, unsigned y) {
000000  88c3              LDRH     r3,[r0,#6]
;;;33       unsigned Off, Value;
;;;34       switch (pBMP->BitsPerPixel) {
000002  2b04              CMP      r3,#4
000004  d028              BEQ      |L1.88|
000006  dc04              BGT      |L1.18|
000008  2b01              CMP      r3,#1
00000a  d008              BEQ      |L1.30|
00000c  2b02              CMP      r3,#2
00000e  d104              BNE      |L1.26|
000010  e013              B        |L1.58|
                  |L1.18|
000012  2b08              CMP      r3,#8
000014  d02d              BEQ      |L1.114|
000016  2b10              CMP      r3,#0x10
000018  d031              BEQ      |L1.126|
                  |L1.26|
;;;35       case 1:
;;;36         Off = (x >> 3) + (y * pBMP->BytesPerLine);
;;;37         Value = *(pBMP->pData + Off);
;;;38         Value = Value >> (7 - (x & 0x7)) & 0x1;
;;;39         break;
;;;40       case 2:
;;;41         Off = (x >> 2) + (y * pBMP->BytesPerLine);
;;;42         Value = *(pBMP->pData + Off);
;;;43         Value = Value >> (6 - ((x << 1) & 0x6)) & 0x3;
;;;44         break;
;;;45       case 4:
;;;46         Off = (x >> 1) + (y * pBMP->BytesPerLine);
;;;47         Value = *(pBMP->pData + Off);
;;;48         Value = (x & 1) ? (Value & 0xF) : (Value >> 4);
;;;49         break;
;;;50       case 8:
;;;51         Off = x + y * pBMP->BytesPerLine;
;;;52         Value = *(pBMP->pData + Off);
;;;53         break;
;;;54       case 16:
;;;55         Off = (x << 1) + y * pBMP->BytesPerLine;
;;;56         Value = *(pBMP->pData + Off) | (*(pBMP->pData + Off + 1) << 8);
;;;57         break;
;;;58       default:
;;;59         Value = 0;
00001a  2000              MOVS     r0,#0
;;;60       }
;;;61       return Value;
;;;62     }
00001c  4770              BX       lr
                  |L1.30|
00001e  8883              LDRH     r3,[r0,#4]            ;36
000020  6880              LDR      r0,[r0,#8]            ;37
000022  4353              MULS     r3,r2,r3              ;36
000024  eb0302d1          ADD      r2,r3,r1,LSR #3       ;36
000028  f0010107          AND      r1,r1,#7              ;38
00002c  5c80              LDRB     r0,[r0,r2]            ;37
00002e  f1c10107          RSB      r1,r1,#7              ;38
000032  40c8              LSRS     r0,r0,r1              ;38
000034  f0000001          AND      r0,r0,#1              ;38
000038  4770              BX       lr
                  |L1.58|
00003a  8883              LDRH     r3,[r0,#4]            ;41
00003c  6880              LDR      r0,[r0,#8]            ;42
00003e  4353              MULS     r3,r2,r3              ;41
000040  eb030291          ADD      r2,r3,r1,LSR #2       ;41
000044  5c80              LDRB     r0,[r0,r2]            ;42
000046  2206              MOVS     r2,#6                 ;43
000048  ea020141          AND      r1,r2,r1,LSL #1       ;43
00004c  f1c10106          RSB      r1,r1,#6              ;43
000050  40c8              LSRS     r0,r0,r1              ;43
000052  f0000003          AND      r0,r0,#3              ;43
000056  4770              BX       lr
                  |L1.88|
000058  8883              LDRH     r3,[r0,#4]            ;46
00005a  6880              LDR      r0,[r0,#8]            ;47
00005c  4353              MULS     r3,r2,r3              ;46
00005e  eb030251          ADD      r2,r3,r1,LSR #1       ;46
000062  07c9              LSLS     r1,r1,#31             ;48
000064  5c80              LDRB     r0,[r0,r2]            ;47
000066  d002              BEQ      |L1.110|
000068  f000000f          AND      r0,r0,#0xf            ;48
00006c  4770              BX       lr
                  |L1.110|
00006e  0900              LSRS     r0,r0,#4              ;48
000070  4770              BX       lr
                  |L1.114|
000072  8883              LDRH     r3,[r0,#4]            ;51
000074  6880              LDR      r0,[r0,#8]            ;52
000076  fb021103          MLA      r1,r2,r3,r1           ;51
00007a  5c40              LDRB     r0,[r0,r1]            ;52
00007c  4770              BX       lr
                  |L1.126|
00007e  8883              LDRH     r3,[r0,#4]            ;55
000080  6880              LDR      r0,[r0,#8]            ;56
000082  4353              MULS     r3,r2,r3              ;55
000084  eb030141          ADD      r1,r3,r1,LSL #1       ;55
000088  4408              ADD      r0,r0,r1              ;56
00008a  8800              LDRH     r0,[r0,#0]            ;56
00008c  4770              BX       lr
;;;63     
                          ENDP

