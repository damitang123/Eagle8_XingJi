; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\guidev_write.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guidev_write.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\MemDev\GUIDEV_Write.c]
                          THUMB

                          AREA ||i.GUI_MEMDEV_Write||, CODE, READONLY, ALIGN=2

                  GUI_MEMDEV_Write PROC
;;;70     */
;;;71     void GUI_MEMDEV_Write(GUI_MEMDEV_Handle hMem) {
000000  4901              LDR      r1,|L1.8|
;;;72       GUI_MEMDEV_WriteAt(hMem, GUI_POS_AUTO, GUI_POS_AUTO);
000002  460a              MOV      r2,r1
000004  f7ffbffe          B.W      GUI_MEMDEV_WriteAt
;;;73     }
;;;74     
                          ENDP

                  |L1.8|
                          DCD      0xfffff001

                          AREA ||i.GUI_MEMDEV_WriteAt||, CODE, READONLY, ALIGN=1

                  GUI_MEMDEV_WriteAt PROC
;;;39     */
;;;40     void GUI_MEMDEV_WriteAt(GUI_MEMDEV_Handle hMem, int x, int y) {
000000  b57c              PUSH     {r2-r6,lr}
000002  4615              MOV      r5,r2
000004  460c              MOV      r4,r1
000006  0006              MOVS     r6,r0
000008  d024              BEQ      |L2.84|
;;;41       if (hMem) {
;;;42         GUI_MEMDEV* pDevData;
;;;43         #if (GUI_WINSUPPORT)
;;;44           GUI_RECT r;
;;;45         #endif
;;;46         GUI_LOCK();
;;;47         pDevData = (GUI_MEMDEV*) GUI_ALLOC_h2p(hMem);  /* Convert to pointer */
00000a  f7fffffe          BL       GUI_ALLOC_h2p
;;;48         if (x == GUI_POS_AUTO) {
00000e  f64071ff          MOV      r1,#0xfff
000012  1909              ADDS     r1,r1,r4
000014  d103              BNE      |L2.30|
;;;49           x = pDevData->x0;
000016  f9b04000          LDRSH    r4,[r0,#0]
;;;50           y = pDevData->y0;
00001a  f9b05002          LDRSH    r5,[r0,#2]
                  |L2.30|
;;;51         }
;;;52         #if (GUI_WINSUPPORT)
;;;53           /* Calculate rectangle */
;;;54           r.x1 = (r.x0 = x) + pDevData->XSize-1;
00001e  8882              LDRH     r2,[r0,#4]
000020  1e61              SUBS     r1,r4,#1
000022  4411              ADD      r1,r1,r2
000024  f8ad4000          STRH     r4,[sp,#0]
000028  f8ad1004          STRH     r1,[sp,#4]
;;;55           r.y1 = (r.y0 = y) + pDevData->YSize-1;;
00002c  88c1              LDRH     r1,[r0,#6]
00002e  1e68              SUBS     r0,r5,#1
000030  4408              ADD      r0,r0,r1
000032  f8ad0006          STRH     r0,[sp,#6]
000036  f8ad5002          STRH     r5,[sp,#2]
;;;56           /* Do the drawing. WIndow manager has to be on */
;;;57           WM_ITERATE_START(&r) {
00003a  4668              MOV      r0,sp
00003c  f7fffffe          BL       WM__InitIVRSearch
000040  e006              B        |L2.80|
                  |L2.66|
;;;58             GUI_MEMDEV__WriteToActiveAt(hMem,x,y);
000042  462a              MOV      r2,r5
000044  4621              MOV      r1,r4
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       GUI_MEMDEV__WriteToActiveAt
;;;59           } WM_ITERATE_END();
00004c  f7fffffe          BL       WM__GetNextIVR
                  |L2.80|
000050  2800              CMP      r0,#0
000052  d1f6              BNE      |L2.66|
                  |L2.84|
;;;60         #else
;;;61           GUI_MEMDEV__WriteToActiveAt(hMem,x,y);
;;;62         #endif
;;;63         GUI_UNLOCK();
;;;64       }
;;;65     }
000054  bd7c              POP      {r2-r6,pc}
;;;66     
                          ENDP

