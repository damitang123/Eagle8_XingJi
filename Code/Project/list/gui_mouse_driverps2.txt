; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\gui_mouse_driverps2.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui_mouse_driverps2.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\Core\GUI_MOUSE_DriverPS2.c]
                          THUMB

                          AREA ||i.GUI_MOUSE_DRIVER_PS2_Init||, CODE, READONLY, ALIGN=2

                  GUI_MOUSE_DRIVER_PS2_Init PROC
;;;130    */
;;;131    void GUI_MOUSE_DRIVER_PS2_Init(void) {
000000  4901              LDR      r1,|L1.8|
;;;132      _NumBytesInBuffer = 0; 
000002  2000              MOVS     r0,#0
000004  60c8              STR      r0,[r1,#0xc]  ; _NumBytesInBuffer
;;;133    }
000006  4770              BX       lr
;;;134    
                          ENDP

                  |L1.8|
                          DCD      ||.data||

                          AREA ||i.GUI_MOUSE_DRIVER_PS2_OnRx||, CODE, READONLY, ALIGN=2

                  GUI_MOUSE_DRIVER_PS2_OnRx PROC
;;;109    */
;;;110    void GUI_MOUSE_DRIVER_PS2_OnRx(unsigned char Data) {
000000  b510              PUSH     {r4,lr}
;;;111      if (!_NumBytesInBuffer) {
000002  4c0a              LDR      r4,|L2.44|
;;;112        /* check for start frame */
;;;113        if ((Data & 0x0c) == 0x08) {
;;;114          _abInBuffer[0] = Data;
000004  1c62              ADDS     r2,r4,#1
000006  68e1              LDR      r1,[r4,#0xc]          ;110  ; _NumBytesInBuffer
000008  b149              CBZ      r1,|L2.30|
;;;115          _NumBytesInBuffer++;
;;;116        }
;;;117      } else {
;;;118        _abInBuffer[_NumBytesInBuffer] = Data;
00000a  5450              STRB     r0,[r2,r1]
00000c  1c49              ADDS     r1,r1,#1
;;;119        _NumBytesInBuffer++;
;;;120        if (_NumBytesInBuffer >= 3) {
00000e  60e1              STR      r1,[r4,#0xc]  ; _NumBytesInBuffer
000010  2903              CMP      r1,#3
000012  db03              BLT      |L2.28|
;;;121          _EvaPacket();
000014  f7fffffe          BL       _EvaPacket
;;;122          _NumBytesInBuffer = 0;
000018  2000              MOVS     r0,#0
                  |L2.26|
00001a  60e0              STR      r0,[r4,#0xc]          ;115  ; _NumBytesInBuffer
                  |L2.28|
;;;123        }
;;;124      }
;;;125    }
00001c  bd10              POP      {r4,pc}
                  |L2.30|
00001e  f3c00181          UBFX     r1,r0,#2,#2           ;113
000022  2902              CMP      r1,#2                 ;113
000024  d1fa              BNE      |L2.28|
000026  7010              STRB     r0,[r2,#0]            ;114
000028  2001              MOVS     r0,#1                 ;115
00002a  e7f6              B        |L2.26|
;;;126    
                          ENDP

                  |L2.44|
                          DCD      ||.data||

                          AREA ||i._EvaPacket||, CODE, READONLY, ALIGN=2

                  _EvaPacket PROC
;;;57     */
;;;58     static void _EvaPacket(void) {
000000  b5fe              PUSH     {r1-r7,lr}
;;;59       char a;
;;;60       GUI_PID_STATE State;
;;;61       _Buttons = _abInBuffer[0] & 0x03;
000002  491e              LDR      r1,|L3.124|
000004  1e48              SUBS     r0,r1,#1
000006  780a              LDRB     r2,[r1,#0]  ; _abInBuffer
000008  4603              MOV      r3,r0
00000a  f0020503          AND      r5,r2,#3
00000e  7005              STRB     r5,[r0,#0]
;;;62       a = _abInBuffer[1];
000010  784c              LDRB     r4,[r1,#1]  ; _abInBuffer
;;;63       /* test x move sign. */
;;;64       if(_abInBuffer[0] & 0x10) {
;;;65         a=-a;
;;;66         _ScreenX  -= a;
000012  685b              LDR      r3,[r3,#4]
000014  06d6              LSLS     r6,r2,#27             ;64
000016  d503              BPL      |L3.32|
000018  4264              RSBS     r4,r4,#0              ;65
00001a  b2e4              UXTB     r4,r4                 ;65
00001c  1b1b              SUBS     r3,r3,r4
00001e  e000              B        |L3.34|
                  |L3.32|
;;;67       }        /* direction is negative, move left */
;;;68       else {
;;;69         _ScreenX  += a;
000020  4423              ADD      r3,r3,r4
                  |L3.34|
;;;70       }
;;;71       a = _abInBuffer[2];
000022  6043              STR      r3,[r0,#4]  ; _ScreenX
;;;72       /* test y move sign. */
;;;73       if(_abInBuffer[0] & 0x20) {
000024  0693              LSLS     r3,r2,#26
000026  4a15              LDR      r2,|L3.124|
000028  7889              LDRB     r1,[r1,#2]            ;71  ; _abInBuffer
00002a  f1a20201          SUB      r2,r2,#1              ;61
;;;74         a=-a;
;;;75         _ScreenY  += a;
00002e  6892              LDR      r2,[r2,#8]
000030  d503              BPL      |L3.58|
000032  4249              RSBS     r1,r1,#0              ;74
000034  b2c9              UXTB     r1,r1                 ;74
000036  4411              ADD      r1,r1,r2
000038  e000              B        |L3.60|
                  |L3.58|
;;;76       }  /* direction is negative, move down */ else {
;;;77         _ScreenY  -= a;
00003a  1a51              SUBS     r1,r2,r1
                  |L3.60|
;;;78       }
;;;79       /* check min/max positions */    
;;;80       if (_ScreenX < 0) {
00003c  6081              STR      r1,[r0,#8]  ; _ScreenY
00003e  6842              LDR      r2,[r0,#4]  ; _ScreenX
000040  2100              MOVS     r1,#0
000042  2a00              CMP      r2,#0
000044  da01              BGE      |L3.74|
;;;81         _ScreenX = 0;
000046  6041              STR      r1,[r0,#4]  ; _ScreenX
000048  e003              B        |L3.82|
                  |L3.74|
;;;82       } else if (_ScreenX > LCD_XSIZE-1) {
00004a  2aef              CMP      r2,#0xef
00004c  dd01              BLE      |L3.82|
;;;83         _ScreenX = LCD_XSIZE-1;
00004e  22ef              MOVS     r2,#0xef
000050  6042              STR      r2,[r0,#4]  ; _ScreenX
                  |L3.82|
;;;84       } if (_ScreenY < 0) {
000052  6882              LDR      r2,[r0,#8]  ; _ScreenY
000054  2a00              CMP      r2,#0
000056  da01              BGE      |L3.92|
                  |L3.88|
;;;85         _ScreenY = 0;
000058  6081              STR      r1,[r0,#8]  ; _ScreenY
00005a  e005              B        |L3.104|
                  |L3.92|
;;;86       } else if (_ScreenY > LCD_YSIZE-1) {
00005c  f5b27fa0          CMP      r2,#0x140
000060  db02              BLT      |L3.104|
;;;87         _ScreenY = LCD_YSIZE-1;
000062  f240113f          MOV      r1,#0x13f
000066  e7f7              B        |L3.88|
                  |L3.104|
;;;88       }
;;;89       /* signal new mouse data */
;;;90       State.x       = _ScreenX;
000068  6841              LDR      r1,[r0,#4]  ; _ScreenX
;;;91       State.y       = _ScreenY;
00006a  9100              STR      r1,[sp,#0]
00006c  6880              LDR      r0,[r0,#8]  ; _ScreenY
;;;92       State.Pressed = _Buttons;
00006e  9001              STR      r0,[sp,#4]
000070  f88d5008          STRB     r5,[sp,#8]
;;;93       GUI_MOUSE_StoreState(&State);
000074  4668              MOV      r0,sp
000076  f7fffffe          BL       GUI_MOUSE_StoreState
;;;94     }
00007a  bdfe              POP      {r1-r7,pc}
;;;95     
                          ENDP

                  |L3.124|
                          DCD      ||.data||+0x1

                          AREA ||.data||, DATA, ALIGN=2

                  _Buttons
000000  00                DCB      0x00
                  _abInBuffer
000001  000000            DCB      0x00,0x00,0x00
                  _ScreenX
                          DCD      0x00000000
                  _ScreenY
                          DCD      0x00000000
                  _NumBytesInBuffer
                          DCD      0x00000000
