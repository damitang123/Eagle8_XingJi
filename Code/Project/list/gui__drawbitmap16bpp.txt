; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\gui__drawbitmap16bpp.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui__drawbitmap16bpp.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\Core\GUI__DrawBitmap16bpp.c]
                          THUMB

                          AREA ||i.GUI__DrawBitmap16bpp||, CODE, READONLY, ALIGN=2

                  GUI__DrawBitmap16bpp PROC
;;;32     */
;;;33     void GUI__DrawBitmap16bpp(int x0, int y0, int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag, tLCDDEV_Index2Color * pfIndex2Color) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b08d              SUB      sp,sp,#0x34
000006  461e              MOV      r6,r3
000008  4615              MOV      r5,r2
00000a  4689              MOV      r9,r1
00000c  4680              MOV      r8,r0
;;;34       const U16 * pData;
;;;35       int y, OldIndex, PrevIndex, Mag, BytesPerLine, UseDrawBitmap = 0;
;;;36       GUI_USE_PARA(pLogPal);
;;;37       OldIndex = LCD_GetColorIndex();
00000e  9c16              LDR      r4,[sp,#0x58]
000010  f7fffffe          BL       LCD_GetColorIndex
;;;38       PrevIndex = OldIndex;
000014  4682              MOV      r10,r0
000016  9008              STR      r0,[sp,#0x20]
000018  e9dd0118          LDRD     r0,r1,[sp,#0x60]
;;;39       pData = (const U16 *)pPixel;
;;;40       Mag = (xMag | yMag);
00001c  4308              ORRS     r0,r0,r1
;;;41       BytesPerLine = xsize * 2;
00001e  0069              LSLS     r1,r5,#1
;;;42       /* Check if bitmaps color format fits to the current color conversion */
;;;43       if (Mag == 1) {
000020  9103              STR      r1,[sp,#0xc]
000022  2801              CMP      r0,#1
000024  d004              BEQ      |L1.48|
;;;44         tLCDDEV_Index2Color * pfIndex2ColorCompare = NULL;
;;;45         #if GUI_SUPPORT_MEMDEV
;;;46         if (GUI_Context.hDevData) {
;;;47           /* If a memory device is selected, use the color conversion routine of the memory device */
;;;48           GUI_MEMDEV * pDevData;
;;;49           pDevData = GUI_MEMDEV_H2P(GUI_Context.hDevData);
;;;50           pfIndex2ColorCompare = pDevData->pfIndex2Color;
;;;51         } else {
;;;52         #else
;;;53         {
;;;54         #endif
;;;55           /* If no memory device is selected, use the color conversion routine of the current layer */
;;;56           pfIndex2ColorCompare = LCD_GetpfIndex2ColorEx(GUI_Context.SelLayer);
;;;57         }
;;;58         /* Check if color conversion routine fits  */
;;;59         if (pfIndex2ColorCompare == pfIndex2Color) {
;;;60           UseDrawBitmap = 1;
;;;61         }
;;;62       }
;;;63       if (UseDrawBitmap) {
;;;64         LCD_DrawBitmap(x0, y0, xsize, ysize, 1, 1, 16, BytesPerLine, pPixel, 0);
;;;65       } else {
;;;66         if (Mag == 1) {
;;;67           /* Perform clipping */
;;;68           int x1, y1, Diff;
;;;69           y1 = y0 + ysize - 1;
;;;70           x1 = x0 + xsize - 1;
;;;71           /* Clip Y */
;;;72           if (y0 < GUI_Context.ClipRect.y0) {
;;;73             Diff = GUI_Context.ClipRect.y0 -y0;
;;;74             y0   = GUI_Context.ClipRect.y0;
;;;75             #if GUI_SUPPORT_LARGE_BITMAPS                       /* Required only for 16 bit CPUs if some bitmaps are >64kByte */
;;;76               pData += (U32)Diff * (U32)BytesPerLine / 2;
;;;77             #else
;;;78               pData += (unsigned)Diff * (unsigned)BytesPerLine / 2;
;;;79             #endif
;;;80             ysize -= Diff;
;;;81           }
;;;82           Diff = y1 - GUI_Context.ClipRect.y1;
;;;83           if (Diff > 0) {
;;;84             ysize -= Diff;
;;;85           }
;;;86           if (ysize <=0) {
;;;87     		    return;
;;;88           }
;;;89           /* Clip right side */
;;;90           Diff = x1 - GUI_Context.ClipRect.x1;
;;;91           if (Diff > 0) {
;;;92             xsize -= Diff;
;;;93           }
;;;94           /* Clip left side */
;;;95           if (x0 < GUI_Context.ClipRect.x0) {
;;;96             Diff = GUI_Context.ClipRect.x0-x0;
;;;97     			  xsize -= Diff;
;;;98             pData += Diff; 
;;;99             x0 += Diff; 
;;;100          }
;;;101          if (xsize <=0) {
;;;102    		    return;
;;;103          }
;;;104          /* Simple, unmagnified output using LCD_L0_SetPixel() */
;;;105          for (y = 0; y < ysize; y++) {
;;;106            int x;
;;;107            const U16 * p = pData;
;;;108            for (x = 0; x < xsize; x++) {
;;;109              U16 Index;
;;;110              Index = *p++;
;;;111              if (Index != PrevIndex) {
;;;112                LCD_SetColor(pfIndex2Color(Index));
;;;113                PrevIndex = Index;
;;;114              }
;;;115              LCDDEV_L0_SetPixelIndex(x + x0, y + y0, LCD_COLORINDEX);
;;;116            }
;;;117            pData += BytesPerLine / 2;
;;;118          }
;;;119        } else {
;;;120          /* Magnified output using LCD_FillRect() */
;;;121          int x,y;
;;;122          int yi;
;;;123          for (y = y0, yi = 0; yi < ysize; yi++, y += yMag, pPixel += BytesPerLine) {
000026  f04f0b00          MOV      r11,#0
00002a  f8cd9000          STR      r9,[sp,#0]            ;63
00002e  e0b0              B        |L1.402|
                  |L1.48|
000030  4f5c              LDR      r7,|L1.420|
000032  f9b70050          LDRSH    r0,[r7,#0x50]         ;46  ; GUI_Context
000036  b118              CBZ      r0,|L1.64|
000038  f7fffffe          BL       GUI_ALLOC_h2p
00003c  6a00              LDR      r0,[r0,#0x20]         ;50
00003e  e002              B        |L1.70|
                  |L1.64|
000040  7c78              LDRB     r0,[r7,#0x11]         ;56  ; GUI_Context
000042  f7fffffe          BL       LCD_GetpfIndex2ColorEx
                  |L1.70|
000046  991a              LDR      r1,[sp,#0x68]         ;59
000048  4288              CMP      r0,r1                 ;59
00004a  d110              BNE      |L1.110|
00004c  2001              MOVS     r0,#1                 ;64
00004e  2210              MOVS     r2,#0x10              ;64
000050  9000              STR      r0,[sp,#0]            ;64
000052  e9cd0201          STRD     r0,r2,[sp,#4]         ;64
000056  2100              MOVS     r1,#0                 ;64
000058  e9cd4104          STRD     r4,r1,[sp,#0x10]      ;64
00005c  4633              MOV      r3,r6                 ;64
00005e  462a              MOV      r2,r5                 ;64
000060  4649              MOV      r1,r9                 ;64
000062  4640              MOV      r0,r8                 ;64
000064  f7fffffe          BL       LCD_DrawBitmap
                  |L1.104|
;;;124            int yMax;
;;;125            yMax = y + yMag - 1;
;;;126            /* Draw if within clip area */
;;;127            if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
;;;128              int xi;
;;;129              const U16 GUI_UNI_PTR * p = pData;
;;;130              for (x = x0, xi = 0; xi < xsize; xi++, x += xMag) {
;;;131                U16 Index;
;;;132                Index = *p++;
;;;133                if (Index != PrevIndex) {
;;;134                  LCD_SetColor(pfIndex2Color(Index));
;;;135                  PrevIndex = Index;
;;;136                }
;;;137                LCD_FillRect(x, y, x + xMag - 1, yMax);
;;;138              }
;;;139            }
;;;140            pData += BytesPerLine / 2;
;;;141          }
;;;142        }
;;;143        GUI_SetColorIndex(OldIndex);
;;;144      }
;;;145    }
000068  b00d              ADD      sp,sp,#0x34
00006a  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.110|
00006e  eb090306          ADD      r3,r9,r6              ;69
000072  eb080205          ADD      r2,r8,r5              ;70
000076  f9b7000a          LDRSH    r0,[r7,#0xa]          ;72  ; GUI_Context
00007a  1e52              SUBS     r2,r2,#1              ;72
00007c  1e5b              SUBS     r3,r3,#1              ;72
00007e  4548              CMP      r0,r9                 ;72
000080  dd08              BLE      |L1.148|
000082  eba00109          SUB      r1,r0,r9              ;73
000086  4681              MOV      r9,r0                 ;74
000088  9803              LDR      r0,[sp,#0xc]          ;78
00008a  4348              MULS     r0,r1,r0              ;78
00008c  f0200001          BIC      r0,r0,#1              ;78
000090  4404              ADD      r4,r4,r0              ;78
000092  1a76              SUBS     r6,r6,r1              ;80
                  |L1.148|
000094  f9b7000e          LDRSH    r0,[r7,#0xe]          ;82  ; GUI_Context
000098  1a18              SUBS     r0,r3,r0              ;82
00009a  2800              CMP      r0,#0                 ;83
00009c  dd00              BLE      |L1.160|
00009e  1a36              SUBS     r6,r6,r0              ;84
                  |L1.160|
0000a0  2e00              CMP      r6,#0                 ;86
0000a2  dde1              BLE      |L1.104|
0000a4  f9b7000c          LDRSH    r0,[r7,#0xc]          ;90  ; GUI_Context
0000a8  1a10              SUBS     r0,r2,r0              ;90
0000aa  2800              CMP      r0,#0                 ;91
0000ac  dd00              BLE      |L1.176|
0000ae  1a2d              SUBS     r5,r5,r0              ;92
                  |L1.176|
0000b0  483c              LDR      r0,|L1.420|
0000b2  f9b00008          LDRSH    r0,[r0,#8]            ;95  ; GUI_Context
0000b6  4540              CMP      r0,r8                 ;95
0000b8  dd05              BLE      |L1.198|
0000ba  eba00008          SUB      r0,r0,r8              ;96
0000be  1a2d              SUBS     r5,r5,r0              ;97
0000c0  eb040440          ADD      r4,r4,r0,LSL #1       ;98
0000c4  4480              ADD      r8,r8,r0              ;99
                  |L1.198|
0000c6  2d00              CMP      r5,#0                 ;101
0000c8  ddce              BLE      |L1.104|
0000ca  2000              MOVS     r0,#0                 ;105
0000cc  e024              B        |L1.280|
                  |L1.206|
0000ce  46a3              MOV      r11,r4                ;107
0000d0  2700              MOVS     r7,#0                 ;108
0000d2  e017              B        |L1.260|
                  |L1.212|
0000d4  f83b0b02          LDRH     r0,[r11],#2           ;110
0000d8  9000              STR      r0,[sp,#0]            ;111
0000da  4550              CMP      r0,r10                ;111
0000dc  d005              BEQ      |L1.234|
0000de  991a              LDR      r1,[sp,#0x68]         ;112
0000e0  4788              BLX      r1                    ;112
0000e2  f7fffffe          BL       LCD_SetColor
0000e6  f8dda000          LDR      r10,[sp,#0]           ;113
                  |L1.234|
0000ea  4a2e              LDR      r2,|L1.420|
0000ec  9809              LDR      r0,[sp,#0x24]         ;115
0000ee  f8b2c002          LDRH     r12,[r2,#2]           ;115  ; GUI_Context
0000f2  6cd2              LDR      r2,[r2,#0x4c]         ;115  ; GUI_Context
0000f4  eb000109          ADD      r1,r0,r9              ;115
0000f8  eb070008          ADD      r0,r7,r8              ;115
0000fc  6a53              LDR      r3,[r2,#0x24]         ;115
0000fe  4662              MOV      r2,r12                ;115
000100  4798              BLX      r3                    ;115
000102  1c7f              ADDS     r7,r7,#1              ;115
                  |L1.260|
000104  42af              CMP      r7,r5                 ;108
000106  dbe5              BLT      |L1.212|
000108  9803              LDR      r0,[sp,#0xc]          ;117
00010a  eb0070d0          ADD      r0,r0,r0,LSR #31      ;117
00010e  f0200001          BIC      r0,r0,#1              ;117
000112  4404              ADD      r4,r4,r0              ;117
000114  9809              LDR      r0,[sp,#0x24]         ;105
000116  1c40              ADDS     r0,r0,#1              ;105
                  |L1.280|
000118  9009              STR      r0,[sp,#0x24]         ;105
00011a  42b0              CMP      r0,r6                 ;105
00011c  dbd7              BLT      |L1.206|
00011e  e03a              B        |L1.406|
                  |L1.288|
000120  9900              LDR      r1,[sp,#0]            ;125
000122  9819              LDR      r0,[sp,#0x64]         ;125
000124  4408              ADD      r0,r0,r1              ;125
000126  900c              STR      r0,[sp,#0x30]         ;125
000128  491e              LDR      r1,|L1.420|
00012a  1e40              SUBS     r0,r0,#1              ;125
00012c  9006              STR      r0,[sp,#0x18]         ;127
00012e  f9b1200a          LDRSH    r2,[r1,#0xa]          ;127  ; GUI_Context
000132  4282              CMP      r2,r0                 ;127
000134  dc23              BGT      |L1.382|
000136  f9b1100e          LDRSH    r1,[r1,#0xe]          ;127  ; GUI_Context
00013a  9800              LDR      r0,[sp,#0]            ;127
00013c  4281              CMP      r1,r0                 ;127
00013e  db1e              BLT      |L1.382|
000140  46a1              MOV      r9,r4                 ;129
000142  2700              MOVS     r7,#0                 ;130
000144  f8cd8010          STR      r8,[sp,#0x10]         ;130
000148  e017              B        |L1.378|
00014a  bf00              NOP                            ;132
                  |L1.332|
00014c  f8390b02          LDRH     r0,[r9],#2            ;132
000150  9005              STR      r0,[sp,#0x14]         ;133
000152  4550              CMP      r0,r10                ;133
000154  d005              BEQ      |L1.354|
000156  991a              LDR      r1,[sp,#0x68]         ;134
000158  4788              BLX      r1                    ;134
00015a  f7fffffe          BL       LCD_SetColor
00015e  f8dda014          LDR      r10,[sp,#0x14]        ;135
                  |L1.354|
000162  9918              LDR      r1,[sp,#0x60]         ;137
000164  9804              LDR      r0,[sp,#0x10]         ;137
000166  9b06              LDR      r3,[sp,#0x18]         ;137
000168  1842              ADDS     r2,r0,r1              ;137
00016a  9205              STR      r2,[sp,#0x14]         ;137
00016c  1e52              SUBS     r2,r2,#1              ;137
00016e  9900              LDR      r1,[sp,#0]            ;137
000170  f7fffffe          BL       LCD_FillRect
000174  9a05              LDR      r2,[sp,#0x14]         ;130
000176  1c7f              ADDS     r7,r7,#1              ;130
000178  9204              STR      r2,[sp,#0x10]         ;130
                  |L1.378|
00017a  42af              CMP      r7,r5                 ;130
00017c  dbe6              BLT      |L1.332|
                  |L1.382|
00017e  9803              LDR      r0,[sp,#0xc]          ;140
000180  f10b0b01          ADD      r11,r11,#1            ;123
000184  eb0070d0          ADD      r0,r0,r0,LSR #31      ;140
000188  f0200001          BIC      r0,r0,#1              ;140
00018c  4404              ADD      r4,r4,r0              ;140
00018e  980c              LDR      r0,[sp,#0x30]         ;123
000190  9000              STR      r0,[sp,#0]            ;123
                  |L1.402|
000192  45b3              CMP      r11,r6                ;123
000194  dbc4              BLT      |L1.288|
                  |L1.406|
000196  9808              LDR      r0,[sp,#0x20]         ;143
000198  b00d              ADD      sp,sp,#0x34           ;143
00019a  e8bd4ff0          POP      {r4-r11,lr}           ;143
00019e  f7ffbffe          B.W      GUI_SetColorIndex
;;;146    
                          ENDP

0001a2  0000              DCW      0x0000
                  |L1.420|
                          DCD      GUI_Context
