; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\lcdp8666.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\lcdp8666.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\ConvertColor\LCDP8666.c]
                          THUMB

                          AREA ||i.LCD_Color2Index_8666||, CODE, READONLY, ALIGN=1

                  LCD_Color2Index_8666 PROC
;;;56     */
;;;57     unsigned LCD_Color2Index_8666(LCD_COLOR Color) {
000000  b2c1              UXTB     r1,r0
;;;58       int r,g,b,Index;
;;;59       r = Color&255;
;;;60       g = (Color>>8)&255;
000002  f3c02207          UBFX     r2,r0,#8,#8
;;;61       b = Color>>16;
000006  0c00              LSRS     r0,r0,#16
;;;62     /* Check if image is a gray scale ... */
;;;63     	if ((r==g) && (g==b)) {
000008  4291              CMP      r1,r2
00000a  d107              BNE      |L1.28|
00000c  4282              CMP      r2,r0
00000e  d105              BNE      |L1.28|
;;;64         return 120+ (r+8)/17;  /* Convert into colors from 120 - 135*/
000010  2011              MOVS     r0,#0x11
000012  3108              ADDS     r1,r1,#8
000014  fb91f0f0          SDIV     r0,r1,r0
000018  3078              ADDS     r0,r0,#0x78
                  |L1.26|
;;;65     	}
;;;66     /* Convert into the 6*6*6 colors ... */
;;;67       r = (r*5+127)/255;
;;;68       g = (g*5+127)/255;
;;;69       b = (b*5+127)/255;
;;;70       Index = r+6*g+36*b;
;;;71       return (Index<108) ? Index : Index+40;
;;;72     }
00001a  4770              BX       lr
                  |L1.28|
00001c  eb010381          ADD      r3,r1,r1,LSL #2       ;67
000020  21ff              MOVS     r1,#0xff              ;67
000022  eb000080          ADD      r0,r0,r0,LSL #2       ;69
000026  eb020282          ADD      r2,r2,r2,LSL #2       ;68
00002a  307f              ADDS     r0,r0,#0x7f           ;69
00002c  337f              ADDS     r3,r3,#0x7f           ;67
00002e  327f              ADDS     r2,r2,#0x7f           ;68
000030  fb90f0f1          SDIV     r0,r0,r1              ;69
000034  fb93f3f1          SDIV     r3,r3,r1              ;67
000038  fb92f2f1          SDIV     r2,r2,r1              ;68
00003c  eb020142          ADD      r1,r2,r2,LSL #1       ;70
000040  eb030141          ADD      r1,r3,r1,LSL #1       ;70
000044  eb0000c0          ADD      r0,r0,r0,LSL #3       ;70
000048  eb010080          ADD      r0,r1,r0,LSL #2       ;70
00004c  286c              CMP      r0,#0x6c              ;71
00004e  dbe4              BLT      |L1.26|
000050  3028              ADDS     r0,r0,#0x28           ;71
000052  4770              BX       lr
;;;73     
                          ENDP


                          AREA ||i.LCD_GetIndexMask_8666||, CODE, READONLY, ALIGN=1

                  LCD_GetIndexMask_8666 PROC
;;;99     */
;;;100    unsigned LCD_GetIndexMask_8666(void) {
000000  20ff              MOVS     r0,#0xff
;;;101      return 0xff;
;;;102    }
000002  4770              BX       lr
;;;103    
                          ENDP


                          AREA ||i.LCD_Index2Color_8666||, CODE, READONLY, ALIGN=1

                  LCD_Index2Color_8666 PROC
;;;77     */
;;;78     LCD_COLOR LCD_Index2Color_8666(int Index) {
000000  b510              PUSH     {r4,lr}
;;;79       unsigned int r,g;
;;;80       U32 b;
;;;81       /* 16 Gray scale range ? */
;;;82       if ((Index>=120) && (Index<136)) {
000002  f1a00178          SUB      r1,r0,#0x78
000006  2910              CMP      r1,#0x10
000008  d206              BCS      |L3.24|
;;;83         return (U32)0x111111 * (U32)(Index-120);
00000a  eb011001          ADD      r0,r1,r1,LSL #4
00000e  eb002001          ADD      r0,r0,r1,LSL #8
000012  eb003000          ADD      r0,r0,r0,LSL #12
;;;84     	}
;;;85       if (Index>=108) {
;;;86         if (Index<148)
;;;87     			return 0;  /* Black for illegal indices */
;;;88     		Index -= 40;
;;;89     	}
;;;90       r = (Index%6)*(255/5);
;;;91       g = ((Index/6)%6)*(255/5);
;;;92       b = (Index/36)*(255/5);
;;;93       return r+(g<<8)+((U32)b<<16);
;;;94     }
000016  bd10              POP      {r4,pc}
                  |L3.24|
000018  286c              CMP      r0,#0x6c              ;85
00001a  db04              BLT      |L3.38|
00001c  2894              CMP      r0,#0x94              ;86
00001e  da01              BGE      |L3.36|
000020  2000              MOVS     r0,#0                 ;87
000022  bd10              POP      {r4,pc}
                  |L3.36|
000024  3828              SUBS     r0,r0,#0x28
                  |L3.38|
000026  2106              MOVS     r1,#6                 ;90
000028  fb90f3f1          SDIV     r3,r0,r1              ;91
00002c  fb90f2f1          SDIV     r2,r0,r1              ;90
000030  fb93f4f1          SDIV     r4,r3,r1              ;91
000034  fb010212          MLS      r2,r1,r2,r0           ;90
000038  fb013114          MLS      r1,r1,r4,r3           ;91
00003c  2324              MOVS     r3,#0x24              ;92
00003e  fb90f0f3          SDIV     r0,r0,r3              ;92
000042  eb021202          ADD      r2,r2,r2,LSL #4       ;90
000046  eb011101          ADD      r1,r1,r1,LSL #4       ;91
00004a  eb020242          ADD      r2,r2,r2,LSL #1       ;90
00004e  eb010141          ADD      r1,r1,r1,LSL #1       ;91
000052  eb001000          ADD      r0,r0,r0,LSL #4       ;92
000056  eb000040          ADD      r0,r0,r0,LSL #1       ;92
00005a  eb022101          ADD      r1,r2,r1,LSL #8       ;93
00005e  eb014000          ADD      r0,r1,r0,LSL #16      ;93
000062  bd10              POP      {r4,pc}
;;;95     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  LCD_API_ColorConv_8666
                          DCD      LCD_Color2Index_8666
                          DCD      LCD_Index2Color_8666
                          DCD      LCD_GetIndexMask_8666
