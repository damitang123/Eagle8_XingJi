; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\uart_process.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\uart_process.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\User\uart_process.c]
                          THUMB

                          AREA ||i.Get_Uart_Data||, CODE, READONLY, ALIGN=2

                  Get_Uart_Data PROC
;;;95     
;;;96     static unsigned char Get_Uart_Data(void)
000000  4907              LDR      r1,|L1.32|
;;;97     {
;;;98     	unsigned char nTemp;
;;;99     	nTemp = g_aUartCmdRevBuffer[s_nUartOutCnt];
000002  4806              LDR      r0,|L1.28|
000004  88ca              LDRH     r2,[r1,#6]  ; s_nUartOutCnt
000006  5c80              LDRB     r0,[r0,r2]
;;;100    	if(++s_nUartOutCnt >= UART_BUFFER_SIZE)
000008  88ca              LDRH     r2,[r1,#6]  ; s_nUartOutCnt
00000a  1c52              ADDS     r2,r2,#1
00000c  b292              UXTH     r2,r2
00000e  80ca              STRH     r2,[r1,#6]
000010  f5b27f16          CMP      r2,#0x258
000014  d301              BCC      |L1.26|
;;;101    	{
;;;102    		s_nUartOutCnt = 0;
000016  2200              MOVS     r2,#0
000018  80ca              STRH     r2,[r1,#6]
                  |L1.26|
;;;103    	}
;;;104    	return nTemp;
;;;105    }
00001a  4770              BX       lr
;;;106    
                          ENDP

                  |L1.28|
                          DCD      ||.bss||+0x320
                  |L1.32|
                          DCD      ||.data||

                          AREA ||i.Receive_Data_From_UART1||, CODE, READONLY, ALIGN=2

                  Receive_Data_From_UART1 PROC
;;;56     /*此函数要被中断调用*/
;;;57     void Receive_Data_From_UART1(unsigned char RevData)
000000  4907              LDR      r1,|L2.32|
;;;58     {
;;;59     	g_aUartCmdRevBuffer[s_nUartInCnt] = RevData;
000002  4a06              LDR      r2,|L2.28|
000004  888b              LDRH     r3,[r1,#4]  ; s_nUartInCnt
000006  54d0              STRB     r0,[r2,r3]
;;;60     	if(++s_nUartInCnt >= UART_BUFFER_SIZE)
000008  8888              LDRH     r0,[r1,#4]  ; s_nUartInCnt
00000a  1c40              ADDS     r0,r0,#1
00000c  b280              UXTH     r0,r0
00000e  8088              STRH     r0,[r1,#4]
000010  f5b07f16          CMP      r0,#0x258
000014  d301              BCC      |L2.26|
;;;61     	{
;;;62     		s_nUartInCnt = 0;
000016  2000              MOVS     r0,#0
000018  8088              STRH     r0,[r1,#4]
                  |L2.26|
;;;63     	}
;;;64     }
00001a  4770              BX       lr
;;;65     
                          ENDP

                  |L2.28|
                          DCD      ||.bss||+0x320
                  |L2.32|
                          DCD      ||.data||

                          AREA ||i.Uart_Cmd_Get_ProgramFileHeader||, CODE, READONLY, ALIGN=2

                  Uart_Cmd_Get_ProgramFileHeader PROC
;;;608    static unsigned long s_nProgramPackageIndex; 
;;;609    static void Uart_Cmd_Get_ProgramFileHeader(unsigned short nLen,unsigned char *pData)
000000  b510              PUSH     {r4,lr}
;;;610    {
;;;611    	if(nLen == sizeof(sUSBProgramFileHeader)) //deleted on 20181107
000002  2815              CMP      r0,#0x15
000004  d11b              BNE      |L3.62|
;;;612    	{
;;;613    		g_sUSBProgramFileHeader = *(sUSBProgramFileHeader *)pData;
000006  2215              MOVS     r2,#0x15
000008  480d              LDR      r0,|L3.64|
00000a  f7fffffe          BL       __aeabi_memcpy
;;;614    		s_nProgramPackageIndex = 0; 
00000e  490d              LDR      r1,|L3.68|
000010  2000              MOVS     r0,#0
;;;615    		Uart_Packet_And_Send(ACK_FILE_DESCRIPTION, NULL, 0);
000012  4602              MOV      r2,r0
000014  6148              STR      r0,[r1,#0x14]  ; s_nProgramPackageIndex
000016  4601              MOV      r1,r0
000018  20fd              MOVS     r0,#0xfd
00001a  f7fffffe          BL       Uart_Packet_And_Send
;;;616    		delay_ms(1); //added by lxl 20181108 不添加的话，应答数据包有问题，不知为何
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       delay_ms
;;;617    		TRACE_PRINTF("Uart_Cmd_Get_ProgramFileHeader!\r\n");
000024  a008              ADR      r0,|L3.72|
000026  f7fffffe          BL       User_Debug_Printf
;;;618    		if(g_sUSBProgramFileHeader.nFileType == 2)
00002a  4805              LDR      r0,|L3.64|
00002c  7801              LDRB     r1,[r0,#0]  ; g_sUSBProgramFileHeader
00002e  2902              CMP      r1,#2
000030  d105              BNE      |L3.62|
;;;619    		{
;;;620    			g_sLogoAttribute.nFlashStartAddress = INSIDE_FLASH_LOGO_START_ADDR;
000032  4a0f              LDR      r2,|L3.112|
000034  490d              LDR      r1,|L3.108|
000036  f8c2100d          STR      r1,[r2,#0xd]  ; g_sLogoAttribute
;;;621    			g_sUSBProgramFileHeader.nFlashStartAddress =  INSIDE_FLASH_LOGO_START_ADDR;
00003a  f8c01009          STR      r1,[r0,#9]  ; g_sUSBProgramFileHeader
                  |L3.62|
;;;622    		}
;;;623    	}
;;;624    }
00003e  bd10              POP      {r4,pc}
;;;625    
                          ENDP

                  |L3.64|
                          DCD      g_sUSBProgramFileHeader
                  |L3.68|
                          DCD      ||.data||
                  |L3.72|
000048  55617274          DCB      "Uart_Cmd_Get_ProgramFileHeader!\r\n",0
00004c  5f436d64
000050  5f476574
000054  5f50726f
000058  6772616d
00005c  46696c65
000060  48656164
000064  6572210d
000068  0a00    
00006a  00                DCB      0
00006b  00                DCB      0
                  |L3.108|
                          DCD      0x08070000
                  |L3.112|
                          DCD      g_sLogoAttribute

                          AREA ||i.Uart_Cmd_Link||, CODE, READONLY, ALIGN=1

                  Uart_Cmd_Link PROC
;;;133    
;;;134    static void Uart_Cmd_Link(unsigned short nLen ,unsigned char *pData)
000000  b508              PUSH     {r3,lr}
;;;135    {
;;;136    	if(nLen == 2)
000002  2802              CMP      r0,#2
000004  d113              BNE      |L4.46|
;;;137    	{
;;;138    		unsigned short nTemp;
;;;139    		nTemp = pData[0] + (((unsigned short)pData[1]) << 8);
000006  7808              LDRB     r0,[r1,#0]
000008  7849              LDRB     r1,[r1,#1]
00000a  eb002001          ADD      r0,r0,r1,LSL #8
00000e  b280              UXTH     r0,r0
;;;140    	#if EAGLE_1
;;;141    		if(nTemp == 0xA11A)
;;;142    		{
;;;143    			unsigned char aData[2];
;;;144    			aData[0] = 0x1A;
;;;145    			aData[1] = 0x1A;
;;;146    			Uart_Packet_And_Send(ACK_LINK_TICK, aData, 2);
;;;147    		}
;;;148    	#elif EAGLE_8
;;;149    		if(nTemp == 0xA81A)
000010  f5a04128          SUB      r1,r0,#0xa800
000014  391a              SUBS     r1,r1,#0x1a
000016  d10a              BNE      |L4.46|
;;;150    		{
;;;151    			unsigned char aData[2];
;;;152    			aData[0] = 0x1A;
000018  201a              MOVS     r0,#0x1a
00001a  f88d0000          STRB     r0,[sp,#0]
;;;153    			aData[1] = 0x8A;
00001e  208a              MOVS     r0,#0x8a
000020  f88d0001          STRB     r0,[sp,#1]
;;;154    			Uart_Packet_And_Send(ACK_LINK_TICK, aData, 2);
000024  2202              MOVS     r2,#2
000026  4669              MOV      r1,sp
000028  2081              MOVS     r0,#0x81
00002a  f7fffffe          BL       Uart_Packet_And_Send
                  |L4.46|
;;;155    		}
;;;156    	#endif
;;;157    	}
;;;158    }
00002e  bd08              POP      {r3,pc}
;;;159    
                          ENDP


                          AREA ||i.Uart_Cmd_Parser_Sub||, CODE, READONLY, ALIGN=2

                  Uart_Cmd_Parser_Sub PROC
;;;693    
;;;694    static void Uart_Cmd_Parser_Sub(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;695    {
;;;696    	unsigned char nCmd;
;;;697    	unsigned short nCmdLen;
;;;698    	unsigned char *p = &s_aCmdProcessBuffer[2];
000004  4cf7              LDR      r4,|L5.996|
;;;699    	
;;;700    	nCmd = *p;
;;;701    	nCmdLen = p[1] + (((unsigned short)p[2]) << 8);
000006  2500              MOVS     r5,#0
000008  f8dfa3dc          LDR      r10,|L5.1000|
00000c  f8141f02          LDRB     r1,[r4,#2]!           ;700
000010  2364              MOVS     r3,#0x64              ;700
000012  7860              LDRB     r0,[r4,#1]
000014  78a2              LDRB     r2,[r4,#2]
000016  4ef5              LDR      r6,|L5.1004|
000018  eb002002          ADD      r0,r0,r2,LSL #8
00001c  4ff4              LDR      r7,|L5.1008|
00001e  b091              SUB      sp,sp,#0x44           ;695
000020  b280              UXTH     r0,r0
;;;702    	
;;;703    	switch(nCmd)
000022  291b              CMP      r1,#0x1b
000024  d07a              BEQ      |L5.284|
000026  dc16              BGT      |L5.86|
000028  f8df93c8          LDR      r9,|L5.1012|
00002c  f04f08f1          MOV      r8,#0xf1
000030  f2401281          MOV      r2,#0x181
000034  2919              CMP      r1,#0x19
000036  d241              BCS      |L5.188|
000038  e8dff001          TBB      [pc,r1]
00003c  b940464a          DCB      0xb9,0x40,0x46,0x4a
000040  57617197          DCB      0x57,0x61,0x71,0x97
000044  404040bc          DCB      0x40,0x40,0x40,0xbc
000048  c0c6fdfc          DCB      0xc0,0xc6,0xfd,0xfc
00004c  fbfaf9f8          DCB      0xfb,0xfa,0xf9,0xf8
000050  f7f6f5df          DCB      0xf7,0xf6,0xf5,0xdf
000054  e300              DCB      0xe3,0x00
                  |L5.86|
000056  f8dfc38c          LDR      r12,|L5.996|
00005a  2931              CMP      r1,#0x31
00005c  f8dc9005          LDR      r9,[r12,#5]
000060  f89cc005          LDRB     r12,[r12,#5]
000064  464a              MOV      r2,r9
000066  d07d              BEQ      |L5.356|
000068  dc10              BGT      |L5.140|
00006a  f8dfa38c          LDR      r10,|L5.1016|
00006e  f1a1011c          SUB      r1,r1,#0x1c
000072  f44f7b80          MOV      r11,#0x100
000076  290d              CMP      r1,#0xd
000078  d220              BCS      |L5.188|
00007a  e8dff001          TBB      [pc,r1]
00007e  e7e6              DCB      0xe7,0xe6
000080  fde4e3e2          DCB      0xfd,0xe4,0xe3,0xe2
000084  1f1fe1e0          DCB      0x1f,0x1f,0xe1,0xe0
000088  dfdedd00          DCB      0xdf,0xde,0xdd,0x00
                  |L5.140|
00008c  2979              CMP      r1,#0x79
00008e  d06a              BEQ      |L5.358|
000090  dc0c              BGT      |L5.172|
000092  2934              CMP      r1,#0x34
000094  d068              BEQ      |L5.360|
000096  dc04              BGT      |L5.162|
000098  2932              CMP      r1,#0x32
00009a  d07d              BEQ      |L5.408|
00009c  2933              CMP      r1,#0x33
00009e  d10d              BNE      |L5.188|
0000a0  e1f1              B        |L5.1158|
                  |L5.162|
0000a2  2935              CMP      r1,#0x35
0000a4  d079              BEQ      |L5.410|
0000a6  2978              CMP      r1,#0x78
0000a8  d108              BNE      |L5.188|
0000aa  e215              B        |L5.1240|
                  |L5.172|
0000ac  297a              CMP      r1,#0x7a
0000ae  d075              BEQ      |L5.412|
0000b0  297c              CMP      r1,#0x7c
0000b2  d074              BEQ      |L5.414|
0000b4  297d              CMP      r1,#0x7d
0000b6  d073              BEQ      |L5.416|
0000b8  297e              CMP      r1,#0x7e
0000ba  d072              BEQ      |L5.418|
                  |L5.188|
;;;704    	{
;;;705    	case 0:
;;;706    		break;
;;;707    		
;;;708    	case CMD_LINK_TICK:
;;;709    		Uart_Cmd_Link(nCmdLen,&p[3]);
;;;710    		break;
;;;711    		
;;;712    	case CMD_GET_TEST_PARAM:
;;;713    		Uart_Cmd_Get_Test_Parameter(nCmdLen,&p[3]);
;;;714    		break;
;;;715    	case CMD_SET_TEST_PARAM:
;;;716    		Uart_Cmd_Set_Test_Parameter(nCmdLen,&p[3]);
;;;717    		break;
;;;718    	case CMD_RECOVER_DEFAULT_TEST_PARAM:
;;;719    		Uart_Cmd_Recover_Default_Test_Parameter(nCmdLen,&p[3]);
;;;720    		break;
;;;721    
;;;722    	case CMD_GET_SYSTEM_PARAM:
;;;723    		Uart_Cmd_Get_System_Parameter(nCmdLen,&p[3]);
;;;724    		break;
;;;725    	case CMD_SET_SYSTEM_PARAM:
;;;726    		Uart_Cmd_Set_System_Parameter(nCmdLen,&p[3]);
;;;727    		break;
;;;728    	case CMD_RECOVER_DEFAULT_SYSTEM_PARAM:
;;;729    		Uart_Cmd_Recover_Default_System_Parameter(nCmdLen,&p[3]);
;;;730    		break;
;;;731    
;;;732    	case CMD_GET_ALC_CALIBRATION_PARAM:
;;;733    		Uart_Cmd_Get_Alc_Calibration(nCmdLen,&p[3]);
;;;734    		break;
;;;735    	case CMD_SET_ALC_CALIBRATION_PARAM:
;;;736    		Uart_Cmd_Set_Alc_Calibration(nCmdLen,&p[3]);
;;;737    		break;
;;;738    	case CMD_RECOVER_DEFAULT_ALC_CALIBRATION_PARAM:
;;;739    		Uart_Cmd_Recover_Default_Alc_Calibration(nCmdLen,&p[3]);
;;;740    		break;
;;;741    		
;;;742    	case CMD_GET_RECORDS_COUNTER:
;;;743    		Uart_Cmd_Get_Record_Counter(nCmdLen,&p[3]);
;;;744    		break;
;;;745    	case CMD_EXPORT_RECORDS_REQUEST:
;;;746    		Uart_Cmd_Record_Trans_Begin(nCmdLen,&p[3]);
;;;747    		break;
;;;748    	case CMD_BREAK_RECORDS_EXPORT_RECORDS:
;;;749    		Uart_Cmd_Break_Record_Trans();
;;;750    		break;
;;;751    	case CMD_CLEAR_ALL_RECORDS:
;;;752    		Uart_Cmd_Clear_All_Records(nCmdLen,&p[3]);
;;;753    		break;
;;;754    	case CMD_EXPORT_RECORD_BY_ID:
;;;755    		Uart_Cmd_Get_Record_By_ID(nCmdLen,&p[3]);
;;;756    		break;
;;;757    	case CMD_IMPORT_RECORDS_BY_ID:
;;;758    		Uart_Cmd_Write_Record_By_ID(nCmdLen,&p[3]);
;;;759    		break;
;;;760    
;;;761    	case CMD_GET_TEMP_CALIBRATION_PARAM:
;;;762    		Uart_Cmd_Get_Temperature_Calibration(nCmdLen,&p[3]);
;;;763    		break;
;;;764    	case CMD_SET_TEMP_CALIBRATION_PARAM:
;;;765    		Uart_Cmd_Set_Temperature_Calibration(nCmdLen,&p[3]);
;;;766    		break;
;;;767    	case CMD_RECOVER_DEFAULT_TEMP_CALIBRATION_PARAM:
;;;768    		Uart_Cmd_Recover_Default_Temperature_Calibration(nCmdLen,&p[3]);
;;;769    		break;
;;;770    
;;;771    	case CMD_GET_DEVICE_ID_PARAM:
;;;772    		Uart_Cmd_Get_DeviceID(nCmdLen,&p[3]);
;;;773    		break;
;;;774    	case CMD_SET_DEVICE_ID_PARAM:
;;;775    		Uart_Cmd_Set_DeviceID(nCmdLen,&p[3]);
;;;776    		break;
;;;777    	case CMD_RECOVER_DEFAULT_DEVICE_ID_PARAM:
;;;778    		Uart_Cmd_Recover_Default_DeviceID(nCmdLen,&p[3]);
;;;779    		break;
;;;780    
;;;781    	case CMD_GET_SERVER_PARAM:
;;;782    		Uart_Cmd_Get_Server_Parameter(nCmdLen,&p[3]);
;;;783    		break;
;;;784    	case CMD_SET_SERVER_PARAM:
;;;785    		Uart_Cmd_Set_Server_Parameter(nCmdLen,&p[3]);
;;;786    		break;
;;;787    	case CMD_RECOVER_DEFAULT_SERVER_PARAM:
;;;788    		Uart_Cmd_Recover_Server_Parameter(nCmdLen,&p[3]);
;;;789    		break;
;;;790    
;;;791    	case CMD_SET_SYSTEM_TIME:
;;;792    		Uart_Cmd_Set_Time(nCmdLen,&p[3]);
;;;793    		break;
;;;794    	case CMD_SET_LCD_BRIGHTNESS:
;;;795    		Uart_Cmd_Set_Lcd_Brightness(nCmdLen,&p[3]);
;;;796    		break;
;;;797    	case CMD_SET_VOICE_VOLUME:
;;;798    		Uart_Cmd_Set_Voice_Volume(nCmdLen,&p[3]);
;;;799    		break;
;;;800    
;;;801    	case CMD_GET_TOTAL_INHALE_TIIME_COUNTER:
;;;802    		Uart_Cmd_Get_Total_Inhale_Time(nCmdLen,&p[3]);
;;;803    		break;
;;;804    	case CMD_CLEAR_TOTAL_INHALE_TIIME_COUNTER:
;;;805    		Uart_Cmd_Clear_Total_Inhale_Time(nCmdLen,&p[3]);
;;;806    		break;
;;;807    		
;;;808    	case CMD_GET_TOTAL_TEST_COUNTER:
;;;809    		Uart_Cmd_Get_Total_Test_Counter(nCmdLen,&p[3]);
;;;810    		break;
;;;811    	case CMD_CLEAR_TOTAL_TEST_COUNTER:
;;;812    		Uart_Cmd_Clear_Total_Test_Counter(nCmdLen,&p[3]);
;;;813    		break;
;;;814    
;;;815    	case CMD_GET_USER_DEVICE_INFOR:
;;;816    		Uart_Cmd_Get_User_Device_Infor(nCmdLen,&p[3]);
;;;817    		break;
;;;818    	case CMD_SET_USER_DEVICE_INFOR:
;;;819    		Uart_Cmd_Set_User_Device_Infor(nCmdLen,&p[3]);
;;;820    		break;
;;;821    	case CMD_RECOVER_USER_DEVICE_INFOR:
;;;822    		Uart_Cmd_Recover_User_Device_Infor(nCmdLen,&p[3]);
;;;823    		break;
;;;824    
;;;825    	case CMD_GET_DEVICE_RECORDS_INFOR:
;;;826    		Uart_Get_Device_Records_Infor(nCmdLen,&p[3]);
;;;827    		break;
;;;828    	case CMD_NOTIFY_RCORD_SUCCEED_UPLOAD:
;;;829    		Uart_Notify_Record_Succeed_Upload(nCmdLen,&p[3]);
;;;830    		break;
;;;831    
;;;832    	case CMD_DEL_USER_LOGIN_INFORMATION:
;;;833    		Uart_Delete_UserLogin_Information(nCmdLen,&p[3]);
;;;834    		break;
;;;835    
;;;836    	case CMD_TRACE_LOG_ENABLE:
;;;837    		Uart_Trace_Log_Enable(nCmdLen,&p[3]);
;;;838    		break;
;;;839    
;;;840    	case CMD_WRITE_CALIBRATION_PARAMETER:
;;;841    		Uart_Write_Calibration_Parameter(nCmdLen,&p[3]);
;;;842    		break;
;;;843    	
;;;844    	case CMD_RESTART_SYSTEM:
;;;845    		Uart_Restart_System(nCmdLen,&p[3]);
;;;846    		break;
;;;847    	
;;;848    	case CMD_DELETE_LOGO_PARAMETER:
;;;849    		Uart_Delete_Logo_Parameter(nCmdLen,&p[3]);
;;;850    		break;
;;;851    		
;;;852    	case CMD_FILE_DESCRIPTION:
;;;853    		Uart_Cmd_Get_ProgramFileHeader(nCmdLen,&p[3]);
;;;854    		break;
;;;855    
;;;856    	case CMD_FILE_GRUOPS:
;;;857    		Uart_Cmd_ProgramFile_Sub(nCmdLen,&p[3]);
;;;858    		break;
;;;859    	
;;;860    	default:
;;;861    		Uart_Cmd_Link(nCmdLen,&p[3]);
0000bc  b011              ADD      sp,sp,#0x44
0000be  1ce1              ADDS     r1,r4,#3
0000c0  e8bd4ff0          POP      {r4-r11,lr}
0000c4  f7ffbffe          B.W      Uart_Cmd_Link
0000c8  2220              MOVS     r2,#0x20
0000ca  49cc              LDR      r1,|L5.1020|
0000cc  2082              MOVS     r0,#0x82
0000ce  e223              B        |L5.1304|
0000d0  1ce4              ADDS     r4,r4,#3              ;714
0000d2  2820              CMP      r0,#0x20              ;714
0000d4  d16b              BNE      |L5.430|
0000d6  4620              MOV      r0,r4                 ;714
0000d8  f7fffffe          BL       Data_Test_Parameter_Save
0000dc  48c7              LDR      r0,|L5.1020|
0000de  f7fffffe          BL       Data_Test_Parameter_Load
0000e2  2220              MOVS     r2,#0x20              ;714
0000e4  49c5              LDR      r1,|L5.1020|
0000e6  2083              MOVS     r0,#0x83              ;714
0000e8  e216              B        |L5.1304|
0000ea  48c5              LDR      r0,|L5.1024|
0000ec  f7fffffe          BL       Flash_Sector_Erase
0000f0  48c2              LDR      r0,|L5.1020|
0000f2  f7fffffe          BL       Data_Test_Parameter_Load
0000f6  2200              MOVS     r2,#0                 ;714
0000f8  4611              MOV      r1,r2                 ;714
0000fa  2084              MOVS     r0,#0x84              ;714
0000fc  e20c              B        |L5.1304|
0000fe  2240              MOVS     r2,#0x40              ;720
000100  49b9              LDR      r1,|L5.1000|
000102  4668              MOV      r0,sp                 ;720
000104  f7fffffe          BL       __aeabi_memcpy
000108  f8cd5002          STR      r5,[sp,#2]            ;720
00010c  f8cd5006          STR      r5,[sp,#6]            ;720
000110  2240              MOVS     r2,#0x40              ;720
000112  f8ad500a          STRH     r5,[sp,#0xa]          ;720
000116  4669              MOV      r1,sp                 ;720
000118  2085              MOVS     r0,#0x85              ;720
00011a  e046              B        |L5.426|
                  |L5.284|
00011c  e0a5              B        |L5.618|
00011e  1ce1              ADDS     r1,r4,#3              ;726
000120  2840              CMP      r0,#0x40              ;726
000122  d144              BNE      |L5.430|
000124  2240              MOVS     r2,#0x40              ;726
000126  4668              MOV      r0,sp                 ;726
000128  f7fffffe          BL       __aeabi_memcpy
00012c  f10d0002          ADD      r0,sp,#2              ;726
000130  f7fffffe          BL       strlen
000134  b950              CBNZ     r0,|L5.332|
000136  4650              MOV      r0,r10                ;726
000138  f8501f02          LDR      r1,[r0,#2]!           ;726  ; g_sSystemParam
00013c  f8cd1002          STR      r1,[sp,#2]            ;726
000140  6841              LDR      r1,[r0,#4]            ;726  ; g_sSystemParam
000142  f8cd1006          STR      r1,[sp,#6]            ;726
000146  8900              LDRH     r0,[r0,#8]            ;726  ; g_sSystemParam
000148  f8ad000a          STRH     r0,[sp,#0xa]          ;726
                  |L5.332|
00014c  f88d502e          STRB     r5,[sp,#0x2e]         ;726
000150  4668              MOV      r0,sp                 ;726
000152  f7fffffe          BL       Data_System_Parameter_Save
000156  48a4              LDR      r0,|L5.1000|
000158  f7fffffe          BL       Data_System_Parameter_Load
00015c  2240              MOVS     r2,#0x40              ;726
00015e  49a2              LDR      r1,|L5.1000|
000160  2086              MOVS     r0,#0x86              ;726
000162  e022              B        |L5.426|
                  |L5.356|
000164  e182              B        |L5.1132|
                  |L5.358|
000166  e1cb              B        |L5.1280|
                  |L5.360|
000168  e197              B        |L5.1178|
00016a  2240              MOVS     r2,#0x40              ;726
00016c  499e              LDR      r1,|L5.1000|
00016e  4668              MOV      r0,sp                 ;726
000170  f7fffffe          BL       __aeabi_memcpy
000174  48a3              LDR      r0,|L5.1028|
000176  f7fffffe          BL       Flash_Sector_Erase
00017a  489b              LDR      r0,|L5.1000|
00017c  f7fffffe          BL       Data_System_Parameter_Load
000180  4899              LDR      r0,|L5.1000|
000182  2210              MOVS     r2,#0x10              ;726
000184  3019              ADDS     r0,r0,#0x19           ;726
000186  f10d0119          ADD      r1,sp,#0x19           ;726
00018a  f7fffffe          BL       __aeabi_memcpy
00018e  4896              LDR      r0,|L5.1000|
000190  f7fffffe          BL       Data_System_Parameter_Save
000194  2200              MOVS     r2,#0                 ;726
000196  e006              B        |L5.422|
                  |L5.408|
000198  e164              B        |L5.1124|
                  |L5.410|
00019a  e184              B        |L5.1190|
                  |L5.412|
00019c  e1c1              B        |L5.1314|
                  |L5.414|
00019e  e1dd              B        |L5.1372|
                  |L5.416|
0001a0  e1e7              B        |L5.1394|
                  |L5.418|
0001a2  e1ec              B        |L5.1406|
0001a4  e003              B        |L5.430|
                  |L5.422|
0001a6  4611              MOV      r1,r2                 ;726
0001a8  2087              MOVS     r0,#0x87              ;726
                  |L5.426|
0001aa  f7fffffe          BL       Uart_Packet_And_Send
                  |L5.430|
;;;862    		break;
;;;863    	}
;;;864    }
0001ae  b011              ADD      sp,sp,#0x44
0001b0  e8bd8ff0          POP      {r4-r11,pc}
0001b4  2240              MOVS     r2,#0x40
0001b6  4994              LDR      r1,|L5.1032|
0001b8  208b              MOVS     r0,#0x8b
0001ba  e1ad              B        |L5.1304|
0001bc  b011              ADD      sp,sp,#0x44           ;736
0001be  1ce1              ADDS     r1,r4,#3              ;736
0001c0  e8bd4ff0          POP      {r4-r11,lr}           ;736
0001c4  f7ffbffe          B.W      Uart_Cmd_Set_Alc_Calibration
0001c8  4c8f              LDR      r4,|L5.1032|
0001ca  488c              LDR      r0,|L5.1020|
0001cc  f8545f39          LDR      r5,[r4,#0x39]!        ;736  ; g_sAlcCalibrationParam
0001d0  75c3              STRB     r3,[r0,#0x17]         ;736
0001d2  f7fffffe          BL       Data_Test_Parameter_Save
0001d6  4889              LDR      r0,|L5.1020|
0001d8  f7fffffe          BL       Data_Test_Parameter_Load
0001dc  f44f1001          MOV      r0,#0x204000          ;736
0001e0  f7fffffe          BL       Flash_Sector_Erase
0001e4  4888              LDR      r0,|L5.1032|
0001e6  f7fffffe          BL       Data_AlcCalibration_Parameter_Load
0001ea  6025              STR      r5,[r4,#0]            ;736  ; g_sAlcCalibrationParam
0001ec  4886              LDR      r0,|L5.1032|
0001ee  f7fffffe          BL       Data_AlcCalibration_Parameter_Save
0001f2  2200              MOVS     r2,#0                 ;736
0001f4  4611              MOV      r1,r2                 ;736
0001f6  208d              MOVS     r0,#0x8d              ;736
0001f8  e18e              B        |L5.1304|
0001fa  2204              MOVS     r2,#4                 ;740
0001fc  4983              LDR      r1,|L5.1036|
0001fe  2097              MOVS     r0,#0x97              ;740
000200  e18a              B        |L5.1304|
000202  4602              MOV      r2,r0                 ;746
000204  2000              MOVS     r0,#0                 ;746
000206  1ce1              ADDS     r1,r4,#3              ;746
000208  9000              STR      r0,[sp,#0]            ;746
00020a  2a04              CMP      r2,#4                 ;746
00020c  d8cf              BHI      |L5.430|
00020e  4668              MOV      r0,sp                 ;746
000210  f7fffffe          BL       __aeabi_memcpy
000214  9800              LDR      r0,[sp,#0]            ;746
000216  2401              MOVS     r4,#1                 ;696
000218  b1f8              CBZ      r0,|L5.602|
00021a  1e40              SUBS     r0,r0,#1              ;696
00021c  2200              MOVS     r2,#0                 ;696
00021e  9000              STR      r0,[sp,#0]            ;696
000220  4611              MOV      r1,r2                 ;696
000222  2098              MOVS     r0,#0x98              ;696
000224  e013              B        |L5.590|
000226  e0a0              B        |L5.874|
000228  e093              B        |L5.850|
00022a  e08c              B        |L5.838|
00022c  e081              B        |L5.818|
00022e  e073              B        |L5.792|
000230  e06e              B        |L5.784|
000232  e063              B        |L5.764|
000234  e054              B        |L5.736|
000236  e050              B        |L5.730|
000238  e10a              B        |L5.1104|
00023a  e105              B        |L5.1096|
00023c  e0fa              B        |L5.1076|
00023e  e0cd              B        |L5.988|
000240  e140              B        |L5.1220|
000242  e0bc              B        |L5.958|
000244  e0ac              B        |L5.928|
000246  e09a              B        |L5.894|
000248  e016              B        |L5.632|
00024a  e033              B        |L5.692|
00024c  e01c              B        |L5.648|
                  |L5.590|
00024e  f7fffffe          BL       Uart_Packet_And_Send
000252  7034              STRB     r4,[r6,#0]            ;696
000254  9800              LDR      r0,[sp,#0]            ;696
000256  6038              STR      r0,[r7,#0]            ;696  ; g_nUartCurrentTransRecordIndex
                  |L5.600|
000258  e7a9              B        |L5.430|
                  |L5.602|
00025a  2200              MOVS     r2,#0
00025c  4611              MOV      r1,r2
00025e  2098              MOVS     r0,#0x98
000260  f7fffffe          BL       Uart_Packet_And_Send
000264  7034              STRB     r4,[r6,#0]
                  |L5.614|
000266  603d              STR      r5,[r7,#0]  ; g_nUartCurrentTransRecordIndex
000268  e7a1              B        |L5.430|
                  |L5.618|
00026a  2200              MOVS     r2,#0
00026c  4611              MOV      r1,r2
00026e  209b              MOVS     r0,#0x9b
000270  f7fffffe          BL       Uart_Packet_And_Send
000274  7035              STRB     r5,[r6,#0]
000276  e7f6              B        |L5.614|
                  |L5.632|
000278  f7fffffe          BL       Data_Records_Clear
00027c  2200              MOVS     r2,#0                 ;750
00027e  7035              STRB     r5,[r6,#0]            ;750
000280  4611              MOV      r1,r2                 ;750
000282  209e              MOVS     r0,#0x9e              ;750
000284  603d              STR      r5,[r7,#0]            ;753  ; g_nUartCurrentTransRecordIndex
000286  e147              B        |L5.1304|
                  |L5.648|
000288  4602              MOV      r2,r0                 ;755
00028a  2000              MOVS     r0,#0                 ;755
00028c  1ce1              ADDS     r1,r4,#3              ;755
00028e  9000              STR      r0,[sp,#0]            ;755
000290  2a04              CMP      r2,#4                 ;755
000292  d88c              BHI      |L5.430|
000294  4668              MOV      r0,sp                 ;755
000296  f7fffffe          BL       __aeabi_memcpy
00029a  9800              LDR      r0,[sp,#0]            ;755
00029c  2800              CMP      r0,#0                 ;755
00029e  d086              BEQ      |L5.430|
0002a0  1e40              SUBS     r0,r0,#1              ;755
0002a2  4654              MOV      r4,r10                ;755
0002a4  1d61              ADDS     r1,r4,#5              ;755
0002a6  9000              STR      r0,[sp,#0]            ;755
0002a8  f7fffffe          BL       Data_Record_Load_ByID
0002ac  1d61              ADDS     r1,r4,#5              ;755
0002ae  465a              MOV      r2,r11                ;755
0002b0  209c              MOVS     r0,#0x9c              ;755
0002b2  e77a              B        |L5.426|
                  |L5.692|
0002b4  465d              MOV      r5,r11                ;755
0002b6  1ce4              ADDS     r4,r4,#3              ;755
0002b8  42a8              CMP      r0,r5                 ;755
                  |L5.698|
0002ba  d1cd              BNE      |L5.600|
0002bc  4954              LDR      r1,|L5.1040|
0002be  6809              LDR      r1,[r1,#0]            ;755  ; g_nNewRecordID
0002c0  4589              CMP      r9,r1                 ;755
0002c2  d1c9              BNE      |L5.600|
0002c4  4620              MOV      r0,r4                 ;755
0002c6  f7fffffe          BL       Data_Record_Save_Sub
0002ca  4852              LDR      r0,|L5.1044|
0002cc  f7fffffe          BL       Data_Record_Load_Last
0002d0  462a              MOV      r2,r5                 ;755
0002d2  f10a0105          ADD      r1,r10,#5             ;755
0002d6  209d              MOVS     r0,#0x9d              ;755
0002d8  e11e              B        |L5.1304|
                  |L5.730|
0002da  494f              LDR      r1,|L5.1048|
0002dc  208e              MOVS     r0,#0x8e              ;755
0002de  e11b              B        |L5.1304|
                  |L5.736|
0002e0  4690              MOV      r8,r2                 ;763
0002e2  1ce4              ADDS     r4,r4,#3              ;763
0002e4  4540              CMP      r0,r8                 ;763
                  |L5.742|
0002e6  d1b7              BNE      |L5.600|
0002e8  4620              MOV      r0,r4                 ;763
0002ea  f7fffffe          BL       Data_Temperature_Calibration_Parameter_Save
0002ee  484a              LDR      r0,|L5.1048|
0002f0  f7fffffe          BL       Data_Temperature_Calibration_Parameter_Load
0002f4  4642              MOV      r2,r8                 ;763
0002f6  4948              LDR      r1,|L5.1048|
0002f8  208f              MOVS     r0,#0x8f              ;763
0002fa  e10d              B        |L5.1304|
                  |L5.764|
0002fc  4847              LDR      r0,|L5.1052|
0002fe  f7fffffe          BL       Flash_Sector_Erase
000302  4845              LDR      r0,|L5.1048|
000304  f7fffffe          BL       Data_Temperature_Calibration_Parameter_Load
000308  2200              MOVS     r2,#0                 ;763
00030a  4611              MOV      r1,r2                 ;763
00030c  2090              MOVS     r0,#0x90              ;763
00030e  e103              B        |L5.1304|
                  |L5.784|
000310  2220              MOVS     r2,#0x20              ;769
000312  4943              LDR      r1,|L5.1056|
000314  2091              MOVS     r0,#0x91              ;769
000316  e0ff              B        |L5.1304|
                  |L5.792|
000318  1ce4              ADDS     r4,r4,#3              ;773
00031a  2820              CMP      r0,#0x20              ;773
00031c  d19c              BNE      |L5.600|
00031e  4620              MOV      r0,r4                 ;773
000320  f7fffffe          BL       Data_DeviceID_Config_Save
000324  483e              LDR      r0,|L5.1056|
000326  f7fffffe          BL       Data_DeviceID_Config_Load
00032a  2220              MOVS     r2,#0x20              ;773
00032c  493c              LDR      r1,|L5.1056|
00032e  2092              MOVS     r0,#0x92              ;773
000330  e0f2              B        |L5.1304|
                  |L5.818|
000332  483c              LDR      r0,|L5.1060|
000334  f7fffffe          BL       Flash_Sector_Erase
000338  4839              LDR      r0,|L5.1056|
00033a  f7fffffe          BL       Data_DeviceID_Config_Load
00033e  2200              MOVS     r2,#0                 ;773
000340  4611              MOV      r1,r2                 ;773
000342  2093              MOVS     r0,#0x93              ;773
000344  e0e8              B        |L5.1304|
                  |L5.838|
000346  22a4              MOVS     r2,#0xa4              ;779
000348  f8898000          STRB     r8,[r9,#0]            ;779
00034c  4929              LDR      r1,|L5.1012|
00034e  2094              MOVS     r0,#0x94              ;779
000350  e0e2              B        |L5.1304|
                  |L5.850|
000352  1ce0              ADDS     r0,r4,#3              ;785
000354  f7fffffe          BL       Data_Server_Parameter_Save
000358  4826              LDR      r0,|L5.1012|
00035a  f7fffffe          BL       Data_Server_Parameter_Load
00035e  22a4              MOVS     r2,#0xa4              ;785
000360  f8898000          STRB     r8,[r9,#0]            ;785
000364  4923              LDR      r1,|L5.1012|
000366  2095              MOVS     r0,#0x95              ;785
000368  e0d6              B        |L5.1304|
                  |L5.874|
00036a  482f              LDR      r0,|L5.1064|
00036c  f7fffffe          BL       Flash_Sector_Erase
000370  4820              LDR      r0,|L5.1012|
000372  f7fffffe          BL       Data_Server_Parameter_Load
000376  2200              MOVS     r2,#0                 ;786
000378  4611              MOV      r1,r2                 ;786
00037a  2096              MOVS     r0,#0x96              ;786
00037c  e0cc              B        |L5.1304|
                  |L5.894|
00037e  2806              CMP      r0,#6                 ;789
                  |L5.896|
000380  d19b              BNE      |L5.698|
000382  9200              STR      r2,[sp,#0]            ;789
000384  f8b40007          LDRH     r0,[r4,#7]            ;789
000388  f8ad0004          STRH     r0,[sp,#4]            ;789
00038c  4827              LDR      r0,|L5.1068|
00038e  7800              LDRB     r0,[r0,#0]            ;789  ; g_bSpiHardwareBusBusy
000390  b910              CBNZ     r0,|L5.920|
000392  4668              MOV      r0,sp                 ;789
000394  f7fffffe          BL       Rtc_Set_Time
                  |L5.920|
000398  2200              MOVS     r2,#0                 ;789
00039a  4611              MOV      r1,r2                 ;789
00039c  209f              MOVS     r0,#0x9f              ;789
00039e  e704              B        |L5.426|
                  |L5.928|
0003a0  2801              CMP      r0,#1                 ;789
0003a2  d18a              BNE      |L5.698|
0003a4  f1bc0f64          CMP      r12,#0x64             ;789
0003a8  d900              BLS      |L5.940|
0003aa  70e3              STRB     r3,[r4,#3]            ;789
                  |L5.940|
0003ac  78e0              LDRB     r0,[r4,#3]            ;789
0003ae  f7fffffe          BL       Get_Actual_LcdBackLight_Percent
0003b2  f7fffffe          BL       Lcd_Back_Light_Pwm_Pulse_Config
0003b6  2200              MOVS     r2,#0                 ;789
0003b8  4611              MOV      r1,r2                 ;789
0003ba  20a0              MOVS     r0,#0xa0              ;789
0003bc  e0ac              B        |L5.1304|
                  |L5.958|
0003be  2801              CMP      r0,#1                 ;789
                  |L5.960|
0003c0  d191              BNE      |L5.742|
0003c2  f1bc0f64          CMP      r12,#0x64             ;789
0003c6  d900              BLS      |L5.970|
0003c8  70e3              STRB     r3,[r4,#3]            ;789
                  |L5.970|
0003ca  78e0              LDRB     r0,[r4,#3]            ;789
0003cc  f7fffffe          BL       Get_Actual_Volume_Config
0003d0  f7fffffe          BL       Voc_Cmd
0003d4  2200              MOVS     r2,#0                 ;789
0003d6  4611              MOV      r1,r2                 ;789
0003d8  20a1              MOVS     r0,#0xa1              ;789
0003da  e09d              B        |L5.1304|
                  |L5.988|
0003dc  2204              MOVS     r2,#4                 ;789
0003de  4914              LDR      r1,|L5.1072|
0003e0  20a5              MOVS     r0,#0xa5              ;789
0003e2  e099              B        |L5.1304|
                  |L5.996|
                          DCD      ||.bss||+0x12c
                  |L5.1000|
                          DCD      g_sSystemParam
                  |L5.1004|
                          DCD      g_bUartStartTransRecords
                  |L5.1008|
                          DCD      g_nUartCurrentTransRecordIndex
                  |L5.1012|
                          DCD      g_sServerParam
                  |L5.1016|
                          DCD      ||.bss||+0x578
                  |L5.1020|
                          DCD      g_sTestParam
                  |L5.1024|
                          DCD      0x00201000
                  |L5.1028|
                          DCD      0x00202000
                  |L5.1032|
                          DCD      g_sAlcCalibrationParam
                  |L5.1036|
                          DCD      g_sRecordInforMap
                  |L5.1040|
                          DCD      g_nNewRecordID
                  |L5.1044|
                          DCD      g_sRecord
                  |L5.1048|
                          DCD      g_sTemperatureCalibrationParam
                  |L5.1052|
                          DCD      0x00205000
                  |L5.1056|
                          DCD      g_sDeviceIDConfig
                  |L5.1060|
                          DCD      0x00206000
                  |L5.1064|
                          DCD      0x00207000
                  |L5.1068|
                          DCD      g_bSpiHardwareBusBusy
                  |L5.1072|
                          DCD      g_fTotalInhaleTimeCounter
                  |L5.1076|
000434  4855              LDR      r0,|L5.1420|
000436  f7fffffe          BL       Flash_Sector_Erase
00043a  4855              LDR      r0,|L5.1424|
00043c  f7fffffe          BL       Data_Total_InhaleTime_Counter_Load
000440  2200              MOVS     r2,#0                 ;803
000442  4611              MOV      r1,r2                 ;803
000444  20a6              MOVS     r0,#0xa6              ;803
000446  e067              B        |L5.1304|
                  |L5.1096|
000448  2204              MOVS     r2,#4                 ;806
00044a  4952              LDR      r1,|L5.1428|
00044c  20a7              MOVS     r0,#0xa7              ;806
00044e  e063              B        |L5.1304|
                  |L5.1104|
000450  4851              LDR      r0,|L5.1432|
000452  f7fffffe          BL       Flash_Sector_Erase
000456  484f              LDR      r0,|L5.1428|
000458  f7fffffe          BL       Data_Total_Test_Counter_Load
00045c  2200              MOVS     r2,#0                 ;810
00045e  4611              MOV      r1,r2                 ;810
000460  20a8              MOVS     r0,#0xa8              ;810
000462  e059              B        |L5.1304|
                  |L5.1124|
000464  2283              MOVS     r2,#0x83              ;813
000466  494d              LDR      r1,|L5.1436|
000468  20b2              MOVS     r0,#0xb2              ;813
00046a  e055              B        |L5.1304|
                  |L5.1132|
00046c  1ce4              ADDS     r4,r4,#3              ;817
00046e  2883              CMP      r0,#0x83              ;817
                  |L5.1136|
000470  d186              BNE      |L5.896|
000472  4620              MOV      r0,r4                 ;817
000474  f7fffffe          BL       Data_Device_UserInfor_Save
000478  4848              LDR      r0,|L5.1436|
00047a  f7fffffe          BL       Data_Device_UserInfor_Load
00047e  2283              MOVS     r2,#0x83              ;817
000480  4946              LDR      r1,|L5.1436|
000482  20b1              MOVS     r0,#0xb1              ;817
000484  e048              B        |L5.1304|
                  |L5.1158|
000486  4846              LDR      r0,|L5.1440|
000488  f7fffffe          BL       Flash_Sector_Erase
00048c  4843              LDR      r0,|L5.1436|
00048e  f7fffffe          BL       Data_Device_UserInfor_Load
000492  2200              MOVS     r2,#0                 ;817
000494  4611              MOV      r1,r2                 ;817
000496  20b3              MOVS     r0,#0xb3              ;817
000498  e03e              B        |L5.1304|
                  |L5.1178|
00049a  b011              ADD      sp,sp,#0x44           ;826
00049c  1ce1              ADDS     r1,r4,#3              ;826
00049e  e8bd4ff0          POP      {r4-r11,lr}           ;826
0004a2  f7ffbffe          B.W      Uart_Get_Device_Records_Infor
                  |L5.1190|
0004a6  2804              CMP      r0,#4                 ;826
0004a8  d18a              BNE      |L5.960|
0004aa  483e              LDR      r0,|L5.1444|
0004ac  6800              LDR      r0,[r0,#0]            ;826  ; g_nAlreadyUploadCounter
0004ae  4282              CMP      r2,r0                 ;826
0004b0  d904              BLS      |L5.1212|
0004b2  1a10              SUBS     r0,r2,r0              ;826
0004b4  2801              CMP      r0,#1                 ;826
0004b6  d101              BNE      |L5.1212|
0004b8  f7fffffe          BL       Update_Already_Upload_Record_Counter
                  |L5.1212|
0004bc  2200              MOVS     r2,#0                 ;826
0004be  4611              MOV      r1,r2                 ;826
0004c0  20b5              MOVS     r0,#0xb5              ;826
0004c2  e029              B        |L5.1304|
                  |L5.1220|
0004c4  4838              LDR      r0,|L5.1448|
0004c6  f7fffffe          BL       Flash_Sector_Erase
0004ca  4838              LDR      r0,|L5.1452|
0004cc  f7fffffe          BL       Flash_Sector_Erase
0004d0  2200              MOVS     r2,#0                 ;826
0004d2  4611              MOV      r1,r2                 ;826
0004d4  20a4              MOVS     r0,#0xa4              ;826
0004d6  e01f              B        |L5.1304|
                  |L5.1240|
0004d8  2801              CMP      r0,#1                 ;834
0004da  d1c9              BNE      |L5.1136|
0004dc  f1bc0f00          CMP      r12,#0                ;834
0004e0  d001              BEQ      |L5.1254|
0004e2  2101              MOVS     r1,#1                 ;834
0004e4  e000              B        |L5.1256|
                  |L5.1254|
0004e6  2100              MOVS     r1,#0                 ;834
                  |L5.1256|
0004e8  f88a102d          STRB     r1,[r10,#0x2d]        ;834
0004ec  4830              LDR      r0,|L5.1456|
0004ee  f7fffffe          BL       Data_System_Parameter_Save
0004f2  482f              LDR      r0,|L5.1456|
0004f4  f7fffffe          BL       Data_System_Parameter_Load
0004f8  2200              MOVS     r2,#0                 ;834
0004fa  4611              MOV      r1,r2                 ;834
0004fc  20f8              MOVS     r0,#0xf8              ;834
0004fe  e00b              B        |L5.1304|
                  |L5.1280|
000500  1ce4              ADDS     r4,r4,#3              ;834
000502  2840              CMP      r0,#0x40              ;834
000504  d1b4              BNE      |L5.1136|
000506  4620              MOV      r0,r4                 ;834
000508  f7fffffe          BL       Data_AlcCalibration_Parameter_Save
00050c  4829              LDR      r0,|L5.1460|
00050e  f7fffffe          BL       Data_AlcCalibration_Parameter_Load
000512  2240              MOVS     r2,#0x40              ;834
000514  4927              LDR      r1,|L5.1460|
000516  20f9              MOVS     r0,#0xf9              ;834
                  |L5.1304|
000518  b011              ADD      sp,sp,#0x44           ;834
00051a  e8bd4ff0          POP      {r4-r11,lr}           ;834
00051e  f7ffbffe          B.W      Uart_Packet_And_Send
                  |L5.1314|
000522  4605              MOV      r5,r0                 ;845
000524  2200              MOVS     r2,#0                 ;845
000526  4611              MOV      r1,r2                 ;845
000528  20fa              MOVS     r0,#0xfa              ;845
00052a  f7fffffe          BL       Uart_Packet_And_Send
00052e  2d01              CMP      r5,#1                 ;845
000530  d102              BNE      |L5.1336|
000532  78e0              LDRB     r0,[r4,#3]            ;845
000534  28fa              CMP      r0,#0xfa              ;845
000536  d00c              BEQ      |L5.1362|
                  |L5.1336|
000538  2064              MOVS     r0,#0x64              ;845
00053a  f7fffffe          BL       delay_ms
00053e  481e              LDR      r0,|L5.1464|
000540  6801              LDR      r1,[r0,#0]            ;845
000542  4a1e              LDR      r2,|L5.1468|
000544  f40161e0          AND      r1,r1,#0x700          ;845
000548  4311              ORRS     r1,r1,r2              ;845
00054a  6001              STR      r1,[r0,#0]            ;845
00054c  f3bf8f40          DSB      #0x0                  ;845
                  |L5.1360|
000550  e7fe              B        |L5.1360|
                  |L5.1362|
000552  b011              ADD      sp,sp,#0x44           ;845
000554  e8bd4ff0          POP      {r4-r11,lr}           ;845
000558  f7ffbffe          B.W      Enter_Upgrade_Mode
                  |L5.1372|
00055c  4818              LDR      r0,|L5.1472|
00055e  f7fffffe          BL       Flash_Sector_Erase
000562  2112              MOVS     r1,#0x12              ;845
000564  4817              LDR      r0,|L5.1476|
000566  f7fffffe          BL       __aeabi_memclr
00056a  2200              MOVS     r2,#0                 ;845
00056c  4611              MOV      r1,r2                 ;845
00056e  20fc              MOVS     r0,#0xfc              ;845
000570  e7d2              B        |L5.1304|
                  |L5.1394|
000572  b011              ADD      sp,sp,#0x44           ;853
000574  1ce1              ADDS     r1,r4,#3              ;853
000576  e8bd4ff0          POP      {r4-r11,lr}           ;853
00057a  f7ffbffe          B.W      Uart_Cmd_Get_ProgramFileHeader
                  |L5.1406|
00057e  b011              ADD      sp,sp,#0x44           ;857
000580  1ce1              ADDS     r1,r4,#3              ;857
000582  e8bd4ff0          POP      {r4-r11,lr}           ;857
000586  f7ffbffe          B.W      Uart_Cmd_ProgramFile_Sub
;;;865    
                          ENDP

00058a  0000              DCW      0x0000
                  |L5.1420|
                          DCD      0x0020e000
                  |L5.1424|
                          DCD      g_fTotalInhaleTimeCounter
                  |L5.1428|
                          DCD      g_nTotalTestCounter
                  |L5.1432|
                          DCD      0x0020f000
                  |L5.1436|
                          DCD      g_sDeviceUserInfo
                  |L5.1440|
                          DCD      0x00211000
                  |L5.1444|
                          DCD      g_nAlreadyUploadCounter
                  |L5.1448|
                          DCD      0x00212000
                  |L5.1452|
                          DCD      0x00213000
                  |L5.1456|
                          DCD      g_sSystemParam
                  |L5.1460|
                          DCD      g_sAlcCalibrationParam
                  |L5.1464|
                          DCD      0xe000ed0c
                  |L5.1468|
                          DCD      0x05fa0004
                  |L5.1472|
                          DCD      0x00223000
                  |L5.1476|
                          DCD      g_sLogoAttribute

                          AREA ||i.Uart_Cmd_ProgramFile_Sub||, CODE, READONLY, ALIGN=2

                  Uart_Cmd_ProgramFile_Sub PROC
;;;625    
;;;626    static void Uart_Cmd_ProgramFile_Sub(unsigned short nLen,unsigned char *pData)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;627    {
000004  4681              MOV      r9,r0
;;;628    	unsigned short nIndex;
;;;629    	memcpy(&nIndex,pData,2);
;;;630    	if(nIndex == s_nProgramPackageIndex + 1)
000006  f8dfa0f8          LDR      r10,|L6.256|
00000a  8808              LDRH     r0,[r1,#0]            ;629
00000c  460f              MOV      r7,r1                 ;627
00000e  f8ad0000          STRH     r0,[sp,#0]            ;629
000012  f8da1014          LDR      r1,[r10,#0x14]  ; s_nProgramPackageIndex
000016  4680              MOV      r8,r0
000018  1c49              ADDS     r1,r1,#1
00001a  4288              CMP      r0,r1
00001c  d16e              BNE      |L6.252|
;;;631    	{
;;;632    		if(g_sUSBProgramFileHeader.nFileType == 2)
00001e  4c39              LDR      r4,|L6.260|
;;;633    		{
;;;634    			int nAddrOffset;
;;;635    			
;;;636    			__disable_irq();
;;;637    			
;;;638    			FLASH_Unlock();
;;;639    			FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
;;;640    
;;;641    			if((g_sUSBProgramFileHeader.nFlashStartAddress % 2048) == 0)
;;;642    			{
;;;643    				FLASH_ErasePage(g_sUSBProgramFileHeader.nFlashStartAddress);
;;;644    			}
;;;645    			
;;;646    			for(nAddrOffset = 0; nAddrOffset < nLen -2; nAddrOffset += 4)
000020  f1a90502          SUB      r5,r9,#2
000024  7820              LDRB     r0,[r4,#0]            ;632  ; g_sUSBProgramFileHeader
000026  2802              CMP      r0,#2                 ;632
000028  d006              BEQ      |L6.56|
;;;647    			{
;;;648    				unsigned long nValue;
;;;649    				memcpy((void *)&nValue, pData + 2 + nAddrOffset, 4);
;;;650    				FLASH_ProgramWord(g_sUSBProgramFileHeader.nFlashStartAddress + nAddrOffset, nValue);
;;;651    			}
;;;652    			FLASH_Lock();
;;;653    			
;;;654    			__enable_irq();
;;;655    		}
;;;656    		else
;;;657    		{	
;;;658    			Spi_Flash_Init();
00002a  f7fffffe          BL       Spi_Flash_Init
;;;659    			if((g_sUSBProgramFileHeader.nFlashStartAddress % FLASH_PAGE_SIZE) == 0)
00002e  f8d40009          LDR      r0,[r4,#9]  ; g_sUSBProgramFileHeader
000032  0501              LSLS     r1,r0,#20
000034  d01d              BEQ      |L6.114|
000036  e01e              B        |L6.118|
                  |L6.56|
000038  b672              CPSID    i                     ;636
00003a  f7fffffe          BL       FLASH_Unlock
00003e  2034              MOVS     r0,#0x34              ;639
000040  f7fffffe          BL       FLASH_ClearFlag
000044  f8d40009          LDR      r0,[r4,#9]            ;641  ; g_sUSBProgramFileHeader
000048  0541              LSLS     r1,r0,#21             ;641
00004a  d101              BNE      |L6.80|
00004c  f7fffffe          BL       FLASH_ErasePage
                  |L6.80|
000050  2600              MOVS     r6,#0                 ;646
000052  e008              B        |L6.102|
                  |L6.84|
000054  19b8              ADDS     r0,r7,r6              ;649
000056  f8d01002          LDR      r1,[r0,#2]            ;649
00005a  f8d40009          LDR      r0,[r4,#9]            ;650  ; g_sUSBProgramFileHeader
00005e  4430              ADD      r0,r0,r6              ;650
000060  f7fffffe          BL       FLASH_ProgramWord
000064  1d36              ADDS     r6,r6,#4              ;650
                  |L6.102|
000066  42ae              CMP      r6,r5                 ;646
000068  dbf4              BLT      |L6.84|
00006a  f7fffffe          BL       FLASH_Lock
00006e  b662              CPSIE    i                     ;654
000070  e009              B        |L6.134|
                  |L6.114|
;;;660    			{
;;;661    				Flash_Sector_Erase(g_sUSBProgramFileHeader.nFlashStartAddress);
000072  f7fffffe          BL       Flash_Sector_Erase
                  |L6.118|
;;;662    			}
;;;663    			Flash_Write_Array(g_sUSBProgramFileHeader.nFlashStartAddress, pData + 2, nLen -2);
000076  b2aa              UXTH     r2,r5
000078  f8d40009          LDR      r0,[r4,#9]  ; g_sUSBProgramFileHeader
00007c  1cb9              ADDS     r1,r7,#2
00007e  f7fffffe          BL       Flash_Write_Array
;;;664    			Spi_Flash_DeInit();
000082  f7fffffe          BL       Spi_Flash_DeInit
                  |L6.134|
;;;665    		}
;;;666    
;;;667    		TRACE_PRINTF("Flash address = 0x%08X, PackageIndex = %d, nLen = %d!\r\n",g_sUSBProgramFileHeader.nFlashStartAddress, nIndex , nLen -2);
000086  f8d41009          LDR      r1,[r4,#9]  ; g_sUSBProgramFileHeader
00008a  f1a90302          SUB      r3,r9,#2
00008e  4642              MOV      r2,r8
000090  a01d              ADR      r0,|L6.264|
000092  1d64              ADDS     r4,r4,#5
000094  f7fffffe          BL       User_Debug_Printf
;;;668    
;;;669    		s_nProgramPackageIndex++;
000098  f8da1014          LDR      r1,[r10,#0x14]  ; s_nProgramPackageIndex
;;;670    		g_sUSBProgramFileHeader.nFlashStartAddress += nLen -2;
;;;671    
;;;672    		Uart_Packet_And_Send(ACK_FILE_GRUOPS, NULL, 0); 
00009c  2200              MOVS     r2,#0
00009e  1c49              ADDS     r1,r1,#1              ;669
0000a0  f8ca1014          STR      r1,[r10,#0x14]        ;670  ; s_nProgramPackageIndex
0000a4  6860              LDR      r0,[r4,#4]            ;670  ; g_sUSBProgramFileHeader
0000a6  4611              MOV      r1,r2
0000a8  4428              ADD      r0,r0,r5              ;670
0000aa  6060              STR      r0,[r4,#4]            ;670  ; g_sUSBProgramFileHeader
0000ac  20fe              MOVS     r0,#0xfe
0000ae  f7fffffe          BL       Uart_Packet_And_Send
;;;673    
;;;674    		if(nIndex == g_sUSBProgramFileHeader.nNumberOfPackages)
0000b2  f8341905          LDRH     r1,[r4],#-5  ; g_sUSBProgramFileHeader
0000b6  4541              CMP      r1,r8
0000b8  d120              BNE      |L6.252|
;;;675    		{
;;;676    			if(g_sUSBProgramFileHeader.nFileType == 0 || g_sUSBProgramFileHeader.nFileType == 2)
0000ba  7821              LDRB     r1,[r4,#0]  ; g_sUSBProgramFileHeader
0000bc  b109              CBZ      r1,|L6.194|
0000be  2902              CMP      r1,#2
0000c0  d11c              BNE      |L6.252|
                  |L6.194|
;;;677    			{
;;;678    				g_sLogoAttribute.nFileType = g_sUSBProgramFileHeader.nFileType;
0000c2  481f              LDR      r0,|L6.320|
0000c4  7301              STRB     r1,[r0,#0xc]
;;;679    				g_sLogoAttribute.nStartX0 = g_sUSBProgramFileHeader.nStartX0;
0000c6  f8b4100d          LDRH     r1,[r4,#0xd]  ; g_sUSBProgramFileHeader
0000ca  8001              STRH     r1,[r0,#0]
;;;680    				g_sLogoAttribute.nStartY0 = g_sUSBProgramFileHeader.nStartY0;
0000cc  f8b4100f          LDRH     r1,[r4,#0xf]  ; g_sUSBProgramFileHeader
0000d0  8041              STRH     r1,[r0,#2]
;;;681    				g_sLogoAttribute.nFileWidth = g_sUSBProgramFileHeader.nFileWidth;
0000d2  f8b41011          LDRH     r1,[r4,#0x11]  ; g_sUSBProgramFileHeader
0000d6  8081              STRH     r1,[r0,#4]
;;;682    				g_sLogoAttribute.nFileHeight = g_sUSBProgramFileHeader.nFileHeight;
0000d8  f8b41013          LDRH     r1,[r4,#0x13]  ; g_sUSBProgramFileHeader
0000dc  80c1              STRH     r1,[r0,#6]
;;;683    				g_sLogoAttribute.nFileSize = g_sUSBProgramFileHeader.nFileSize;
0000de  f8d41001          LDR      r1,[r4,#1]  ; g_sUSBProgramFileHeader
0000e2  6081              STR      r1,[r0,#8]  ; g_sLogoAttribute
;;;684    				Spi_Flash_Init();
0000e4  f7fffffe          BL       Spi_Flash_Init
;;;685    				Data_Logo_Attribute_Save(&g_sLogoAttribute);
0000e8  4815              LDR      r0,|L6.320|
0000ea  f7fffffe          BL       Data_Logo_Attribute_Save
;;;686    				Data_Logo_Attribute_Load(&g_sLogoAttribute);
0000ee  4814              LDR      r0,|L6.320|
0000f0  f7fffffe          BL       Data_Logo_Attribute_Load
;;;687    				Spi_Flash_DeInit();
0000f4  e8bd4ff8          POP      {r3-r11,lr}
0000f8  f7ffbffe          B.W      Spi_Flash_DeInit
                  |L6.252|
;;;688    			}
;;;689    		}
;;;690    	}
;;;691    }
0000fc  e8bd8ff8          POP      {r3-r11,pc}
;;;692    /******************************************************************************************************/
                          ENDP

                  |L6.256|
                          DCD      ||.data||
                  |L6.260|
                          DCD      g_sUSBProgramFileHeader
                  |L6.264|
000108  466c6173          DCB      "Flash address = 0x%08X, PackageIndex = %d, nLen = %d!\r"
00010c  68206164
000110  64726573
000114  73203d20
000118  30782530
00011c  38582c20
000120  5061636b
000124  61676549
000128  6e646578
00012c  203d2025
000130  642c206e
000134  4c656e20
000138  3d202564
00013c  210d    
00013e  0a00              DCB      "\n",0
                  |L6.320|
                          DCD      g_sLogoAttribute

                          AREA ||i.Uart_Cmd_Record_Trans_Sub||, CODE, READONLY, ALIGN=2

                  Uart_Cmd_Record_Trans_Sub PROC
;;;507    
;;;508    static void Uart_Cmd_Record_Trans_Sub(void)
000000  b570              PUSH     {r4-r6,lr}
;;;509    {
;;;510    	if(g_nUartCurrentTransRecordIndex < g_sRecordInforMap.nTotalRecordsCounter)
000002  480e              LDR      r0,|L7.60|
000004  4d0e              LDR      r5,|L7.64|
000006  6801              LDR      r1,[r0,#0]  ; g_sRecordInforMap
000008  6828              LDR      r0,[r5,#0]  ; g_nUartCurrentTransRecordIndex
00000a  4281              CMP      r1,r0
00000c  d90c              BLS      |L7.40|
;;;511    	{
;;;512    		Data_Record_Load_ByID(g_nUartCurrentTransRecordIndex, (sRecord *)s_sUARTAckPacket.aData);
00000e  4c0d              LDR      r4,|L7.68|
000010  1d61              ADDS     r1,r4,#5
000012  f7fffffe          BL       Data_Record_Load_ByID
;;;513    		Uart_Packet_And_Send(ACK_EXPORT_RECORDS_TRANSMITTING,s_sUARTAckPacket.aData, sizeof(sRecord));
000016  f44f7280          MOV      r2,#0x100
00001a  1d61              ADDS     r1,r4,#5
00001c  2099              MOVS     r0,#0x99
00001e  f7fffffe          BL       Uart_Packet_And_Send
;;;514    		g_nUartCurrentTransRecordIndex ++;
000022  6828              LDR      r0,[r5,#0]  ; g_nUartCurrentTransRecordIndex
000024  1c40              ADDS     r0,r0,#1
000026  e007              B        |L7.56|
                  |L7.40|
000028  2200              MOVS     r2,#0
00002a  4611              MOV      r1,r2
00002c  209a              MOVS     r0,#0x9a
00002e  f7fffffe          BL       Uart_Packet_And_Send
000032  4905              LDR      r1,|L7.72|
000034  2000              MOVS     r0,#0
000036  7008              STRB     r0,[r1,#0]
                  |L7.56|
000038  6028              STR      r0,[r5,#0]  ; g_nUartCurrentTransRecordIndex
;;;515    	}
;;;516    	else
;;;517    	{	
;;;518    		Uart_Cmd_Record_Trans_Finish();
;;;519    	}
;;;520    }
00003a  bd70              POP      {r4-r6,pc}
;;;521    
                          ENDP

                  |L7.60|
                          DCD      g_sRecordInforMap
                  |L7.64|
                          DCD      g_nUartCurrentTransRecordIndex
                  |L7.68|
                          DCD      ||.bss||+0x578
                  |L7.72|
                          DCD      g_bUartStartTransRecords

                          AREA ||i.Uart_Cmd_Set_Alc_Calibration||, CODE, READONLY, ALIGN=2

                  Uart_Cmd_Set_Alc_Calibration PROC
;;;288    }
;;;289    static void Uart_Cmd_Set_Alc_Calibration(unsigned short nLen,unsigned char *pData)
000000  b570              PUSH     {r4-r6,lr}
;;;290    {	sAlcCalibrationParam *p;
;;;291    	if(nLen == sizeof(sAlcCalibrationParam))
000002  2840              CMP      r0,#0x40
000004  d144              BNE      |L8.144|
;;;292    	{
;;;293    		p = (sAlcCalibrationParam*)pData;
;;;294    		p->nIntergralLowPoint = (unsigned long)((float)g_sAlcCalibrationParam.nIntergralLowPoint * p->fLRealTestAlcoholValue / p->fLStandardAlcoholValue);
000006  4d23              LDR      r5,|L8.148|
000008  460c              MOV      r4,r1                 ;293
00000a  f8550f19          LDR      r0,[r5,#0x19]!  ; g_sAlcCalibrationParam
00000e  f7fffffe          BL       __aeabi_ui2f
000012  f8d41021          LDR      r1,[r4,#0x21]
000016  340d              ADDS     r4,r4,#0xd
000018  f7fffffe          BL       __aeabi_fmul
00001c  6921              LDR      r1,[r4,#0x10]
00001e  f7fffffe          BL       __aeabi_fdiv
000022  f7fffffe          BL       __aeabi_f2uiz
000026  60e0              STR      r0,[r4,#0xc]
;;;295    		p->nIntergralHighPoint = (unsigned long)((float)g_sAlcCalibrationParam.nIntergralHighPoint * p->fHRealTestAlcoholValue / p->fHStandardAlcoholValue);
000028  68e8              LDR      r0,[r5,#0xc]  ; g_sAlcCalibrationParam
00002a  f7fffffe          BL       __aeabi_ui2f
00002e  6a21              LDR      r1,[r4,#0x20]
000030  f7fffffe          BL       __aeabi_fmul
000034  69e1              LDR      r1,[r4,#0x1c]
000036  f7fffffe          BL       __aeabi_fdiv
00003a  f7fffffe          BL       __aeabi_f2uiz
00003e  61a0              STR      r0,[r4,#0x18]
;;;296    		p->fLRealTestAlcoholValue = p->fLStandardAlcoholValue;
000040  6920              LDR      r0,[r4,#0x10]
;;;297    		p->fHRealTestAlcoholValue = p->fHStandardAlcoholValue;
000042  69e0              LDR      r0,[r4,#0x1c]
;;;298    		p->nUserIntergralLowPoint = p->nIntergralLowPoint;
000044  68e0              LDR      r0,[r4,#0xc]
000046  6260              STR      r0,[r4,#0x24]
;;;299    		p->nUserIntergralHighPoint = p->nIntergralHighPoint;
000048  69a0              LDR      r0,[r4,#0x18]
00004a  62a0              STR      r0,[r4,#0x28]
;;;300    		p->fLStandardAlcoholValue = 20;
00004c  4812              LDR      r0,|L8.152|
00004e  6120              STR      r0,[r4,#0x10]
;;;301    		p->fHStandardAlcoholValue = 80;
000050  4912              LDR      r1,|L8.156|
000052  61e1              STR      r1,[r4,#0x1c]
;;;302    		p->fLRealTestAlcoholValue = 20;
000054  6160              STR      r0,[r4,#0x14]
;;;303    		p->fHRealTestAlcoholValue = 80;
000056  6221              STR      r1,[r4,#0x20]
;;;304    		p->fPeekStandardAlcoholValue = 40;
000058  4811              LDR      r0,|L8.160|
00005a  f8440c02          STR      r0,[r4,#-2]
;;;305    		p->fPeekRealTestAlcoholValue = 40;
00005e  f8c40002          STR      r0,[r4,#2]
000062  f1a4000d          SUB      r0,r4,#0xd
;;;306    		Data_AlcCalibration_Parameter_Save(p);
000066  f7fffffe          BL       Data_AlcCalibration_Parameter_Save
;;;307    		Data_AlcCalibration_Parameter_Load(&g_sAlcCalibrationParam);
00006a  480a              LDR      r0,|L8.148|
00006c  f7fffffe          BL       Data_AlcCalibration_Parameter_Load
;;;308    		/*系数还原*/
;;;309    		g_sTestParam.nAdjustCoefficientIntegral = 100;
000070  490c              LDR      r1,|L8.164|
000072  2064              MOVS     r0,#0x64
000074  75c8              STRB     r0,[r1,#0x17]
;;;310    		Data_Test_Parameter_Save(&g_sTestParam);
000076  4608              MOV      r0,r1
000078  f7fffffe          BL       Data_Test_Parameter_Save
;;;311    		Data_Test_Parameter_Load(&g_sTestParam);
00007c  4809              LDR      r0,|L8.164|
00007e  f7fffffe          BL       Data_Test_Parameter_Load
;;;312    		Uart_Packet_And_Send(ACK_SET_ALC_CALIBRATION_PARAM, (unsigned char *)&g_sAlcCalibrationParam, sizeof(sAlcCalibrationParam));
000082  e8bd4070          POP      {r4-r6,lr}
000086  2240              MOVS     r2,#0x40
000088  4902              LDR      r1,|L8.148|
00008a  208c              MOVS     r0,#0x8c
00008c  f7ffbffe          B.W      Uart_Packet_And_Send
                  |L8.144|
;;;313    	}
;;;314    }
000090  bd70              POP      {r4-r6,pc}
;;;315    static void Uart_Cmd_Recover_Default_Alc_Calibration(unsigned short nLen,unsigned char *pData)
                          ENDP

000092  0000              DCW      0x0000
                  |L8.148|
                          DCD      g_sAlcCalibrationParam
                  |L8.152|
                          DCD      0x41a00000
                  |L8.156|
                          DCD      0x42a00000
                  |L8.160|
                          DCD      0x42200000
                  |L8.164|
                          DCD      g_sTestParam

                          AREA ||i.Uart_Get_Device_Records_Infor||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  Uart_Get_Device_Records_Infor PROC
;;;525    /*通过USB上传记录到服务器****************************************************************************************/
;;;526    static void Uart_Get_Device_Records_Infor(unsigned short nLen,unsigned char *pData)
000000  b510              PUSH     {r4,lr}
;;;527    {
;;;528    	sUsbUartUploadRecords s;
;;;529    	s.nTotalTestCounter = g_sRecordInforMap.nTotalRecordsCounter;
000002  481d              LDR      r0,|L9.120|
000004  b0a0              SUB      sp,sp,#0x80           ;527
;;;530    	s.nAlreadyUploadCounter = g_nAlreadyUploadCounter;
;;;531    	memcpy(s.aIMEI, g_sSystemParam.aIMEI, sizeof(s.aIMEI));
000006  2210              MOVS     r2,#0x10
000008  6800              LDR      r0,[r0,#0]            ;529  ; g_sRecordInforMap
00000a  9000              STR      r0,[sp,#0]            ;530
00000c  481b              LDR      r0,|L9.124|
00000e  491c              LDR      r1,|L9.128|
000010  6800              LDR      r0,[r0,#0]            ;530  ; g_nAlreadyUploadCounter
000012  9001              STR      r0,[sp,#4]
000014  a802              ADD      r0,sp,#8
000016  f7fffffe          BL       __aeabi_memcpy
;;;532    	memcpy(s.aNamePrefix, g_sDeviceIDConfig.aNamePrefix, sizeof(s.aNamePrefix));
00001a  481a              LDR      r0,|L9.132|
;;;533    	s.nDeviceID = g_sDeviceIDConfig.nDeviceID;
;;;534    	memcpy(&s.aPacketVersion, GPRS_DATA_PACKAGE_VERSION, 1);
;;;535    	sprintf(s.aFirmwareVersion, "%s", FW_VERSION);
00001c  a21a              ADR      r2,|L9.136|
00001e  f8d01001          LDR      r1,[r0,#1]            ;532  ; g_sDeviceIDConfig
000022  9106              STR      r1,[sp,#0x18]         ;532
000024  7941              LDRB     r1,[r0,#5]            ;532  ; g_sDeviceIDConfig
000026  f88d101c          STRB     r1,[sp,#0x1c]         ;532
00002a  f8d00006          LDR      r0,[r0,#6]            ;533  ; g_sDeviceIDConfig
00002e  f8cd001d          STR      r0,[sp,#0x1d]         ;533
000032  2041              MOVS     r0,#0x41              ;534
000034  f88d0021          STRB     r0,[sp,#0x21]         ;534
000038  a118              ADR      r1,|L9.156|
00003a  f10d0022          ADD      r0,sp,#0x22
00003e  f7fffffe          BL       __2sprintf
;;;536    	memcpy(s.aRemoteIP, g_sServerParam.aRemoteIP, sizeof(s.aRemoteIP));
000042  4c17              LDR      r4,|L9.160|
000044  2210              MOVS     r2,#0x10
000046  1c61              ADDS     r1,r4,#1
000048  a810              ADD      r0,sp,#0x40
00004a  f7fffffe          BL       __aeabi_memcpy
;;;537    	memcpy(s.aRemoteURL, g_sServerParam.aRemoteURL, sizeof(s.aRemoteURL));
00004e  2228              MOVS     r2,#0x28
000050  f1040111          ADD      r1,r4,#0x11
000054  a814              ADD      r0,sp,#0x50
000056  f7fffffe          BL       __aeabi_memcpy
;;;538    	s.nRemotePort = g_sServerParam.nRemotePort;
00005a  f8340f39          LDRH     r0,[r4,#0x39]!  ; g_sServerParam
00005e  f8ad0078          STRH     r0,[sp,#0x78]
;;;539    	s.nNetAccessMode = g_sServerParam.nNetAccessMode;
000062  78a0              LDRB     r0,[r4,#2]  ; g_sServerParam
000064  f88d007a          STRB     r0,[sp,#0x7a]
;;;540    	Uart_Packet_And_Send(ACK_GET_DEVICE_RECORDS_INFOR,(unsigned char *)&s, sizeof(sUsbUartUploadRecords));
000068  227b              MOVS     r2,#0x7b
00006a  4669              MOV      r1,sp
00006c  20b4              MOVS     r0,#0xb4
00006e  f7fffffe          BL       Uart_Packet_And_Send
;;;541    }
000072  b020              ADD      sp,sp,#0x80
000074  bd10              POP      {r4,pc}
;;;542    
                          ENDP

000076  0000              DCW      0x0000
                  |L9.120|
                          DCD      g_sRecordInforMap
                  |L9.124|
                          DCD      g_nAlreadyUploadCounter
                  |L9.128|
                          DCD      g_sSystemParam+0x19
                  |L9.132|
                          DCD      g_sDeviceIDConfig
                  |L9.136|
000088  53545f45          DCB      "ST_Eagle8_4G_V307",0
00008c  61676c65
000090  385f3447
000094  5f563330
000098  3700    
00009a  00                DCB      0
00009b  00                DCB      0
                  |L9.156|
00009c  257300            DCB      "%s",0
00009f  00                DCB      0
                  |L9.160|
                          DCD      g_sServerParam

                          AREA ||i.Uart_Packet_And_Send||, CODE, READONLY, ALIGN=2

                  Uart_Packet_And_Send PROC
;;;76     
;;;77     void Uart_Packet_And_Send(unsigned char nCmd, unsigned char  *pData, unsigned short nLen)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;78     {
;;;79     	unsigned short i = 0,nCheckSum = 0;
;;;80     	s_sUARTAckPacket.nHead1 = 0xBC;
000004  4b16              LDR      r3,|L10.96|
000006  2400              MOVS     r4,#0                 ;79
000008  26bc              MOVS     r6,#0xbc
00000a  701e              STRB     r6,[r3,#0]
;;;81     	s_sUARTAckPacket.nHead2 = 0xFD;
00000c  26fd              MOVS     r6,#0xfd
00000e  705e              STRB     r6,[r3,#1]
;;;82     	s_sUARTAckPacket.nCmd = nCmd;
000010  7098              STRB     r0,[r3,#2]
000012  4625              MOV      r5,r4                 ;79
;;;83     	s_sUARTAckPacket.nLength = nLen;
000014  f8a32003          STRH     r2,[r3,#3]
000018  e006              B        |L10.40|
                  |L10.26|
;;;84     	while(i< nLen)
;;;85     	{
;;;86     		nCheckSum += pData[i];
00001a  5d08              LDRB     r0,[r1,r4]
;;;87     		s_sUARTAckPacket.aData[i] = pData[i];
00001c  191e              ADDS     r6,r3,r4
00001e  4405              ADD      r5,r5,r0              ;86
000020  1c64              ADDS     r4,r4,#1
000022  b2ad              UXTH     r5,r5                 ;86
000024  7170              STRB     r0,[r6,#5]
;;;88     		i++;
000026  b2a4              UXTH     r4,r4
                  |L10.40|
000028  4294              CMP      r4,r2                 ;84
00002a  d3f6              BCC      |L10.26|
;;;89     	}
;;;90     	s_sUARTAckPacket.aData[nLen] = nCheckSum;
00002c  1898              ADDS     r0,r3,r2
;;;91     	s_sUARTAckPacket.aData[nLen + 1] = 0xAE;
00002e  21ae              MOVS     r1,#0xae
000030  7145              STRB     r5,[r0,#5]            ;90
;;;92     
;;;93     	Uart_Transmit_Data((unsigned char *)&s_sUARTAckPacket, 7 + nLen);
000032  1dd2              ADDS     r2,r2,#7
000034  7181              STRB     r1,[r0,#6]            ;91
000036  4e0a              LDR      r6,|L10.96|
000038  b297              UXTH     r7,r2
00003a  2400              MOVS     r4,#0
00003c  4d09              LDR      r5,|L10.100|
00003e  e00b              B        |L10.88|
                  |L10.64|
000040  2180              MOVS     r1,#0x80
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       USART_GetFlagStatus
000048  2800              CMP      r0,#0
00004a  d0f9              BEQ      |L10.64|
00004c  5d31              LDRB     r1,[r6,r4]
00004e  4628              MOV      r0,r5
000050  f7fffffe          BL       USART_SendData
000054  1c64              ADDS     r4,r4,#1
000056  b2a4              UXTH     r4,r4
                  |L10.88|
000058  42bc              CMP      r4,r7
00005a  d3f1              BCC      |L10.64|
;;;94     }
00005c  e8bd81f0          POP      {r4-r8,pc}
;;;95     
                          ENDP

                  |L10.96|
                          DCD      ||.bss||+0x578
                  |L10.100|
                          DCD      0x40013800

                          AREA ||i.Uart_Recieve_Error_Handle||, CODE, READONLY, ALIGN=2

                  Uart_Recieve_Error_Handle PROC
;;;106    
;;;107    static void  Uart_Recieve_Error_Handle(int nLine)
000000  4a03              LDR      r2,|L11.16|
;;;108    {
;;;109    	s_bStartRevCmd = false;
000002  2100              MOVS     r1,#0
000004  7051              STRB     r1,[r2,#1]
;;;110    	s_eUSBRecievePhase = eUSBPhaseHead0;
000006  7011              STRB     r1,[r2,#0]
;;;111    
;;;112    	TRACE_PRINTF("Uart_Recieve_Error_Handle( Line = %d)\r\n",nLine);
000008  4601              MOV      r1,r0
00000a  a002              ADR      r0,|L11.20|
00000c  f7ffbffe          B.W      User_Debug_Printf
;;;113    }
;;;114    
                          ENDP

                  |L11.16|
                          DCD      ||.data||
                  |L11.20|
000014  55617274          DCB      "Uart_Recieve_Error_Handle( Line = %d)\r\n",0
000018  5f526563
00001c  69657665
000020  5f457272
000024  6f725f48
000028  616e646c
00002c  6528204c
000030  696e6520
000034  3d202564
000038  290d0a00

                          AREA ||i.Uart_Usb_Cmd_Parser||, CODE, READONLY, ALIGN=2

                  Uart_Usb_Cmd_Parser PROC
;;;866    
;;;867    void Uart_Usb_Cmd_Parser(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;868    {
;;;869    	static unsigned char nCheckSum;
;;;870    	static unsigned short nDataLength;
;;;871    	static unsigned char nDataLengthDescptionBytes;
;;;872    
;;;873    	while(s_nUartOutCnt != s_nUartInCnt)
;;;874    	{
;;;875    		switch(s_eUSBRecievePhase)
000004  2701              MOVS     r7,#1
000006  f04f0905          MOV      r9,#5
;;;876    		{
;;;877    		case eUSBPhaseHead0:
;;;878    			if(Get_Uart_Data() == 0xBC)
;;;879    			{
;;;880    				s_bStartRevCmd = true;
;;;881    				s_nCmdProcessBufferCnt = 0;
;;;882    				s_nStartRevCmdTime = Get_System_Time();
;;;883    				s_eUSBRecievePhase = eUSBPhaseHead1;
;;;884    				s_aCmdProcessBuffer[s_nCmdProcessBufferCnt++] = 0xBC;
;;;885    			}
;;;886    			break;
;;;887    
;;;888    		case eUSBPhaseHead1:
;;;889    			if(Get_Uart_Data() == 0xFD)
;;;890    			{
;;;891    				s_eUSBRecievePhase = eUSBPhaseCmd;
;;;892    				s_aCmdProcessBuffer[s_nCmdProcessBufferCnt++] = 0xFD;
;;;893    			}
;;;894    			break;
;;;895    
;;;896    		case eUSBPhaseCmd:
;;;897    			s_aCmdProcessBuffer[s_nCmdProcessBufferCnt++] = Get_Uart_Data();
;;;898    			nDataLength = 0;
;;;899    			nDataLengthDescptionBytes = 0;
;;;900    			nCheckSum = 0;
;;;901    			s_eUSBRecievePhase = eUSBPhaseDataLength;
;;;902    			break;
;;;903    
;;;904    		case eUSBPhaseDataLength:
;;;905    			s_aCmdProcessBuffer[s_nCmdProcessBufferCnt++] = Get_Uart_Data();
;;;906    			if(nDataLengthDescptionBytes)
;;;907    			{
;;;908    				nDataLength = s_aCmdProcessBuffer[3] + (((unsigned short)s_aCmdProcessBuffer[4]) << 8);
;;;909    				if(nDataLength >= UART_BUFFER_SIZE)
;;;910    				{
;;;911    					Uart_Recieve_Error_Handle(__LINE__);
;;;912    				}
;;;913    				else if(nDataLength)
;;;914    				{
;;;915    					s_eUSBRecievePhase = eUSBPhaseData;
;;;916    				}
;;;917    				else
;;;918    				{
;;;919    					s_eUSBRecievePhase = eUSBPhaseCrc;
;;;920    				}
;;;921    			}
;;;922    			else
;;;923    			{
;;;924    				nDataLengthDescptionBytes++;
;;;925    			}
;;;926    			break;
;;;927    
;;;928    		case eUSBPhaseData:
;;;929    			s_aCmdProcessBuffer[s_nCmdProcessBufferCnt++] = Get_Uart_Data();
;;;930    			nCheckSum += s_aCmdProcessBuffer[s_nCmdProcessBufferCnt - 1];
;;;931    			if(s_nCmdProcessBufferCnt >= USB_CMD_PROCESS_BUFFER_SIZE)
00000a  f44f78fa          MOV      r8,#0x1f4
00000e  4d53              LDR      r5,|L12.348|
000010  2600              MOVS     r6,#0                 ;884
000012  4c53              LDR      r4,|L12.352|
000014  e085              B        |L12.290|
                  |L12.22|
000016  7820              LDRB     r0,[r4,#0]            ;875  ; s_eUSBRecievePhase
000018  2807              CMP      r0,#7                 ;875
00001a  d21c              BCS      |L12.86|
00001c  e8dff000          TBB      [pc,r0]               ;875
000020  04101c27          DCB      0x04,0x10,0x1c,0x27
000024  435d7400          DCB      0x43,0x5d,0x74,0x00
000028  f7fffffe          BL       Get_Uart_Data
00002c  28bc              CMP      r0,#0xbc              ;878
00002e  d178              BNE      |L12.290|
000030  7067              STRB     r7,[r4,#1]            ;880
000032  8166              STRH     r6,[r4,#0xa]          ;881
000034  f7fffffe          BL       Get_System_Time
000038  60e0              STR      r0,[r4,#0xc]          ;882  ; s_nStartRevCmdTime
00003a  7027              STRB     r7,[r4,#0]            ;883
00003c  21bc              MOVS     r1,#0xbc              ;884
00003e  e006              B        |L12.78|
000040  f7fffffe          BL       Get_Uart_Data
000044  28fd              CMP      r0,#0xfd              ;889
000046  d16c              BNE      |L12.290|
000048  2002              MOVS     r0,#2                 ;891
00004a  7020              STRB     r0,[r4,#0]            ;891
00004c  21fd              MOVS     r1,#0xfd              ;892
                  |L12.78|
00004e  8960              LDRH     r0,[r4,#0xa]          ;884  ; s_nCmdProcessBufferCnt
000050  5429              STRB     r1,[r5,r0]            ;884
000052  1c40              ADDS     r0,r0,#1              ;884
000054  8160              STRH     r0,[r4,#0xa]          ;884
                  |L12.86|
000056  e064              B        |L12.290|
000058  f7fffffe          BL       Get_Uart_Data
00005c  8961              LDRH     r1,[r4,#0xa]          ;897  ; s_nCmdProcessBufferCnt
00005e  5468              STRB     r0,[r5,r1]            ;897
000060  1c49              ADDS     r1,r1,#1              ;897
000062  8161              STRH     r1,[r4,#0xa]          ;897
000064  8126              STRH     r6,[r4,#8]            ;898
000066  70e6              STRB     r6,[r4,#3]            ;899
000068  70a6              STRB     r6,[r4,#2]            ;900
00006a  2003              MOVS     r0,#3                 ;901
00006c  e04a              B        |L12.260|
00006e  f7fffffe          BL       Get_Uart_Data
000072  8961              LDRH     r1,[r4,#0xa]          ;905  ; s_nCmdProcessBufferCnt
000074  5468              STRB     r0,[r5,r1]            ;905
000076  1c49              ADDS     r1,r1,#1              ;905
000078  8161              STRH     r1,[r4,#0xa]          ;905
00007a  78e0              LDRB     r0,[r4,#3]            ;906  ; nDataLengthDescptionBytes
00007c  b188              CBZ      r0,|L12.162|
00007e  78e8              LDRB     r0,[r5,#3]            ;908  ; s_aCmdProcessBuffer
000080  7929              LDRB     r1,[r5,#4]            ;908  ; s_aCmdProcessBuffer
000082  eb002001          ADD      r0,r0,r1,LSL #8       ;908
000086  b280              UXTH     r0,r0                 ;908
000088  8120              STRH     r0,[r4,#8]            ;908
00008a  f5b07f16          CMP      r0,#0x258             ;909
00008e  d302              BCC      |L12.150|
000090  f240308f          MOV      r0,#0x38f             ;911
000094  e032              B        |L12.252|
                  |L12.150|
000096  b108              CBZ      r0,|L12.156|
000098  2004              MOVS     r0,#4                 ;915
00009a  e033              B        |L12.260|
                  |L12.156|
00009c  f8849000          STRB     r9,[r4,#0]            ;919
0000a0  e03f              B        |L12.290|
                  |L12.162|
0000a2  70e7              STRB     r7,[r4,#3]            ;924
0000a4  e03d              B        |L12.290|
0000a6  f7fffffe          BL       Get_Uart_Data
0000aa  8961              LDRH     r1,[r4,#0xa]          ;929  ; s_nCmdProcessBufferCnt
0000ac  5468              STRB     r0,[r5,r1]            ;929
0000ae  1c49              ADDS     r1,r1,#1              ;929
0000b0  b288              UXTH     r0,r1                 ;929
0000b2  8160              STRH     r0,[r4,#0xa]          ;929
0000b4  1829              ADDS     r1,r5,r0              ;930
0000b6  78a2              LDRB     r2,[r4,#2]            ;930  ; nCheckSum
0000b8  f8111c01          LDRB     r1,[r1,#-1]           ;930
0000bc  4540              CMP      r0,r8
0000be  4411              ADD      r1,r1,r2              ;930
0000c0  70a1              STRB     r1,[r4,#2]            ;930
0000c2  d303              BCC      |L12.204|
;;;932    			{
;;;933    				Uart_Recieve_Error_Handle(__LINE__);
0000c4  f24030a5          MOV      r0,#0x3a5
0000c8  f7fffffe          BL       Uart_Recieve_Error_Handle
                  |L12.204|
;;;934    			}
;;;935    			if(--nDataLength == 0)
0000cc  8920              LDRH     r0,[r4,#8]  ; nDataLength
0000ce  1e40              SUBS     r0,r0,#1
0000d0  0400              LSLS     r0,r0,#16
0000d2  0c00              LSRS     r0,r0,#16
0000d4  8120              STRH     r0,[r4,#8]
0000d6  d124              BNE      |L12.290|
0000d8  e7e0              B        |L12.156|
;;;936    			{
;;;937    				s_eUSBRecievePhase = eUSBPhaseCrc;
;;;938    			}
;;;939    			break;
;;;940    
;;;941    		case eUSBPhaseCrc:
;;;942    			s_aCmdProcessBuffer[s_nCmdProcessBufferCnt++] = Get_Uart_Data();
0000da  f7fffffe          BL       Get_Uart_Data
0000de  8961              LDRH     r1,[r4,#0xa]  ; s_nCmdProcessBufferCnt
0000e0  5468              STRB     r0,[r5,r1]
0000e2  1c49              ADDS     r1,r1,#1
0000e4  b288              UXTH     r0,r1
0000e6  8160              STRH     r0,[r4,#0xa]
;;;943    			if(s_nCmdProcessBufferCnt >= USB_CMD_PROCESS_BUFFER_SIZE || nCheckSum != s_aCmdProcessBuffer[s_nCmdProcessBufferCnt - 1])
0000e8  4540              CMP      r0,r8
0000ea  d205              BCS      |L12.248|
0000ec  4428              ADD      r0,r0,r5
0000ee  78a1              LDRB     r1,[r4,#2]  ; nCheckSum
0000f0  f8100c01          LDRB     r0,[r0,#-1]
0000f4  4288              CMP      r0,r1
0000f6  d004              BEQ      |L12.258|
                  |L12.248|
;;;944    			{
;;;945    				Uart_Recieve_Error_Handle(__LINE__);
0000f8  f24030b1          MOV      r0,#0x3b1
                  |L12.252|
0000fc  f7fffffe          BL       Uart_Recieve_Error_Handle
000100  e00f              B        |L12.290|
                  |L12.258|
;;;946    				break;
;;;947    			}
;;;948    			s_eUSBRecievePhase = eUSBPhaseEnd;
000102  2006              MOVS     r0,#6
                  |L12.260|
000104  7020              STRB     r0,[r4,#0]
000106  e00c              B        |L12.290|
;;;949    			break;
;;;950    
;;;951    		case eUSBPhaseEnd:
;;;952    			if(Get_Uart_Data() == 0xAE)
000108  f7fffffe          BL       Get_Uart_Data
00010c  28ae              CMP      r0,#0xae
00010e  d108              BNE      |L12.290|
;;;953    			{
;;;954    				Uart_Cmd_Parser_Sub();
000110  f7fffffe          BL       Uart_Cmd_Parser_Sub
;;;955    				pApp->nStartIdleTime = Get_System_Time();
000114  f7fffffe          BL       Get_System_Time
000118  4912              LDR      r1,|L12.356|
00011a  6809              LDR      r1,[r1,#0]  ; pApp
;;;956    				s_bStartRevCmd = false;
00011c  6048              STR      r0,[r1,#4]
00011e  7066              STRB     r6,[r4,#1]
;;;957    				s_eUSBRecievePhase = eUSBPhaseHead0;
000120  7026              STRB     r6,[r4,#0]
                  |L12.290|
000122  88e0              LDRH     r0,[r4,#6]            ;873  ; s_nUartOutCnt
000124  88a1              LDRH     r1,[r4,#4]            ;873  ; s_nUartInCnt
000126  4288              CMP      r0,r1                 ;873
000128  f47faf75          BNE      |L12.22|
;;;958    			}
;;;959    			break;
;;;960    		}
;;;961    	}
;;;962    
;;;963    	if(s_bStartRevCmd && Get_System_Time()  > s_nStartRevCmdTime +  UART_CMD_TIMOUT)
00012c  7860              LDRB     r0,[r4,#1]  ; s_bStartRevCmd
00012e  b150              CBZ      r0,|L12.326|
000130  f7fffffe          BL       Get_System_Time
000134  68e1              LDR      r1,[r4,#0xc]  ; s_nStartRevCmdTime
000136  f50171fa          ADD      r1,r1,#0x1f4
00013a  4288              CMP      r0,r1
00013c  d903              BLS      |L12.326|
;;;964    	{
;;;965    		Uart_Recieve_Error_Handle(__LINE__);
00013e  f24030c5          MOV      r0,#0x3c5
000142  f7fffffe          BL       Uart_Recieve_Error_Handle
                  |L12.326|
;;;966    	}
;;;967    
;;;968    	if(g_bUartStartTransRecords)
000146  4808              LDR      r0,|L12.360|
000148  7800              LDRB     r0,[r0,#0]  ; g_bUartStartTransRecords
00014a  2800              CMP      r0,#0
00014c  d003              BEQ      |L12.342|
;;;969    	{
;;;970    		Uart_Cmd_Record_Trans_Sub();
00014e  e8bd47f0          POP      {r4-r10,lr}
000152  f7ffbffe          B.W      Uart_Cmd_Record_Trans_Sub
                  |L12.342|
;;;971    	}
;;;972    }
000156  e8bd87f0          POP      {r4-r10,pc}
                          ENDP

00015a  0000              DCW      0x0000
                  |L12.348|
                          DCD      ||.bss||+0x12c
                  |L12.352|
                          DCD      ||.data||
                  |L12.356|
                          DCD      pApp
                  |L12.360|
                          DCD      g_bUartStartTransRecords

                          AREA ||i.User_Debug_Printf||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  User_Debug_Printf PROC
;;;116    
;;;117    void User_Debug_Printf(const char *fmt, ...)
000000  b40f              PUSH     {r0-r3}
;;;118    {
;;;119    	if(g_sSystemParam.bEnableTraceFunction)
000002  480e              LDR      r0,|L13.60|
000004  b510              PUSH     {r4,lr}               ;118
000006  f890002d          LDRB     r0,[r0,#0x2d]  ; g_sSystemParam
00000a  2800              CMP      r0,#0                 ;118
00000c  d013              BEQ      |L13.54|
;;;120    	{
;;;121    		int nLen;
;;;122    		static int nLogIndex = 0;
;;;123    		static char aDebugBuff[300];
;;;124    		va_list ap;
;;;125    		sprintf(aDebugBuff,"[%08d] ",nLogIndex++);
00000e  480c              LDR      r0,|L13.64|
000010  6902              LDR      r2,[r0,#0x10]  ; nLogIndex
000012  1c51              ADDS     r1,r2,#1
000014  6101              STR      r1,[r0,#0x10]  ; nLogIndex
000016  a10b              ADR      r1,|L13.68|
000018  480c              LDR      r0,|L13.76|
00001a  f7fffffe          BL       __2sprintf
;;;126    		va_start(ap, fmt);
;;;127    		nLen = vsprintf(&aDebugBuff[11], fmt, ap);
00001e  480b              LDR      r0,|L13.76|
000020  aa03              ADD      r2,sp,#0xc            ;126
000022  300b              ADDS     r0,r0,#0xb
000024  9902              LDR      r1,[sp,#8]
000026  f7fffffe          BL       __c89vsprintf
00002a  300b              ADDS     r0,r0,#0xb
;;;128    		va_end(ap);
;;;129    		Uart_Packet_And_Send(ACK_USB_LOG, (unsigned char *)aDebugBuff, nLen + 11);
00002c  b282              UXTH     r2,r0
00002e  4907              LDR      r1,|L13.76|
000030  20ff              MOVS     r0,#0xff
000032  f7fffffe          BL       Uart_Packet_And_Send
                  |L13.54|
;;;130    //		Uart_Transmit_Data((unsigned char *)aDebugBuff,nLen + 11);
;;;131    	}	
;;;132    }
000036  bc10              POP      {r4}
000038  f85dfb14          LDR      pc,[sp],#0x14
;;;133    
                          ENDP

                  |L13.60|
                          DCD      g_sSystemParam
                  |L13.64|
                          DCD      ||.data||
                  |L13.68|
000044  5b253038          DCB      "[%08d] ",0
000048  645d2000
                  |L13.76|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  aDebugBuff
                          %        300
                  s_aCmdProcessBuffer
                          %        500
                  g_aUartCmdRevBuffer
                          %        600
                  s_sUARTAckPacket
                          %        1035

                          AREA ||.data||, DATA, ALIGN=2

                  s_eUSBRecievePhase
000000  00                DCB      0x00
                  s_bStartRevCmd
000001  00                DCB      0x00
                  nCheckSum
000002  00                DCB      0x00
                  nDataLengthDescptionBytes
000003  00                DCB      0x00
                  s_nUartInCnt
000004  0000              DCW      0x0000
                  s_nUartOutCnt
000006  0000              DCW      0x0000
                  nDataLength
000008  0000              DCB      0x00,0x00
                  s_nCmdProcessBufferCnt
00000a  0000              DCB      0x00,0x00
                  s_nStartRevCmdTime
                          DCD      0x00000000
                  nLogIndex
                          DCD      0x00000000
                  s_nProgramPackageIndex
                          DCD      0x00000000

                          AREA ||area_number.18||, DATA, ALIGN=1

                          EXPORTAS ||area_number.18||, ||.data||
                  s_ValidCmdIndex
000000  0000              DCW      0x0000
