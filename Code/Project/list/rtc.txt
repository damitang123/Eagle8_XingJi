; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\rtc.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\rtc.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\Board_Support_Package\rtc.c]
                          THUMB

                          AREA ||i.Calculate_Weekday||, CODE, READONLY, ALIGN=1

                  Calculate_Weekday PROC
;;;190    
;;;191    char Calculate_Weekday(char day, char month, char year) //日、月、年
000000  b510              PUSH     {r4,lr}
;;;192    {
;;;193    	if(month <= 2)
000002  2902              CMP      r1,#2
000004  d803              BHI      |L1.14|
000006  310c              ADDS     r1,r1,#0xc            ;192
;;;194    	{
;;;195    		month += 12;
000008  1e52              SUBS     r2,r2,#1
00000a  b2c9              UXTB     r1,r1
;;;196    		year--;
00000c  b2d2              UXTB     r2,r2
                  |L1.14|
;;;197    	}
;;;198    
;;;199    	/*周一为1,周日为7*/
;;;200    	return (day + 2 * month + 3 * (month + 1) / 5 + year + year / 4 - year / 100 + year / 400) % 7 + 1;
00000e  1c4b              ADDS     r3,r1,#1
000010  eb000041          ADD      r0,r0,r1,LSL #1
000014  eb030343          ADD      r3,r3,r3,LSL #1
000018  2405              MOVS     r4,#5
00001a  fbb3f3f4          UDIV     r3,r3,r4
00001e  2164              MOVS     r1,#0x64
000020  fbb2f1f1          UDIV     r1,r2,r1
000024  4418              ADD      r0,r0,r3
000026  4410              ADD      r0,r0,r2
000028  eb000092          ADD      r0,r0,r2,LSR #2
00002c  1a40              SUBS     r0,r0,r1
00002e  f44f71c8          MOV      r1,#0x190
000032  fbb2f1f1          UDIV     r1,r2,r1
000036  4408              ADD      r0,r0,r1
000038  2107              MOVS     r1,#7
00003a  fb90f2f1          SDIV     r2,r0,r1
00003e  fb010012          MLS      r0,r1,r2,r0
000042  1c40              ADDS     r0,r0,#1
000044  b2c0              UXTB     r0,r0
;;;201    }
000046  bd10              POP      {r4,pc}
;;;202    
                          ENDP


                          AREA ||i.GetDayOfWeek||, CODE, READONLY, ALIGN=2

                  GetDayOfWeek PROC
;;;249    
;;;250    const char *GetDayOfWeek(char weekday)
000000  490e              LDR      r1,|L2.60|
;;;251    {
;;;252    	switch(weekday)
;;;253    	{
;;;254    		case 1:
;;;255    			return _Monday;
000002  4a0d              LDR      r2,|L2.56|
000004  2807              CMP      r0,#7                 ;252
000006  7809              LDRB     r1,[r1,#0]
000008  f8521021          LDR      r1,[r2,r1,LSL #2]
00000c  d211              BCS      |L2.50|
00000e  e8dff000          TBB      [pc,r0]               ;252
000012  1004              DCB      0x10,0x04
000014  06080a0c          DCB      0x06,0x08,0x0a,0x0c
000018  0e00              DCB      0x0e,0x00
00001a  6848              LDR      r0,[r1,#4]
;;;256    		case 2:
;;;257    			return _Tuesday;
;;;258    		case 3:
;;;259    			return _Wednesday;
;;;260    		case 4:
;;;261    			return _Thursday;
;;;262    		case 5:
;;;263    			return _Friday;
;;;264    		case 6:
;;;265    			return _Saturday;
;;;266    		case 7:
;;;267    			return _Sunday;
;;;268    		default:
;;;269    			return _Sunday;
;;;270    	}
;;;271    }
00001c  4770              BX       lr
00001e  6888              LDR      r0,[r1,#8]            ;257
000020  4770              BX       lr
000022  68c8              LDR      r0,[r1,#0xc]          ;259
000024  4770              BX       lr
000026  6908              LDR      r0,[r1,#0x10]         ;261
000028  4770              BX       lr
00002a  6948              LDR      r0,[r1,#0x14]         ;263
00002c  4770              BX       lr
00002e  6988              LDR      r0,[r1,#0x18]         ;265
000030  4770              BX       lr
                  |L2.50|
000032  69c8              LDR      r0,[r1,#0x1c]         ;269
000034  4770              BX       lr
;;;272    
                          ENDP

000036  0000              DCW      0x0000
                  |L2.56|
                          DCD      Strings
                  |L2.60|
                          DCD      g_Language

                          AREA ||i.GetTimeString||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  GetTimeString PROC
;;;236    
;;;237    unsigned char *GetTimeString(sDateTime *pDateTime, unsigned char *strDest)
000000  b57f              PUSH     {r0-r6,lr}
;;;238    {
000002  460c              MOV      r4,r1
;;;239    	sprintf((char *)strDest, "%02d/%02d/%04d %02d:%02d:%02d",
000004  7805              LDRB     r5,[r0,#0]
000006  7941              LDRB     r1,[r0,#5]
000008  7902              LDRB     r2,[r0,#4]
00000a  78c3              LDRB     r3,[r0,#3]
00000c  f50565fa          ADD      r5,r5,#0x7d0
000010  9103              STR      r1,[sp,#0xc]
000012  9500              STR      r5,[sp,#0]
000014  e9cd3201          STRD     r3,r2,[sp,#4]
000018  7843              LDRB     r3,[r0,#1]
00001a  7882              LDRB     r2,[r0,#2]
00001c  a103              ADR      r1,|L3.44|
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       __2sprintf
;;;240    	        pDateTime->wDay,
;;;241    	        pDateTime->wMonth,
;;;242    	        pDateTime->wYear + 2000,
;;;243    	        pDateTime->wHour,
;;;244    	        pDateTime->wMinute,
;;;245    	        pDateTime->wSecond);
;;;246    
;;;247    	return	strDest;
;;;248    }
000024  b004              ADD      sp,sp,#0x10
000026  4620              MOV      r0,r4                 ;247
000028  bd70              POP      {r4-r6,pc}
;;;249    
                          ENDP

00002a  0000              DCW      0x0000
                  |L3.44|
00002c  25303264          DCB      "%02d/%02d/%04d %02d:%02d:%02d",0
000030  2f253032
000034  642f2530
000038  34642025
00003c  3032643a
000040  25303264
000044  3a253032
000048  6400    
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||i.MonthToString||, CODE, READONLY, ALIGN=2

                  MonthToString PROC
;;;202    
;;;203    unsigned char *MonthToString(unsigned char x)
000000  280d              CMP      r0,#0xd
;;;204    {
;;;205    	switch(x)
000002  d21e              BCS      |L4.66|
000004  e8dff000          TBB      [pc,r0]
000008  1d1d0709          DCB      0x1d,0x1d,0x07,0x09
00000c  0b0d0f11          DCB      0x0b,0x0d,0x0f,0x11
000010  13151719          DCB      0x13,0x15,0x17,0x19
000014  1b00              DCB      0x1b,0x00
;;;206    	{
;;;207    		case 1:
;;;208    			return "Jan";
;;;209    		case 2:
;;;210    			return "Feb";
000016  a00c              ADR      r0,|L4.72|
;;;211    		case 3:
;;;212    			return "Mar";
;;;213    		case 4:
;;;214    			return "Apr";
;;;215    		case 5:
;;;216    			return "May";
;;;217    		case 6:
;;;218    			return "Jun";
;;;219    		case 7:
;;;220    			return "July";
;;;221    		case 8:
;;;222    			return "Aug";
;;;223    		case 9:
;;;224    			return "Sep";
;;;225    		case 10:
;;;226    			return "Oct";
;;;227    		case 11:
;;;228    			return "Nov";
;;;229    		case 12:
;;;230    			return "Dec";
;;;231    	}
;;;232    
;;;233    	return "Jan";
;;;234    }
000018  4770              BX       lr
00001a  a00c              ADR      r0,|L4.76|
00001c  4770              BX       lr
00001e  a00c              ADR      r0,|L4.80|
000020  4770              BX       lr
000022  a00c              ADR      r0,|L4.84|
000024  4770              BX       lr
000026  a00c              ADR      r0,|L4.88|
000028  4770              BX       lr
00002a  a00c              ADR      r0,|L4.92|
00002c  4770              BX       lr
00002e  a00d              ADR      r0,|L4.100|
000030  4770              BX       lr
000032  a00d              ADR      r0,|L4.104|
000034  4770              BX       lr
000036  a00d              ADR      r0,|L4.108|
000038  4770              BX       lr
00003a  a00d              ADR      r0,|L4.112|
00003c  4770              BX       lr
00003e  a00d              ADR      r0,|L4.116|
000040  4770              BX       lr
                  |L4.66|
000042  a00d              ADR      r0,|L4.120|
000044  4770              BX       lr
;;;235    
                          ENDP

000046  0000              DCW      0x0000
                  |L4.72|
000048  46656200          DCB      "Feb",0
                  |L4.76|
00004c  4d617200          DCB      "Mar",0
                  |L4.80|
000050  41707200          DCB      "Apr",0
                  |L4.84|
000054  4d617900          DCB      "May",0
                  |L4.88|
000058  4a756e00          DCB      "Jun",0
                  |L4.92|
00005c  4a756c79          DCB      "July",0
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0
                  |L4.100|
000064  41756700          DCB      "Aug",0
                  |L4.104|
000068  53657000          DCB      "Sep",0
                  |L4.108|
00006c  4f637400          DCB      "Oct",0
                  |L4.112|
000070  4e6f7600          DCB      "Nov",0
                  |L4.116|
000074  44656300          DCB      "Dec",0
                  |L4.120|
000078  4a616e00          DCB      "Jan",0

                          AREA ||i.Rtc_Get_Time||, CODE, READONLY, ALIGN=1

                  Rtc_Get_Time PROC
;;;42     
;;;43     void Rtc_Get_Time(sDateTime *pDateTime, ERtcValueFormat eValueFormat)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;44     {
000004  460d              MOV      r5,r1
000006  4604              MOV      r4,r0
;;;45     	unsigned char aTemp[7];
;;;46     	I2C_Block_Read(PCF8563TS_I2C_ADDR, aTemp, 0x02, 7);
000008  2307              MOVS     r3,#7
00000a  2202              MOVS     r2,#2
00000c  4669              MOV      r1,sp
00000e  20a2              MOVS     r0,#0xa2
000010  f7fffffe          BL       I2C_Block_Read
;;;47     	pDateTime->wYear = aTemp[0x06];
000014  f89d7006          LDRB     r7,[sp,#6]
000018  7027              STRB     r7,[r4,#0]
;;;48     	pDateTime->wMonth = aTemp[0x05] & 0x1f;
00001a  f89d0005          LDRB     r0,[sp,#5]
;;;49     	pDateTime->wDay = aTemp[0x03] & 0x3f;
;;;50     
;;;51     	pDateTime->wHour = aTemp[0x02] & 0x3f;
;;;52     	pDateTime->wMinute = aTemp[0x01] & 0x7f;
;;;53     	pDateTime->wSecond = aTemp[0x00] & 0x7f;
;;;54     
;;;55     	if(eValueFormat == eBCD_Format) return;
00001e  2d00              CMP      r5,#0
000020  f000061f          AND      r6,r0,#0x1f           ;48
000024  7066              STRB     r6,[r4,#1]            ;48
000026  f89d0003          LDRB     r0,[sp,#3]            ;49
00002a  f000013f          AND      r1,r0,#0x3f           ;49
00002e  70a1              STRB     r1,[r4,#2]            ;49
000030  f89d0002          LDRB     r0,[sp,#2]            ;51
000034  f000003f          AND      r0,r0,#0x3f           ;51
000038  70e0              STRB     r0,[r4,#3]            ;51
00003a  f89d2001          LDRB     r2,[sp,#1]            ;52
00003e  f002037f          AND      r3,r2,#0x7f           ;52
000042  7123              STRB     r3,[r4,#4]            ;52
000044  f89d2000          LDRB     r2,[sp,#0]            ;53
000048  f002027f          AND      r2,r2,#0x7f           ;53
00004c  7162              STRB     r2,[r4,#5]            ;53
00004e  d035              BEQ      |L5.188|
;;;56     
;;;57     	pDateTime->wYear = BCD_TO_DEC(pDateTime->wYear);
000050  f007050f          AND      r5,r7,#0xf
000054  093f              LSRS     r7,r7,#4
000056  eb070787          ADD      r7,r7,r7,LSL #2
00005a  eb050547          ADD      r5,r5,r7,LSL #1
00005e  7025              STRB     r5,[r4,#0]
;;;58     	pDateTime->wMonth = BCD_TO_DEC(pDateTime->wMonth);
000060  f006050f          AND      r5,r6,#0xf
000064  0936              LSRS     r6,r6,#4
000066  eb060686          ADD      r6,r6,r6,LSL #2
00006a  eb050546          ADD      r5,r5,r6,LSL #1
00006e  7065              STRB     r5,[r4,#1]
;;;59     	pDateTime->wDay = BCD_TO_DEC(pDateTime->wDay);
000070  f001050f          AND      r5,r1,#0xf
000074  0909              LSRS     r1,r1,#4
000076  eb010181          ADD      r1,r1,r1,LSL #2
00007a  eb050141          ADD      r1,r5,r1,LSL #1
00007e  70a1              STRB     r1,[r4,#2]
;;;60     
;;;61     	pDateTime->wHour = BCD_TO_DEC(pDateTime->wHour);
000080  f000010f          AND      r1,r0,#0xf
000084  0900              LSRS     r0,r0,#4
000086  eb000080          ADD      r0,r0,r0,LSL #2
00008a  eb010040          ADD      r0,r1,r0,LSL #1
;;;62     	pDateTime->wMinute = BCD_TO_DEC(pDateTime->wMinute);
00008e  f003010f          AND      r1,r3,#0xf
000092  091b              LSRS     r3,r3,#4
000094  eb030383          ADD      r3,r3,r3,LSL #2
000098  70e0              STRB     r0,[r4,#3]            ;61
00009a  eb010143          ADD      r1,r1,r3,LSL #1
00009e  7121              STRB     r1,[r4,#4]
;;;63     	pDateTime->wSecond = BCD_TO_DEC(pDateTime->wSecond);
0000a0  f002010f          AND      r1,r2,#0xf
0000a4  0912              LSRS     r2,r2,#4
0000a6  eb020282          ADD      r2,r2,r2,LSL #2
0000aa  eb010142          ADD      r1,r1,r2,LSL #1
0000ae  7161              STRB     r1,[r4,#5]
;;;64     
;;;65     	if(pDateTime->wHour >23 && pDateTime->wHour <= 33)
0000b0  f1a00118          SUB      r1,r0,#0x18
0000b4  2909              CMP      r1,#9
0000b6  d801              BHI      |L5.188|
0000b8  380a              SUBS     r0,r0,#0xa
;;;66     	{
;;;67     		pDateTime->wHour -= 10;
0000ba  70e0              STRB     r0,[r4,#3]
                  |L5.188|
;;;68     	}
;;;69     }
0000bc  e8bd81fc          POP      {r2-r8,pc}
;;;70     
                          ENDP


                          AREA ||i.Rtc_Gpio_Init||, CODE, READONLY, ALIGN=1

                  Rtc_Gpio_Init PROC
;;;19     
;;;20     void Rtc_Gpio_Init(void)
000000  f7ffbffe          B.W      I2C_Hal_Init
;;;21     {
;;;22     	I2C_Hal_Init();
;;;23     }
;;;24     
                          ENDP


                          AREA ||i.Rtc_Init||, CODE, READONLY, ALIGN=1

                  Rtc_Init PROC
;;;34     
;;;35     void Rtc_Init(void)
000000  b510              PUSH     {r4,lr}
000002  f7fffffe          BL       I2C_Hal_Init
;;;36     {
;;;37     	Rtc_Gpio_Init();
;;;38     
;;;39     	I2C_Single_Write(PCF8563TS_I2C_ADDR, 0x00, 0x00);
000006  2200              MOVS     r2,#0
000008  4611              MOV      r1,r2
00000a  20a2              MOVS     r0,#0xa2
00000c  f7fffffe          BL       I2C_Single_Write
;;;40     	I2C_Single_Write(PCF8563TS_I2C_ADDR, 0x01, 0x00);
000010  2200              MOVS     r2,#0
000012  2101              MOVS     r1,#1
000014  e8bd4010          POP      {r4,lr}
000018  20a2              MOVS     r0,#0xa2
00001a  f7ffbffe          B.W      I2C_Single_Write
;;;41     }
;;;42     
                          ENDP


                          AREA ||i.Rtc_Set_Time||, CODE, READONLY, ALIGN=1

                  Rtc_Set_Time PROC
;;;71     
;;;72     void Rtc_Set_Time(sDateTime *pDateTime)
000000  b510              PUSH     {r4,lr}
;;;73     {
000002  0004              MOVS     r4,r0
000004  d01f              BEQ      |L8.70|
;;;74     	if(pDateTime == NULL)	return;
;;;75     
;;;76     	Rtc_Write(8, pDateTime->wYear, eBCD_Format);
000006  7821              LDRB     r1,[r4,#0]
000008  2200              MOVS     r2,#0
00000a  2008              MOVS     r0,#8
00000c  f7fffffe          BL       Rtc_Write
;;;77     	Rtc_Write(7, pDateTime->wMonth, eBCD_Format);
000010  7861              LDRB     r1,[r4,#1]
000012  2200              MOVS     r2,#0
000014  2007              MOVS     r0,#7
000016  f7fffffe          BL       Rtc_Write
;;;78     	Rtc_Write(5, pDateTime->wDay, eBCD_Format);
00001a  78a1              LDRB     r1,[r4,#2]
00001c  2200              MOVS     r2,#0
00001e  2005              MOVS     r0,#5
000020  f7fffffe          BL       Rtc_Write
;;;79     
;;;80     	Rtc_Write(4, pDateTime->wHour, eBCD_Format);
000024  78e1              LDRB     r1,[r4,#3]
000026  2200              MOVS     r2,#0
000028  2004              MOVS     r0,#4
00002a  f7fffffe          BL       Rtc_Write
;;;81     	Rtc_Write(3, pDateTime->wMinute, eBCD_Format);
00002e  7921              LDRB     r1,[r4,#4]
000030  2200              MOVS     r2,#0
000032  2003              MOVS     r0,#3
000034  f7fffffe          BL       Rtc_Write
;;;82     	Rtc_Write(2, pDateTime->wSecond, eBCD_Format);
000038  7961              LDRB     r1,[r4,#5]
00003a  2200              MOVS     r2,#0
00003c  e8bd4010          POP      {r4,lr}
000040  2002              MOVS     r0,#2
000042  f7ffbffe          B.W      Rtc_Write
                  |L8.70|
;;;83     }
000046  bd10              POP      {r4,pc}
;;;84     
                          ENDP


                          AREA ||i.Rtc_Write||, CODE, READONLY, ALIGN=1

                  Rtc_Write PROC
;;;24     
;;;25     static void Rtc_Write(unsigned char nAddr, unsigned char nValue, ERtcValueFormat eValueFormat)
000000  b94a              CBNZ     r2,|L9.22|
;;;26     {
;;;27     	/*数字转BCD码,如果传入的是DEC数字，在配置时间时要写转换成BCD码*/
;;;28     	/*参数value 一直都是DEC 格式*/
;;;29     	if(eValueFormat == eBCD_Format)
;;;30     		nValue = ((nValue / 10) << 4) + ((nValue % 10) & 0x0F);
000002  220a              MOVS     r2,#0xa
000004  fbb1f3f2          UDIV     r3,r1,r2
000008  fb021313          MLS      r3,r2,r3,r1
00000c  fbb1f1f2          UDIV     r1,r1,r2
000010  eb031101          ADD      r1,r3,r1,LSL #4
000014  b2c9              UXTB     r1,r1
                  |L9.22|
;;;31     
;;;32     	I2C_Single_Write(PCF8563TS_I2C_ADDR, nAddr, nValue);
000016  460a              MOV      r2,r1
000018  4601              MOV      r1,r0
00001a  20a2              MOVS     r0,#0xa2
00001c  f7ffbffe          B.W      I2C_Single_Write
;;;33     }
;;;34     
                          ENDP


                          AREA ||i.Update_System_Time||, CODE, READONLY, ALIGN=2

                  Update_System_Time PROC
;;;272    
;;;273    unsigned char  Update_System_Time(void)
000000  b510              PUSH     {r4,lr}
;;;274    {
;;;275    	Rtc_Init();
000002  f7fffffe          BL       Rtc_Init
;;;276    	Rtc_Get_Time(&g_sDateTime, eDEC_Format);
000006  2101              MOVS     r1,#1
000008  4806              LDR      r0,|L10.36|
00000a  f7fffffe          BL       Rtc_Get_Time
;;;277    	g_nDayOfWeek = Calculate_Weekday(g_sDateTime.wDay, g_sDateTime.wMonth, g_sDateTime.wYear);
00000e  4805              LDR      r0,|L10.36|
000010  7802              LDRB     r2,[r0,#0]  ; g_sDateTime
000012  7841              LDRB     r1,[r0,#1]  ; g_sDateTime
000014  7880              LDRB     r0,[r0,#2]  ; g_sDateTime
000016  f7fffffe          BL       Calculate_Weekday
00001a  4902              LDR      r1,|L10.36|
00001c  1e49              SUBS     r1,r1,#1
00001e  7008              STRB     r0,[r1,#0]
;;;278    	return 1;
000020  2001              MOVS     r0,#1
;;;279    }
000022  bd10              POP      {r4,pc}
                          ENDP

                  |L10.36|
                          DCD      ||.data||+0x1

                          AREA ||.data||, DATA, ALIGN=0

                  g_nDayOfWeek
000000  00                DCB      0x00
                  g_sDateTime
000001  000000            DCB      0x00,0x00,0x00
000004  000000            DCB      0x00,0x00,0x00
