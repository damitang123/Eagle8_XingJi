; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\system_misc.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\system_misc.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\User\system_misc.c]
                          THUMB

                          AREA ||i.Get_CPU_Clock_Info||, CODE, READONLY, ALIGN=2

                  Get_CPU_Clock_Info PROC
;;;86     
;;;87     void Get_CPU_Clock_Info(void)
000000  b500              PUSH     {lr}
;;;88     {
000002  b085              SUB      sp,sp,#0x14
;;;89     	RCC_ClocksTypeDef  Cpu;
;;;90     
;;;91     	RCC_GetClocksFreq(&Cpu);
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       RCC_GetClocksFreq
;;;92     
;;;93     	g_nSystemClkFrequence = Cpu.SYSCLK_Frequency;
00000a  490a              LDR      r1,|L1.52|
00000c  9800              LDR      r0,[sp,#0]
00000e  6108              STR      r0,[r1,#0x10]  ; g_nSystemClkFrequence
;;;94     
;;;95     	TRACE_PRINTF("Cpu.SYSCLK_Frequency = %ld\r\n",Cpu.SYSCLK_Frequency);
000010  a009              ADR      r0,|L1.56|
000012  9900              LDR      r1,[sp,#0]
000014  f7fffffe          BL       User_Debug_Printf
;;;96     	TRACE_PRINTF("Cpu.HCLK_Frequency = %ld\r\n",Cpu.HCLK_Frequency);
000018  a00f              ADR      r0,|L1.88|
00001a  9901              LDR      r1,[sp,#4]
00001c  f7fffffe          BL       User_Debug_Printf
;;;97     	TRACE_PRINTF("Cpu.PCLK1_Frequency = %ld\r\n",Cpu.PCLK1_Frequency);
000020  a014              ADR      r0,|L1.116|
000022  9902              LDR      r1,[sp,#8]
000024  f7fffffe          BL       User_Debug_Printf
;;;98     	TRACE_PRINTF("Cpu.PCLK2_Frequency = %ld\r\n",Cpu.PCLK2_Frequency);
000028  a019              ADR      r0,|L1.144|
00002a  9903              LDR      r1,[sp,#0xc]
00002c  f7fffffe          BL       User_Debug_Printf
;;;99     }
000030  b005              ADD      sp,sp,#0x14
000032  bd00              POP      {pc}
;;;100    
                          ENDP

                  |L1.52|
                          DCD      ||.data||
                  |L1.56|
000038  4370752e          DCB      "Cpu.SYSCLK_Frequency = %ld\r\n",0
00003c  53595343
000040  4c4b5f46
000044  72657175
000048  656e6379
00004c  203d2025
000050  6c640d0a
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
                  |L1.88|
000058  4370752e          DCB      "Cpu.HCLK_Frequency = %ld\r\n",0
00005c  48434c4b
000060  5f467265
000064  7175656e
000068  6379203d
00006c  20256c64
000070  0d0a00  
000073  00                DCB      0
                  |L1.116|
000074  4370752e          DCB      "Cpu.PCLK1_Frequency = %ld\r\n",0
000078  50434c4b
00007c  315f4672
000080  65717565
000084  6e637920
000088  3d20256c
00008c  640d0a00
                  |L1.144|
000090  4370752e          DCB      "Cpu.PCLK2_Frequency = %ld\r\n",0
000094  50434c4b
000098  325f4672
00009c  65717565
0000a0  6e637920
0000a4  3d20256c
0000a8  640d0a00

                          AREA ||i.Get_System_Clk_Frequency||, CODE, READONLY, ALIGN=2

                  Get_System_Clk_Frequency PROC
;;;81     
;;;82     unsigned long Get_System_Clk_Frequency(void)
000000  4801              LDR      r0,|L2.8|
;;;83     {
;;;84     	return g_nSystemClkFrequence;
000002  6900              LDR      r0,[r0,#0x10]  ; g_nSystemClkFrequence
;;;85     }
000004  4770              BX       lr
;;;86     
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      ||.data||

                          AREA ||i.Get_System_Time||, CODE, READONLY, ALIGN=2

                  Get_System_Time PROC
;;;76     
;;;77     unsigned long Get_System_Time(void)
000000  4801              LDR      r0,|L3.8|
;;;78     {
;;;79     	return g_nSystemTime;
000002  68c0              LDR      r0,[r0,#0xc]  ; g_nSystemTime
;;;80     }
000004  4770              BX       lr
;;;81     
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      ||.data||

                          AREA ||i.Internal_Clk_Init||, CODE, READONLY, ALIGN=1

                  Internal_Clk_Init PROC
;;;117    
;;;118    void Internal_Clk_Init(void)
000000  b510              PUSH     {r4,lr}
;;;119    {
;;;120    	RCC_HSICmd(ENABLE);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       RCC_HSICmd
                  |L4.8|
;;;121    
;;;122    	while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
000008  2021              MOVS     r0,#0x21
00000a  f7fffffe          BL       RCC_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0fa              BEQ      |L4.8|
;;;123    
;;;124    	FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
000012  2010              MOVS     r0,#0x10
000014  f7fffffe          BL       FLASH_PrefetchBufferCmd
;;;125    	FLASH_SetLatency(FLASH_Latency_2);
000018  2002              MOVS     r0,#2
00001a  f7fffffe          BL       FLASH_SetLatency
;;;126    
;;;127    	RCC_HCLKConfig(RCC_SYSCLK_Div1);   
00001e  2000              MOVS     r0,#0
000020  f7fffffe          BL       RCC_HCLKConfig
;;;128    	RCC_PCLK1Config(RCC_HCLK_Div1);
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       RCC_PCLK1Config
;;;129    	RCC_PCLK2Config(RCC_HCLK_Div1);
00002a  2000              MOVS     r0,#0
00002c  f7fffffe          BL       RCC_PCLK2Config
;;;130    
;;;131    	RCC_PLLConfig(RCC_PLLSource_HSI_Div2, RCC_PLLMul_16);                
000030  f44f1160          MOV      r1,#0x380000
000034  2000              MOVS     r0,#0
000036  f7fffffe          BL       RCC_PLLConfig
;;;132    	RCC_PLLCmd(ENABLE);
00003a  2001              MOVS     r0,#1
00003c  f7fffffe          BL       RCC_PLLCmd
                  |L4.64|
;;;133    	while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
000040  2039              MOVS     r0,#0x39
000042  f7fffffe          BL       RCC_GetFlagStatus
000046  2800              CMP      r0,#0
000048  d0fa              BEQ      |L4.64|
;;;134    
;;;135    	RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);  
00004a  2002              MOVS     r0,#2
00004c  f7fffffe          BL       RCC_SYSCLKConfig
                  |L4.80|
;;;136    	while(RCC_GetSYSCLKSource() != 0x08);
000050  f7fffffe          BL       RCC_GetSYSCLKSource
000054  2808              CMP      r0,#8
000056  d1fb              BNE      |L4.80|
;;;137    }
000058  bd10              POP      {r4,pc}
;;;138    
                          ENDP


                          AREA ||i.NVIC_Configuration||, CODE, READONLY, ALIGN=1

                  NVIC_Configuration PROC
;;;147    
;;;148    void NVIC_Configuration(void)
000000  b538              PUSH     {r3-r5,lr}
;;;149    {
;;;150    	NVIC_InitTypeDef NVIC_InitStructure;
;;;151    	#ifdef  VECT_TAB_RAM
;;;152    	/* Set the Vector Table base location at 0x20000000 */
;;;153    	NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0);
;;;154    	#else  /* VECT_TAB_FLASH  */
;;;155    	/* Set the Vector Table base location at 0x08000000 */
;;;156    		#if defined(USE_DFU)
;;;157    		NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
000002  f44f5140          MOV      r1,#0x3000
000006  f04f6000          MOV      r0,#0x8000000
00000a  f7fffffe          BL       NVIC_SetVectorTable
;;;158    		#else
;;;159    		NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0000);
;;;160    		#endif
;;;161    	#endif
;;;162    
;;;163    	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
00000e  f44f60c0          MOV      r0,#0x600
000012  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;164    
;;;165    	/*PC UART*/
;;;166    	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
000016  2025              MOVS     r0,#0x25
000018  f88d0000          STRB     r0,[sp,#0]
;;;167    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
00001c  2500              MOVS     r5,#0
00001e  f88d5001          STRB     r5,[sp,#1]
;;;168    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
000022  2401              MOVS     r4,#1
000024  f88d4002          STRB     r4,[sp,#2]
;;;169    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000028  f88d4003          STRB     r4,[sp,#3]
;;;170    	NVIC_Init(&NVIC_InitStructure);
00002c  4668              MOV      r0,sp
00002e  f7fffffe          BL       NVIC_Init
;;;171    	
;;;172    	/*GPS*/
;;;173    	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
000032  2026              MOVS     r0,#0x26
000034  f88d0000          STRB     r0,[sp,#0]
;;;174    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
000038  f88d4001          STRB     r4,[sp,#1]
;;;175    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
00003c  f88d4002          STRB     r4,[sp,#2]
;;;176    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000040  f88d4003          STRB     r4,[sp,#3]
;;;177    	NVIC_Init(&NVIC_InitStructure);
000044  4668              MOV      r0,sp
000046  f7fffffe          BL       NVIC_Init
;;;178    
;;;179    	/*À¶ÑÀ´òÓ¡»ú*/
;;;180    	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
00004a  2027              MOVS     r0,#0x27
00004c  f88d0000          STRB     r0,[sp,#0]
;;;181    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
000050  f88d4001          STRB     r4,[sp,#1]
;;;182    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
000054  f88d5002          STRB     r5,[sp,#2]
;;;183    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000058  f88d4003          STRB     r4,[sp,#3]
;;;184    	NVIC_Init(&NVIC_InitStructure);
00005c  4668              MOV      r0,sp
00005e  f7fffffe          BL       NVIC_Init
;;;185    
;;;186    	/*GPRS*/
;;;187    	NVIC_InitStructure.NVIC_IRQChannel = UART4_IRQn;
000062  2034              MOVS     r0,#0x34
000064  f88d0000          STRB     r0,[sp,#0]
;;;188    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
000068  f88d5001          STRB     r5,[sp,#1]
;;;189    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
00006c  f88d4002          STRB     r4,[sp,#2]
;;;190    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000070  f88d4003          STRB     r4,[sp,#3]
;;;191    	NVIC_Init(&NVIC_InitStructure);
000074  4668              MOV      r0,sp
000076  f7fffffe          BL       NVIC_Init
;;;192    	
;;;193    	/*Í¨ÓÃ¶¨Ê±Æ÷ÖÐ¶Ï*/
;;;194    	NVIC_InitStructure.NVIC_IRQChannel = TIM5_IRQn;
00007a  2032              MOVS     r0,#0x32
00007c  f88d0000          STRB     r0,[sp,#0]
;;;195    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
000080  f88d4001          STRB     r4,[sp,#1]
;;;196    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 7;
000084  2007              MOVS     r0,#7
000086  f88d0002          STRB     r0,[sp,#2]
;;;197    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00008a  f88d4003          STRB     r4,[sp,#3]
;;;198    	NVIC_Init(&NVIC_InitStructure);
00008e  4668              MOV      r0,sp
000090  f7fffffe          BL       NVIC_Init
;;;199    
;;;200    	/*ADC É¨ÃèÖÐ¶Ï.*/
;;;201    	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
000094  201c              MOVS     r0,#0x1c
000096  f88d0000          STRB     r0,[sp,#0]
;;;202    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;
00009a  f88d4001          STRB     r4,[sp,#1]
;;;203    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x05;
00009e  2005              MOVS     r0,#5
0000a0  f88d0002          STRB     r0,[sp,#2]
;;;204    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
0000a4  f88d4003          STRB     r4,[sp,#3]
;;;205    	NVIC_Init(&NVIC_InitStructure);
0000a8  4668              MOV      r0,sp
0000aa  f7fffffe          BL       NVIC_Init
;;;206    }
0000ae  bd38              POP      {r3-r5,pc}
;;;207    
                          ENDP


                          AREA ||i.RCC_Configuration||, CODE, READONLY, ALIGN=2

                  RCC_Configuration PROC
;;;138    
;;;139    void RCC_Configuration(void)
000000  b510              PUSH     {r4,lr}
;;;140    {
;;;141    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOB|RCC_APB2Periph_GPIOC|
000002  2101              MOVS     r1,#1
000004  f244007d          MOV      r0,#0x407d
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;142    								RCC_APB2Periph_GPIOD|RCC_APB2Periph_GPIOE
;;;143    								|RCC_APB2Periph_USART1|RCC_APB2Periph_AFIO, ENABLE);
;;;144    
;;;145    	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable , ENABLE);
00000c  e8bd4010          POP      {r4,lr}
000010  2101              MOVS     r1,#1
000012  4801              LDR      r0,|L6.24|
000014  f7ffbffe          B.W      GPIO_PinRemapConfig
;;;146    }
;;;147    
                          ENDP

                  |L6.24|
                          DCD      0x00300200

                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=2

                  SysTick_Handler PROC
;;;36     
;;;37     void SysTick_Handler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;38     {
;;;39     	OS_TimeMS++;
000002  481e              LDR      r0,|L7.124|
000004  6801              LDR      r1,[r0,#0]  ; OS_TimeMS
000006  1c49              ADDS     r1,r1,#1
000008  6001              STR      r1,[r0,#0]  ; OS_TimeMS
;;;40     	g_nSystemTime ++;
00000a  481d              LDR      r0,|L7.128|
00000c  68c1              LDR      r1,[r0,#0xc]  ; g_nSystemTime
00000e  1c49              ADDS     r1,r1,#1
000010  60c1              STR      r1,[r0,#0xc]  ; g_nSystemTime
;;;41     
;;;42     	Mark_Valid_Package_Via_Timeout();
000012  f7fffffe          BL       Mark_Valid_Package_Via_Timeout
;;;43     
;;;44     	if(++ g_s10msTimer.nCnt >= 10)
000016  481a              LDR      r0,|L7.128|
000018  7841              LDRB     r1,[r0,#1]  ; g_s10msTimer
00001a  1c49              ADDS     r1,r1,#1
00001c  b2c9              UXTB     r1,r1
00001e  7041              STRB     r1,[r0,#1]
000020  290a              CMP      r1,#0xa
000022  d32a              BCC      |L7.122|
;;;45     	{
;;;46     		g_s10msTimer.nCnt = 0;
000024  2400              MOVS     r4,#0
000026  7044              STRB     r4,[r0,#1]
;;;47     		g_s10msTimer.bIntervalEvent = true;
000028  2501              MOVS     r5,#1
00002a  7005              STRB     r5,[r0,#0]
;;;48     
;;;49     		Timer_10ms_Hook();
00002c  f7fffffe          BL       Timer_10ms_Hook
;;;50     
;;;51     		if(++ g_s50msTimer.nCnt >= 5)
000030  4813              LDR      r0,|L7.128|
000032  1c80              ADDS     r0,r0,#2
000034  7841              LDRB     r1,[r0,#1]  ; g_s50msTimer
000036  1c49              ADDS     r1,r1,#1
000038  b2c9              UXTB     r1,r1
00003a  7041              STRB     r1,[r0,#1]
00003c  2905              CMP      r1,#5
00003e  d31c              BCC      |L7.122|
;;;52     		{
;;;53     			g_s50msTimer.nCnt = 0;
000040  7044              STRB     r4,[r0,#1]
;;;54     			g_s50msTimer.bIntervalEvent = true;
000042  7005              STRB     r5,[r0,#0]
;;;55     
;;;56     			if(++ g_s100msTimer.nCnt >= 2)
000044  1c80              ADDS     r0,r0,#2
000046  7841              LDRB     r1,[r0,#1]  ; g_s100msTimer
000048  1c49              ADDS     r1,r1,#1
00004a  b2c9              UXTB     r1,r1
00004c  7041              STRB     r1,[r0,#1]
00004e  2902              CMP      r1,#2
000050  d313              BCC      |L7.122|
;;;57     			{
;;;58     				g_s100msTimer.nCnt = 0;
000052  7044              STRB     r4,[r0,#1]
;;;59     				g_s100msTimer.bIntervalEvent = true;
000054  7005              STRB     r5,[r0,#0]
;;;60     				
;;;61     				if(++ g_s500msTimer.nCnt >= 5)
000056  1c80              ADDS     r0,r0,#2
000058  7841              LDRB     r1,[r0,#1]  ; g_s500msTimer
00005a  1c49              ADDS     r1,r1,#1
00005c  b2c9              UXTB     r1,r1
00005e  7041              STRB     r1,[r0,#1]
000060  2905              CMP      r1,#5
000062  d30a              BCC      |L7.122|
;;;62     				{
;;;63     					g_s500msTimer.nCnt = 0;
000064  7044              STRB     r4,[r0,#1]
;;;64     					g_s500msTimer.bIntervalEvent = true;
000066  7005              STRB     r5,[r0,#0]
;;;65     
;;;66     					if(++ g_s1000msTimer.nCnt >= 2)
000068  1c80              ADDS     r0,r0,#2
00006a  7841              LDRB     r1,[r0,#1]  ; g_s1000msTimer
00006c  1c49              ADDS     r1,r1,#1
00006e  b2c9              UXTB     r1,r1
000070  7041              STRB     r1,[r0,#1]
000072  2902              CMP      r1,#2
000074  d301              BCC      |L7.122|
;;;67     					{
;;;68     						g_s1000msTimer.nCnt = 0;
000076  7044              STRB     r4,[r0,#1]
;;;69     						g_s1000msTimer.bIntervalEvent = true;
000078  7005              STRB     r5,[r0,#0]
                  |L7.122|
;;;70     					}
;;;71     				}
;;;72     			}
;;;73     		}
;;;74     	}
;;;75     }
00007a  bd70              POP      {r4-r6,pc}
;;;76     
                          ENDP

                  |L7.124|
                          DCD      OS_TimeMS
                  |L7.128|
                          DCD      ||.data||

                          AREA ||i.System_Tick_Init||, CODE, READONLY, ALIGN=2

                  System_Tick_Init PROC
;;;100    
;;;101    void  System_Tick_Init (void)
000000  b570              PUSH     {r4-r6,lr}
;;;102    {
;;;103    	g_nSystemTime = 0;
000002  4d10              LDR      r5,|L8.68|
000004  2400              MOVS     r4,#0
000006  60ec              STR      r4,[r5,#0xc]  ; g_nSystemTime
;;;104    
;;;105    	memset((void *)&g_s10msTimer,0,sizeof(sTimerEvent));
000008  802c              STRH     r4,[r5,#0]
;;;106    	memset((void *)&g_s50msTimer,0,sizeof(sTimerEvent));
00000a  806c              STRH     r4,[r5,#2]
;;;107    	memset((void *)&g_s100msTimer,0,sizeof(sTimerEvent));
00000c  80ac              STRH     r4,[r5,#4]
;;;108    	memset((void *)&g_s500msTimer,0,sizeof(sTimerEvent));
00000e  80ec              STRH     r4,[r5,#6]
;;;109    	memset((void *)&g_s1000msTimer,0,sizeof(sTimerEvent));
000010  812c              STRH     r4,[r5,#8]
;;;110    
;;;111    	Get_CPU_Clock_Info();
000012  f7fffffe          BL       Get_CPU_Clock_Info
;;;112    	
;;;113    	SysTick_Config(g_nSystemClkFrequence / OS_TICKS_PER_SEC);
000016  6928              LDR      r0,[r5,#0x10]  ; g_nSystemClkFrequence
000018  f44f717a          MOV      r1,#0x3e8
00001c  fbb0f0f1          UDIV     r0,r0,r1
000020  f1b07f80          CMP      r0,#0x1000000
000024  d20c              BCS      |L8.64|
000026  f020417f          BIC      r1,r0,#0xff000000
00002a  f04f20e0          MOV      r0,#0xe000e000
00002e  1e49              SUBS     r1,r1,#1
000030  6141              STR      r1,[r0,#0x14]
000032  4a05              LDR      r2,|L8.72|
000034  21f0              MOVS     r1,#0xf0
000036  f8821d14          STRB     r1,[r2,#0xd14]
00003a  6184              STR      r4,[r0,#0x18]
00003c  2107              MOVS     r1,#7
00003e  6101              STR      r1,[r0,#0x10]
                  |L8.64|
;;;114    
;;;115    	__enable_irq();
000040  b662              CPSIE    i
;;;116    }
000042  bd70              POP      {r4-r6,pc}
;;;117    
                          ENDP

                  |L8.68|
                          DCD      ||.data||
                  |L8.72|
                          DCD      0xe000e00f

                          AREA ||i.Timer_10ms_Hook||, CODE, READONLY, ALIGN=2

                  Timer_10ms_Hook PROC
;;;23     
;;;24     void Timer_10ms_Hook(void)
000000  b510              PUSH     {r4,lr}
;;;25     {
;;;26     	Buzzer_Ctrl();
000002  f7fffffe          BL       Buzzer_Ctrl
;;;27     	if(pApp->bSystemPowerOn)
000006  4c08              LDR      r4,|L9.40|
000008  6820              LDR      r0,[r4,#0]  ; pApp
00000a  7d40              LDRB     r0,[r0,#0x15]
00000c  2800              CMP      r0,#0
00000e  d009              BEQ      |L9.36|
;;;28     	{
;;;29     		Key_Scan();
000010  f7fffffe          BL       Key_Scan
;;;30     		if(pApp->eWorkState == eWorkNormal)
000014  6820              LDR      r0,[r4,#0]  ; pApp
000016  7800              LDRB     r0,[r0,#0]
000018  2801              CMP      r0,#1
00001a  d103              BNE      |L9.36|
;;;31     		{
;;;32     			System_Led_Flash();
00001c  e8bd4010          POP      {r4,lr}
000020  f7ffbffe          B.W      System_Led_Flash
                  |L9.36|
;;;33     		}
;;;34     	}
;;;35     }
000024  bd10              POP      {r4,pc}
;;;36     
                          ENDP

000026  0000              DCW      0x0000
                  |L9.40|
                          DCD      pApp

                          AREA ||.data||, DATA, ALIGN=2

                  g_s10msTimer
000000  0000              DCB      0x00,0x00
                  g_s50msTimer
000002  0000              DCB      0x00,0x00
                  g_s100msTimer
000004  0000              DCB      0x00,0x00
                  g_s500msTimer
000006  0000              DCB      0x00,0x00
                  g_s1000msTimer
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  g_nSystemTime
                          DCD      0x00000000
                  g_nSystemClkFrequence
                          DCD      0x00000000
