; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\jcomapi.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\jcomapi.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\JPEG\jcomapi.c]
                          THUMB

                          AREA ||i.jpeg_abort||, CODE, READONLY, ALIGN=1

                  jpeg_abort PROC
;;;28     GLOBAL(void)
;;;29     jpeg_abort (j_common_ptr cinfo)
000000  b510              PUSH     {r4,lr}
;;;30     {
000002  4604              MOV      r4,r0
;;;31       int pool;
;;;32     
;;;33       /* Do nothing if called on a not-initialized or destroyed JPEG object. */
;;;34       if (cinfo->mem == NULL)
000004  6840              LDR      r0,[r0,#4]
000006  2800              CMP      r0,#0                 ;30
000008  d00a              BEQ      |L1.32|
;;;35         return;
;;;36     
;;;37       /* Releasing pools in reverse order might help avoid fragmentation
;;;38        * with some (brain-damaged) malloc libraries.
;;;39        */
;;;40       for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
;;;41         (*cinfo->mem->free_pool) (cinfo, pool);
00000a  6a42              LDR      r2,[r0,#0x24]
00000c  2101              MOVS     r1,#1                 ;40
00000e  4620              MOV      r0,r4
000010  4790              BLX      r2
000012  6920              LDR      r0,[r4,#0x10]         ;40
000014  b128              CBZ      r0,|L1.34|
;;;42       }
;;;43     
;;;44       /* Reset overall state for possible reuse of object */
;;;45       if (cinfo->is_decompressor) {
;;;46         cinfo->global_state = DSTATE_START;
000016  20c8              MOVS     r0,#0xc8
;;;47         /* Try to keep application from accessing now-deleted marker list.
;;;48          * A bit kludgy to do it here, but this is the most central place.
;;;49          */
;;;50         ((j_decompress_ptr) cinfo)->marker_list = NULL;
000018  6160              STR      r0,[r4,#0x14]
00001a  2000              MOVS     r0,#0
00001c  f8c40130          STR      r0,[r4,#0x130]
                  |L1.32|
;;;51       } else {
;;;52         cinfo->global_state = CSTATE_START;
;;;53       }
;;;54     }
000020  bd10              POP      {r4,pc}
                  |L1.34|
000022  2064              MOVS     r0,#0x64              ;52
000024  6160              STR      r0,[r4,#0x14]         ;52
000026  bd10              POP      {r4,pc}
;;;55     
                          ENDP


                          AREA ||i.jpeg_alloc_huff_table||, CODE, READONLY, ALIGN=1

                  jpeg_alloc_huff_table PROC
;;;91     
;;;92     GLOBAL(JHUFF_TBL *) jpeg_alloc_huff_table (j_common_ptr cinfo) {
000000  b510              PUSH     {r4,lr}
;;;93       JHUFF_TBL *tbl;
;;;94       tbl = (JHUFF_TBL *) (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
000002  6841              LDR      r1,[r0,#4]
000004  f44f728c          MOV      r2,#0x118
000008  680b              LDR      r3,[r1,#0]
00000a  2100              MOVS     r1,#0
00000c  4798              BLX      r3
;;;95       tbl->sent_table = FALSE;	/* make sure this is false in any new table */
00000e  2100              MOVS     r1,#0
000010  f8c01114          STR      r1,[r0,#0x114]
;;;96       return tbl;
;;;97     }
000014  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i.jpeg_alloc_quant_table||, CODE, READONLY, ALIGN=1

                  jpeg_alloc_quant_table PROC
;;;83     
;;;84     GLOBAL(JQUANT_TBL *) jpeg_alloc_quant_table (j_common_ptr cinfo) {
000000  b510              PUSH     {r4,lr}
;;;85       JQUANT_TBL *tbl;
;;;86       tbl = (JQUANT_TBL *) (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
000002  6841              LDR      r1,[r0,#4]
000004  2284              MOVS     r2,#0x84
000006  680b              LDR      r3,[r1,#0]
000008  2100              MOVS     r1,#0
00000a  4798              BLX      r3
;;;87       tbl->sent_table = FALSE;	/* make sure this is false in any new table */
00000c  2100              MOVS     r1,#0
00000e  f8c01080          STR      r1,[r0,#0x80]
;;;88       return tbl;
;;;89     }
000012  bd10              POP      {r4,pc}
;;;90     
                          ENDP


                          AREA ||i.jpeg_destroy||, CODE, READONLY, ALIGN=1

                  jpeg_destroy PROC
;;;67     
;;;68     GLOBAL(void) jpeg_destroy (j_common_ptr cinfo) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;69       /* We need only tell the memory manager to release everything. */
;;;70       /* NB: mem pointer is NULL if memory mgr failed to initialize. */
;;;71       if (cinfo->mem != NULL) {
000004  6840              LDR      r0,[r0,#4]
000006  b110              CBZ      r0,|L4.14|
;;;72         (*cinfo->mem->self_destruct) (cinfo);
000008  6a81              LDR      r1,[r0,#0x28]
00000a  4620              MOV      r0,r4
00000c  4788              BLX      r1
                  |L4.14|
;;;73       }
;;;74       cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
00000e  2000              MOVS     r0,#0
;;;75       cinfo->global_state = 0;	/* mark it destroyed */
000010  6060              STR      r0,[r4,#4]
000012  6160              STR      r0,[r4,#0x14]
;;;76     }
000014  bd10              POP      {r4,pc}
;;;77     
                          ENDP

