; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\guicirc.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guicirc.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\Core\GUICirc.c]
                          THUMB

                          AREA ||i.Draw8Point||, CODE, READONLY, ALIGN=2

                  Draw8Point PROC
;;;46     */
;;;47     static void Draw8Point(int x0,int y0, int xoff, int yoff) {
000000  e92d5ffc          PUSH     {r2-r12,lr}
000004  4615              MOV      r5,r2
000006  4607              MOV      r7,r0
;;;48       LCD_HL_DrawPixel(x0+xoff,y0+yoff);
000008  f8df8080          LDR      r8,|L1.140|
00000c  4428              ADD      r0,r0,r5
00000e  9001              STR      r0,[sp,#4]
000010  f8d8205c          LDR      r2,[r8,#0x5c]  ; GUI_Context
000014  461c              MOV      r4,r3                 ;47
000016  460e              MOV      r6,r1                 ;47
000018  4421              ADD      r1,r1,r4
00001a  6852              LDR      r2,[r2,#4]
00001c  4689              MOV      r9,r1
00001e  4790              BLX      r2
;;;49       LCD_HL_DrawPixel(x0-xoff,y0+yoff);
000020  f8d8205c          LDR      r2,[r8,#0x5c]  ; GUI_Context
000024  1b78              SUBS     r0,r7,r5
000026  4649              MOV      r1,r9                 ;48
000028  6852              LDR      r2,[r2,#4]
00002a  4682              MOV      r10,r0
00002c  4790              BLX      r2
;;;50       LCD_HL_DrawPixel(x0+yoff,y0+xoff);
00002e  1971              ADDS     r1,r6,r5
000030  1938              ADDS     r0,r7,r4
000032  9000              STR      r0,[sp,#0]
000034  f8d8205c          LDR      r2,[r8,#0x5c]  ; GUI_Context
000038  4689              MOV      r9,r1
00003a  6852              LDR      r2,[r2,#4]
00003c  4790              BLX      r2
;;;51       LCD_HL_DrawPixel(x0+yoff,y0-xoff);
00003e  f8d8205c          LDR      r2,[r8,#0x5c]  ; GUI_Context
000042  1b71              SUBS     r1,r6,r5
000044  468b              MOV      r11,r1
000046  6852              LDR      r2,[r2,#4]
000048  9800              LDR      r0,[sp,#0]
00004a  4790              BLX      r2
;;;52       if (yoff) {
00004c  2c00              CMP      r4,#0
00004e  d01a              BEQ      |L1.134|
;;;53         LCD_HL_DrawPixel(x0+xoff,y0-yoff);
000050  f8d8105c          LDR      r1,[r8,#0x5c]  ; GUI_Context
000054  1b36              SUBS     r6,r6,r4
000056  4645              MOV      r5,r8
000058  684a              LDR      r2,[r1,#4]
00005a  9801              LDR      r0,[sp,#4]
00005c  4631              MOV      r1,r6
00005e  4790              BLX      r2
;;;54         LCD_HL_DrawPixel(x0-xoff,y0-yoff);
000060  6dea              LDR      r2,[r5,#0x5c]  ; GUI_Context
000062  4631              MOV      r1,r6
000064  4650              MOV      r0,r10
000066  6852              LDR      r2,[r2,#4]
000068  4790              BLX      r2
;;;55         LCD_HL_DrawPixel(x0-yoff,y0+xoff);
00006a  6de8              LDR      r0,[r5,#0x5c]  ; GUI_Context
00006c  1b3c              SUBS     r4,r7,r4
00006e  4649              MOV      r1,r9                 ;54
000070  6842              LDR      r2,[r0,#4]
000072  4620              MOV      r0,r4
000074  4790              BLX      r2
;;;56         LCD_HL_DrawPixel(x0-yoff,y0-xoff);
000076  6dea              LDR      r2,[r5,#0x5c]  ; GUI_Context
000078  4659              MOV      r1,r11                ;55
00007a  4620              MOV      r0,r4
00007c  6852              LDR      r2,[r2,#4]
00007e  b002              ADD      sp,sp,#8
000080  e8bd5ff0          POP      {r4-r12,lr}
000084  4710              BX       r2
                  |L1.134|
;;;57       }
;;;58     }
000086  e8bd9ffc          POP      {r2-r12,pc}
;;;59     
                          ENDP

00008a  0000              DCW      0x0000
                  |L1.140|
                          DCD      GUI_Context

                          AREA ||i.GL_DrawCircle||, CODE, READONLY, ALIGN=1

                  GL_DrawCircle PROC
;;;69     */
;;;70     void GL_DrawCircle(int x0, int y0, int r) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4681              MOV      r9,r0
000006  4688              MOV      r8,r1
;;;71       I32 i;
;;;72       int imax = ((I32)((I32)r*707))/1000+1;
000008  f24020c3          MOV      r0,#0x2c3
00000c  4350              MULS     r0,r2,r0
00000e  f44f717a          MOV      r1,#0x3e8
000012  fb90f5f1          SDIV     r5,r0,r1
;;;73       I32 sqmax = (I32)r*(I32)r+(I32)r/2;
000016  fb02f002          MUL      r0,r2,r2
00001a  eb0271d2          ADD      r1,r2,r2,LSR #31
00001e  eb000661          ADD      r6,r0,r1,ASR #1
;;;74       I32 y=r;
000022  4617              MOV      r7,r2
;;;75       Draw8Point(x0,y0,r,0);
000024  2300              MOVS     r3,#0
000026  4641              MOV      r1,r8
000028  4648              MOV      r0,r9
00002a  1c6d              ADDS     r5,r5,#1
00002c  f7fffffe          BL       Draw8Point
;;;76       for (i=1; i<= imax; i++) {
000030  2401              MOVS     r4,#1
000032  e013              B        |L2.92|
                  |L2.52|
;;;77         if ((i*i+y*y) >sqmax) {
000034  fb04f004          MUL      r0,r4,r4
000038  fb070007          MLA      r0,r7,r7,r0
00003c  42b0              CMP      r0,r6
00003e  dd06              BLE      |L2.78|
;;;78           Draw8Point(x0,y0,i,y);
000040  463b              MOV      r3,r7
000042  4622              MOV      r2,r4
000044  4641              MOV      r1,r8
000046  4648              MOV      r0,r9
000048  f7fffffe          BL       Draw8Point
00004c  1e7f              SUBS     r7,r7,#1
                  |L2.78|
;;;79           y--;
;;;80         }
;;;81         Draw8Point(x0,y0,i,y);
00004e  463b              MOV      r3,r7
000050  4622              MOV      r2,r4
000052  4641              MOV      r1,r8
000054  4648              MOV      r0,r9
000056  f7fffffe          BL       Draw8Point
00005a  1c64              ADDS     r4,r4,#1
                  |L2.92|
00005c  42ac              CMP      r4,r5                 ;76
00005e  dde9              BLE      |L2.52|
;;;82       }
;;;83     }
000060  e8bd87f0          POP      {r4-r10,pc}
;;;84     
                          ENDP


                          AREA ||i.GL_DrawEllipse||, CODE, READONLY, ALIGN=1

                  GL_DrawEllipse PROC
;;;218    */
;;;219    void GL_DrawEllipse(int x0, int y0, int rx, int ry) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b083              SUB      sp,sp,#0xc
000006  4681              MOV      r9,r0
;;;220      I32 OutConst, Sum, SumY;
;;;221      int x,y;
;;;222      int xOld;
;;;223      U32 _rx = rx;
;;;224      U32 _ry = ry;
;;;225      OutConst = _rx*_rx*_ry*_ry  /* Constant as explaint above */
000008  fb02f002          MUL      r0,r2,r2
00000c  461e              MOV      r6,r3                 ;219
00000e  9001              STR      r0,[sp,#4]
000010  4370              MULS     r0,r6,r0
000012  fb00f106          MUL      r1,r0,r6
;;;226                +(_rx*_rx*_ry>>1); /* To compensate for rounding */
;;;227      xOld = x = rx;
000016  4614              MOV      r4,r2
000018  eb010850          ADD      r8,r1,r0,LSR #1       ;225
00001c  4625              MOV      r5,r4
;;;228      for (y=0; y<=ry; y++) {
00001e  2700              MOVS     r7,#0
000020  e03b              B        |L3.154|
                  |L3.34|
;;;229        if (y==ry) {
000022  d101              BNE      |L3.40|
;;;230          x=0;
000024  2400              MOVS     r4,#0
000026  e00f              B        |L3.72|
                  |L3.40|
;;;231        } else {
;;;232          SumY =((I32)(rx*rx))*((I32)(y*y)); /* Does not change in loop */
000028  9901              LDR      r1,[sp,#4]
00002a  fb07f007          MUL      r0,r7,r7
00002e  4341              MULS     r1,r0,r1
;;;233          while (Sum = SumY + ((I32)(ry*ry))*((I32)(x*x)),
000030  fb06f206          MUL      r2,r6,r6
000034  e000              B        |L3.56|
                  |L3.54|
000036  1e64              SUBS     r4,r4,#1
                  |L3.56|
000038  fb04f004          MUL      r0,r4,r4
00003c  fb021000          MLA      r0,r2,r0,r1
000040  2c00              CMP      r4,#0
000042  dd01              BLE      |L3.72|
;;;234                 (x>0) && (Sum>OutConst)) x--;
000044  4540              CMP      r0,r8
000046  dcf6              BGT      |L3.54|
                  |L3.72|
;;;235        }
;;;236        /* Since we draw lines, we can not draw on the first
;;;237            iteration
;;;238        */
;;;239        if (y) {
000048  b32f              CBZ      r7,|L3.150|
;;;240          GL_DrawLine1(x0-xOld,y0-y+1,x0-x,y0-y);
00004a  9804              LDR      r0,[sp,#0x10]
00004c  eba90204          SUB      r2,r9,r4
000050  eba00b07          SUB      r11,r0,r7
000054  465b              MOV      r3,r11
000056  eba90005          SUB      r0,r9,r5
00005a  1c59              ADDS     r1,r3,#1
00005c  9202              STR      r2,[sp,#8]
00005e  9000              STR      r0,[sp,#0]
000060  f7fffffe          BL       GL_DrawLine1
;;;241          GL_DrawLine1(x0-xOld,y0+y-1,x0-x,y0+y);
000064  9804              LDR      r0,[sp,#0x10]
000066  9a02              LDR      r2,[sp,#8]
000068  19c1              ADDS     r1,r0,r7
00006a  468a              MOV      r10,r1
00006c  1e49              SUBS     r1,r1,#1
00006e  4653              MOV      r3,r10
000070  9800              LDR      r0,[sp,#0]
000072  f7fffffe          BL       GL_DrawLine1
;;;242          GL_DrawLine1(x0+xOld,y0-y+1,x0+x,y0-y);
000076  465b              MOV      r3,r11
000078  eb090204          ADD      r2,r9,r4
00007c  444d              ADD      r5,r5,r9
00007e  1c59              ADDS     r1,r3,#1
000080  4628              MOV      r0,r5
000082  9200              STR      r2,[sp,#0]
000084  f7fffffe          BL       GL_DrawLine1
;;;243          GL_DrawLine1(x0+xOld,y0+y-1,x0+x,y0+y);
000088  f1aa0101          SUB      r1,r10,#1
00008c  4628              MOV      r0,r5
00008e  4653              MOV      r3,r10
000090  9a00              LDR      r2,[sp,#0]
000092  f7fffffe          BL       GL_DrawLine1
                  |L3.150|
;;;244        }
;;;245        xOld = x;
000096  4625              MOV      r5,r4
000098  1c7f              ADDS     r7,r7,#1
                  |L3.154|
00009a  42b7              CMP      r7,r6                 ;228
00009c  ddc1              BLE      |L3.34|
;;;246      }
;;;247    }
00009e  b007              ADD      sp,sp,#0x1c
0000a0  e8bd8ff0          POP      {r4-r11,pc}
;;;248    
                          ENDP


                          AREA ||i.GL_FillCircle||, CODE, READONLY, ALIGN=2

                  GL_FillCircle PROC
;;;112    */
;;;113    void GL_FillCircle(int x0, int y0, int r) {
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4606              MOV      r6,r0
000006  4688              MOV      r8,r1
;;;114      I32 i;
;;;115      int imax = ((I32)((I32)r*707))/1000+1;
000008  f24020c3          MOV      r0,#0x2c3
00000c  4350              MULS     r0,r2,r0
00000e  f44f717a          MOV      r1,#0x3e8
000012  fb90f7f1          SDIV     r7,r0,r1
;;;116      I32 sqmax = (I32)r*(I32)r+(I32)r/2;
000016  fb02f002          MUL      r0,r2,r2
00001a  eb0271d2          ADD      r1,r2,r2,LSR #31
00001e  eb000b61          ADD      r11,r0,r1,ASR #1
;;;117      I32 x=r;
;;;118      LCD_HL_DrawHLine(x0-r,y0,x0+r);
000022  4921              LDR      r1,|L4.168|
000024  4614              MOV      r4,r2                 ;117
000026  1b30              SUBS     r0,r6,r4
000028  6dc9              LDR      r1,[r1,#0x5c]  ; GUI_Context
00002a  4432              ADD      r2,r2,r6
00002c  1c7f              ADDS     r7,r7,#1
00002e  680b              LDR      r3,[r1,#0]
000030  4641              MOV      r1,r8
000032  4798              BLX      r3
;;;119      for (i=1; i<= imax; i++) {
000034  2501              MOVS     r5,#1
000036  e033              B        |L4.160|
                  |L4.56|
;;;120        if ((i*i+x*x) >sqmax) {
000038  fb05f005          MUL      r0,r5,r5
00003c  fb040104          MLA      r1,r4,r4,r0
000040  4559              CMP      r1,r11
000042  dd1a              BLE      |L4.122|
;;;121          /* draw lines from outside */
;;;122          if (x>imax) {
000044  42bc              CMP      r4,r7
000046  dd17              BLE      |L4.120|
;;;123            LCD_HL_DrawHLine (x0-i+1,y0+x, x0+i-1);
000048  4b17              LDR      r3,|L4.168|
00004a  eb060a05          ADD      r10,r6,r5
00004e  eba60905          SUB      r9,r6,r5
000052  6ddb              LDR      r3,[r3,#0x5c]  ; GUI_Context
000054  f1aa0201          SUB      r2,r10,#1
000058  eb080104          ADD      r1,r8,r4
00005c  681b              LDR      r3,[r3,#0]
00005e  f1090001          ADD      r0,r9,#1
000062  4798              BLX      r3
;;;124            LCD_HL_DrawHLine (x0-i+1,y0-x, x0+i-1);
000064  4b10              LDR      r3,|L4.168|
000066  f1aa0201          SUB      r2,r10,#1
00006a  eba80104          SUB      r1,r8,r4
00006e  6ddb              LDR      r3,[r3,#0x5c]  ; GUI_Context
000070  f1090001          ADD      r0,r9,#1
000074  681b              LDR      r3,[r3,#0]
000076  4798              BLX      r3
                  |L4.120|
000078  1e64              SUBS     r4,r4,#1
                  |L4.122|
;;;125          }
;;;126          x--;
;;;127        }
;;;128        /* draw lines from inside (center) */
;;;129        LCD_HL_DrawHLine(x0-x,y0+i, x0+x);
00007a  4b0b              LDR      r3,|L4.168|
00007c  1932              ADDS     r2,r6,r4
00007e  1b30              SUBS     r0,r6,r4
000080  6ddb              LDR      r3,[r3,#0x5c]  ; GUI_Context
000082  4692              MOV      r10,r2
000084  eb080105          ADD      r1,r8,r5
000088  681b              LDR      r3,[r3,#0]
00008a  4681              MOV      r9,r0
00008c  4798              BLX      r3
;;;130        LCD_HL_DrawHLine(x0-x,y0-i, x0+x);
00008e  4b06              LDR      r3,|L4.168|
000090  4652              MOV      r2,r10                ;129
000092  eba80105          SUB      r1,r8,r5
000096  6ddb              LDR      r3,[r3,#0x5c]  ; GUI_Context
000098  4648              MOV      r0,r9
00009a  681b              LDR      r3,[r3,#0]
00009c  4798              BLX      r3
00009e  1c6d              ADDS     r5,r5,#1
                  |L4.160|
0000a0  42bd              CMP      r5,r7                 ;119
0000a2  ddc9              BLE      |L4.56|
;;;131      }
;;;132    }
0000a4  e8bd9ff0          POP      {r4-r12,pc}
;;;133    
                          ENDP

                  |L4.168|
                          DCD      GUI_Context

                          AREA ||i.GL_FillEllipse||, CODE, READONLY, ALIGN=2

                  GL_FillEllipse PROC
;;;171    */
;;;172    void GL_FillEllipse(int x0, int y0, int rx, int ry) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  461e              MOV      r6,r3
000006  4681              MOV      r9,r0
;;;173      I32 OutConst, Sum, SumY;
;;;174      int x,y;
;;;175      U32 _rx = rx;
;;;176      U32 _ry = ry;
;;;177      OutConst = _rx*_rx*_ry*_ry  /* Constant as explaint above */
000008  fb02f802          MUL      r8,r2,r2
00000c  fb08f006          MUL      r0,r8,r6
000010  fb00f106          MUL      r1,r0,r6
000014  b081              SUB      sp,sp,#4              ;172
000016  eb010750          ADD      r7,r1,r0,LSR #1
;;;178                +(_rx*_rx*_ry>>1); /* To compensate for rounding */
;;;179      x = rx;
00001a  4614              MOV      r4,r2
;;;180      for (y=0; y<=ry; y++) {
00001c  2500              MOVS     r5,#0
;;;181        SumY =((I32)(rx*rx))*((I32)(y*y)); /* Does not change in loop */
;;;182        while (Sum = SumY + ((I32)(ry*ry))*((I32)(x*x)),
;;;183               (x>0) && (Sum>OutConst))
;;;184        {
;;;185          x--;
;;;186        }
;;;187        LCD_HL_DrawHLine(x0-x, y0+y, x0+x);
00001e  f8dfa05c          LDR      r10,|L5.124|
000022  e025              B        |L5.112|
                  |L5.36|
000024  fb05f105          MUL      r1,r5,r5              ;181
000028  fb08f001          MUL      r0,r8,r1              ;181
00002c  fb06f106          MUL      r1,r6,r6              ;182
000030  e000              B        |L5.52|
                  |L5.50|
000032  1e64              SUBS     r4,r4,#1              ;182
                  |L5.52|
000034  fb04f204          MUL      r2,r4,r4              ;182
000038  fb010202          MLA      r2,r1,r2,r0           ;182
00003c  2c00              CMP      r4,#0                 ;182
00003e  dd01              BLE      |L5.68|
000040  42ba              CMP      r2,r7                 ;183
000042  dcf6              BGT      |L5.50|
                  |L5.68|
000044  eb090204          ADD      r2,r9,r4
000048  9200              STR      r2,[sp,#0]
00004a  9802              LDR      r0,[sp,#8]
00004c  f8da305c          LDR      r3,[r10,#0x5c]  ; GUI_Context
000050  1941              ADDS     r1,r0,r5
000052  eba90004          SUB      r0,r9,r4
000056  681b              LDR      r3,[r3,#0]
000058  4683              MOV      r11,r0
00005a  4798              BLX      r3
;;;188        if (y)
00005c  b13d              CBZ      r5,|L5.110|
;;;189          LCD_HL_DrawHLine(x0-x, y0-y, x0+x);
00005e  f8da305c          LDR      r3,[r10,#0x5c]  ; GUI_Context
000062  9802              LDR      r0,[sp,#8]
000064  9a00              LDR      r2,[sp,#0]
000066  1b41              SUBS     r1,r0,r5
000068  681b              LDR      r3,[r3,#0]
00006a  4658              MOV      r0,r11
00006c  4798              BLX      r3
                  |L5.110|
00006e  1c6d              ADDS     r5,r5,#1
                  |L5.112|
000070  42b5              CMP      r5,r6                 ;180
000072  ddd7              BLE      |L5.36|
;;;190      }
;;;191    }
000074  b005              ADD      sp,sp,#0x14
000076  e8bd8ff0          POP      {r4-r11,pc}
;;;192    
                          ENDP

00007a  0000              DCW      0x0000
                  |L5.124|
                          DCD      GUI_Context

                          AREA ||i.GUI_DrawCircle||, CODE, READONLY, ALIGN=2

                  GUI_DrawCircle PROC
;;;88     */
;;;89     void GUI_DrawCircle(int x0, int y0, int r) {
000000  b57c              PUSH     {r2-r6,lr}
000002  4614              MOV      r4,r2
;;;90       #if (GUI_WINSUPPORT)
;;;91         GUI_RECT Rect;
;;;92       #endif
;;;93       GUI_LOCK();
;;;94       #if (GUI_WINSUPPORT)
;;;95         WM_ADDORG(x0,y0);
000004  4a0f              LDR      r2,|L6.68|
000006  6c53              LDR      r3,[r2,#0x44]  ; GUI_Context
000008  181e              ADDS     r6,r3,r0
00000a  6c90              LDR      r0,[r2,#0x48]  ; GUI_Context
00000c  1845              ADDS     r5,r0,r1
;;;96         Rect.x0 = x0-r;
00000e  1b30              SUBS     r0,r6,r4
000010  f8ad0000          STRH     r0,[sp,#0]
;;;97         Rect.x1 = x0+r;
000014  1930              ADDS     r0,r6,r4
000016  f8ad0004          STRH     r0,[sp,#4]
;;;98         Rect.y0 = y0-r;
00001a  1b28              SUBS     r0,r5,r4
00001c  f8ad0002          STRH     r0,[sp,#2]
;;;99         Rect.y1 = y0+r;
000020  1928              ADDS     r0,r5,r4
000022  f8ad0006          STRH     r0,[sp,#6]
;;;100        WM_ITERATE_START(&Rect); {
000026  4668              MOV      r0,sp
000028  f7fffffe          BL       WM__InitIVRSearch
00002c  e006              B        |L6.60|
                  |L6.46|
;;;101      #endif
;;;102        GL_DrawCircle( x0, y0, r);
00002e  4622              MOV      r2,r4
000030  4629              MOV      r1,r5
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       GL_DrawCircle
;;;103      #if (GUI_WINSUPPORT)
;;;104        } WM_ITERATE_END();
000038  f7fffffe          BL       WM__GetNextIVR
                  |L6.60|
00003c  2800              CMP      r0,#0
00003e  d1f6              BNE      |L6.46|
;;;105      #endif
;;;106      GUI_UNLOCK();
;;;107    }
000040  bd7c              POP      {r2-r6,pc}
;;;108    
                          ENDP

000042  0000              DCW      0x0000
                  |L6.68|
                          DCD      GUI_Context

                          AREA ||i.GUI_DrawEllipse||, CODE, READONLY, ALIGN=2

                  GUI_DrawEllipse PROC
;;;252    */
;;;253    void GUI_DrawEllipse(int x0, int y0, int rx, int ry) {
000000  e92d41fc          PUSH     {r2-r8,lr}
000004  4617              MOV      r7,r2
;;;254      #if (GUI_WINSUPPORT)
;;;255        GUI_RECT r;
;;;256      #endif
;;;257      GUI_LOCK();
;;;258      #if (GUI_WINSUPPORT)
;;;259        WM_ADDORG(x0,y0);
000006  4a11              LDR      r2,|L7.76|
000008  461e              MOV      r6,r3                 ;253
00000a  6c53              LDR      r3,[r2,#0x44]  ; GUI_Context
00000c  181d              ADDS     r5,r3,r0
00000e  6c90              LDR      r0,[r2,#0x48]  ; GUI_Context
000010  1844              ADDS     r4,r0,r1
;;;260      /* Calc rectangle in order to avoid unnecessary drawing ops. */
;;;261        r.x0 = x0-rx; r.x1 = x0+rx; r.y0 = y0-ry; r.y1 = y0+ry;
000012  1be8              SUBS     r0,r5,r7
000014  f8ad0000          STRH     r0,[sp,#0]
000018  19e8              ADDS     r0,r5,r7
00001a  f8ad0004          STRH     r0,[sp,#4]
00001e  1ba0              SUBS     r0,r4,r6
000020  f8ad0002          STRH     r0,[sp,#2]
000024  19a0              ADDS     r0,r4,r6
000026  f8ad0006          STRH     r0,[sp,#6]
;;;262        WM_ITERATE_START(&r); {
00002a  4668              MOV      r0,sp
00002c  f7fffffe          BL       WM__InitIVRSearch
000030  e007              B        |L7.66|
                  |L7.50|
;;;263      #endif
;;;264      GL_DrawEllipse(x0, y0, rx, ry);
000032  4633              MOV      r3,r6
000034  463a              MOV      r2,r7
000036  4621              MOV      r1,r4
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       GL_DrawEllipse
;;;265      #if (GUI_WINSUPPORT)
;;;266        } WM_ITERATE_END();
00003e  f7fffffe          BL       WM__GetNextIVR
                  |L7.66|
000042  2800              CMP      r0,#0
000044  d1f5              BNE      |L7.50|
;;;267      #endif
;;;268      GUI_UNLOCK();
;;;269    }
000046  e8bd81fc          POP      {r2-r8,pc}
;;;270    
                          ENDP

00004a  0000              DCW      0x0000
                  |L7.76|
                          DCD      GUI_Context

                          AREA ||i.GUI_FillCircle||, CODE, READONLY, ALIGN=2

                  GUI_FillCircle PROC
;;;137    */
;;;138    void GUI_FillCircle(int x0, int y0, int r) {
000000  b570              PUSH     {r4-r6,lr}
000002  4616              MOV      r6,r2
;;;139      GUI_LOCK();
;;;140      #if (GUI_WINSUPPORT)
;;;141        WM_ADDORG(x0,y0);
000004  4a09              LDR      r2,|L8.44|
000006  6c53              LDR      r3,[r2,#0x44]  ; GUI_Context
000008  181c              ADDS     r4,r3,r0
00000a  6c90              LDR      r0,[r2,#0x48]  ; GUI_Context
00000c  1845              ADDS     r5,r0,r1
;;;142        WM_ITERATE_START(NULL); {
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       WM__InitIVRSearch
000014  e006              B        |L8.36|
                  |L8.22|
;;;143      #endif
;;;144      GL_FillCircle(x0,y0,r);
000016  4632              MOV      r2,r6
000018  4629              MOV      r1,r5
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       GL_FillCircle
;;;145      #if (GUI_WINSUPPORT)
;;;146        } WM_ITERATE_END();
000020  f7fffffe          BL       WM__GetNextIVR
                  |L8.36|
000024  2800              CMP      r0,#0
000026  d1f6              BNE      |L8.22|
;;;147      #endif
;;;148      GUI_UNLOCK();
;;;149    }
000028  bd70              POP      {r4-r6,pc}
;;;150    
                          ENDP

00002a  0000              DCW      0x0000
                  |L8.44|
                          DCD      GUI_Context

                          AREA ||i.GUI_FillEllipse||, CODE, READONLY, ALIGN=2

                  GUI_FillEllipse PROC
;;;196    */
;;;197    void GUI_FillEllipse(int x0, int y0, int rx, int ry) {
000000  e92d41fc          PUSH     {r2-r8,lr}
000004  4617              MOV      r7,r2
;;;198      #if (GUI_WINSUPPORT)
;;;199        GUI_RECT r;
;;;200      #endif
;;;201      GUI_LOCK();
;;;202      #if (GUI_WINSUPPORT)
;;;203        WM_ADDORG(x0,y0);
000006  4a11              LDR      r2,|L9.76|
000008  461e              MOV      r6,r3                 ;197
00000a  6c53              LDR      r3,[r2,#0x44]  ; GUI_Context
00000c  181d              ADDS     r5,r3,r0
00000e  6c90              LDR      r0,[r2,#0x48]  ; GUI_Context
000010  1844              ADDS     r4,r0,r1
;;;204        /* Calc rectangle in order to avoid unnecessary drawing ops. */
;;;205        r.x0 = x0-rx; r.x1 = x0+rx; r.y0 = y0-ry; r.y1 = y0+ry;
000012  1be8              SUBS     r0,r5,r7
000014  f8ad0000          STRH     r0,[sp,#0]
000018  19e8              ADDS     r0,r5,r7
00001a  f8ad0004          STRH     r0,[sp,#4]
00001e  1ba0              SUBS     r0,r4,r6
000020  f8ad0002          STRH     r0,[sp,#2]
000024  19a0              ADDS     r0,r4,r6
000026  f8ad0006          STRH     r0,[sp,#6]
;;;206        WM_ITERATE_START(&r); {
00002a  4668              MOV      r0,sp
00002c  f7fffffe          BL       WM__InitIVRSearch
000030  e007              B        |L9.66|
                  |L9.50|
;;;207      #endif
;;;208      GL_FillEllipse (x0,y0, rx, ry);
000032  4633              MOV      r3,r6
000034  463a              MOV      r2,r7
000036  4621              MOV      r1,r4
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       GL_FillEllipse
;;;209      #if (GUI_WINSUPPORT)
;;;210        } WM_ITERATE_END();
00003e  f7fffffe          BL       WM__GetNextIVR
                  |L9.66|
000042  2800              CMP      r0,#0
000044  d1f5              BNE      |L9.50|
;;;211      #endif
;;;212      GUI_UNLOCK();
;;;213    }
000046  e8bd81fc          POP      {r2-r8,pc}
;;;214    
                          ENDP

00004a  0000              DCW      0x0000
                  |L9.76|
                          DCD      GUI_Context
