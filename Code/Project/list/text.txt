; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\text.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\text.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\Widget\TEXT.c]
                          THUMB

                          AREA ||i.TEXT_Callback||, CODE, READONLY, ALIGN=1

                  TEXT_Callback PROC
;;;159    */
;;;160    void TEXT_Callback (WM_MESSAGE*pMsg) {
000000  b57c              PUSH     {r2-r6,lr}
;;;161      TEXT_Handle hObj;
;;;162      TEXT_Obj * pObj;
;;;163      hObj = pMsg->hWin;
000002  f9b06004          LDRSH    r6,[r0,#4]
000006  4605              MOV      r5,r0                 ;160
;;;164      pObj = (TEXT_Obj *)GUI_ALLOC_h2p(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       GUI_ALLOC_h2p
00000e  4604              MOV      r4,r0
;;;165      /* Let widget handle the standard messages */
;;;166      if (WIDGET_HandleActive(hObj, pMsg) == 0) {
000010  4629              MOV      r1,r5
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       WIDGET_HandleActive
000018  2800              CMP      r0,#0
00001a  d028              BEQ      |L1.110|
;;;167        return;
;;;168      }
;;;169      switch (pMsg->MsgId) {
00001c  6828              LDR      r0,[r5,#0]
00001e  280b              CMP      r0,#0xb
000020  d026              BEQ      |L1.112|
000022  280f              CMP      r0,#0xf
000024  d128              BNE      |L1.120|
000026  6ae0              LDR      r0,[r4,#0x2c]
000028  f7fffffe          BL       LCD_SetColor
00002c  6aa0              LDR      r0,[r4,#0x28]
00002e  f7fffffe          BL       GUI_SetFont
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       WM_GetHasTrans
000038  b920              CBNZ     r0,|L1.68|
00003a  6b20              LDR      r0,[r4,#0x30]
00003c  f7fffffe          BL       LCD_SetBkColor
000040  f7fffffe          BL       GUI_Clear
                  |L1.68|
000044  f9b40038          LDRSH    r0,[r4,#0x38]
000048  2800              CMP      r0,#0
00004a  d010              BEQ      |L1.110|
00004c  f7fffffe          BL       GUI_ALLOC_h2p
000050  4605              MOV      r5,r0
000052  2002              MOVS     r0,#2
000054  f7fffffe          BL       GUI_SetTextMode
000058  4668              MOV      r0,sp
00005a  f7fffffe          BL       WM_GetClientRect
00005e  f8943034          LDRB     r3,[r4,#0x34]
000062  f9b4203a          LDRSH    r2,[r4,#0x3a]
000066  4669              MOV      r1,sp
000068  4628              MOV      r0,r5
00006a  f7fffffe          BL       GUI_DispStringInRectWrap
                  |L1.110|
;;;170      case WM_PAINT:
;;;171        GUI_DEBUG_LOG("TEXT: _Callback(WM_PAINT)\n");
;;;172        _Paint(hObj, pObj);
;;;173        return;
;;;174      case WM_DELETE:
;;;175        GUI_DEBUG_LOG("TEXT: _Callback(WM_DELETE)\n");
;;;176        _Delete(pObj);
;;;177        break;       /* No return here ... WM_DefaultProc needs to be called */
;;;178      }
;;;179      WM_DefaultProc(pMsg);
;;;180    }
00006e  bd7c              POP      {r2-r6,pc}
                  |L1.112|
000070  f1040038          ADD      r0,r4,#0x38
000074  f7fffffe          BL       GUI_ALLOC_FreePtr
                  |L1.120|
000078  4628              MOV      r0,r5                 ;179
00007a  e8bd407c          POP      {r2-r6,lr}            ;179
00007e  f7ffbffe          B.W      WM_DefaultProc
;;;181    
                          ENDP


                          AREA ||i.TEXT_CreateEx||, CODE, READONLY, ALIGN=2

                  TEXT_CreateEx PROC
;;;195    */
;;;196    TEXT_Handle TEXT_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent,
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;197                              int WinFlags, int ExFlags, int Id, const char* pText)
;;;198    {
000004  ae0d              ADD      r6,sp,#0x34
000006  4604              MOV      r4,r0
000008  e8960301          LDM      r6,{r0,r8,r9}
;;;199      TEXT_Handle hObj;
;;;200      /* Create the window */
;;;201      #if TEXT_SUPPORT_TRANSPARENCY
;;;202        WinFlags |= WM_CF_HASTRANS;
;;;203      #endif
;;;204      WM_LOCK();
;;;205      hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WinFlags, TEXT_Callback,
00000c  9d0c              LDR      r5,[sp,#0x30]
00000e  b280              UXTH     r0,r0                 ;202
000010  f0400001          ORR      r0,r0,#1
000014  9f10              LDR      r7,[sp,#0x40]
000016  f04f0c1c          MOV      r12,#0x1c
00001a  4e16              LDR      r6,|L2.116|
00001c  e9cd5000          STRD     r5,r0,[sp,#0]
000020  e9cd6c02          STRD     r6,r12,[sp,#8]
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       WM_CreateWindowAsChild
00002a  0006              MOVS     r6,r0
;;;206                                    sizeof(TEXT_Obj) - sizeof(WM_Obj));
;;;207      if (hObj) {
00002c  d01e              BEQ      |L2.108|
;;;208        TEXT_Obj* pObj;
;;;209        WM_HMEM hMem = 0;
00002e  2400              MOVS     r4,#0
;;;210        pObj = (TEXT_Obj *)GUI_ALLOC_h2p(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
000030  f7fffffe          BL       GUI_ALLOC_h2p
000034  4605              MOV      r5,r0
;;;211        /* init widget specific variables */
;;;212        WIDGET__Init(&pObj->Widget, Id, 0);
000036  2200              MOVS     r2,#0
000038  4649              MOV      r1,r9
00003a  f7fffffe          BL       WIDGET__Init
;;;213        /* init member variables */
;;;214        TEXT_INIT_ID(pObj);
;;;215        if (pText) {
00003e  b16f              CBZ      r7,|L2.92|
;;;216          hMem = GUI_ALLOC_AllocZero(strlen(pText) + 1);
000040  4638              MOV      r0,r7
000042  f7fffffe          BL       strlen
000046  1c40              ADDS     r0,r0,#1
000048  b200              SXTH     r0,r0
00004a  f7fffffe          BL       GUI_ALLOC_AllocZero
00004e  0004              MOVS     r4,r0
;;;217          if (hMem) {
000050  d004              BEQ      |L2.92|
;;;218            strcpy((char*) GUI_ALLOC_h2p(hMem), pText);
000052  f7fffffe          BL       GUI_ALLOC_h2p
000056  4639              MOV      r1,r7
000058  f7fffffe          BL       strcpy
                  |L2.92|
;;;219          }
;;;220        }
;;;221        pObj->hpText = hMem;
00005c  872c              STRH     r4,[r5,#0x38]
;;;222        pObj->Align  = ExFlags;
00005e  f8a5803a          STRH     r8,[r5,#0x3a]
;;;223        pObj->Props  = TEXT__DefaultProps;
000062  4b05              LDR      r3,|L2.120|
000064  3528              ADDS     r5,r5,#0x28
000066  cb0f              LDM      r3,{r0-r3}
000068  e885000f          STM      r5,{r0-r3}
                  |L2.108|
;;;224      } else {
;;;225        GUI_DEBUG_ERROROUT_IF(hObj==0, "TEXT_Create failed")
;;;226      }
;;;227      WM_UNLOCK();
;;;228      return hObj;
;;;229    }
00006c  b004              ADD      sp,sp,#0x10
00006e  4630              MOV      r0,r6                 ;228
000070  e8bd87f0          POP      {r4-r10,pc}
;;;230    
                          ENDP

                  |L2.116|
                          DCD      TEXT_Callback
                  |L2.120|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=2

                  TEXT__DefaultProps
                          DCD      GUI_Font13_1
                          DCD      0x00000000
                          DCD      0x0fffffff
00000c  00000000          DCB      0x00,0x00,0x00,0x00
