L 1 "..\GUI\ConvertColor\LCDPM565.c"
N/*
N*********************************************************************************************************
N*                                             uC/GUI V3.98
N*                        Universal graphic software for embedded applications
N*
N*                       (c) Copyright 2002, Micrium Inc., Weston, FL
N*                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
N*
N*              µC/GUI is protected by international copyright laws. Knowledge of the
N*              source code may not be used to write a similar product. This file may
N*              only be used in accordance with a license and should not be redistributed
N*              in any way. We appreciate your understanding and fairness.
N*
N----------------------------------------------------------------------
NFile        : LCDM565.C
NPurpose     : Color conversion routines
N---------------------------END-OF-HEADER------------------------------
N*/
N
N#include "LCD_Protected.h"    /* inter modul definitions */
L 1 "..\GUI\Core\LCD_Protected.h" 1
N/*
N*********************************************************************************************************
N*                                             uC/GUI V3.98
N*                        Universal graphic software for embedded applications
N*
N*                       (c) Copyright 2002, Micrium Inc., Weston, FL
N*                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
N*
N*              µC/GUI is protected by international copyright laws. Knowledge of the
N*              source code may not be used to write a similar product. This file may
N*              only be used in accordance with a license and should not be redistributed
N*              in any way. We appreciate your understanding and fairness.
N*
N----------------------------------------------------------------------
NFile        : LCD_Protected.h
NPurpose     : Internals of the LCD level
N----------------------------------------------------------------------
N*/
N
N#ifndef LCD_INTERN_H
N#define LCD_INTERN_H
N
N#include "LCD.h"
L 1 "..\GUI\Core\LCD.h" 1
N/*
N*********************************************************************************************************
N*                                             uC/GUI V3.98
N*                        Universal graphic software for embedded applications
N*
N*                       (c) Copyright 2002, Micrium Inc., Weston, FL
N*                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
N*
N*              µC/GUI is protected by international copyright laws. Knowledge of the
N*              source code may not be used to write a similar product. This file may
N*              only be used in accordance with a license and should not be redistributed
N*              in any way. We appreciate your understanding and fairness.
N*
N----------------------------------------------------------------------
NFile        : LCD.h
NPurpose     : Declares LCD interface functions
N----------------------------------------------------------------------
N*/
N
N#ifndef LCD_H
N#define LCD_H
N
N#include "GUI_ConfDefaults.h" /* Used for GUI_UNI_PTR */
L 1 "..\GUI\Core\GUI_ConfDefaults.h" 1
N/*
N*********************************************************************************************************
N*                                             uC/GUI V3.98
N*                        Universal graphic software for embedded applications
N*
N*                       (c) Copyright 2002, Micrium Inc., Weston, FL
N*                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
N*
N*              µC/GUI is protected by international copyright laws. Knowledge of the
N*              source code may not be used to write a similar product. This file may
N*              only be used in accordance with a license and should not be redistributed
N*              in any way. We appreciate your understanding and fairness.
N*
N----------------------------------------------------------------------
NFile        : GUI_ConfDefaults.h
NPurpose     : Defaults for GUI config switches.
N---------------------------END-OF-HEADER------------------------------
N
NAttention : Do not modify this file ! If you do, you will not
N            be able do update to a later GUI version !
N
N*/
N
N#ifndef  GUI_CONFDEFAULTS_H
N#define  GUI_CONFDEFAULTS_H
N
N#include "GUIConf.h"
L 1 "..\Config\GUIConf.h" 1
N/*
N*********************************************************************************************************
N*                                                uC/GUI
N*                        Universal graphic software for embedded applications
N*
N*                       (c) Copyright 2002, Micrium Inc., Weston, FL
N*                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
N*
N*              µC/GUI is protected by international copyright laws. Knowledge of the
N*              source code may not be used to write a similar product. This file may
N*              only be used in accordance with a license and should not be redistributed
N*              in any way. We appreciate your understanding and fairness.
N*
N----------------------------------------------------------------------
NFile        : GUIConf.h
NPurpose     : Configures abilities, fonts etc.
N----------------------------------------------------------------------
N*/
N
N
N#ifndef GUICONF_H
N#define GUICONF_H
N
N#define GUI_OS                    (0)  /* Compile with multitasking support */
N#define GUI_SUPPORT_TOUCH         (1)  /* Support a touch screen (req. win-manager) */
N#define GUI_SUPPORT_UNICODE       (1)  /* Support mixed ASCII/UNICODE strings */
N
N#define GUI_DEFAULT_FONT          &GUI_Font6x8
N#define GUI_ALLOC_SIZE          	(1024*30)  /* Size of dynamic memory ... For WM and memory devices*/
N/*********************************************************************
N*
N*         Configuration of available packages
N*/
N
N#define GUI_WINSUPPORT            1  /* Window manager package available */
N#define GUI_SUPPORT_MEMDEV       1  /* Memory devices available */
N#define GUI_SUPPORT_AA            1  /* Anti aliasing available */
N
N#endif  /* Avoid multiple inclusion */
N
N
N
L 28 "..\GUI\Core\GUI_ConfDefaults.h" 2
N
N/**********************************************************************
N*
N*       Defaults for config switches
N*
N***********************************************************************
N*/
N
N/* Define "universal pointer". Normally, this is not needed (define will expand to nothing)
N   However, on some systems (AVR - IAR compiler) it can be necessary ( -> __generic),
N   since a default pointer can access RAM only, not the built-in Flash
N*/
N#ifndef GUI_UNI_PTR
N  #define GUI_UNI_PTR
N  #define GUI_UNI_PTR_USED 0
N#else
S  #define GUI_UNI_PTR_USED 1
N#endif
N
N/* Define const storage. Normally, this is not needed (define will expand to const)
N   However, on some systems (AVR - IAR compiler) it can be necessary ( -> __flash const),
N   since otherwise constants are copied into RAM
N*/
N#ifndef GUI_USE_MEMDEV_1BPP_FOR_SCREEN
N  #define GUI_USE_MEMDEV_1BPP_FOR_SCREEN 0
N#endif
N
N#ifndef GUI_SUPPORT_UNICODE
S  #define GUI_SUPPORT_UNICODE 1
N#endif
N
N#ifndef GUI_SUPPORT_ARABIC
N  #define GUI_SUPPORT_ARABIC 0
N#endif
N
N#ifndef GUI_ALLOC_SIZE
S  #define GUI_ALLOC_SIZE      1000
N#endif
N
N#ifndef GUI_MAXBLOCKS
N  #define GUI_MAXBLOCKS (2 + GUI_ALLOC_SIZE / 32)
N#endif
N
N#ifndef GUI_CONST_STORAGE
N  #define GUI_CONST_STORAGE const
N#endif
N
N#ifndef GUI_SUPPORT_TOUCH
S  #define GUI_SUPPORT_TOUCH   0
N#endif
N
N#ifndef GUI_SUPPORT_MOUSE
N  #define GUI_SUPPORT_MOUSE   0
N#endif
N
N#ifndef GUI_SUPPORT_MEMDEV
S  #define GUI_SUPPORT_MEMDEV  0
N#endif
N
N#ifndef GUI_SUPPORT_AA
S  #define GUI_SUPPORT_AA      0
N#endif
N
N#ifndef GUI_OS
S  #define GUI_OS              0
N#endif
N
N#ifndef GUI_SUPPORT_LARGE_BITMAPS
N  #if GUI_ALLOC_SIZE > 65535
X  #if (1024*30) > 65535
S    #define GUI_SUPPORT_LARGE_BITMAPS 1
N  #else
N    #define GUI_SUPPORT_LARGE_BITMAPS 0
N  #endif
N#endif
N
N#ifndef GUI_COMPATIBLE_MODE
N  #define GUI_COMPATIBLE_MODE 1
N#endif
N
N#ifndef GUI_NUM_LAYERS
N  #define GUI_NUM_LAYERS      1
N#endif
N
N#ifndef GUI_SUPPORT_CURSOR
N  #define GUI_SUPPORT_CURSOR  (GUI_SUPPORT_MOUSE | GUI_SUPPORT_TOUCH)
N#endif
N
N#ifndef GUI_SUPPORT_DEVICES
N  #ifdef __C51__               /* Keil C51 limitation ... Indirect function calls are limited */
S    #define GUI_SUPPORT_DEVICES 0
N  #else
N    #define GUI_SUPPORT_DEVICES (GUI_SUPPORT_MEMDEV | (GUI_NUM_LAYERS > 1))
N  #endif
N#endif
N
N/* Some compilers for very simple chips can not generate code for function pointers
Nwith parameters. In this case, we do not use function pointers, but limit the functionality slightly */
N#ifndef GUI_COMPILER_SUPPORTS_FP
N  #ifdef __C51__
S    #define GUI_COMPILER_SUPPORTS_FP 0
N  #else
N    #define GUI_COMPILER_SUPPORTS_FP 1
N  #endif
N#endif
N
N#ifndef GUI_SUPPORT_ROTATION
N  #if GUI_COMPILER_SUPPORTS_FP
X  #if 1
N    #define GUI_SUPPORT_ROTATION 1
N  #else
S    #define GUI_SUPPORT_ROTATION 0
N  #endif
N#endif
N
N/* In order to avoid warnings for undefined parameters */
N#ifndef GUI_USE_PARA
N  #if defined (__BORLANDC__) || defined(NC30) || defined(NC308)
X  #if 0L || 0L || 0L
S    #define GUI_USE_PARA(para)
N  #else
N    #define GUI_USE_PARA(para) para=para;
N  #endif
N#endif
N
N/* Default for types */
N#ifndef GUI_TIMER_TIME
N  #define GUI_TIMER_TIME int  /* default is to use 16 bits for 16 bit CPUs,
N	                           32 bits on 32 bit CPUs for timing */
N#endif
N
N/* Types used for memory allocation */
N#if GUI_ALLOC_SIZE <32767
X#if (1024*30) <32767
N  #define GUI_ALLOC_DATATYPE   I16
N  #define GUI_ALLOC_DATATYPE_U U16
N#else
S  #define GUI_ALLOC_DATATYPE   I32
S  #define GUI_ALLOC_DATATYPE_U U32
N#endif
N
N#ifndef   GUI_MEMSET
N  #define GUI_MEMSET GUI__memset
N#endif
N
N
N#endif   /* ifdef GUI_CONFDEFAULTS_H */
N/*************************** End of file ****************************/
N	 	 			 		    	 				 	  			   	 	 	 	 	 	  	  	      	   		 	 	 		  		  	 		 	  	  			     			       	   	 			  		    	 	     	 				  	 					 	 			   	  	  			 				 		 	 	 			     			 
L 24 "..\GUI\Core\LCD.h" 2
N
N#if defined(__cplusplus)
X#if 0L
Sextern "C" {     /* Make sure we have C-declarations in C++ programs */
N#endif
N
N/*
N  ********************************************************************
N  *                                                                  *
N  *                   Basic type defines                             *
N  *                                                                  *
N  ********************************************************************
N
NThe follwing are defines for types used in the LCD-driver and the
NGUI layers on top of that. Since "C" does not provide data types of
Nfixed length which are identical on all platforms, this is done here.
NFor most 16/32 controllers, the settings will work fine. However, if
Nyou have similar defines in other sections of your program, you might
Nwant to change or relocate these defines, e.g. in a TYPE.h file.
N*/
N 
N#define I8    signed char
N#define U8  unsigned char     /* unsigned 8  bits. */
N#define I16   signed short    /*   signed 16 bits. */
N#define U16 unsigned short    /* unsigned 16 bits. */
N#define I32   signed long   /*   signed 32 bits. */
N#define U32 unsigned long   /* unsigned 32 bits. */
N#define I16P I16              /*   signed 16 bits OR MORE ! */
N#define U16P U16              /* unsigned 16 bits OR MORE ! */
N
N/*
N  ********************************************************************
N  *                                                                  *
N  *               Settings for windows simulation                    *
N  *                                                                  *
N  ********************************************************************
N
NSome settings in the configuration may conflict with the values required
Nin the Simulation. This is why we ignore the target settings for data
Ntypes and use the correct settings for the simulation.
N(U32 could be defined as long, which would yield a 64 bit type on
Nthe PC)
N*/
N
N#ifdef WIN32
S  #pragma warning( disable : 4244 )  // Disable warning messages in simulation
S  #pragma warning( disable : 4761 )  // Disable warning "integral size mismatch in argument; conversion supplied"
N#endif                                      
N
N
N/*      *************************************************************
N        *                                                           *
N        *                Constants                                  *
N        *                                                           *
N        *************************************************************
N*/
N#define LCD_ERR0 (0x10)
N#define LCD_ERR_CONTROLLER_NOT_FOUND (LCD_ERR0+1)
N#define LCD_ERR_MEMORY               (LCD_ERR0+2)
N
N/*
N      *********************************
N      *                               *
N      *      Drawing modes            *
N      *                               *
N      *********************************
N*/
N
N#define LCD_DRAWMODE_NORMAL (0)
N#define LCD_DRAWMODE_XOR    (1<<0)
N#define LCD_DRAWMODE_TRANS  (1<<1)
N#define LCD_DRAWMODE_REV    (1<<2)
N
N
N 
N/*      *************************************************************
N        *                                                           *
N        *                Typedefs                                   *
N        *                                                           *
N        *************************************************************
N*/
N
Ntypedef int LCD_DRAWMODE;
Ntypedef U32 LCD_COLOR;
Xtypedef unsigned long LCD_COLOR;
N
N 
N/********************************************************
N*
N*     Data structures
N*
N*********************************************************
N*/
N
Ntypedef struct { I16P x,y; } GUI_POINT;
Xtypedef struct { signed short x,y; } GUI_POINT;
Ntypedef struct { I16 x0,y0,x1,y1; } LCD_RECT;
Xtypedef struct { signed short x0,y0,x1,y1; } LCD_RECT;
N/*typedef struct { GUI_POINT P0, P1; } LCD_RECT; */
N
Ntypedef struct {
N  int              NumEntries; 
N  char             HasTrans;         
N  const LCD_COLOR GUI_UNI_PTR * pPalEntries; 
X  const LCD_COLOR  * pPalEntries; 
N} LCD_LOGPALETTE; 
N
N/* This is used for the simulation only ! */
Ntypedef struct {
N  int x,y;
N  unsigned char KeyStat;
N} LCD_tMouseState;
N
N/*********************************************************************
N*
N*     Index2Color
N
N  This function needs to be int the public part of the software
N  since it is needed by the simulation. Most other driver
N  functions are hidden in the private header file.
N*/
N
Ntypedef LCD_COLOR      tLCDDEV_Index2Color  (int Index);
Ntypedef unsigned int   tLCDDEV_Color2Index  (LCD_COLOR Color);
Ntypedef unsigned int   tLCDDEV_GetIndexMask (void);
NLCD_COLOR      LCD_L0_Index2Color  (int Index);
NLCD_COLOR      LCD_L0_1_Index2Color(int Index);
NLCD_COLOR      LCD_L0_2_Index2Color(int Index);
NLCD_COLOR      LCD_L0_3_Index2Color(int Index);
NLCD_COLOR      LCD_L0_4_Index2Color(int Index);
Nunsigned int   LCD_L0_Color2Index  (LCD_COLOR Color);
Nunsigned int   LCD_L0_1_Color2Index(LCD_COLOR Color);
Nunsigned int   LCD_L0_2_Color2Index(LCD_COLOR Color);
Nunsigned int   LCD_L0_3_Color2Index(LCD_COLOR Color);
Nunsigned int   LCD_L0_4_Color2Index(LCD_COLOR Color);
Nunsigned int   LCD_L0_GetIndexMask  (void);
Nunsigned int   LCD_L0_1_GetIndexMask(void);
Nunsigned int   LCD_L0_2_GetIndexMask(void);
Nunsigned int   LCD_L0_3_GetIndexMask(void);
Nunsigned int   LCD_L0_4_GetIndexMask(void);
N
N
N/*********************************************************************
N*
N*     Color conversion API tables
N*/
N
Ntypedef struct {
N  tLCDDEV_Color2Index*  pfColor2Index;
N  tLCDDEV_Index2Color*  pfIndex2Color;
N  tLCDDEV_GetIndexMask* pfGetIndexMask;
N} LCD_API_COLOR_CONV;
N
Nextern const LCD_API_COLOR_CONV LCD_API_ColorConv_1;
Nextern const LCD_API_COLOR_CONV LCD_API_ColorConv_2;
Nextern const LCD_API_COLOR_CONV LCD_API_ColorConv_4;
Nextern const LCD_API_COLOR_CONV LCD_API_ColorConv_8666;
N
N#define GUI_COLOR_CONV_1    &LCD_API_ColorConv_1
N#define GUI_COLOR_CONV_2    &LCD_API_ColorConv_2
N#define GUI_COLOR_CONV_4    &LCD_API_ColorConv_4
N#define GUI_COLOR_CONV_8666 &LCD_API_ColorConv_8666
N
N/*********************************************************************
N*
N*      LCDDEV function table
N*
N**********************************************************************
N
N  Below the routines which need to in an LCDDEV routine table are
N  defined. All of these routines have to be in the low-level driver
N  (LCD_L0) or in the memory device which can be used to replace the
N  driver.
N  The one exception to this is the SetClipRect routine, which would
N  be identical for all drivers and is therefor contained in the
N  level above (LCD).
N*/
Ntypedef void         tLCDDEV_DrawHLine    (int x0, int y0,  int x1);
Ntypedef void         tLCDDEV_DrawVLine    (int x , int y0,  int y1);
Ntypedef void         tLCDDEV_FillRect     (int x0, int y0, int x1, int y1);
Ntypedef unsigned int tLCDDEV_GetPixelIndex(int x, int y);
Ntypedef void         tLCDDEV_SetPixelIndex(int x, int y, int ColorIndex);
Ntypedef void         tLCDDEV_XorPixel     (int x, int y);
Ntypedef void         tLCDDEV_FillPolygon  (const GUI_POINT* pPoints, int NumPoints, int x0, int y0);
Ntypedef void         tLCDDEV_FillPolygonAA(const GUI_POINT* pPoints, int NumPoints, int x0, int y0);
Ntypedef void         tLCDDEV_GetRect      (LCD_RECT*pRect);
Ntypedef int          tLCDDEV_Init         (void);
Ntypedef void         tLCDDEV_On           (void);
Ntypedef void         tLCDDEV_Off          (void);
Ntypedef void         tLCDDEV_SetLUTEntry  (U8 Pos, LCD_COLOR color);
Xtypedef void         tLCDDEV_SetLUTEntry  (unsigned char Pos, LCD_COLOR color);
Ntypedef void *       tLCDDEV_GetDevFunc   (int Index);
N
N/*********************************************************************
N*
N*     Memory device API tables
N*/
N#if GUI_COMPILER_SUPPORTS_FP
X#if 1
N  typedef struct tLCDDEV_APIList_struct tLCDDEV_APIList;
N#endif
N
Ntypedef void tLCDDEV_DrawBitmap   (int x0, int y0, int xsize, int ysize,
N                       int BitsPerPixel, int BytesPerLine,
N                       const U8 GUI_UNI_PTR * pData, int Diff,
X                       const unsigned char  * pData, int Diff,
N                       const void* pTrans);   /* Really LCD_PIXELINDEX, but is void to avoid compiler warnings*/
N
Nstruct tLCDDEV_APIList_struct {
N  tLCDDEV_Color2Index*        pfColor2Index;
N  tLCDDEV_Index2Color*        pfIndex2Color;
N  tLCDDEV_GetIndexMask*       pfGetIndexMask;
N  tLCDDEV_DrawBitmap*         pfDrawBitmap;
N  tLCDDEV_DrawHLine*          pfDrawHLine;
N  tLCDDEV_DrawVLine*          pfDrawVLine;
N  tLCDDEV_FillRect*           pfFillRect;
N  tLCDDEV_GetPixelIndex*      pfGetPixelIndex;
N  tLCDDEV_GetRect*            pfGetRect;
N  tLCDDEV_SetPixelIndex*      pfSetPixelIndex;
N  tLCDDEV_XorPixel*           pfXorPixel;
N  tLCDDEV_SetLUTEntry*        pfSetLUTEntry;
N  tLCDDEV_GetDevFunc*         pfGetDevFunc;
N  #if GUI_SUPPORT_MEMDEV
X  #if 1
N    tLCDDEV_FillPolygon*      pfFillPolygon;
N    tLCDDEV_FillPolygonAA*    pfFillPolygonAA;
N    const tLCDDEV_APIList*    pMemDevAPI;
N    unsigned                  BitsPerPixel;
N  #endif
N};
N#if GUI_COMPILER_SUPPORTS_FP
X#if 1
N  extern const struct tLCDDEV_APIList_struct GUI_MEMDEV__APIList1;
N  extern const struct tLCDDEV_APIList_struct GUI_MEMDEV__APIList8;
N  extern const struct tLCDDEV_APIList_struct GUI_MEMDEV__APIList16;
N
N  #define GUI_MEMDEV_APILIST_1  &GUI_MEMDEV__APIList1
N  #define GUI_MEMDEV_APILIST_8  &GUI_MEMDEV__APIList8
N  #define GUI_MEMDEV_APILIST_16 &GUI_MEMDEV__APIList16
N#endif
N
N/*      *************************************************************
N        *                                                           *
N        *                   Defines                                 *
N        *                                                           *
N        *    for device capabilities                                *
N        *                                                           *
N        *************************************************************
N
NThe following is the list of device capabilities which can, but do
Nnot have to be implemented in the driver. This way the driver can be
Nenhanced in the future without affecting the driver interface,
Nkeeping older drivers compatible.
NMore DevCaps can always be added in the future, as older drivers
Nare guaranteed to return 0 for all unimplemented features or queries.
N
NThe values below define the legal parameters to the LCD_GetDeviceCaps
Nand the LCD_GetpCapFunc routines.
N*/
N
N#define LCD_DEVCAP_NUMCOLORS    0x0     /* Quest number of colors
N                                           which LCD can display */
N#define LCD_DEVCAP_XSIZE        0x1     /* Quest horiz. res. of display */
N#define LCD_DEVCAP_YSIZE        0x2     /* Quest vert. res. of display */
N#define LCD_DEVCAP_VXSIZE       0x3     /* Quest vert. res. of virtual disp.*/
N#define LCD_DEVCAP_VYSIZE       0x4     /* Quest vert. res. of virtual disp.*/
N#define LCD_DEVCAP_XORG         0x5     /* X-origin ... usually 0 */
N#define LCD_DEVCAP_YORG         0x6     /* Y-origin ... usually 0 */
N#define LCD_DEVCAP_CONTROLLER   0x7     /* LCD Controller (Numerical) */
N#define LCD_DEVCAP_BITSPERPIXEL 0x8     /* Bits per pixel ... 1/2/4/8 */
N#define LCD_DEVCAP_NUMPAGES     0x10    /* Quest number of pages of display */
N
N#define LCD_DEVCAP_COLOR        0x1000  /* Quest Color[0]
N                                0x1001     Quest Color[1]
N                                0x1002     Quest Color[2]
N                                         ...                    */
N /* The next 4095 entries are reserved so up to 4096 colors
N    can be queried          ...*/
N
Nint LCD_GetXSize(void);
Nint LCD_GetXSize_1(void);
Nint LCD_GetXSizeEx(int Index);
N
Nint LCD_GetYSize(void);
Nint LCD_GetYSize_1(void);
Nint LCD_GetYSizeEx(int Index);
N
Nint LCD_GetVXSize(void);
Nint LCD_GetVXSize_1(void);
Nint LCD_GetVXSizeEx(int Index);
N
Nint LCD_GetVYSize(void);
Nint LCD_GetVYSize_1(void);
Nint LCD_GetVYSizeEx(int Index);
N
NU32 LCD_GetNumColors(void);
Xunsigned long LCD_GetNumColors(void);
NU32 LCD_GetNumColors_1(void);
Xunsigned long LCD_GetNumColors_1(void);
NU32 LCD_GetNumColorsEx(int Index);
Xunsigned long LCD_GetNumColorsEx(int Index);
N
Nint LCD_GetBitsPerPixel(void);
Nint LCD_GetBitsPerPixel_1(void);
Nint LCD_GetBitsPerPixelEx(int Index);
N
Nint LCD_GetFixedPalette(void);
Nint LCD_GetFixedPalette_1(void);
NI32 LCD_GetFixedPaletteEx(int Index);
Xsigned long LCD_GetFixedPaletteEx(int Index);
N
Nint LCD_GetXMag(void);
Nint LCD_GetXMag_1(void);
Nint LCD_GetXMagEx(int Index);
N
Nint LCD_GetYMag(void);
Nint LCD_GetYMag_1(void);
Nint LCD_GetYMagEx(int Index);
N
Nint LCD_GetMirrorXEx(int LayerIndex);
Nint LCD_GetMirrorYEx(int LayerIndex);
Nint LCD_GetSwapXYEx(int LayerIndex);
N
Nint LCD_GetSwapRBEx(int LayerIndex);
Nint LCD_GetDeltaModeEx(int LayerIndex);
Nint LCD_GetBitsPerPixel_L0Ex(int LayerIndex);
N
NtLCDDEV_Index2Color * LCD_GetpfIndex2ColorEx(int LayerIndex);
N
Nint LCD_GetNumLayers(void);
N
N#define LCD_GetNumDisplays() LCD_GetNumLayers()
N
N#define LCD_GET_XSIZE()        LCD_GetXSize()
N#define LCD_GET_YSIZE()        LCD_GetYSize()
N#define LCD_GET_VXSIZE()       LCD_GetVXSize()
N#define LCD_GET_VYSIZE()       LCD_GetVYSize()
N#define LCD_GET_NUMCOLORS()    LCD_GetNumColors()
N#define LCD_GET_BITSPERPIXEL() LCD_GetBitsPerPixel()
N
N#define LCD_DEVFUNC_READRECT  0x1     /* Request of a function pointer for reading a rectangular display area */
N
Nvoid * LCD_L0_GetDevFunc(int Index);
N
N/*********************************************************************
N*
N*      LCD_CLIP function table
N*
N**********************************************************************
N*/
Ntypedef void         tLCD_HL_DrawHLine    (int x0, int y0,  int x1);
Ntypedef void         tLCD_HL_DrawPixel    (int x0, int y0);
N
Ntypedef struct {
N  tLCD_HL_DrawHLine*          pfDrawHLine;
N  tLCD_HL_DrawPixel*          pfDrawPixel;
N} tLCD_HL_APIList;
N
Nvoid LCD_DrawHLine(int x0, int y0,  int x1);
Nvoid LCD_DrawPixel(int x0, int y0);
Nvoid LCD_DrawVLine  (int x, int y0,  int y1);
N
N
N
N/*********************************************************************
N*
N*              Declarations for LCD_
N*
N**********************************************************************
N*/
N
Nvoid LCD_SetClipRectEx(const LCD_RECT* pRect);
Nvoid LCD_SetClipRectMax(void);
N
N/* Get device capabilities (0 if not supported) */
NI32  LCD_GetDevCap(int Index);
Xsigned long  LCD_GetDevCap(int Index);
N
N/* Initialize LCD using config-paramters */
Nint LCD_Init(void);
N
Nvoid LCD_SetBkColor   (LCD_COLOR Color); /* Set background color */
Nvoid LCD_SetColor     (LCD_COLOR Color); /* Set foreground color */
Nvoid LCD_SetPixelIndex(int x, int y, int ColorIndex);
N
N/* Palette routines (Not available on all drivers) */
Nvoid LCD_InitLUT(void);
N
N/* Decompressors */
N//typedef void tfDrawSpecialBitmap(int x0,int y0,int xsize, int ysize, const U8 GUI_UNI_PTR *pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag);
Nvoid         LCD_DrawBitmap_RLE8(int x0,int y0,int xsize, int ysize, const U8 GUI_UNI_PTR *pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag);
Xvoid         LCD_DrawBitmap_RLE8(int x0,int y0,int xsize, int ysize, const unsigned char  *pPixel, const LCD_LOGPALETTE  * pLogPal, int xMag, int yMag);
Nvoid         LCD_DrawBitmap_RLE4(int x0,int y0,int xsize, int ysize, const U8 GUI_UNI_PTR *pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag);
Xvoid         LCD_DrawBitmap_RLE4(int x0,int y0,int xsize, int ysize, const unsigned char  *pPixel, const LCD_LOGPALETTE  * pLogPal, int xMag, int yMag);
Nvoid         LCD_DrawBitmap_565 (int x0,int y0,int xsize, int ysize, const U8 GUI_UNI_PTR *pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag);
Xvoid         LCD_DrawBitmap_565 (int x0,int y0,int xsize, int ysize, const unsigned char  *pPixel, const LCD_LOGPALETTE  * pLogPal, int xMag, int yMag);
Nvoid         LCD_DrawBitmap_M565(int x0,int y0,int xsize, int ysize, const U8 GUI_UNI_PTR *pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag);
Xvoid         LCD_DrawBitmap_M565(int x0,int y0,int xsize, int ysize, const unsigned char  *pPixel, const LCD_LOGPALETTE  * pLogPal, int xMag, int yMag);
N
NLCD_DRAWMODE LCD_SetDrawMode  (LCD_DRAWMODE dm);
Nvoid LCD_SetColorIndex(int Index);
Nvoid LCD_SetBkColorIndex(int Index);
Nvoid LCD_FillRect(int x0, int y0, int x1, int y1);
Ntypedef void tLCD_SetPixelAA(int x, int y, U8 Intens);
Xtypedef void tLCD_SetPixelAA(int x, int y, unsigned char Intens);
N
Nvoid LCD_SetPixelAA(int x, int y, U8 Intens);
Xvoid LCD_SetPixelAA(int x, int y, unsigned char Intens);
Nvoid LCD_SetPixelAA_NoTrans(int x, int y, U8 Intens);
Xvoid LCD_SetPixelAA_NoTrans(int x, int y, unsigned char Intens);
N
NLCD_COLOR    LCD_AA_MixColors(LCD_COLOR Color, LCD_COLOR BkColor, U8 Intens);
XLCD_COLOR    LCD_AA_MixColors(LCD_COLOR Color, LCD_COLOR BkColor, unsigned char Intens);
NLCD_COLOR    LCD_MixColors256(LCD_COLOR Color, LCD_COLOR BkColor, unsigned Intens);
NLCD_COLOR    LCD_GetPixelColor(int x, int y);     /* Get RGB color of pixel */
Nunsigned int LCD_GetPixelIndex(int x, int y);
Nint          LCD_GetBkColorIndex (void);
Nint          LCD_GetColorIndex (void);
N
N/*********************************************************************
N*
N*       Optional support for rotatation
N*
N**********************************************************************
N*/
N
N#if GUI_SUPPORT_ROTATION
X#if 1
N
Ntypedef void tLCD_DrawBitmap(int x0, int y0, int xsize, int ysize,
N                             int xMul, int yMul, int BitsPerPixel, int BytesPerLine,
N                             const U8 GUI_UNI_PTR * pPixel, const void * pTrans);
X                             const unsigned char  * pPixel, const void * pTrans);
Ntypedef void tRect2TextRect (LCD_RECT * pRect);
N
Nstruct tLCD_APIList_struct {
N  tLCD_DrawBitmap   * pfDrawBitmap;
N  tRect2TextRect    * pfRect2TextRect;
N};
N
Ntypedef struct tLCD_APIList_struct tLCD_APIList;
N
Nextern tLCD_APIList LCD_APIListCCW;
Nextern tLCD_APIList LCD_APIListCW;
Nextern tLCD_APIList LCD_APIList180;
N
N#define GUI_ROTATION   tLCD_APIList
N#define GUI_ROTATE_CCW &LCD_APIListCCW
N#define GUI_ROTATE_CW  &LCD_APIListCW
N#define GUI_ROTATE_180 &LCD_APIList180
N#define GUI_ROTATE_0   0
N#endif
N
N
N/*      *************************************************************
N        *                                                           *
N        *      LCD  publics not used by GUI                         *
N        *                                                           *
N        *************************************************************
N  
N
NThe following functions can, but do not have to be defined in the LCD driver
Nas they are not used by the GUI level.
N
N*/
N
N
N
N#define LCD_On          LCD_L0_On
N#define LCD_Off         LCD_L0_Off
N#define LCD_ReInit      LCD_L0_ReInit
N#define LCD_SetLUTEntry LCD_L0_SetLUTEntry
N
N
N#define LCD_CC_UNLOCK (0)    /* Default mode: Cache is transparent */
N#define LCD_CC_LOCK   (1)    /* Cache is locked, no write operations */
N#define LCD_CC_FLUSH  (2)    /* Flush cache, do not change mode */
NU8 LCD_L0_ControlCache(U8 mode);
Xunsigned char LCD_L0_ControlCache(unsigned char mode);
NU8 LCD_L0_1_ControlCache(U8 mode);
Xunsigned char LCD_L0_1_ControlCache(unsigned char mode);
NU8 LCD_L0_2_ControlCache(U8 mode);
Xunsigned char LCD_L0_2_ControlCache(unsigned char mode);
NU8 LCD_L0_3_ControlCache(U8 mode);
Xunsigned char LCD_L0_3_ControlCache(unsigned char mode);
NU8 LCD_L0_4_ControlCache(U8 mode);
Xunsigned char LCD_L0_4_ControlCache(unsigned char mode);
Nvoid LCD_L0_Refresh(void);
Nvoid LCD_L0_1_Refresh(void);
Nvoid LCD_L0_2_Refresh(void);
Nvoid LCD_L0_3_Refresh(void);
Nvoid LCD_L0_4_Refresh(void);
N/* Check if controller is still properly initialized */
Nint  LCD_L0_CheckInit(void);        /* returns if init is still O.K.
N                                      by reading all available registers of
N                                      Display controller.
N                                      0: Init O.K.
N                                    */
N
N#define LCD_ControlCache LCD_L0_ControlCache
N
N/*
N        ******************************************
N        *                                        *
N        *        Support for paging              *
N        *                                        *
N        ******************************************
N*/
N
Nint LCD_SelPage  (int NewPage);    /* returns formerly sel. page */
Nint LCD_ShowPage (int NewPage);    /* sets / returns visible page */
Nint LCD_GetSelPage (void);         /* returns selected page */
Nint LCD_GetVisPage (void);         /* returns visible page */
N
N
N/*      *************************************************************
N        *                                                           *
N        *      LCD  imports                                         *
N        *                  (for routines in LCDColor)               *
N        *                                                           *
N        *************************************************************
N*/
N  
N
Nint              LCD_Color2Index     (LCD_COLOR Color);
NLCD_COLOR        LCD_Index2Color     (int Index);
NLCD_COLOR        LCD_Index2ColorEx   (int i, unsigned int LayerIndex);
N
N/*********************************************************************
N*
N*       LCD_X_...
N*
N**********************************************************************
N*/
N
Nvoid LCD_X_Init(void);
Nvoid LCD_X_On  (void);
Nvoid LCD_X_Off (void);
N
Nchar LCD_X_Read00(void);
Nchar LCD_X_Read01(void);
Nvoid LCD_X_Write00(char c);
Nvoid LCD_X_Write01(char c);
Nvoid LCD_X_WriteM01(char * pData, int NumBytes);
N
N#if defined(__cplusplus)
X#if 0L
S  }
N#endif
N
N#endif /* LCD_H */
N
N/*************************** End of file ****************************/
N	 	 			 		    	 				 	  			   	 	 	 	 	 	  	  	      	   		 	 	 		  		  	 		 	  	  			     			       	   	 			  		    	 	     	 				  	 					 	 			   	  	  			 				 		 	 	 			     			 
L 24 "..\GUI\Core\LCD_Protected.h" 2
N
N/*********************************************************************
N*
N*      Data types
N*
N**********************************************************************
N*/
N
Ntypedef struct {
N  int              NumEntries; 
N  const LCD_COLOR* pPalEntries; 
N} LCD_PHYSPALETTE; 
N
N/*********************************************************************
N*
N*      Data
N*
N**********************************************************************
N*/
Nextern GUI_CONST_STORAGE U8 LCD_aMirror[256];
Xextern const unsigned char LCD_aMirror[256];
N
N
N/********************************************************
N*
N*     Color conversion routines (used internally only !
N*
N*********************************************************
N*/
Nunsigned LCD_Color2Index_User    (LCD_COLOR Color);
Nunsigned LCD_Color2Index_0       (LCD_COLOR Color, const LCD_PHYSPALETTE* pPhysPal);
Nunsigned LCD_Color2Index_1       (LCD_COLOR Color);
Nunsigned LCD_Color2Index_M1      (LCD_COLOR Color);
Nunsigned LCD_Color2Index_2       (LCD_COLOR Color);
Nunsigned LCD_Color2Index_M2      (LCD_COLOR Color);
Nunsigned LCD_Color2Index_4       (LCD_COLOR Color);
Nunsigned LCD_Color2Index_M4      (LCD_COLOR Color);
Nunsigned LCD_Color2Index_111     (LCD_COLOR Color);
Nunsigned LCD_Color2Index_222     (LCD_COLOR Color);
Nunsigned LCD_Color2Index_233     (LCD_COLOR Color);
Nunsigned LCD_Color2Index_323     (LCD_COLOR Color);
Nunsigned LCD_Color2Index_332     (LCD_COLOR Color);
Nunsigned LCD_Color2Index_444_12  (LCD_COLOR Color);
Nunsigned LCD_Color2Index_444_12_1(LCD_COLOR Color);
Nunsigned LCD_Color2Index_444_16  (LCD_COLOR Color);
Nunsigned LCD_Color2Index_555     (LCD_COLOR Color);
Nunsigned LCD_Color2Index_565     (LCD_COLOR Color);
Nunsigned LCD_Color2Index_556     (LCD_COLOR Color);
Nunsigned LCD_Color2Index_655     (LCD_COLOR Color);
Nunsigned LCD_Color2Index_666     (LCD_COLOR Color);
Nunsigned LCD_Color2Index_8666    (LCD_COLOR Color);
Nunsigned LCD_Color2Index_8666_1  (LCD_COLOR Color);
Nunsigned LCD_Color2Index_888     (LCD_COLOR Color);
Nunsigned LCD_Color2Index_M888    (LCD_COLOR Color);
Nunsigned LCD_Color2Index_M111    (LCD_COLOR Color);
Nunsigned LCD_Color2Index_M222    (LCD_COLOR Color);
Nunsigned LCD_Color2Index_M233    (LCD_COLOR Color);
Nunsigned LCD_Color2Index_M323    (LCD_COLOR Color);
Nunsigned LCD_Color2Index_M332    (LCD_COLOR Color);
Nunsigned LCD_Color2Index_M444_12 (LCD_COLOR Color);
Nunsigned LCD_Color2Index_M444_16 (LCD_COLOR Color);
Nunsigned LCD_Color2Index_M555    (LCD_COLOR Color);
Nunsigned LCD_Color2Index_M565    (LCD_COLOR Color);
Nunsigned LCD_Color2Index_M556    (LCD_COLOR Color);
Nunsigned LCD_Color2Index_M655    (LCD_COLOR Color);
Nunsigned LCD_Color2Index_M666    (LCD_COLOR Color);
N
NLCD_COLOR LCD_Index2Color_User    (int Index);
NLCD_COLOR LCD_Index2Color_0       (int Index, const LCD_PHYSPALETTE* pPhysPal);
NLCD_COLOR LCD_Index2Color_1       (int Index);
NLCD_COLOR LCD_Index2Color_2       (int Index);
NLCD_COLOR LCD_Index2Color_4       (int Index);
NLCD_COLOR LCD_Index2Color_111     (int Index);
NLCD_COLOR LCD_Index2Color_222     (int Index);
NLCD_COLOR LCD_Index2Color_233     (int Index);
NLCD_COLOR LCD_Index2Color_323     (int Index);
NLCD_COLOR LCD_Index2Color_332     (int Index);
NLCD_COLOR LCD_Index2Color_444_12  (int Index);
NLCD_COLOR LCD_Index2Color_444_12_1(int Index);
NLCD_COLOR LCD_Index2Color_444_16  (int Index);
NLCD_COLOR LCD_Index2Color_555     (int Index);
NLCD_COLOR LCD_Index2Color_565     (int Index);
NLCD_COLOR LCD_Index2Color_556     (int Index);
NLCD_COLOR LCD_Index2Color_655     (int Index);
NLCD_COLOR LCD_Index2Color_666     (int Index);
NLCD_COLOR LCD_Index2Color_8666    (int Index);
NLCD_COLOR LCD_Index2Color_8666_1  (int Index);
NLCD_COLOR LCD_Index2Color_888     (int Index);
NLCD_COLOR LCD_Index2Color_M888    (int Index);
NLCD_COLOR LCD_Index2Color_M111    (int Index);
NLCD_COLOR LCD_Index2Color_M222    (int Index);
NLCD_COLOR LCD_Index2Color_M233    (int Index);
NLCD_COLOR LCD_Index2Color_M323    (int Index);
NLCD_COLOR LCD_Index2Color_M332    (int Index);
NLCD_COLOR LCD_Index2Color_M444_12 (int Index);
NLCD_COLOR LCD_Index2Color_M444_16 (int Index);
NLCD_COLOR LCD_Index2Color_M555    (int Index);
NLCD_COLOR LCD_Index2Color_M565    (int Index);
NLCD_COLOR LCD_Index2Color_M556    (int Index);
NLCD_COLOR LCD_Index2Color_M655    (int Index);
NLCD_COLOR LCD_Index2Color_M666    (int Index);
N
Nunsigned LCD_GetIndexMask_User    (void);
Nunsigned LCD_GetIndexMask_0       (void);
Nunsigned LCD_GetIndexMask_1       (void);
Nunsigned LCD_GetIndexMask_M1      (void);
Nunsigned LCD_GetIndexMask_2       (void);
Nunsigned LCD_GetIndexMask_M2      (void);
Nunsigned LCD_GetIndexMask_4       (void);
Nunsigned LCD_GetIndexMask_M4      (void);
Nunsigned LCD_GetIndexMask_111     (void);
Nunsigned LCD_GetIndexMask_222     (void);
Nunsigned LCD_GetIndexMask_233     (void);
Nunsigned LCD_GetIndexMask_323     (void);
Nunsigned LCD_GetIndexMask_332     (void);
Nunsigned LCD_GetIndexMask_444_12  (void);
Nunsigned LCD_GetIndexMask_444_12_1(void);
Nunsigned LCD_GetIndexMask_444_16  (void);
Nunsigned LCD_GetIndexMask_555     (void);
Nunsigned LCD_GetIndexMask_565     (void);
Nunsigned LCD_GetIndexMask_556     (void);
Nunsigned LCD_GetIndexMask_655     (void);
Nunsigned LCD_GetIndexMask_666     (void);
Nunsigned LCD_GetIndexMask_8666    (void);
Nunsigned LCD_GetIndexMask_8666_1  (void);
Nunsigned LCD_GetIndexMask_888     (void);
Nunsigned LCD_GetIndexMask_M888    (void);
Nunsigned LCD_GetIndexMask_M111    (void);
Nunsigned LCD_GetIndexMask_M222    (void);
Nunsigned LCD_GetIndexMask_M233    (void);
Nunsigned LCD_GetIndexMask_M323    (void);
Nunsigned LCD_GetIndexMask_M332    (void);
Nunsigned LCD_GetIndexMask_M444_12 (void);
Nunsigned LCD_GetIndexMask_M444_16 (void);
Nunsigned LCD_GetIndexMask_M555    (void);
Nunsigned LCD_GetIndexMask_M565    (void);
Nunsigned LCD_GetIndexMask_M556    (void);
Nunsigned LCD_GetIndexMask_M655    (void);
Nunsigned LCD_GetIndexMask_M666    (void);
N
Nvoid LCD_SelectLCD(void);
N
N/*********************************************************************
N*
N*              Declarations for LCD_L0_
N*
N**********************************************************************
N
N  Prefixes are as follows:
N  LCD_L0_xxx       ... Driver for first  LCD
N  LCD_L0_1_xxx     ... Driver for second LCD/layer
N  LCD_L0_2_xxx     ... Driver for third  LCD/layer
N  LCD_L0_MAG_xxx   ... Driver for first  LCD, magnification level (calling LCD_L0_xxx after magnification)
N  LCD_L0_DELTA_xxx ... Driver for first  LCD, delta mode
N
N*/
N
Nunsigned int LCD_L0_Color2Index       (LCD_COLOR Color);
Nunsigned int LCD_L0_1_Color2Index     (LCD_COLOR Color);
Nunsigned int LCD_L0_2_Color2Index     (LCD_COLOR Color);
Nunsigned int LCD_L0_3_Color2Index     (LCD_COLOR Color);
Nunsigned int LCD_L0_4_Color2Index     (LCD_COLOR Color);
Nvoid         LCD_L0_DrawHLine         (int x0, int y0,  int x1);
Nvoid         LCD_L0_1_DrawHLine       (int x0, int y0,  int x1);
Nvoid         LCD_L0_2_DrawHLine       (int x0, int y0,  int x1);
Nvoid         LCD_L0_3_DrawHLine       (int x0, int y0,  int x1);
Nvoid         LCD_L0_4_DrawHLine       (int x0, int y0,  int x1);
Nvoid         LCD_L0_MAG_DrawHLine     (int x0, int y0,  int x1);
Nvoid         LCD_L0_DELTA_DrawHLine     (int x0, int y0,  int x1);
Nvoid         LCD_L0_DrawVLine         (int x,  int y0,  int y1);
Nvoid         LCD_L0_1_DrawVLine       (int x,  int y0,  int y1);
Nvoid         LCD_L0_2_DrawVLine       (int x,  int y0,  int y1);
Nvoid         LCD_L0_3_DrawVLine       (int x,  int y0,  int y1);
Nvoid         LCD_L0_4_DrawVLine       (int x,  int y0,  int y1);
Nvoid         LCD_L0_MAG_DrawVLine     (int x,  int y0,  int y1);
Nvoid         LCD_L0_DELTA_DrawVLine     (int x,  int y0,  int y1);
Nvoid         LCD_L0_FillRect          (int x0, int y0, int x1, int y1);
Nvoid         LCD_L0_1_FillRect        (int x0, int y0, int x1, int y1);
Nvoid         LCD_L0_2_FillRect        (int x0, int y0, int x1, int y1);
Nvoid         LCD_L0_3_FillRect        (int x0, int y0, int x1, int y1);
Nvoid         LCD_L0_4_FillRect        (int x0, int y0, int x1, int y1);
Nvoid         LCD_L0_MAG_FillRect      (int x0, int y0, int x1, int y1);
Nvoid         LCD_L0_DELTA_FillRect      (int x0, int y0, int x1, int y1);
Nunsigned int LCD_L0_GetPixelIndex     (int x,  int y);
Nunsigned int LCD_L0_1_GetPixelIndex   (int x,  int y);
Nunsigned int LCD_L0_2_GetPixelIndex   (int x,  int y);
Nunsigned int LCD_L0_3_GetPixelIndex   (int x,  int y);
Nunsigned int LCD_L0_4_GetPixelIndex   (int x,  int y);
Nunsigned int LCD_L0_MAG_GetPixelIndex (int x,  int y);
Nunsigned int LCD_L0_DELTA_GetPixelIndex (int x,  int y);
Nvoid         LCD_L0_GetRect           (LCD_RECT * pRect);
Nvoid         LCD_L0_1_GetRect         (LCD_RECT * pRect);
Nvoid         LCD_L0_2_GetRect         (LCD_RECT * pRect);
Nvoid         LCD_L0_3_GetRect         (LCD_RECT * pRect);
Nvoid         LCD_L0_4_GetRect         (LCD_RECT * pRect);
Nvoid         LCD_L0_SetPixelIndex     (int x,  int y, int ColorIndex);
Nvoid         LCD_L0_1_SetPixelIndex   (int x,  int y, int ColorIndex);
Nvoid         LCD_L0_2_SetPixelIndex   (int x,  int y, int ColorIndex);
Nvoid         LCD_L0_3_SetPixelIndex   (int x,  int y, int ColorIndex);
Nvoid         LCD_L0_4_SetPixelIndex   (int x,  int y, int ColorIndex);
Nvoid         LCD_L0_MAG_SetPixelIndex (int x,  int y, int ColorIndex);
Nvoid         LCD_L0_DELTA_SetPixelIndex (int x,  int y, int ColorIndex);
Nvoid         LCD_L0_XorPixel          (int x,  int y);
Nvoid         LCD_L0_1_XorPixel        (int x,  int y);
Nvoid         LCD_L0_2_XorPixel        (int x,  int y);
Nvoid         LCD_L0_3_XorPixel        (int x,  int y);
Nvoid         LCD_L0_4_XorPixel        (int x,  int y);
Nvoid         LCD_L0_MAG_XorPixel      (int x,  int y);
Nvoid         LCD_L0_DELTA_XorPixel      (int x,  int y);
Nint          LCD_L0_Init              (void);
Nint          LCD_L0_1_Init            (void);
Nint          LCD_L0_2_Init            (void);
Nint          LCD_L0_3_Init            (void);
Nint          LCD_L0_4_Init            (void);
Nint          LCD_L0_MAG_Init          (void);
Nint          LCD_L0_DELTA_Init          (void);
Nvoid         LCD_L0_On                (void);
Nvoid         LCD_L0_1_On              (void);
Nvoid         LCD_L0_2_On              (void);
Nvoid         LCD_L0_3_On              (void);
Nvoid         LCD_L0_4_On              (void);
Nvoid         LCD_L0_Off               (void);
Nvoid         LCD_L0_1_Off             (void);
Nvoid         LCD_L0_2_Off             (void);
Nvoid         LCD_L0_3_Off             (void);
Nvoid         LCD_L0_4_Off             (void);
Nvoid         LCD_L0_SetLUTEntry       (U8 Pos, LCD_COLOR color);
Xvoid         LCD_L0_SetLUTEntry       (unsigned char Pos, LCD_COLOR color);
Nvoid         LCD_L0_1_SetLUTEntry     (U8 Pos, LCD_COLOR color);
Xvoid         LCD_L0_1_SetLUTEntry     (unsigned char Pos, LCD_COLOR color);
Nvoid         LCD_L0_2_SetLUTEntry     (U8 Pos, LCD_COLOR color);
Xvoid         LCD_L0_2_SetLUTEntry     (unsigned char Pos, LCD_COLOR color);
Nvoid         LCD_L0_3_SetLUTEntry     (U8 Pos, LCD_COLOR color);
Xvoid         LCD_L0_3_SetLUTEntry     (unsigned char Pos, LCD_COLOR color);
Nvoid         LCD_L0_4_SetLUTEntry     (U8 Pos, LCD_COLOR color);
Xvoid         LCD_L0_4_SetLUTEntry     (unsigned char Pos, LCD_COLOR color);
Nvoid *       LCD_L0_GetDevFunc        (int Index);
Nvoid *       LCD_L0_1_GetDevFunc      (int Index);
Nvoid *       LCD_L0_2_GetDevFunc      (int Index);
Nvoid *       LCD_L0_3_GetDevFunc      (int Index);
Nvoid *       LCD_L0_4_GetDevFunc      (int Index);
NtLCDDEV_Index2Color * LCD_L0_GetpfIndex2Color(void);
NtLCDDEV_Index2Color * LCD_L0_1_GetpfIndex2Color(void);
NtLCDDEV_Index2Color * LCD_L0_2_GetpfIndex2Color(void);
NtLCDDEV_Index2Color * LCD_L0_3_GetpfIndex2Color(void);
NtLCDDEV_Index2Color * LCD_L0_4_GetpfIndex2Color(void);
N
Nvoid LCD_L0_ReInit       (void); /* Reinitialize LCD using config-paramters */
Nvoid LCD_L0_1_ReInit     (void);
Nvoid LCD_L0_2_ReInit     (void);
Nvoid LCD_L0_3_ReInit     (void);
Nvoid LCD_L0_4_ReInit     (void);
Nvoid LCD_L0_Refresh      (void); /* Refresh entire LCD */
N                                 /* Refresh LCD partially. Could be one line, depends on what
N                                    the LCD controller can handle efficiently */
Nvoid LCD_L0_1_Refresh    (void);
Nvoid LCD_L0_2_Refresh    (void);
Nvoid LCD_L0_3_Refresh    (void);
Nvoid LCD_L0_4_Refresh    (void);
Nvoid LCD_L0_SetOrg       (int x, int y);
Nvoid LCD_L0_1_SetOrg     (int x, int y);
Nvoid LCD_L0_2_SetOrg     (int x, int y);
Nvoid LCD_L0_3_SetOrg     (int x, int y);
Nvoid LCD_L0_4_SetOrg     (int x, int y);
N
N
N#endif /* LCD_INTERN_H */
N
N
N
N/*************************** End of file ****************************/
N	 	 			 		    	 				 	  			   	 	 	 	 	 	  	  	      	   		 	 	 		  		  	 		 	  	  			     			       	   	 			  		    	 	     	 				  	 					 	 			   	  	  			 				 		 	 	 			     			 
L 21 "..\GUI\ConvertColor\LCDPM565.c" 2
N
N/*********************************************************************
N*
N*       Defines
N*
N**********************************************************************
N*/
N
N#define B_BITS 5
N#define G_BITS 6
N#define R_BITS 5
N
N#define R_MASK ((1 << R_BITS) -1)
N#define G_MASK ((1 << G_BITS) -1)
N#define B_MASK ((1 << B_BITS) -1)
N
N/*********************************************************************
N*
N*       Public code,
N*
N*       LCD_FIXEDPALETTE == 565, 65536 colors, RRRRRGGGGGGBBBBB
N*
N**********************************************************************
N*/
N/*********************************************************************
N*
N*       LCD_Color2Index_M565
N*/
Nunsigned LCD_Color2Index_M565(LCD_COLOR Color) {
N  int r,g,b;
N  r = (Color>> (8  - R_BITS)) & R_MASK;
X  r = (Color>> (8  - 5)) & ((1 << 5) -1);
N  g = (Color>> (16 - G_BITS)) & G_MASK;
X  g = (Color>> (16 - 6)) & ((1 << 6) -1);
N  b = (Color>> (24 - B_BITS)) & B_MASK;
X  b = (Color>> (24 - 5)) & ((1 << 5) -1);
N  return b + (g << B_BITS) + (r << (G_BITS + B_BITS));
X  return b + (g << 5) + (r << (6 + 5));
N}
N
N/*********************************************************************
N*
N*       LCD_GetIndexMask_M565
N*/
Nunsigned LCD_GetIndexMask_M565(void) {
N  return 0xffff;
N}
N
N/*************************** End of file ****************************/
N	 	 			 		    	 				 	  			   	 	 	 	 	 	  	  	      	   		 	 	 		  		  	 		 	  	  			     			       	   	 			  		    	 	     	 				  	 					 	 			   	  	  			 				 		 	 	 			     			 
