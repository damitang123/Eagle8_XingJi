; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\gui_bmp.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui_bmp.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\Core\GUI_BMP.c]
                          THUMB

                          AREA ||i.GUI_BMP_Draw||, CODE, READONLY, ALIGN=2

                  GUI_BMP_Draw PROC
;;;144    */
;;;145    int GUI_BMP_Draw(const void * pBMP, int x0, int y0) {
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
000004  b086              SUB      sp,sp,#0x18
000006  468b              MOV      r11,r1
;;;146      #if (GUI_WINSUPPORT)
;;;147        GUI_RECT r;
;;;148      #endif
;;;149      int Ret = 0;
;;;150      I32 Width, Height;
;;;151      U16 BitCount, Type;
;;;152      U32 ClrUsed, Compression;
;;;153      int NumColors;
;;;154      const U8 * pSrc = (const U8 *)pBMP;
;;;155      Type        = GUI__Read16(&pSrc); /* get type from BITMAPFILEHEADER */
000008  9003              STR      r0,[sp,#0xc]
00000a  2700              MOVS     r7,#0                 ;149
00000c  a803              ADD      r0,sp,#0xc
00000e  f7fffffe          BL       GUI__Read16
000012  4682              MOV      r10,r0
;;;156      pSrc += 12;                   /* skip rest of BITMAPFILEHEADER */
000014  9803              LDR      r0,[sp,#0xc]
000016  3010              ADDS     r0,r0,#0x10
;;;157      /* get values from BITMAPINFOHEADER */
;;;158      pSrc += 4;
;;;159      Width       = GUI__Read32(&pSrc);
000018  9003              STR      r0,[sp,#0xc]
00001a  a803              ADD      r0,sp,#0xc
00001c  f7fffffe          BL       GUI__Read32
000020  4680              MOV      r8,r0
;;;160      Height      = GUI__Read32(&pSrc);
000022  a803              ADD      r0,sp,#0xc
000024  f7fffffe          BL       GUI__Read32
000028  4605              MOV      r5,r0
;;;161      pSrc += 2;
00002a  9803              LDR      r0,[sp,#0xc]
00002c  1c80              ADDS     r0,r0,#2
;;;162      BitCount    = GUI__Read16(&pSrc);
00002e  9003              STR      r0,[sp,#0xc]
000030  a803              ADD      r0,sp,#0xc
000032  f7fffffe          BL       GUI__Read16
000036  4606              MOV      r6,r0
;;;163      Compression = GUI__Read32(&pSrc);
000038  a803              ADD      r0,sp,#0xc
00003a  f7fffffe          BL       GUI__Read32
00003e  4681              MOV      r9,r0
;;;164      pSrc += 12;
000040  9803              LDR      r0,[sp,#0xc]
000042  300c              ADDS     r0,r0,#0xc
;;;165      ClrUsed     = GUI__Read32(&pSrc);
000044  9003              STR      r0,[sp,#0xc]
000046  a803              ADD      r0,sp,#0xc
000048  f7fffffe          BL       GUI__Read32
;;;166      pSrc += 4;
00004c  9903              LDR      r1,[sp,#0xc]
00004e  1d09              ADDS     r1,r1,#4
;;;167      /* calculate number of colors */
;;;168      switch (BitCount) {
;;;169        case 0:   return 1; /* biBitCount = 0 (JPEG format) not supported. Please convert image ! */
;;;170        case 1:   NumColors = 2;   break;
;;;171        case 4:   NumColors = 16;  break;
;;;172        case 8:   NumColors = 256; break;
000050  9103              STR      r1,[sp,#0xc]
000052  f44f7180          MOV      r1,#0x100
000056  2e04              CMP      r6,#4                 ;168
000058  d00b              BEQ      |L1.114|
00005a  dc03              BGT      |L1.100|
00005c  b306              CBZ      r6,|L1.160|
00005e  2e01              CMP      r6,#1                 ;168
000060  d11e              BNE      |L1.160|
000062  e004              B        |L1.110|
                  |L1.100|
000064  2e08              CMP      r6,#8                 ;168
000066  d006              BEQ      |L1.118|
000068  2e18              CMP      r6,#0x18              ;168
00006a  d119              BNE      |L1.160|
00006c  e010              B        |L1.144|
                  |L1.110|
00006e  2402              MOVS     r4,#2                 ;170
000070  e002              B        |L1.120|
                  |L1.114|
000072  2410              MOVS     r4,#0x10              ;171
000074  e000              B        |L1.120|
                  |L1.118|
000076  460c              MOV      r4,r1
                  |L1.120|
;;;173        case 24:  NumColors = 0;   break;
;;;174        default:
;;;175          return 1; /* biBitCount should be 1, 4, 8 or 24 */
;;;176      }
;;;177      if (NumColors && ClrUsed) {
000078  b100              CBZ      r0,|L1.124|
;;;178        NumColors = ClrUsed;
00007a  4604              MOV      r4,r0
                  |L1.124|
;;;179      }
;;;180      /* check validity of bmp */
;;;181      if ((NumColors > LCD_MAX_LOG_COLORS) ||
00007c  428c              CMP      r4,r1
00007e  dc0f              BGT      |L1.160|
                  |L1.128|
;;;182          (Type != 0x4d42)                 || /* 'BM' */
000080  f5aa419a          SUB      r1,r10,#0x4d00
000084  3942              SUBS     r1,r1,#0x42
000086  d10b              BNE      |L1.160|
;;;183          (Compression)                    || /* only uncompressed bitmaps */
000088  f1b90f00          CMP      r9,#0
00008c  d108              BNE      |L1.160|
00008e  e001              B        |L1.148|
                  |L1.144|
000090  2400              MOVS     r4,#0                 ;173
000092  e7f5              B        |L1.128|
                  |L1.148|
;;;184          (Width  > 1024)                  ||
000094  f44f6180          MOV      r1,#0x400
000098  4588              CMP      r8,r1
00009a  dc01              BGT      |L1.160|
;;;185          (Height > 1024)) {
00009c  428d              CMP      r5,r1
00009e  dd03              BLE      |L1.168|
                  |L1.160|
;;;186        return 1;
0000a0  2001              MOVS     r0,#1
                  |L1.162|
;;;187      }
;;;188      /* start output */
;;;189      GUI_LOCK();
;;;190      #if (GUI_WINSUPPORT)
;;;191        WM_ADDORG(x0,y0);
;;;192        r.x1 = (r.x0 = x0) + Width - 1;
;;;193        r.y1 = (r.y0 = y0) + Height - 1;
;;;194        WM_ITERATE_START(&r) {
;;;195      #endif
;;;196      /* Show bitmap */
;;;197      switch (BitCount) {
;;;198        case 1:
;;;199        case 4:
;;;200        case 8:
;;;201          Ret = _DrawBitmap_Pal(pSrc, x0, y0, Width, Height, BitCount, NumColors);
;;;202          break;
;;;203        case 24:
;;;204          Ret = _DrawBitmap_24bpp(pSrc, x0, y0, Width, Height);
;;;205          break;
;;;206      }
;;;207      #if (GUI_WINSUPPORT)
;;;208        } WM_ITERATE_END();
;;;209      #endif
;;;210      GUI_UNLOCK();
;;;211      return Ret;
;;;212    }
0000a2  b009              ADD      sp,sp,#0x24
0000a4  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.168|
0000a8  491d              LDR      r1,|L1.288|
0000aa  9808              LDR      r0,[sp,#0x20]         ;191
0000ac  6c4a              LDR      r2,[r1,#0x44]         ;191  ; GUI_Context
0000ae  6c89              LDR      r1,[r1,#0x48]         ;191  ; GUI_Context
0000b0  eb020a0b          ADD      r10,r2,r11            ;191
0000b4  eb010900          ADD      r9,r1,r0              ;191
0000b8  eb0a0008          ADD      r0,r10,r8             ;192
0000bc  1e40              SUBS     r0,r0,#1              ;192
0000be  f8ad0014          STRH     r0,[sp,#0x14]         ;192
0000c2  eb090005          ADD      r0,r9,r5              ;193
0000c6  1e40              SUBS     r0,r0,#1              ;193
0000c8  f8ada010          STRH     r10,[sp,#0x10]        ;192
0000cc  f8ad0016          STRH     r0,[sp,#0x16]         ;193
0000d0  f8ad9012          STRH     r9,[sp,#0x12]         ;193
0000d4  a804              ADD      r0,sp,#0x10           ;194
0000d6  f7fffffe          BL       WM__InitIVRSearch
0000da  e01c              B        |L1.278|
                  |L1.220|
0000dc  2e01              CMP      r6,#1                 ;197
0000de  d006              BEQ      |L1.238|
0000e0  2e04              CMP      r6,#4                 ;197
0000e2  d004              BEQ      |L1.238|
0000e4  2e08              CMP      r6,#8                 ;197
0000e6  d002              BEQ      |L1.238|
0000e8  2e18              CMP      r6,#0x18              ;197
0000ea  d112              BNE      |L1.274|
0000ec  e009              B        |L1.258|
                  |L1.238|
0000ee  9500              STR      r5,[sp,#0]            ;201
0000f0  e9cd6401          STRD     r6,r4,[sp,#4]         ;201
0000f4  4643              MOV      r3,r8                 ;201
0000f6  464a              MOV      r2,r9                 ;201
0000f8  4651              MOV      r1,r10                ;201
0000fa  9803              LDR      r0,[sp,#0xc]          ;201
0000fc  f7fffffe          BL       _DrawBitmap_Pal
000100  e006              B        |L1.272|
                  |L1.258|
000102  4643              MOV      r3,r8                 ;204
000104  464a              MOV      r2,r9                 ;204
000106  4651              MOV      r1,r10                ;204
000108  9500              STR      r5,[sp,#0]            ;204
00010a  9803              LDR      r0,[sp,#0xc]          ;204
00010c  f7fffffe          BL       _DrawBitmap_24bpp
                  |L1.272|
000110  4607              MOV      r7,r0                 ;201
                  |L1.274|
000112  f7fffffe          BL       WM__GetNextIVR
                  |L1.278|
000116  2800              CMP      r0,#0                 ;208
000118  d1e0              BNE      |L1.220|
00011a  4638              MOV      r0,r7                 ;211
00011c  e7c1              B        |L1.162|
;;;213    
                          ENDP

00011e  0000              DCW      0x0000
                  |L1.288|
                          DCD      GUI_Context

                          AREA ||i.GUI_BMP_GetXSize||, CODE, READONLY, ALIGN=1

                  GUI_BMP_GetXSize PROC
;;;118    */
;;;119    int GUI_BMP_GetXSize(const void * pBMP) {
000000  b508              PUSH     {r3,lr}
000002  2800              CMP      r0,#0
000004  9000              STR      r0,[sp,#0]
000006  d004              BEQ      |L2.18|
000008  3012              ADDS     r0,r0,#0x12
;;;120      const U8 * pSrc = (const U8 *)pBMP;
;;;121      if (!pBMP) {
;;;122        return 0;
;;;123      }
;;;124      pSrc += 18;                   /* skip rest of BITMAPFILEHEADER */
;;;125      return GUI__Read32(&pSrc);
00000a  9000              STR      r0,[sp,#0]
00000c  4668              MOV      r0,sp
00000e  f7fffffe          BL       GUI__Read32
                  |L2.18|
;;;126    }
000012  bd08              POP      {r3,pc}
;;;127    
                          ENDP


                          AREA ||i.GUI_BMP_GetYSize||, CODE, READONLY, ALIGN=1

                  GUI_BMP_GetYSize PROC
;;;131    */
;;;132    int GUI_BMP_GetYSize(const void * pBMP) {
000000  b508              PUSH     {r3,lr}
000002  2800              CMP      r0,#0
000004  9000              STR      r0,[sp,#0]
000006  d007              BEQ      |L3.24|
000008  3016              ADDS     r0,r0,#0x16
;;;133      const U8 * pSrc = (const U8 *)pBMP;
;;;134      if (!pBMP) {
;;;135        return 0;
;;;136      }
;;;137      pSrc += 22;
;;;138      return labs((int)GUI__Read32(&pSrc));
00000a  9000              STR      r0,[sp,#0]
00000c  4668              MOV      r0,sp
00000e  f7fffffe          BL       GUI__Read32
000012  2800              CMP      r0,#0
000014  da00              BGE      |L3.24|
000016  4240              RSBS     r0,r0,#0
                  |L3.24|
;;;139    }
000018  bd08              POP      {r3,pc}
;;;140    
                          ENDP


                          AREA ||i._DrawBitmap_24bpp||, CODE, READONLY, ALIGN=2

                  _DrawBitmap_24bpp PROC
;;;87     */
;;;88     static int _DrawBitmap_24bpp(const U8 * pData, int x0, int y0, int XSize, int YSize) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4689              MOV      r9,r1
000006  4606              MOV      r6,r0
000008  461f              MOV      r7,r3
00000a  4690              MOV      r8,r2
;;;89       int x, y, BytesPerLine, Step;
;;;90       Step = _GetStep(&YSize, &y);
00000c  4669              MOV      r1,sp
00000e  a80a              ADD      r0,sp,#0x28
000010  f7fffffe          BL       _GetStep
000014  0005              MOVS     r5,r0
;;;91       if (!Step) {
000016  d009              BEQ      |L4.44|
;;;92         return 1;
;;;93       }
;;;94       BytesPerLine = ((24 * XSize + 31) >> 5) << 2;
000018  eb070047          ADD      r0,r7,r7,LSL #1
00001c  211f              MOVS     r1,#0x1f
00001e  eb0100c0          ADD      r0,r1,r0,LSL #3
000022  1140              ASRS     r0,r0,#5
000024  ea4f0a80          LSL      r10,r0,#2
;;;95       for (; (y < YSize) && (y >= 0); y += Step) {
000028  9800              LDR      r0,[sp,#0]
00002a  e01f              B        |L4.108|
                  |L4.44|
00002c  2001              MOVS     r0,#1                 ;92
                  |L4.46|
;;;96         for (x = 0; x < XSize; x++) {
;;;97           const U8 * pColor = pData + 3 * x;
;;;98           U8 r, g, b;
;;;99           b = *(pColor);
;;;100          g = *(pColor + 1);
;;;101          r = *(pColor + 2);
;;;102          LCD_SetPixelIndex(x0 + x, y0 + y, LCD_Color2Index(((U32)b << 16) | (g << 8) | r));
;;;103        }
;;;104        pData += BytesPerLine;
;;;105      }
;;;106      return 0;
;;;107    }
00002e  e8bd8ff8          POP      {r3-r11,pc}
                  |L4.50|
000032  2400              MOVS     r4,#0                 ;96
000034  e014              B        |L4.96|
000036  bf00              NOP                            ;97
                  |L4.56|
000038  eb040044          ADD      r0,r4,r4,LSL #1       ;97
00003c  4430              ADD      r0,r0,r6              ;97
00003e  7803              LDRB     r3,[r0,#0]            ;99
000040  7842              LDRB     r2,[r0,#1]            ;100
000042  7881              LDRB     r1,[r0,#2]            ;101
000044  0418              LSLS     r0,r3,#16             ;102
000046  ea402002          ORR      r0,r0,r2,LSL #8       ;102
00004a  4308              ORRS     r0,r0,r1              ;102
00004c  f7fffffe          BL       LCD_Color2Index
000050  9900              LDR      r1,[sp,#0]            ;102
000052  4602              MOV      r2,r0                 ;102
000054  4441              ADD      r1,r1,r8              ;102
000056  eb090004          ADD      r0,r9,r4              ;102
00005a  f7fffffe          BL       LCD_SetPixelIndex
00005e  1c64              ADDS     r4,r4,#1              ;102
                  |L4.96|
000060  42bc              CMP      r4,r7                 ;96
000062  dbe9              BLT      |L4.56|
000064  9800              LDR      r0,[sp,#0]            ;95
000066  4456              ADD      r6,r6,r10             ;104
000068  4428              ADD      r0,r0,r5              ;95
00006a  9000              STR      r0,[sp,#0]            ;95
                  |L4.108|
00006c  990a              LDR      r1,[sp,#0x28]         ;95
00006e  4288              CMP      r0,r1                 ;95
000070  da01              BGE      |L4.118|
000072  2800              CMP      r0,#0                 ;95
000074  dadd              BGE      |L4.50|
                  |L4.118|
000076  2000              MOVS     r0,#0                 ;106
000078  e7d9              B        |L4.46|
;;;108    
                          ENDP


                          AREA ||i._DrawBitmap_Pal||, CODE, READONLY, ALIGN=2

                  _DrawBitmap_Pal PROC
;;;50     */
;;;51     static int _DrawBitmap_Pal(const U8 * pData, int x0, int y0, int XSize, int YSize, int Bpp, int NumColors) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
000008  e9ddb915          LDRD     r11,r9,[sp,#0x54]
00000c  461d              MOV      r5,r3
;;;52       int i, y, Step;
;;;53       int BytesPerLine = 0;
00000e  2700              MOVS     r7,#0
;;;54       Step = _GetStep(&YSize, &y);
000010  a906              ADD      r1,sp,#0x18
000012  a814              ADD      r0,sp,#0x50
000014  f7fffffe          BL       _GetStep
000018  ea5f0800          MOVS     r8,r0
;;;55       if (!Step) {
00001c  d003              BEQ      |L5.38|
;;;56         return 1;
;;;57       }
;;;58       for (i = 0; i < NumColors; i++) {
00001e  2600              MOVS     r6,#0
;;;59         U8 r, g, b;
;;;60         b = *(pData);
;;;61         g = *(pData + 1);
;;;62         r = *(pData + 2);
;;;63         pData += 4;
;;;64         LCD__aConvTable[i] = LCD_Color2Index(((U32)b << 16) | (g << 8) | r);
000020  f8dfa094          LDR      r10,|L5.184|
000024  e013              B        |L5.78|
                  |L5.38|
000026  2001              MOVS     r0,#1                 ;56
                  |L5.40|
;;;65       }
;;;66       switch (Bpp) {
;;;67         case 1:
;;;68           BytesPerLine = ((XSize + 31) >> 5) << 2;
;;;69           break;
;;;70         case 4:
;;;71           BytesPerLine = (((XSize << 2) + 31) >> 5) << 2;
;;;72           break;
;;;73         case 8:
;;;74           BytesPerLine = ((XSize +  3) >> 2) << 2;
;;;75           break;
;;;76       }
;;;77       for (; (y < YSize) && (y >= 0); y += Step) {
;;;78         LCD_DrawBitmap(x0, y0 + y, XSize, 1, 1, 1, Bpp, XSize, pData, LCD__aConvTable);
;;;79         pData += BytesPerLine;
;;;80       }
;;;81       return 0;
;;;82     }
000028  b00b              ADD      sp,sp,#0x2c
00002a  e8bd8ff0          POP      {r4-r11,pc}
00002e  bf00              NOP                            ;60
                  |L5.48|
000030  f8141b01          LDRB     r1,[r4],#1            ;60
000034  f8140b01          LDRB     r0,[r4],#1            ;61
000038  0409              LSLS     r1,r1,#16             ;64
00003a  f8142b02          LDRB     r2,[r4],#2            ;62
00003e  ea412000          ORR      r0,r1,r0,LSL #8       ;64
000042  4310              ORRS     r0,r0,r2              ;64
000044  f7fffffe          BL       LCD_Color2Index
000048  f82a0016          STRH     r0,[r10,r6,LSL #1]    ;64
00004c  1c76              ADDS     r6,r6,#1              ;64
                  |L5.78|
00004e  454e              CMP      r6,r9                 ;58
000050  dbee              BLT      |L5.48|
000052  4658              MOV      r0,r11                ;66
000054  f1bb0f01          CMP      r11,#1                ;66
000058  d005              BEQ      |L5.102|
00005a  2804              CMP      r0,#4                 ;66
00005c  d006              BEQ      |L5.108|
00005e  f1bb0f08          CMP      r11,#8                ;66
000062  d10c              BNE      |L5.126|
000064  e008              B        |L5.120|
                  |L5.102|
000066  f105001f          ADD      r0,r5,#0x1f           ;68
00006a  e002              B        |L5.114|
                  |L5.108|
00006c  201f              MOVS     r0,#0x1f              ;71
00006e  eb000085          ADD      r0,r0,r5,LSL #2       ;71
                  |L5.114|
000072  1140              ASRS     r0,r0,#5              ;68
000074  0087              LSLS     r7,r0,#2              ;68
000076  e002              B        |L5.126|
                  |L5.120|
000078  1ce8              ADDS     r0,r5,#3              ;74
00007a  f0200703          BIC      r7,r0,#3              ;74
                  |L5.126|
00007e  9806              LDR      r0,[sp,#0x18]         ;77
000080  2601              MOVS     r6,#1                 ;56
                  |L5.130|
000082  9914              LDR      r1,[sp,#0x50]         ;77
000084  4288              CMP      r0,r1                 ;77
000086  da15              BGE      |L5.180|
000088  2800              CMP      r0,#0                 ;77
00008a  db13              BLT      |L5.180|
00008c  f8cda014          STR      r10,[sp,#0x14]        ;78
000090  9600              STR      r6,[sp,#0]            ;78
000092  e9cd5403          STRD     r5,r4,[sp,#0xc]       ;78
000096  e9cd6b01          STRD     r6,r11,[sp,#4]        ;78
00009a  9909              LDR      r1,[sp,#0x24]         ;78
00009c  2301              MOVS     r3,#1                 ;78
00009e  4401              ADD      r1,r1,r0              ;78
0000a0  462a              MOV      r2,r5                 ;78
0000a2  9808              LDR      r0,[sp,#0x20]         ;78
0000a4  f7fffffe          BL       LCD_DrawBitmap
0000a8  9906              LDR      r1,[sp,#0x18]         ;77
0000aa  443c              ADD      r4,r4,r7              ;79
0000ac  eb010008          ADD      r0,r1,r8              ;77
0000b0  9006              STR      r0,[sp,#0x18]         ;77
0000b2  e7e6              B        |L5.130|
                  |L5.180|
0000b4  2000              MOVS     r0,#0                 ;81
0000b6  e7b7              B        |L5.40|
;;;83     
                          ENDP

                  |L5.184|
                          DCD      LCD__aConvTable

                          AREA ||i._GetStep||, CODE, READONLY, ALIGN=1

                  _GetStep PROC
;;;33     */
;;;34     static int _GetStep(int * pYSize, int * pY) {
000000  6802              LDR      r2,[r0,#0]
;;;35       if (*pYSize > 0) {
000002  2a00              CMP      r2,#0
000004  dd05              BLE      |L6.18|
000006  f1a20201          SUB      r2,r2,#1
;;;36         *pY = *pYSize - 1;
;;;37         return -1;
00000a  f04f30ff          MOV      r0,#0xffffffff
00000e  600a              STR      r2,[r1,#0]
;;;38       } else if (*pYSize < 0) {
;;;39         *pYSize = -*pYSize;
;;;40         *pY = 0;
;;;41         return 1;
;;;42       } else {
;;;43         return 0;
;;;44       }
;;;45     }
000010  4770              BX       lr
                  |L6.18|
000012  da08              BGE      |L6.38|
000014  f1c20200          RSB      r2,r2,#0              ;39
000018  6002              STR      r2,[r0,#0]            ;40
00001a  f04f0000          MOV      r0,#0                 ;40
00001e  6008              STR      r0,[r1,#0]            ;41
000020  f04f0001          MOV      r0,#1                 ;41
000024  4770              BX       lr
                  |L6.38|
000026  f04f0000          MOV      r0,#0                 ;43
00002a  4770              BX       lr
;;;46     
                          ENDP

