; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\spi_flash_efficient_rw.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\spi_flash_efficient_rw.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\Board_Support_Package\spi_flash_efficient_rw.c]
                          THUMB

                          AREA ||i.Get_Suitable_BlockSize||, CODE, READONLY, ALIGN=1

                  Get_Suitable_BlockSize PROC
;;;19     
;;;20     static unsigned short Get_Suitable_BlockSize(unsigned short nSizeOfStruct)
000000  2101              MOVS     r1,#1
;;;21     {
;;;22     	int nSize = 1;
;;;23     	do
;;;24     	{
;;;25     		if(nSize >= nSizeOfStruct)
;;;26     		{
;;;27     			return nSize;
;;;28     		}
;;;29     		else
;;;30     		{
;;;31     			nSize <<= 1;
;;;32     		}
;;;33     	}
;;;34     	while(nSize <= FLASH_SECTOR_SIZE);
000002  030a              LSLS     r2,r1,#12
                  |L1.4|
000004  4281              CMP      r1,r0                 ;25
000006  db01              BLT      |L1.12|
000008  b288              UXTH     r0,r1                 ;27
;;;35     
;;;36     	return FLASH_SECTOR_SIZE; 
;;;37     }
00000a  4770              BX       lr
                  |L1.12|
00000c  0049              LSLS     r1,r1,#1              ;31
00000e  4291              CMP      r1,r2                 ;34
000010  ddf8              BLE      |L1.4|
000012  4610              MOV      r0,r2                 ;36
000014  4770              BX       lr
;;;38     
                          ENDP


                          AREA ||i.Spi_FLash_Load_User_Struct||, CODE, READONLY, ALIGN=1

                  Spi_FLash_Load_User_Struct PROC
;;;38     
;;;39     bool Spi_FLash_Load_User_Struct(unsigned char *pUserStruct, unsigned short nSizeOfStruct , unsigned short nStartSector)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;40     {
;;;41     	unsigned short nOffset;
;;;42     	unsigned long nStartAddr;
;;;43     	sFlashDataFlag sFlag;
;;;44     	unsigned short nBlockSize; 
;;;45     
;;;46     	if(nSizeOfStruct > FLASH_SECTOR_SIZE)
000004  f44f5880          MOV      r8,#0x1000
000008  4614              MOV      r4,r2                 ;40
00000a  4682              MOV      r10,r0                ;40
00000c  460d              MOV      r5,r1                 ;40
00000e  4541              CMP      r1,r8
000010  d81a              BHI      |L2.72|
;;;47     	{
;;;48     		TRACE_PRINTF("Size of data structures errors!\r\n");
;;;49     		return false;
;;;50     	}
;;;51     
;;;52     	nBlockSize = Get_Suitable_BlockSize(nSizeOfStruct);
000012  4608              MOV      r0,r1
000014  f7fffffe          BL       Get_Suitable_BlockSize
;;;53     
;;;54     	nStartAddr = FLASH_SECTOR_SIZE * nStartSector;
000018  0326              LSLS     r6,r4,#12
00001a  4681              MOV      r9,r0                 ;52
;;;55     
;;;56     	for(nOffset = 0 ; nOffset < FLASH_SECTOR_SIZE ; nOffset += nBlockSize)
00001c  2400              MOVS     r4,#0
;;;57     	{
;;;58     		Flash_Read_Array(nOffset + nStartAddr , (unsigned char * )pUserStruct, nSizeOfStruct);
;;;59     		
;;;60     		sFlag = (sFlashDataFlag)(pUserStruct[nSizeOfStruct - 1]);
00001e  eb0a0705          ADD      r7,r10,r5
                  |L2.34|
000022  19a0              ADDS     r0,r4,r6              ;58
000024  462a              MOV      r2,r5                 ;58
000026  4651              MOV      r1,r10                ;58
000028  f7fffffe          BL       Flash_Read_Array
00002c  f8170c01          LDRB     r0,[r7,#-1]
;;;61     		switch(sFlag)
000030  289a              CMP      r0,#0x9a
000032  d00c              BEQ      |L2.78|
000034  28ff              CMP      r0,#0xff
000036  d007              BEQ      |L2.72|
000038  eb040009          ADD      r0,r4,r9              ;56
00003c  b284              UXTH     r4,r0                 ;56
00003e  4544              CMP      r4,r8                 ;56
000040  d3ef              BCC      |L2.34|
;;;62     		{
;;;63     			case eFlashFlagFree:
;;;64     				TRACE_PRINTF("There is no valid data(Blank Sector)!\r\n");
;;;65     				return false;
;;;66     			case eFlashFlagValid:
;;;67     				TRACE_PRINTF("Load valid data, Offset : 0x%04X\r\n",(nOffset + nStartAddr) % FLASH_SECTOR_SIZE);
;;;68     				return true;
;;;69     		}
;;;70     	}
;;;71     
;;;72     	/*查找完整个扇区..无有效数据,则擦除整个扇区*/
;;;73     	Flash_Sector_Erase(nStartAddr);
000042  4630              MOV      r0,r6
000044  f7fffffe          BL       Flash_Sector_Erase
                  |L2.72|
000048  2000              MOVS     r0,#0                 ;65
                  |L2.74|
;;;74     
;;;75     	TRACE_PRINTF("There is no valid data(Dirty Sector,need to be erased)!\r\n");
;;;76     	
;;;77     	return false;
;;;78     }
00004a  e8bd87f0          POP      {r4-r10,pc}
                  |L2.78|
00004e  2001              MOVS     r0,#1                 ;68
000050  e7fb              B        |L2.74|
;;;79     
                          ENDP


                          AREA ||i.Spi_FLash_Save_User_Struct||, CODE, READONLY, ALIGN=1

                  Spi_FLash_Save_User_Struct PROC
;;;80     
;;;81     void Spi_FLash_Save_User_Struct(unsigned char *pUserStruct, unsigned short nSizeOfStruct, unsigned short nStartSector)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;82     {
;;;83     	unsigned short nOffset;
;;;84     	unsigned long nStartAddr;
;;;85     	sFlashDataFlag sFlag;
;;;86     	unsigned short nBlockSize; 
;;;87     
;;;88     	if(nSizeOfStruct > FLASH_SECTOR_SIZE)
000004  f44f5880          MOV      r8,#0x1000
000008  b082              SUB      sp,sp,#8              ;82
00000a  4614              MOV      r4,r2                 ;82
00000c  460d              MOV      r5,r1                 ;82
00000e  4541              CMP      r1,r8
000010  d820              BHI      |L3.84|
;;;89     	{
;;;90     		TRACE_PRINTF("Size of data structures errors!\r\n");
;;;91     		return;
;;;92     	}
;;;93     	
;;;94     	nBlockSize = Get_Suitable_BlockSize(nSizeOfStruct);
000012  4608              MOV      r0,r1
000014  f7fffffe          BL       Get_Suitable_BlockSize
000018  4681              MOV      r9,r0
;;;95     
;;;96     	nStartAddr = FLASH_SECTOR_SIZE * nStartSector;
00001a  0327              LSLS     r7,r4,#12
;;;97     
;;;98     	for(nOffset = 0 ; nOffset < FLASH_SECTOR_SIZE ; nOffset += nBlockSize)
;;;99     	{
;;;100    		/*仅读取FLAG标志.*/
;;;101    		Flash_Read_Array(nOffset + nStartAddr +  nSizeOfStruct - 1, (unsigned char * )&sFlag, 1);
;;;102    		switch(sFlag)
;;;103    		{
;;;104    			case eFlashFlagFree:
;;;105    				pUserStruct[nSizeOfStruct - 1] = (unsigned char)eFlashFlagValid;
00001c  9802              LDR      r0,[sp,#8]
00001e  2400              MOVS     r4,#0                 ;98
000020  f04f0a9a          MOV      r10,#0x9a             ;102
000024  1946              ADDS     r6,r0,r5
000026  46c3              MOV      r11,r8                ;88
                  |L3.40|
000028  eb040807          ADD      r8,r4,r7              ;101
00002c  eb080005          ADD      r0,r8,r5              ;101
000030  2201              MOVS     r2,#1                 ;101
000032  4669              MOV      r1,sp                 ;101
000034  1e40              SUBS     r0,r0,#1              ;101
000036  f7fffffe          BL       Flash_Read_Array
00003a  f89d0000          LDRB     r0,[sp,#0]            ;102
00003e  289a              CMP      r0,#0x9a              ;102
000040  d00b              BEQ      |L3.90|
000042  28ff              CMP      r0,#0xff              ;102
000044  d111              BNE      |L3.106|
000046  f806ac01          STRB     r10,[r6,#-1]
;;;106    				Flash_Write_Array(nOffset + nStartAddr , (unsigned char * )pUserStruct, nSizeOfStruct);
00004a  19e0              ADDS     r0,r4,r7
00004c  462a              MOV      r2,r5
00004e  9902              LDR      r1,[sp,#8]
                  |L3.80|
;;;107    				TRACE_PRINTF("Write valid data, Offset : 0x%04X\r\n",(nOffset + nStartAddr) % FLASH_SECTOR_SIZE);
;;;108    				return;
;;;109    			case eFlashFlagValid:
;;;110    				pUserStruct[nSizeOfStruct - 1] = (unsigned char)eFlaghFlagInvalid;
;;;111    				Flash_Write_Array(nOffset + nStartAddr , (unsigned char * )pUserStruct, nSizeOfStruct);
;;;112    				TRACE_PRINTF("Mark invalid data, Offset : 0x%04X\r\n",(nOffset + nStartAddr) % FLASH_SECTOR_SIZE);
;;;113    				break;
;;;114    		}
;;;115    	}
;;;116    
;;;117    	/*查找完整个扇区..无有效数据,则擦除整个扇区*/
;;;118    	Flash_Sector_Erase(nStartAddr);
;;;119    
;;;120    	pUserStruct[nSizeOfStruct - 1] = (unsigned char)eFlashFlagValid;
;;;121    	Flash_Write_Array(nStartAddr , (unsigned char * )pUserStruct, nSizeOfStruct);
000050  f7fffffe          BL       Flash_Write_Array
                  |L3.84|
;;;122    
;;;123    	TRACE_PRINTF("Write valid data, Offset(Dirty Sector,need to be erased) : 0x%08X\r\n",nOffset);
;;;124    }
000054  b005              ADD      sp,sp,#0x14
000056  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.90|
00005a  2000              MOVS     r0,#0                 ;110
00005c  f8060c01          STRB     r0,[r6,#-1]           ;110
000060  4640              MOV      r0,r8                 ;110
000062  462a              MOV      r2,r5                 ;111
000064  9902              LDR      r1,[sp,#8]            ;111
000066  f7fffffe          BL       Flash_Write_Array
                  |L3.106|
00006a  eb040009          ADD      r0,r4,r9              ;98
00006e  b284              UXTH     r4,r0                 ;98
000070  455c              CMP      r4,r11                ;98
000072  d3d9              BCC      |L3.40|
000074  4638              MOV      r0,r7                 ;118
000076  f7fffffe          BL       Flash_Sector_Erase
00007a  f806ac01          STRB     r10,[r6,#-1]          ;120
00007e  462a              MOV      r2,r5                 ;121
000080  4638              MOV      r0,r7                 ;121
000082  9902              LDR      r1,[sp,#8]
000084  e7e4              B        |L3.80|
;;;125    
                          ENDP

