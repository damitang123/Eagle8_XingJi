; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\guiaalib.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guiaalib.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\AntiAlias\GUIAALib.c]
                          THUMB

                          AREA ||i.CalcClipRectHL||, CODE, READONLY, ALIGN=2

                  CalcClipRectHL PROC
;;;166    */
;;;167    static void CalcClipRectHL(void) {
000000  480a              LDR      r0,|L1.44|
;;;168      ClipRect_HL.x0 =  GUI_Context.ClipRect.x0    * GUI_Context.AA_Factor;
000002  490b              LDR      r1,|L1.48|
000004  8903              LDRH     r3,[r0,#8]  ; GUI_Context
000006  f8902060          LDRB     r2,[r0,#0x60]  ; GUI_Context
00000a  4353              MULS     r3,r2,r3
00000c  800b              STRH     r3,[r1,#0]
;;;169      ClipRect_HL.y0 =  GUI_Context.ClipRect.y0    * GUI_Context.AA_Factor;
00000e  8943              LDRH     r3,[r0,#0xa]  ; GUI_Context
000010  4353              MULS     r3,r2,r3
000012  804b              STRH     r3,[r1,#2]
;;;170      ClipRect_HL.x1 = (GUI_Context.ClipRect.x1+1) * GUI_Context.AA_Factor -1;
000014  8983              LDRH     r3,[r0,#0xc]  ; GUI_Context
000016  1c5b              ADDS     r3,r3,#1
000018  4353              MULS     r3,r2,r3
00001a  1e5b              SUBS     r3,r3,#1
00001c  808b              STRH     r3,[r1,#4]
;;;171      ClipRect_HL.y1 = (GUI_Context.ClipRect.y1+1) * GUI_Context.AA_Factor -1;
00001e  89c0              LDRH     r0,[r0,#0xe]  ; GUI_Context
000020  1c40              ADDS     r0,r0,#1
000022  4350              MULS     r0,r2,r0
000024  1e40              SUBS     r0,r0,#1
000026  80c8              STRH     r0,[r1,#6]
;;;172    }
000028  4770              BX       lr
;;;173    
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      GUI_Context
                  |L1.48|
                          DCD      ||.data||+0x1c

                          AREA ||i.GUI_AA_DisableHiRes||, CODE, READONLY, ALIGN=2

                  GUI_AA_DisableHiRes PROC
;;;243    */
;;;244    void GUI_AA_DisableHiRes(void) {
000000  4902              LDR      r1,|L2.12|
;;;245      GUI_Context.AA_HiResEnable = 0;
000002  2000              MOVS     r0,#0
000004  f8810061          STRB     r0,[r1,#0x61]
;;;246    }
000008  4770              BX       lr
;;;247    
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      GUI_Context

                          AREA ||i.GUI_AA_EnableHiRes||, CODE, READONLY, ALIGN=2

                  GUI_AA_EnableHiRes PROC
;;;251    */
;;;252    void GUI_AA_EnableHiRes(void) {
000000  4902              LDR      r1,|L3.12|
;;;253      GUI_Context.AA_HiResEnable =1;
000002  2001              MOVS     r0,#1
000004  f8810061          STRB     r0,[r1,#0x61]
;;;254    }
000008  4770              BX       lr
;;;255    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      GUI_Context

                          AREA ||i.GUI_AA_Exit||, CODE, READONLY, ALIGN=2

                  GUI_AA_Exit PROC
;;;267    */
;;;268    void GUI_AA_Exit(void) {
000000  b510              PUSH     {r4,lr}
;;;269      _FlushLine();
000002  f7fffffe          BL       _FlushLine
;;;270      /* restore previous settings */
;;;271      GUI_Context.pLCD_HL = pLCD_HLPrev;
000006  4804              LDR      r0,|L4.24|
000008  6981              LDR      r1,[r0,#0x18]  ; pLCD_HLPrev
00000a  4804              LDR      r0,|L4.28|
;;;272      GUI_Context.pClipRect_HL = &GUI_Context.ClipRect;
00000c  65c1              STR      r1,[r0,#0x5c]  ; GUI_Context
00000e  f1000108          ADD      r1,r0,#8
000012  6141              STR      r1,[r0,#0x14]  ; GUI_Context
;;;273    }
000014  bd10              POP      {r4,pc}
;;;274    
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      ||.data||
                  |L4.28|
                          DCD      GUI_Context

                          AREA ||i.GUI_AA_GetFactor||, CODE, READONLY, ALIGN=2

                  GUI_AA_GetFactor PROC
;;;235    */
;;;236    int GUI_AA_GetFactor(void) {
000000  4801              LDR      r0,|L5.8|
;;;237      return GUI_Context.AA_Factor;
000002  f8900060          LDRB     r0,[r0,#0x60]  ; GUI_Context
;;;238    }
000006  4770              BX       lr
;;;239    
                          ENDP

                  |L5.8|
                          DCD      GUI_Context

                          AREA ||i.GUI_AA_HiRes2Pixel||, CODE, READONLY, ALIGN=2

                  GUI_AA_HiRes2Pixel PROC
;;;259    */
;;;260    I16 GUI_AA_HiRes2Pixel(int HiRes) {
000000  4903              LDR      r1,|L6.16|
;;;261      return GUI_Context.AA_Factor ? (HiRes / GUI_Context.AA_Factor) : HiRes;
000002  f8911060          LDRB     r1,[r1,#0x60]  ; GUI_Context
000006  b109              CBZ      r1,|L6.12|
000008  fb90f0f1          SDIV     r0,r0,r1
                  |L6.12|
00000c  b200              SXTH     r0,r0
;;;262    }
00000e  4770              BX       lr
;;;263    
                          ENDP

                  |L6.16|
                          DCD      GUI_Context

                          AREA ||i.GUI_AA_Init||, CODE, READONLY, ALIGN=2

                  GUI_AA_Init PROC
;;;183    */
;;;184    int GUI_AA_Init(int x0, int x1) {
000000  b570              PUSH     {r4-r6,lr}
;;;185      int r =0;
000002  2400              MOVS     r4,#0
;;;186      /* Bounds checking:
;;;187         Make sure x0, x1 are in legal range ...
;;;188         (The important point is that they span no more than configured as
;;;189          buffer size)
;;;190      */
;;;191      if (x0<0)
000004  2800              CMP      r0,#0
000006  da00              BGE      |L7.10|
;;;192        x0 =0;
000008  2000              MOVS     r0,#0
                  |L7.10|
;;;193      if (x1-x0 > GUI_AA_LINEBUFFER_SIZE-1)
00000a  1a0a              SUBS     r2,r1,r0
00000c  2aef              CMP      r2,#0xef
00000e  dd01              BLE      |L7.20|
;;;194        x1 = x0+GUI_AA_LINEBUFFER_SIZE-1;
000010  f10001ef          ADD      r1,r0,#0xef
                  |L7.20|
;;;195      /* Is there anything to do at all ??? */
;;;196      if (x1 < x0) {
000014  4281              CMP      r1,r0
000016  da01              BGE      |L7.28|
;;;197        x1 = x0;   /* Not really ... */
000018  4601              MOV      r1,r0
;;;198        r =1;
00001a  2401              MOVS     r4,#1
                  |L7.28|
;;;199      }
;;;200      DrawAPICopy = *GUI_Context.pLCD_HL; /* Copy API table */
00001c  4d0b              LDR      r5,|L7.76|
00001e  4a0c              LDR      r2,|L7.80|
000020  6deb              LDR      r3,[r5,#0x5c]  ; GUI_Context
000022  685e              LDR      r6,[r3,#4]
;;;201      pLCD_HLPrev = GUI_Context.pLCD_HL; /* Remember list ptr (for restore) */
;;;202      DrawAPICopy.pfDrawHLine = _DrawHLine;  /* modify function ptr. for hline */
000024  6296              STR      r6,[r2,#0x28]  ; DrawAPICopy
000026  6193              STR      r3,[r2,#0x18]  ; pLCD_HLPrev
000028  f1020324          ADD      r3,r2,#0x24
00002c  4e09              LDR      r6,|L7.84|
;;;203      GUI_Context.pLCD_HL = &DrawAPICopy;      /* Use copy of fp-list */
00002e  601e              STR      r6,[r3,#0]  ; DrawAPICopy
;;;204      pabAABuffer = abAABuffer;
000030  65eb              STR      r3,[r5,#0x5c]  ; GUI_Context
000032  4b09              LDR      r3,|L7.88|
000034  6013              STR      r3,[r2,#0]  ; pabAABuffer
000036  e9c20101          STRD     r0,r1,[r2,#4]
;;;205      _x0 = x0;
;;;206      _x1 = x1;
;;;207      _CleanLine();
00003a  f7fffffe          BL       _CleanLine
;;;208      CalcClipRectHL();
00003e  f7fffffe          BL       CalcClipRectHL
;;;209      GUI_Context.pClipRect_HL = &ClipRect_HL;
000042  4803              LDR      r0,|L7.80|
000044  301c              ADDS     r0,r0,#0x1c
;;;210      return r;
000046  6168              STR      r0,[r5,#0x14]  ; GUI_Context
000048  4620              MOV      r0,r4
;;;211    }
00004a  bd70              POP      {r4-r6,pc}
;;;212    
                          ENDP

                  |L7.76|
                          DCD      GUI_Context
                  |L7.80|
                          DCD      ||.data||
                  |L7.84|
                          DCD      _DrawHLine
                  |L7.88|
                          DCD      ||.bss||

                          AREA ||i.GUI_AA_Init_HiRes||, CODE, READONLY, ALIGN=2

                  GUI_AA_Init_HiRes PROC
;;;216    */
;;;217    int GUI_AA_Init_HiRes(int x0, int x1) {
000000  4a04              LDR      r2,|L8.20|
;;;218      x0 /= GUI_Context.AA_Factor;
000002  f8922060          LDRB     r2,[r2,#0x60]  ; GUI_Context
000006  fb90f0f2          SDIV     r0,r0,r2
;;;219      x1 /= GUI_Context.AA_Factor;
00000a  fb91f1f2          SDIV     r1,r1,r2
;;;220      return GUI_AA_Init(x0, x1);
00000e  f7ffbffe          B.W      GUI_AA_Init
;;;221    }
;;;222    
                          ENDP

000012  0000              DCW      0x0000
                  |L8.20|
                          DCD      GUI_Context

                          AREA ||i.GUI_AA_SetFactor||, CODE, READONLY, ALIGN=2

                  GUI_AA_SetFactor PROC
;;;226    */
;;;227    void GUI_AA_SetFactor(int Factor) {
000000  4902              LDR      r1,|L9.12|
;;;228      GUI_Context.AA_Factor = Factor;
000002  f8810060          STRB     r0,[r1,#0x60]
;;;229      CalcClipRectHL();      /* High level clipping depends on quality factor */
000006  f7ffbffe          B.W      CalcClipRectHL
;;;230    }
;;;231    
                          ENDP

00000a  0000              DCW      0x0000
                  |L9.12|
                          DCD      GUI_Context

                          AREA ||i._CleanLine||, CODE, READONLY, ALIGN=2

                  _CleanLine PROC
;;;63     */
;;;64     static void _CleanLine(void) {
000000  b510              PUSH     {r4,lr}
;;;65       GUI_MEMSET(pabAABuffer,0, _x1 - _x0+1);
000002  4c07              LDR      r4,|L10.32|
000004  e9d40101          LDRD     r0,r1,[r4,#4]
000008  1a0a              SUBS     r2,r1,r0
00000a  2100              MOVS     r1,#0
00000c  1c52              ADDS     r2,r2,#1
00000e  6820              LDR      r0,[r4,#0]  ; pabAABuffer
000010  f7fffffe          BL       GUI__memset
;;;66       _y = -16383;  /* Invalidate */  
000014  4803              LDR      r0,|L10.36|
;;;67       _x0_InUse =  16383;
000016  0c81              LSRS     r1,r0,#18
000018  e9c40103          STRD     r0,r1,[r4,#0xc]
;;;68       _x1_InUse = -16383;
00001c  6160              STR      r0,[r4,#0x14]  ; _x1_InUse
;;;69     }
00001e  bd10              POP      {r4,pc}
;;;70     
                          ENDP

                  |L10.32|
                          DCD      ||.data||
                  |L10.36|
                          DCD      0xffffc001

                          AREA ||i._DrawHLine||, CODE, READONLY, ALIGN=2

                  _DrawHLine PROC
;;;114    */
;;;115    static void _DrawHLine  (int x0, int y,  int x1) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  4614              MOV      r4,r2
000008  4688              MOV      r8,r1
;;;116      int x0Real, x1Real;
;;;117    /* Make sure there is something to do */
;;;118      if (x1<x0)
00000a  42aa              CMP      r2,r5
00000c  db59              BLT      |L11.194|
;;;119        return;
;;;120    /* Flush line if we are in an other pixel (real) line */
;;;121      if (y/GUI_Context.AA_Factor != _y) {
00000e  4f2e              LDR      r7,|L11.200|
000010  4e2e              LDR      r6,|L11.204|
000012  f8971060          LDRB     r1,[r7,#0x60]  ; GUI_Context
000016  fb98f0f1          SDIV     r0,r8,r1
00001a  68f1              LDR      r1,[r6,#0xc]  ; _y
00001c  4288              CMP      r0,r1
00001e  d006              BEQ      |L11.46|
;;;122        _FlushLine();
000020  f7fffffe          BL       _FlushLine
;;;123        _y = y/GUI_Context.AA_Factor;
000024  f8971060          LDRB     r1,[r7,#0x60]  ; GUI_Context
000028  fb98f0f1          SDIV     r0,r8,r1
00002c  60f0              STR      r0,[r6,#0xc]  ; _y
                  |L11.46|
;;;124      }
;;;125      x0Real = x0/GUI_Context.AA_Factor;
00002e  f8970060          LDRB     r0,[r7,#0x60]  ; GUI_Context
;;;126      x1Real = x1/GUI_Context.AA_Factor;
;;;127    /* Handle used area (speed optimization for drawing) */
;;;128      if (x0Real < _x0_InUse)
000032  6932              LDR      r2,[r6,#0x10]  ; _x0_InUse
000034  fb95f3f0          SDIV     r3,r5,r0              ;125
000038  fb94f1f0          SDIV     r1,r4,r0              ;126
00003c  4293              CMP      r3,r2
00003e  da00              BGE      |L11.66|
;;;129        _x0_InUse = x0Real;
000040  6133              STR      r3,[r6,#0x10]  ; _x0_InUse
                  |L11.66|
;;;130      if (x1Real > _x1_InUse)
000042  6972              LDR      r2,[r6,#0x14]  ; _x1_InUse
000044  4291              CMP      r1,r2
000046  dd00              BLE      |L11.74|
;;;131        _x1_InUse = x1Real;
000048  6171              STR      r1,[r6,#0x14]  ; _x1_InUse
                  |L11.74|
;;;132    /* Clip (should not be necessary ... Just to be on the safe side ! */
;;;133      if (x0Real < _x0) {
00004a  6872              LDR      r2,[r6,#4]  ; _x0
00004c  4293              CMP      r3,r2
00004e  da01              BGE      |L11.84|
;;;134        x0 = _x0 * GUI_Context.AA_Factor;
000050  fb00f502          MUL      r5,r0,r2
                  |L11.84|
;;;135      }
;;;136      if (x1Real > _x1) {
000054  68b3              LDR      r3,[r6,#8]  ; _x1
000056  4299              CMP      r1,r3
000058  dd03              BLE      |L11.98|
00005a  1c5b              ADDS     r3,r3,#1
;;;137        x1 = (_x1+1)*GUI_Context.AA_Factor-1;
00005c  fb00f403          MUL      r4,r0,r3
000060  1e64              SUBS     r4,r4,#1
                  |L11.98|
;;;138      }
;;;139    /* Make sure there is still something to do (after clipping) */
;;;140      if (x1<x0)
000062  42ac              CMP      r4,r5
000064  db2d              BLT      |L11.194|
;;;141        return;
;;;142    /* Inc. hit counters in buffer */
;;;143      {
;;;144        int x0_Off = x0/GUI_Context.AA_Factor-_x0;
000066  fb95f1f0          SDIV     r1,r5,r0
00006a  eba10802          SUB      r8,r1,r2
;;;145        int x1_Off = x1/GUI_Context.AA_Factor-_x0;
00006e  fb94f1f0          SDIV     r1,r4,r0
000072  eba10c02          SUB      r12,r1,r2
;;;146        int iRem = x1_Off-x0_Off+1;
000076  ebac0308          SUB      r3,r12,r8
;;;147        U8 *pDest = pabAABuffer+x0_Off;
00007a  6831              LDR      r1,[r6,#0]  ; pabAABuffer
00007c  1c5b              ADDS     r3,r3,#1
00007e  4441              ADD      r1,r1,r8
;;;148        if (iRem ==1) {
000080  2b01              CMP      r3,#1
000082  d006              BEQ      |L11.146|
;;;149          *(pDest) += x1-x0+1;
;;;150        } else {
;;;151          /* First Pixel */
;;;152          *pDest++ += ((x0_Off+_x0+1)*GUI_Context.AA_Factor-x0);
000084  eb080602          ADD      r6,r8,r2
000088  1c76              ADDS     r6,r6,#1
00008a  4346              MULS     r6,r0,r6
00008c  1b70              SUBS     r0,r6,r5
00008e  780d              LDRB     r5,[r1,#0]
;;;153          /* Middle Pixels */
;;;154          for (;--iRem>1; ) {
000090  e007              B        |L11.162|
                  |L11.146|
000092  780a              LDRB     r2,[r1,#0]            ;149
000094  1b60              SUBS     r0,r4,r5              ;149
000096  1c40              ADDS     r0,r0,#1              ;149
000098  4410              ADD      r0,r0,r2              ;149
00009a  e011              B        |L11.192|
                  |L11.156|
;;;155            *pDest++ +=GUI_Context.AA_Factor;
00009c  7808              LDRB     r0,[r1,#0]
00009e  f8975060          LDRB     r5,[r7,#0x60]  ; GUI_Context
                  |L11.162|
0000a2  1e5b              SUBS     r3,r3,#1              ;152
0000a4  4428              ADD      r0,r0,r5              ;152
0000a6  f8010b01          STRB     r0,[r1],#1            ;152
0000aa  2b01              CMP      r3,#1                 ;154
0000ac  dcf6              BGT      |L11.156|
;;;156          }
;;;157          /* Last Pixel */
;;;158          *pDest += (1+x1- (x1_Off+_x0) *GUI_Context.AA_Factor);
0000ae  eb0c0002          ADD      r0,r12,r2
0000b2  f8972060          LDRB     r2,[r7,#0x60]  ; GUI_Context
0000b6  fb004012          MLS      r0,r0,r2,r4
0000ba  780a              LDRB     r2,[r1,#0]
0000bc  1c40              ADDS     r0,r0,#1
0000be  4410              ADD      r0,r0,r2
                  |L11.192|
0000c0  7008              STRB     r0,[r1,#0]            ;149
                  |L11.194|
;;;159        }
;;;160      }
;;;161    }
0000c2  e8bd81f0          POP      {r4-r8,pc}
;;;162    
                          ENDP

0000c6  0000              DCW      0x0000
                  |L11.200|
                          DCD      GUI_Context
                  |L11.204|
                          DCD      ||.data||

                          AREA ||i._FlushLine||, CODE, READONLY, ALIGN=2

                  _FlushLine PROC
;;;74     */
;;;75     static void _FlushLine(void) {
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;76       int i;
;;;77       int iEnd = _x1_InUse-_x0;
000004  f8df8090          LDR      r8,|L12.152|
;;;78       int IMax = GUI_Context.AA_Factor * GUI_Context.AA_Factor;
000008  f8df9090          LDR      r9,|L12.156|
00000c  f8d82014          LDR      r2,[r8,#0x14]         ;77  ; _x1_InUse
000010  f8d81004          LDR      r1,[r8,#4]            ;77  ; _x0
000014  f8996060          LDRB     r6,[r9,#0x60]  ; GUI_Context
;;;79       for (i =_x0_InUse-_x0; i<=iEnd; i++) {
000018  f8d80010          LDR      r0,[r8,#0x10]  ; _x0_InUse
00001c  1a57              SUBS     r7,r2,r1              ;77
00001e  4376              MULS     r6,r6,r6              ;78
000020  1a44              SUBS     r4,r0,r1
000022  e033              B        |L12.140|
                  |L12.36|
;;;80         int Intens = *(pabAABuffer+i);
000024  f8d80000          LDR      r0,[r8,#0]  ; pabAABuffer
000028  4641              MOV      r1,r8
00002a  5d02              LDRB     r2,[r0,r4]
;;;81         if (Intens) {
00002c  b36a              CBZ      r2,|L12.138|
;;;82           /* Check we can use line draw */
;;;83           if (Intens == IMax) {
00002e  42b2              CMP      r2,r6
000030  d11c              BNE      |L12.108|
;;;84             int j;
;;;85             for (j=i; j<iEnd; ) {
000032  4625              MOV      r5,r4
000034  e004              B        |L12.64|
                  |L12.54|
;;;86               if (*(pabAABuffer+j+1) != IMax) {
000036  1942              ADDS     r2,r0,r5
000038  7852              LDRB     r2,[r2,#1]
00003a  42b2              CMP      r2,r6
00003c  d102              BNE      |L12.68|
00003e  1c6d              ADDS     r5,r5,#1
                  |L12.64|
000040  42bd              CMP      r5,r7                 ;85
000042  dbf8              BLT      |L12.54|
                  |L12.68|
;;;87                 break;
;;;88               }
;;;89               j++;
;;;90             }
;;;91             /* Draw the full pixel(s) */
;;;92             if (j!=i) {
000044  6848              LDR      r0,[r1,#4]  ; _x0
000046  42a5              CMP      r5,r4
000048  d008              BEQ      |L12.92|
;;;93               pLCD_HLPrev->pfDrawHLine(_x0+i, _y, _x0+j);
00004a  698b              LDR      r3,[r1,#0x18]  ; pLCD_HLPrev
00004c  1942              ADDS     r2,r0,r5
00004e  4420              ADD      r0,r0,r4
000050  681b              LDR      r3,[r3,#0]
000052  f8d8100c          LDR      r1,[r8,#0xc]  ; _y
000056  4798              BLX      r3
;;;94               i = j;  /*xxx*/
000058  462c              MOV      r4,r5
00005a  e016              B        |L12.138|
                  |L12.92|
;;;95             } else {
;;;96               LCD_HL_DrawPixel (_x0+i,_y);
00005c  f8d9205c          LDR      r2,[r9,#0x5c]  ; GUI_Context
000060  4420              ADD      r0,r0,r4
000062  f8d8100c          LDR      r1,[r8,#0xc]  ; _y
000066  6852              LDR      r2,[r2,#4]
000068  4790              BLX      r2
00006a  e00e              B        |L12.138|
                  |L12.108|
;;;97             }
;;;98           } else {
;;;99             LCD_SetPixelAA(_x0+i,_y, (15*Intens+IMax/2)/IMax);
00006c  ebc21002          RSB      r0,r2,r2,LSL #4
000070  eb0672d6          ADD      r2,r6,r6,LSR #31
000074  eb000062          ADD      r0,r0,r2,ASR #1
000078  fb90f0f6          SDIV     r0,r0,r6
00007c  b2c2              UXTB     r2,r0
00007e  6848              LDR      r0,[r1,#4]  ; _x0
000080  f8d8100c          LDR      r1,[r8,#0xc]  ; _y
000084  4420              ADD      r0,r0,r4
000086  f7fffffe          BL       LCD_SetPixelAA
                  |L12.138|
00008a  1c64              ADDS     r4,r4,#1
                  |L12.140|
00008c  42bc              CMP      r4,r7                 ;79
00008e  ddc9              BLE      |L12.36|
;;;100          }
;;;101        }    
;;;102      }
;;;103      _CleanLine();
000090  e8bd47f0          POP      {r4-r10,lr}
000094  f7ffbffe          B.W      _CleanLine
;;;104    }
;;;105    
                          ENDP

                  |L12.152|
                          DCD      ||.data||
                  |L12.156|
                          DCD      GUI_Context

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  abAABuffer
                          %        240

                          AREA ||.data||, DATA, ALIGN=2

                  pabAABuffer
                          DCD      0x00000000
                  _x0
                          DCD      0x00000000
                  _x1
                          DCD      0x00000000
                  ||_y||
                          DCD      0x00000000
                  _x0_InUse
                          DCD      0x00000000
                  _x1_InUse
                          DCD      0x00000000
                  pLCD_HLPrev
                          DCD      0x00000000
                  ClipRect_HL
                          %        8
                  DrawAPICopy
                          %        8
