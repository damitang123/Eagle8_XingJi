; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\lcd_rotate180.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\lcd_rotate180.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\Core\LCD_Rotate180.c]
                          THUMB

                          AREA ||i._DrawBitLine1BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine1BPP PROC
;;;37     */
;;;38     static void  _DrawBitLine1BPP(int x, int y, U8 const GUI_UNI_PTR *p, int Diff, int xsize, const LCD_PIXELINDEX*pTrans) {
000000  e92d5fff          PUSH     {r0-r12,lr}
000004  461c              MOV      r4,r3
000006  e9dd710e          LDRD     r7,r1,[sp,#0x38]
;;;39       LCD_PIXELINDEX Index0 = *(pTrans+0);
;;;40       LCD_PIXELINDEX Index1 = *(pTrans+1);
;;;41       x -= Diff;
00000a  1b05              SUBS     r5,r0,r4
;;;42       switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
00000c  482f              LDR      r0,|L1.204|
00000e  f8b19000          LDRH     r9,[r1,#0]            ;39
000012  f8b18002          LDRH     r8,[r1,#2]            ;40
000016  7c01              LDRB     r1,[r0,#0x10]  ; GUI_Context
000018  4616              MOV      r6,r2                 ;38
00001a  f0110203          ANDS     r2,r1,#3
;;;43       case 0:
;;;44         do {
;;;45           LCDDEV_L0_SetPixelIndex(x--, y, (*p & (0x80 >> Diff)) ? Index1 : Index0);
00001e  f04f0180          MOV      r1,#0x80
000022  d016              BEQ      |L1.82|
000024  2a01              CMP      r2,#1                 ;42
000026  d033              BEQ      |L1.144|
000028  2a02              CMP      r2,#2                 ;42
00002a  d12a              BNE      |L1.130|
00002c  4689              MOV      r9,r1
00002e  4682              MOV      r10,r0                ;42
                  |L1.48|
;;;46     			if (++Diff == 8) {
;;;47             Diff = 0;
;;;48     				p++;
;;;49     			}
;;;50     		} while (--xsize);
;;;51         break;
;;;52       case LCD_DRAWMODE_TRANS:
;;;53         do {
;;;54       		if (*p & (0x80 >> Diff))
000030  7831              LDRB     r1,[r6,#0]
000032  fa29f004          LSR      r0,r9,r4
000036  4201              TST      r1,r0
000038  d006              BEQ      |L1.72|
;;;55             LCDDEV_L0_SetPixelIndex(x, y, Index1);
00003a  f8da004c          LDR      r0,[r10,#0x4c]  ; GUI_Context
00003e  4642              MOV      r2,r8
000040  9901              LDR      r1,[sp,#4]
000042  6a43              LDR      r3,[r0,#0x24]
000044  4628              MOV      r0,r5
000046  4798              BLX      r3
                  |L1.72|
000048  1c64              ADDS     r4,r4,#1
00004a  1e6d              SUBS     r5,r5,#1
;;;56           x--;
;;;57     			if (++Diff == 8) {
00004c  2c08              CMP      r4,#8
00004e  d01a              BEQ      |L1.134|
000050  e01b              B        |L1.138|
                  |L1.82|
000052  468b              MOV      r11,r1                ;45
000054  4682              MOV      r10,r0                ;42
                  |L1.86|
000056  7831              LDRB     r1,[r6,#0]            ;45
000058  fa2bf004          LSR      r0,r11,r4             ;45
00005c  4201              TST      r1,r0                 ;45
00005e  d001              BEQ      |L1.100|
000060  4642              MOV      r2,r8                 ;45
000062  e000              B        |L1.102|
                  |L1.100|
000064  464a              MOV      r2,r9                 ;45
                  |L1.102|
000066  f8da104c          LDR      r1,[r10,#0x4c]        ;45  ; GUI_Context
00006a  4628              MOV      r0,r5                 ;45
00006c  1e6d              SUBS     r5,r5,#1              ;45
00006e  6a4b              LDR      r3,[r1,#0x24]         ;45
000070  9901              LDR      r1,[sp,#4]            ;45
000072  4798              BLX      r3                    ;45
000074  1c64              ADDS     r4,r4,#1              ;45
000076  2c08              CMP      r4,#8                 ;46
000078  d101              BNE      |L1.126|
00007a  2400              MOVS     r4,#0                 ;47
00007c  1c76              ADDS     r6,r6,#1              ;47
                  |L1.126|
00007e  1e7f              SUBS     r7,r7,#1              ;47
000080  d1e9              BNE      |L1.86|
                  |L1.130|
;;;58             Diff = 0;
;;;59     				p++;
;;;60     			}
;;;61     		} while (--xsize);
;;;62         break;
;;;63       case LCD_DRAWMODE_XOR:;
;;;64         do {
;;;65       		if (*p & (0x80 >> Diff)) {
;;;66             int Pixel = LCD_L0_GetPixelIndex(x, y);
;;;67             LCDDEV_L0_SetPixelIndex(x, y, LCD_NUM_COLORS - 1 - Pixel);
;;;68           }
;;;69           x--;
;;;70     			if (++Diff == 8) {
;;;71             Diff = 0;
;;;72     				p++;
;;;73     			}
;;;74     		} while (--xsize);
;;;75         break;
;;;76     	}
;;;77     }
000082  e8bd9fff          POP      {r0-r12,pc}
                  |L1.134|
000086  2400              MOVS     r4,#0                 ;58
000088  1c76              ADDS     r6,r6,#1              ;58
                  |L1.138|
00008a  1e7f              SUBS     r7,r7,#1              ;58
00008c  d1d0              BNE      |L1.48|
00008e  e7f8              B        |L1.130|
                  |L1.144|
000090  4688              MOV      r8,r1                 ;45
000092  4681              MOV      r9,r0                 ;42
000094  f64f7aff          MOV      r10,#0xffff           ;67
                  |L1.152|
000098  7831              LDRB     r1,[r6,#0]            ;65
00009a  fa28f004          LSR      r0,r8,r4              ;65
00009e  4201              TST      r1,r0                 ;65
0000a0  d00b              BEQ      |L1.186|
0000a2  4628              MOV      r0,r5                 ;66
0000a4  9901              LDR      r1,[sp,#4]            ;66
0000a6  f7fffffe          BL       LCD_L0_GetPixelIndex
0000aa  ebaa0200          SUB      r2,r10,r0             ;67
0000ae  f8d9004c          LDR      r0,[r9,#0x4c]         ;67  ; GUI_Context
0000b2  9901              LDR      r1,[sp,#4]            ;67
0000b4  6a43              LDR      r3,[r0,#0x24]         ;67
0000b6  4628              MOV      r0,r5                 ;67
0000b8  4798              BLX      r3                    ;67
                  |L1.186|
0000ba  1c64              ADDS     r4,r4,#1              ;67
0000bc  1e6d              SUBS     r5,r5,#1              ;67
0000be  2c08              CMP      r4,#8                 ;70
0000c0  d101              BNE      |L1.198|
0000c2  2400              MOVS     r4,#0                 ;71
0000c4  1c76              ADDS     r6,r6,#1              ;71
                  |L1.198|
0000c6  1e7f              SUBS     r7,r7,#1              ;71
0000c8  d1e6              BNE      |L1.152|
0000ca  e7da              B        |L1.130|
;;;78     
                          ENDP

                  |L1.204|
                          DCD      GUI_Context

                          AREA ||i._DrawBitmap180||, CODE, READONLY, ALIGN=2

                  _DrawBitmap180 PROC
;;;155    */
;;;156    static void _DrawBitmap180(int x0, int y0, int xsize, int ysize, int xMul, int yMul,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;157                               int BitsPerPixel, int BytesPerLine,
;;;158                               const U8 GUI_UNI_PTR * pPixel, const LCD_PIXELINDEX* pTrans)
;;;159    {
000004  b08f              SUB      sp,sp,#0x3c
000006  461d              MOV      r5,r3
;;;160      U8  Data = 0;
;;;161      int x1, y1;
;;;162      /* Handle the optional Y-magnification */
;;;163      y1 = y0 + ysize - 1;
000008  9810              LDR      r0,[sp,#0x40]
00000a  4617              MOV      r7,r2                 ;159
00000c  4428              ADD      r0,r0,r5
00000e  1e40              SUBS     r0,r0,#1
;;;164      x1 = x0 + xsize - 1;
000010  900d              STR      r0,[sp,#0x34]
000012  980f              LDR      r0,[sp,#0x3c]
000014  9c20              LDR      r4,[sp,#0x80]         ;163
000016  4438              ADD      r0,r0,r7
000018  1e40              SUBS     r0,r0,#1
;;;165      /* Rotate positions */
;;;166      _TransformPoint180(&x0, &y0);
00001a  900c              STR      r0,[sp,#0x30]
00001c  2600              MOVS     r6,#0                 ;160
00001e  f8dd9078          LDR      r9,[sp,#0x78]         ;163
000022  a910              ADD      r1,sp,#0x40
000024  a80f              ADD      r0,sp,#0x3c
000026  f7fffffe          BL       _TransformPoint180
;;;167      _TransformPoint180(&x1, &y1);
00002a  a90d              ADD      r1,sp,#0x34
00002c  a80c              ADD      r0,sp,#0x30
00002e  f7fffffe          BL       _TransformPoint180
;;;168      /*  Handle BITMAP without magnification */
;;;169      if ((xMul == 1) && (yMul == 1)) {
000032  981c              LDR      r0,[sp,#0x70]
000034  2801              CMP      r0,#1
000036  d102              BNE      |L2.62|
000038  981d              LDR      r0,[sp,#0x74]
00003a  2801              CMP      r0,#1
00003c  d007              BEQ      |L2.78|
                  |L2.62|
;;;170        int Diff;
;;;171        /* Clip top */
;;;172        if (y0 > GUI_Context.ClipRect.y1) {
;;;173          int Diff = y0 - GUI_Context.ClipRect.y1;
;;;174          y0       = GUI_Context.ClipRect.y1;
;;;175          pPixel  += Diff * BytesPerLine;
;;;176          ysize   -= Diff;
;;;177        }
;;;178        /* Clip bottom */
;;;179        if (y1 < GUI_Context.ClipRect.y0) {
;;;180          int Diff = GUI_Context.ClipRect.y0 - y1;
;;;181          ysize -= Diff;
;;;182        }
;;;183        if (ysize <= 0) {
;;;184    		  return;
;;;185        }
;;;186        /* Clip right side */
;;;187        if (x1 < GUI_Context.ClipRect.x0) {
;;;188          int Diff = GUI_Context.ClipRect.x0 - x1;
;;;189          xsize   -= Diff;
;;;190        }
;;;191        /* Clip left side */
;;;192        Diff = 0;
;;;193        if (x0 > GUI_Context.ClipRect.x1) {
;;;194          Diff   = x0 - GUI_Context.ClipRect.x1;
;;;195    			xsize -= Diff;
;;;196    			switch (BitsPerPixel) {
;;;197    			case 1:
;;;198      			pPixel += (Diff >> 3); x0 += (Diff >> 3) << 3; Diff &= 7;
;;;199    				break;
;;;200    			}
;;;201        }
;;;202        if (xsize <= 0) {
;;;203    		  return;
;;;204        }
;;;205        _DrawBitmap(x0, y0, xsize, ysize, BitsPerPixel, BytesPerLine, pPixel, Diff, pTrans);
;;;206      } else {
;;;207        /* Handle BITMAP with magnification */
;;;208        int x, y;
;;;209        int yi;
;;;210        int Shift = 8 - BitsPerPixel;
00003e  f1c90008          RSB      r0,r9,#8
;;;211        for (y = y0, yi = 0; yi < ysize; yi++, y -= yMul, pPixel += BytesPerLine) {
000042  9004              STR      r0,[sp,#0x10]
000044  9810              LDR      r0,[sp,#0x40]
000046  f04f0b00          MOV      r11,#0
00004a  9001              STR      r0,[sp,#4]
00004c  e0a2              B        |L2.404|
                  |L2.78|
00004e  4953              LDR      r1,|L2.412|
000050  9a10              LDR      r2,[sp,#0x40]         ;172
000052  f9b1000e          LDRSH    r0,[r1,#0xe]          ;172  ; GUI_Context
000056  4290              CMP      r0,r2                 ;172
000058  da05              BGE      |L2.102|
00005a  1a12              SUBS     r2,r2,r0              ;173
00005c  9010              STR      r0,[sp,#0x40]         ;175
00005e  981f              LDR      r0,[sp,#0x7c]         ;175
000060  1aad              SUBS     r5,r5,r2              ;176
000062  fb024400          MLA      r4,r2,r0,r4           ;175
                  |L2.102|
000066  f9b1200a          LDRSH    r2,[r1,#0xa]          ;179  ; GUI_Context
00006a  980d              LDR      r0,[sp,#0x34]         ;179
00006c  4282              CMP      r2,r0                 ;179
00006e  dd01              BLE      |L2.116|
000070  1a10              SUBS     r0,r2,r0              ;180
000072  1a2d              SUBS     r5,r5,r0              ;181
                  |L2.116|
000074  2d00              CMP      r5,#0                 ;183
000076  dd35              BLE      |L2.228|
000078  f9b12008          LDRSH    r2,[r1,#8]            ;187  ; GUI_Context
00007c  980c              LDR      r0,[sp,#0x30]         ;187
00007e  4282              CMP      r2,r0                 ;187
000080  dd01              BLE      |L2.134|
000082  1a10              SUBS     r0,r2,r0              ;188
000084  1a3f              SUBS     r7,r7,r0              ;189
                  |L2.134|
000086  f9b1200c          LDRSH    r2,[r1,#0xc]          ;193  ; GUI_Context
00008a  990f              LDR      r1,[sp,#0x3c]         ;193
00008c  2000              MOVS     r0,#0                 ;192
00008e  428a              CMP      r2,r1                 ;193
000090  da0c              BGE      |L2.172|
000092  1a88              SUBS     r0,r1,r2              ;194
000094  1a3f              SUBS     r7,r7,r0              ;195
000096  f1b90f01          CMP      r9,#1                 ;196
00009a  d107              BNE      |L2.172|
00009c  f0200207          BIC      r2,r0,#7              ;198
0000a0  eb0404e0          ADD      r4,r4,r0,ASR #3       ;198
0000a4  4411              ADD      r1,r1,r2              ;198
0000a6  f0000007          AND      r0,r0,#7              ;198
0000aa  910f              STR      r1,[sp,#0x3c]         ;198
                  |L2.172|
0000ac  2f00              CMP      r7,#0                 ;202
0000ae  dd19              BLE      |L2.228|
0000b0  46ba              MOV      r10,r7                ;205
0000b2  9107              STR      r1,[sp,#0x1c]         ;205
0000b4  f8ddb040          LDR      r11,[sp,#0x40]        ;205
0000b8  9e1f              LDR      r6,[sp,#0x7c]         ;205
0000ba  9004              STR      r0,[sp,#0x10]         ;205
0000bc  2700              MOVS     r7,#0                 ;205
0000be  f8dd8084          LDR      r8,[sp,#0x84]         ;205
0000c2  e00d              B        |L2.224|
                  |L2.196|
0000c4  f1b90f01          CMP      r9,#1                 ;205
0000c8  d108              BNE      |L2.220|
0000ca  e9cda800          STRD     r10,r8,[sp,#0]        ;205
0000ce  ebab0107          SUB      r1,r11,r7             ;205
0000d2  4622              MOV      r2,r4                 ;205
0000d4  9b04              LDR      r3,[sp,#0x10]         ;205
0000d6  9807              LDR      r0,[sp,#0x1c]         ;205
0000d8  f7fffffe          BL       _DrawBitLine1BPP
                  |L2.220|
0000dc  4434              ADD      r4,r4,r6              ;205
0000de  1c7f              ADDS     r7,r7,#1              ;205
                  |L2.224|
0000e0  42af              CMP      r7,r5                 ;205
0000e2  dbef              BLT      |L2.196|
                  |L2.228|
;;;212          int yMax = y + yMul - 1;
;;;213          /* Draw if within clip area (Optimization ... "if" is not required !) */
;;;214          if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
;;;215            int BitsLeft = 0;
;;;216            int xi;
;;;217            const U8 GUI_UNI_PTR * pDataLine = pPixel;
;;;218            for (x = x0, xi = 0; xi < xsize; xi++, x -= xMul) {
;;;219              U8  Index;
;;;220              if (!BitsLeft) {
;;;221                Data = *pDataLine++;
;;;222                BitsLeft =8;
;;;223              }
;;;224              Index = Data >> Shift;
;;;225              Data    <<= BitsPerPixel;
;;;226              BitsLeft -= BitsPerPixel;
;;;227              if (Index || ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0)) {
;;;228                LCD_PIXELINDEX OldColor = LCD_COLORINDEX;
;;;229                if (pTrans) {
;;;230                  LCD_COLORINDEX = *(pTrans + Index);
;;;231                } else {
;;;232                  LCD_COLORINDEX = Index;
;;;233                }
;;;234                LCD_FillRect(x - xMul + 1, y, x, yMax);
;;;235                LCD_COLORINDEX = OldColor;
;;;236              }
;;;237            }
;;;238          }
;;;239        }
;;;240      }
;;;241    }
0000e4  b013              ADD      sp,sp,#0x4c
0000e6  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.234|
0000ea  991d              LDR      r1,[sp,#0x74]         ;212
0000ec  9801              LDR      r0,[sp,#4]            ;212
0000ee  4401              ADD      r1,r1,r0              ;212
0000f0  482a              LDR      r0,|L2.412|
0000f2  1e49              SUBS     r1,r1,#1              ;212
0000f4  9103              STR      r1,[sp,#0xc]          ;214
0000f6  f9b0200a          LDRSH    r2,[r0,#0xa]          ;214  ; GUI_Context
0000fa  428a              CMP      r2,r1                 ;214
0000fc  dc42              BGT      |L2.388|
0000fe  f9b0100e          LDRSH    r1,[r0,#0xe]          ;214  ; GUI_Context
000102  9801              LDR      r0,[sp,#4]            ;214
000104  4281              CMP      r1,r0                 ;214
000106  db3d              BLT      |L2.388|
000108  f04f0a00          MOV      r10,#0                ;215
00010c  980f              LDR      r0,[sp,#0x3c]         ;218
00010e  9408              STR      r4,[sp,#0x20]         ;218
000110  46d0              MOV      r8,r10                ;218
000112  9000              STR      r0,[sp,#0]            ;218
000114  e034              B        |L2.384|
000116  bf00              NOP                            ;220
                  |L2.280|
000118  f1ba0f00          CMP      r10,#0                ;220
00011c  d105              BNE      |L2.298|
00011e  9808              LDR      r0,[sp,#0x20]         ;221
000120  f04f0a08          MOV      r10,#8                ;222
000124  f8106b01          LDRB     r6,[r0],#1            ;221
000128  9008              STR      r0,[sp,#0x20]         ;222
                  |L2.298|
00012a  9904              LDR      r1,[sp,#0x10]         ;224
00012c  ebaa0a09          SUB      r10,r10,r9            ;226
000130  fa36f001          LSRS     r0,r6,r1              ;224
000134  fa06f609          LSL      r6,r6,r9              ;225
000138  b2f6              UXTB     r6,r6                 ;225
00013a  d103              BNE      |L2.324|
00013c  4917              LDR      r1,|L2.412|
00013e  7c09              LDRB     r1,[r1,#0x10]         ;227  ; GUI_Context
000140  0789              LSLS     r1,r1,#30             ;227
000142  d417              BMI      |L2.372|
                  |L2.324|
000144  4915              LDR      r1,|L2.412|
000146  8849              LDRH     r1,[r1,#2]            ;228  ; GUI_Context
000148  910a              STR      r1,[sp,#0x28]         ;229
00014a  9921              LDR      r1,[sp,#0x84]         ;229
00014c  b121              CBZ      r1,|L2.344|
00014e  f8311010          LDRH     r1,[r1,r0,LSL #1]     ;230
000152  4812              LDR      r0,|L2.412|
000154  8041              STRH     r1,[r0,#2]            ;230
000156  e001              B        |L2.348|
                  |L2.344|
000158  4910              LDR      r1,|L2.412|
00015a  8048              STRH     r0,[r1,#2]            ;232
                  |L2.348|
00015c  991c              LDR      r1,[sp,#0x70]         ;234
00015e  9800              LDR      r0,[sp,#0]            ;234
000160  9b03              LDR      r3,[sp,#0xc]          ;234
000162  1a40              SUBS     r0,r0,r1              ;234
000164  e9dd2100          LDRD     r2,r1,[sp,#0]         ;234
000168  1c40              ADDS     r0,r0,#1              ;234
00016a  f7fffffe          BL       LCD_FillRect
00016e  490b              LDR      r1,|L2.412|
000170  980a              LDR      r0,[sp,#0x28]         ;235
000172  8048              STRH     r0,[r1,#2]            ;235
                  |L2.372|
000174  991c              LDR      r1,[sp,#0x70]         ;218
000176  9800              LDR      r0,[sp,#0]            ;218
000178  f1080801          ADD      r8,r8,#1              ;218
00017c  1a40              SUBS     r0,r0,r1              ;218
00017e  9000              STR      r0,[sp,#0]            ;218
                  |L2.384|
000180  45b8              CMP      r8,r7                 ;218
000182  dbc9              BLT      |L2.280|
                  |L2.388|
000184  9901              LDR      r1,[sp,#4]            ;211
000186  981d              LDR      r0,[sp,#0x74]         ;211
000188  f10b0b01          ADD      r11,r11,#1            ;211
00018c  1a08              SUBS     r0,r1,r0              ;211
00018e  9001              STR      r0,[sp,#4]            ;211
000190  981f              LDR      r0,[sp,#0x7c]         ;211
000192  4404              ADD      r4,r4,r0              ;211
                  |L2.404|
000194  45ab              CMP      r11,r5                ;211
000196  dba8              BLT      |L2.234|
000198  e7a4              B        |L2.228|
;;;242    
                          ENDP

00019a  0000              DCW      0x0000
                  |L2.412|
                          DCD      GUI_Context

                          AREA ||i._Rect2TextRect||, CODE, READONLY, ALIGN=1

                  _Rect2TextRect PROC
;;;112    */
;;;113    static void _Rect2TextRect(GUI_RECT * pRect) {
000000  4770              BX       lr
;;;114      GUI_USE_PARA(pRect);
;;;115      /* nothing to do in case of rotating text by 180 degrees */
;;;116    }
;;;117    
                          ENDP


                          AREA ||i._TransformPoint180||, CODE, READONLY, ALIGN=2

                  _TransformPoint180 PROC
;;;126    */
;;;127    static void _TransformPoint180(int * pXPos, int * pYPos) {
000000  b57c              PUSH     {r2-r6,lr}
000002  4606              MOV      r6,r0
;;;128      GUI_RECT ClientRect = {0};
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;129      int xPos, yPos, xNumPixel, yNumPixel;
;;;130      /* Get the client rectangle */
;;;131      #if GUI_WINSUPPORT
;;;132        WM_GetWindowRect(&ClientRect);
000008  9001              STR      r0,[sp,#4]
00000a  460d              MOV      r5,r1                 ;127
00000c  4668              MOV      r0,sp
00000e  f7fffffe          BL       WM_GetWindowRect
;;;133      #else
;;;134        GUI_GetClientRect(&ClientRect);
;;;135      #endif
;;;136      xNumPixel = LCD_GetXSize() - 1;
000012  f7fffffe          BL       LCD_GetXSize
000016  1e44              SUBS     r4,r0,#1
;;;137      yNumPixel = LCD_GetYSize() - 1;
000018  f7fffffe          BL       LCD_GetYSize
;;;138      if (ClientRect.x1 > xNumPixel) {
00001c  f9bd1004          LDRSH    r1,[sp,#4]
000020  1e40              SUBS     r0,r0,#1
000022  42a1              CMP      r1,r4
000024  dd01              BLE      |L4.42|
;;;139        ClientRect.x1 = xNumPixel;
000026  f8ad4004          STRH     r4,[sp,#4]
                  |L4.42|
;;;140      }
;;;141      if (ClientRect.y1 > yNumPixel) {
00002a  f9bd1006          LDRSH    r1,[sp,#6]
00002e  4281              CMP      r1,r0
000030  dd01              BLE      |L4.54|
;;;142        ClientRect.y1 = yNumPixel;
000032  f8ad0006          STRH     r0,[sp,#6]
                  |L4.54|
;;;143      }
;;;144      /* Save old positions */
;;;145      xPos = *pXPos;
;;;146      yPos = *pYPos;
;;;147      /* Handle rotation of text rectangle */
;;;148      *pXPos = ClientRect.x0 + GUI_RectDispString.x1 - (xPos - GUI_RectDispString.x0);
000036  480c              LDR      r0,|L4.104|
000038  f9bd3000          LDRSH    r3,[sp,#0]
00003c  6832              LDR      r2,[r6,#0]            ;146
00003e  f9b04004          LDRSH    r4,[r0,#4]  ; GUI_RectDispString
000042  6829              LDR      r1,[r5,#0]
000044  4423              ADD      r3,r3,r4
000046  f9b04000          LDRSH    r4,[r0,#0]  ; GUI_RectDispString
00004a  1b12              SUBS     r2,r2,r4
00004c  1a9a              SUBS     r2,r3,r2
;;;149      *pYPos = ClientRect.y0 + GUI_RectDispString.y1 - (yPos - GUI_RectDispString.y0);
00004e  6032              STR      r2,[r6,#0]
000050  f9b03006          LDRSH    r3,[r0,#6]  ; GUI_RectDispString
000054  f9bd2002          LDRSH    r2,[sp,#2]
000058  f9b00002          LDRSH    r0,[r0,#2]  ; GUI_RectDispString
00005c  441a              ADD      r2,r2,r3
00005e  1a08              SUBS     r0,r1,r0
000060  1a10              SUBS     r0,r2,r0
000062  6028              STR      r0,[r5,#0]
;;;150    }
000064  bd7c              POP      {r2-r6,pc}
;;;151    
                          ENDP

000066  0000              DCW      0x0000
                  |L4.104|
                          DCD      GUI_RectDispString

                          AREA ||.data||, DATA, ALIGN=2

                  LCD_APIList180
                          DCD      _DrawBitmap180
                          DCD      _Rect2TextRect
