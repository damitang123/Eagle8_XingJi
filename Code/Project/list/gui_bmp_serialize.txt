; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\gui_bmp_serialize.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui_bmp_serialize.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\Core\GUI_BMP_Serialize.c]
                          THUMB

                          AREA ||i.GUI_BMP_Serialize||, CODE, READONLY, ALIGN=1

                  GUI_BMP_Serialize PROC
;;;131    */
;;;132    void GUI_BMP_Serialize(GUI_CALLBACK_VOID_U8_P * pfSerialize, void * p) {
000000  b57c              PUSH     {r2-r6,lr}
000002  460e              MOV      r6,r1
000004  4605              MOV      r5,r0
;;;133      GUI_BMP_SerializeEx(pfSerialize, 0, 0, LCD_GetXSize(), LCD_GetYSize(), p);
000006  f7fffffe          BL       LCD_GetYSize
00000a  4604              MOV      r4,r0
00000c  f7fffffe          BL       LCD_GetXSize
000010  e9cd4600          STRD     r4,r6,[sp,#0]
000014  4603              MOV      r3,r0
000016  2200              MOVS     r2,#0
000018  4611              MOV      r1,r2
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       GUI_BMP_SerializeEx
;;;134    }
000020  bd7c              POP      {r2-r6,pc}
;;;135    
                          ENDP


                          AREA ||i.GUI_BMP_SerializeEx||, CODE, READONLY, ALIGN=1

                  GUI_BMP_SerializeEx PROC
;;;67     */
;;;68     void GUI_BMP_SerializeEx(GUI_CALLBACK_VOID_U8_P * pfSerialize, int x0, int y0, int xSize, int ySize, void * p) {
000000  e92d5fff          PUSH     {r0-r12,lr}
000004  461d              MOV      r5,r3
000006  4681              MOV      r9,r0
;;;69       int x, y, i, BPP, BytesPerLine, NumColors, Padding;
;;;70       U32 BitmapOffset, FileSize;
;;;71       GUI_LOCK();
;;;72       BPP          = LCD_GetBitsPerPixel();
000008  f8dda038          LDR      r10,[sp,#0x38]
00000c  f7fffffe          BL       LCD_GetBitsPerPixel
;;;73       BytesPerLine = ((BPP > 8) ? (2 * xSize + 2) : (xSize + 3)) & ~3;
000010  0069              LSLS     r1,r5,#1
000012  4606              MOV      r6,r0                 ;72
000014  2808              CMP      r0,#8
000016  dd02              BLE      |L2.30|
000018  f1010002          ADD      r0,r1,#2
00001c  e001              B        |L2.34|
                  |L2.30|
00001e  f1050003          ADD      r0,r5,#3
                  |L2.34|
000022  f0200003          BIC      r0,r0,#3
;;;74       NumColors    = (BPP > 8) ? 0 : (1 << BPP);
000026  dd02              BLE      |L2.46|
000028  f04f0400          MOV      r4,#0
00002c  e003              B        |L2.54|
                  |L2.46|
00002e  f04f0401          MOV      r4,#1
000032  fa04f406          LSL      r4,r4,r6
                  |L2.54|
;;;75       Padding      = BytesPerLine - ((BPP > 8) ? (2 * xSize) : xSize);
000036  dc00              BGT      |L2.58|
000038  4629              MOV      r1,r5
                  |L2.58|
00003a  eba00801          SUB      r8,r0,r1
;;;76       /* Write BITMAPFILEHEADER */
;;;77       BitmapOffset   = SIZEOF_BITMAPFILEHEADER
00003e  f04f0136          MOV      r1,#0x36
000042  eb010784          ADD      r7,r1,r4,LSL #2
;;;78                      + SIZEOF_BITMAPINFOHEADER
;;;79                      + NumColors * 4;
;;;80       FileSize       = BitmapOffset
000046  fb0a7b00          MLA      r11,r10,r0,r7
;;;81                      + ySize * BytesPerLine;
;;;82       _SendU16(pfSerialize, DIB_HEADER_MARKER, p);       /* bfType */
00004a  f6445142          MOV      r1,#0x4d42
00004e  4648              MOV      r0,r9
000050  9a0f              LDR      r2,[sp,#0x3c]
000052  f7fffffe          BL       _SendU16
;;;83       _SendU32(pfSerialize, FileSize, p);                /* bfSize */
000056  4659              MOV      r1,r11
000058  4648              MOV      r0,r9
00005a  9a0f              LDR      r2,[sp,#0x3c]
00005c  f7fffffe          BL       _SendU32
;;;84       _SendU32(pfSerialize, 0, p);                       /* bfReserved1, bfReserved2 */
000060  2100              MOVS     r1,#0
000062  4648              MOV      r0,r9
000064  9a0f              LDR      r2,[sp,#0x3c]
000066  f7fffffe          BL       _SendU32
;;;85       _SendU32(pfSerialize, BitmapOffset, p);            /* bfOffBits */
00006a  4639              MOV      r1,r7
00006c  4648              MOV      r0,r9
00006e  9a0f              LDR      r2,[sp,#0x3c]
000070  f7fffffe          BL       _SendU32
;;;86       /* Write BITMAPINFOHEADER */
;;;87       _SendU32(pfSerialize, SIZEOF_BITMAPINFOHEADER, p); /* biSize */
000074  2128              MOVS     r1,#0x28
000076  4648              MOV      r0,r9
000078  9a0f              LDR      r2,[sp,#0x3c]
00007a  f7fffffe          BL       _SendU32
;;;88       _SendU32(pfSerialize, xSize, p);                   /* biWidth */
00007e  4629              MOV      r1,r5
000080  4648              MOV      r0,r9
000082  9a0f              LDR      r2,[sp,#0x3c]
000084  f7fffffe          BL       _SendU32
;;;89       _SendU32(pfSerialize, ySize, p);                   /* biHeighth */
000088  4651              MOV      r1,r10
00008a  4648              MOV      r0,r9
00008c  9a0f              LDR      r2,[sp,#0x3c]
00008e  f7fffffe          BL       _SendU32
;;;90       _SendU16(pfSerialize, 1, p);                       /* biPlanes */
000092  2101              MOVS     r1,#1
000094  4648              MOV      r0,r9
000096  9a0f              LDR      r2,[sp,#0x3c]
000098  f7fffffe          BL       _SendU16
;;;91       _SendU16(pfSerialize, (BPP  <= 8) ? 8 : 16, p);    /* biBitCount */
00009c  2e08              CMP      r6,#8
00009e  dc01              BGT      |L2.164|
0000a0  2108              MOVS     r1,#8
0000a2  e000              B        |L2.166|
                  |L2.164|
0000a4  2110              MOVS     r1,#0x10
                  |L2.166|
0000a6  4648              MOV      r0,r9
0000a8  9a0f              LDR      r2,[sp,#0x3c]
0000aa  f7fffffe          BL       _SendU16
;;;92       _SendU32(pfSerialize, 0, p);                       /* biCompression */
0000ae  2100              MOVS     r1,#0
0000b0  4648              MOV      r0,r9
0000b2  9a0f              LDR      r2,[sp,#0x3c]
0000b4  f7fffffe          BL       _SendU32
;;;93       _SendU32(pfSerialize, 0, p);                       /* biSizeImage */
0000b8  2100              MOVS     r1,#0
0000ba  4648              MOV      r0,r9
0000bc  9a0f              LDR      r2,[sp,#0x3c]
0000be  f7fffffe          BL       _SendU32
;;;94       _SendU32(pfSerialize, 0, p);                       /* biXPelsPerMeter */
0000c2  2100              MOVS     r1,#0
0000c4  4648              MOV      r0,r9
0000c6  9a0f              LDR      r2,[sp,#0x3c]
0000c8  f7fffffe          BL       _SendU32
;;;95       _SendU32(pfSerialize, 0, p);                       /* biYPelsPerMeter */
0000cc  2100              MOVS     r1,#0
0000ce  4648              MOV      r0,r9
0000d0  9a0f              LDR      r2,[sp,#0x3c]
0000d2  f7fffffe          BL       _SendU32
;;;96       _SendU32(pfSerialize, NumColors, p);               /* biClrUsed */
0000d6  4621              MOV      r1,r4
0000d8  4648              MOV      r0,r9
0000da  9a0f              LDR      r2,[sp,#0x3c]
0000dc  f7fffffe          BL       _SendU32
;;;97       _SendU32(pfSerialize, 0, p);                       /* biClrImportant */
0000e0  2100              MOVS     r1,#0
0000e2  4648              MOV      r0,r9
0000e4  9a0f              LDR      r2,[sp,#0x3c]
0000e6  f7fffffe          BL       _SendU32
;;;98       /* Write palette */
;;;99       for (i = 0; i < NumColors; i++) {
0000ea  2700              MOVS     r7,#0
0000ec  e00f              B        |L2.270|
                  |L2.238|
;;;100        U32 Color;
;;;101        Color = GUI_Index2Color(i);
0000ee  4638              MOV      r0,r7
0000f0  f7fffffe          BL       GUI_Index2Color
;;;102        Color = ((Color >> 16) & 255) | (Color & 0xff00) | ((Color & 0xff) << 16);
0000f4  f400417f          AND      r1,r0,#0xff00
0000f8  f3c04207          UBFX     r2,r0,#16,#8
0000fc  4311              ORRS     r1,r1,r2
0000fe  b2c0              UXTB     r0,r0
000100  ea414100          ORR      r1,r1,r0,LSL #16
;;;103        _SendU32(pfSerialize, Color, p);
000104  4648              MOV      r0,r9
000106  9a0f              LDR      r2,[sp,#0x3c]
000108  f7fffffe          BL       _SendU32
00010c  1c7f              ADDS     r7,r7,#1
                  |L2.270|
00010e  42a7              CMP      r7,r4                 ;99
000110  dbed              BLT      |L2.238|
;;;104      }
;;;105      /* Write pixels */
;;;106      for (y = ySize - 1; y >= 0; y--) {
000112  f1ba0401          SUBS     r4,r10,#1
000116  d43c              BMI      |L2.402|
                  |L2.280|
;;;107        for (x = 0; x < xSize; x++) {
000118  2700              MOVS     r7,#0
00011a  e02d              B        |L2.376|
                  |L2.284|
;;;108          if (BPP <= 8) {
;;;109            pfSerialize(LCD_GetPixelIndex(x0 + x, y0 + y), p);
;;;110          } else {
;;;111            U16 Color16;
;;;112            U32 Color = LCD_GetPixelColor(x0 + x, y0 + y);
00011c  9802              LDR      r0,[sp,#8]
00011e  2e08              CMP      r6,#8                 ;108
000120  eb000104          ADD      r1,r0,r4
000124  9801              LDR      r0,[sp,#4]
000126  4438              ADD      r0,r0,r7
000128  dc06              BGT      |L2.312|
00012a  f7fffffe          BL       LCD_GetPixelIndex
00012e  b2c0              UXTB     r0,r0                 ;109
000130  464a              MOV      r2,r9                 ;109
000132  990f              LDR      r1,[sp,#0x3c]         ;109
000134  4790              BLX      r2                    ;109
000136  e01e              B        |L2.374|
                  |L2.312|
000138  f7fffffe          BL       LCD_GetPixelColor
;;;113            int b = ((Color >> 16) * 31 + 127) / 255;
00013c  0c01              LSRS     r1,r0,#16
00013e  ebc11241          RSB      r2,r1,r1,LSL #5
000142  21ff              MOVS     r1,#0xff
;;;114            int g = (((Color >> 8) & 255) * 31 + 127) / 255;
000144  f3c02307          UBFX     r3,r0,#8,#8
;;;115            int r = ((Color & 255) * 31 + 127) / 255;
000148  b2c0              UXTB     r0,r0
00014a  ebc01040          RSB      r0,r0,r0,LSL #5
00014e  ebc31343          RSB      r3,r3,r3,LSL #5       ;114
000152  307f              ADDS     r0,r0,#0x7f
000154  337f              ADDS     r3,r3,#0x7f           ;114
000156  fbb0f0f1          UDIV     r0,r0,r1
00015a  327f              ADDS     r2,r2,#0x7f           ;113
00015c  fbb3f3f1          UDIV     r3,r3,r1              ;114
000160  fbb2f2f1          UDIV     r2,r2,r1              ;113
;;;116            Color16 = (r << 10) | (g << 5) | b;       /* 16 bpp Bitmaps in windows are 555: rrrrrgggggbbbbb */
000164  0280              LSLS     r0,r0,#10
000166  ea401043          ORR      r0,r0,r3,LSL #5
00016a  4310              ORRS     r0,r0,r2
00016c  b281              UXTH     r1,r0
;;;117            _SendU16(pfSerialize, Color16, p);
00016e  4648              MOV      r0,r9
000170  9a0f              LDR      r2,[sp,#0x3c]
000172  f7fffffe          BL       _SendU16
                  |L2.374|
000176  1c7f              ADDS     r7,r7,#1
                  |L2.376|
000178  42af              CMP      r7,r5                 ;107
00017a  dbcf              BLT      |L2.284|
;;;118          }
;;;119        }
;;;120        /* Align pointer to next U32 */
;;;121        for (i = 0; i < Padding; i++) {
00017c  2700              MOVS     r7,#0
00017e  e004              B        |L2.394|
                  |L2.384|
;;;122          pfSerialize(0, p);
000180  2000              MOVS     r0,#0
000182  464a              MOV      r2,r9
000184  990f              LDR      r1,[sp,#0x3c]
000186  4790              BLX      r2
000188  1c7f              ADDS     r7,r7,#1
                  |L2.394|
00018a  4547              CMP      r7,r8                 ;121
00018c  dbf8              BLT      |L2.384|
00018e  1e64              SUBS     r4,r4,#1              ;121
000190  d5c2              BPL      |L2.280|
                  |L2.402|
;;;123        }
;;;124      }
;;;125      GUI_UNLOCK();
;;;126    }
000192  e8bd9fff          POP      {r0-r12,pc}
;;;127    
                          ENDP


                          AREA ||i._SendU16||, CODE, READONLY, ALIGN=1

                  _SendU16 PROC
;;;43     */
;;;44     static void _SendU16(GUI_CALLBACK_VOID_U8_P * pfSerialize, U16 Data, void * p) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;45       (*pfSerialize)((U8)Data, p);
000006  b2c8              UXTB     r0,r1
000008  4616              MOV      r6,r2                 ;44
00000a  4611              MOV      r1,r2
00000c  47a8              BLX      r5
;;;46       (*pfSerialize)(Data >> 8, p);
00000e  0a20              LSRS     r0,r4,#8
000010  4631              MOV      r1,r6
000012  46ac              MOV      r12,r5
000014  e8bd4070          POP      {r4-r6,lr}
000018  4760              BX       r12
;;;47     }
;;;48     
                          ENDP


                          AREA ||i._SendU32||, CODE, READONLY, ALIGN=1

                  _SendU32 PROC
;;;52     */
;;;53     static void _SendU32(GUI_CALLBACK_VOID_U8_P * pfSerialize, U32 Data, void * p) {
000000  b570              PUSH     {r4-r6,lr}
000002  460c              MOV      r4,r1
000004  4615              MOV      r5,r2
000006  4606              MOV      r6,r0
;;;54       _SendU16(pfSerialize, (U16)Data, p);
000008  b289              UXTH     r1,r1
00000a  f7fffffe          BL       _SendU16
;;;55       _SendU16(pfSerialize, Data >> 16, p);
00000e  0c21              LSRS     r1,r4,#16
000010  462a              MOV      r2,r5
000012  4630              MOV      r0,r6
000014  e8bd4070          POP      {r4-r6,lr}
000018  f7ffbffe          B.W      _SendU16
;;;56     }
;;;57     
                          ENDP

