; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\gui_gif.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui_gif.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\Core\GUI_GIF.c]
                          THUMB

                          AREA ||i.GUI_GIF_Draw||, CODE, READONLY, ALIGN=1

                  GUI_GIF_Draw PROC
;;;1008   */
;;;1009   int GUI_GIF_Draw(const void * pGIF, U32 NumBytes, int x0, int y0) {
000000  b538              PUSH     {r3-r5,lr}
;;;1010     return GUI_GIF_DrawEx(pGIF, NumBytes, x0, y0, 0);
000002  2400              MOVS     r4,#0
000004  9400              STR      r4,[sp,#0]
000006  f7fffffe          BL       GUI_GIF_DrawEx
;;;1011   }
00000a  bd38              POP      {r3-r5,pc}
;;;1012   
                          ENDP


                          AREA ||i.GUI_GIF_DrawEx||, CODE, READONLY, ALIGN=2

                  GUI_GIF_DrawEx PROC
;;;977    */
;;;978    int GUI_GIF_DrawEx(const void * pGIF, U32 NumBytes, int x0, int y0, int Index) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b087              SUB      sp,sp,#0x1c
000006  469a              MOV      r10,r3
000008  4615              MOV      r5,r2
00000a  4604              MOV      r4,r0
;;;979      const U8 * pSrc;
;;;980      int Result = 0, OldColorIndex;
00000c  2600              MOVS     r6,#0
;;;981      #if (GUI_WINSUPPORT)
;;;982        int Width, Height;
;;;983        GUI_RECT r;
;;;984        Width  = GUI_GIF_GetXSize(pGIF);
00000e  9f14              LDR      r7,[sp,#0x50]
000010  f7fffffe          BL       GUI_GIF_GetXSize
000014  4683              MOV      r11,r0
;;;985        Height = GUI_GIF_GetYSize(pGIF);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       GUI_GIF_GetYSize
00001c  4681              MOV      r9,r0
;;;986      #endif
;;;987      GUI_LOCK();
;;;988      OldColorIndex = LCD_GetColorIndex();
00001e  f7fffffe          BL       LCD_GetColorIndex
;;;989      pSrc          = (const U8 *)pGIF;
;;;990      #if (GUI_WINSUPPORT)
;;;991        WM_ADDORG(x0,y0);
000022  9004              STR      r0,[sp,#0x10]
000024  4815              LDR      r0,|L2.124|
000026  46a0              MOV      r8,r4                 ;989
000028  6c41              LDR      r1,[r0,#0x44]  ; GUI_Context
00002a  440d              ADD      r5,r5,r1
00002c  6c81              LDR      r1,[r0,#0x48]  ; GUI_Context
;;;992        r.x1 = (r.x0 = x0) + Width - 1;
00002e  eb05000b          ADD      r0,r5,r11
000032  eb01040a          ADD      r4,r1,r10             ;991
000036  1e40              SUBS     r0,r0,#1
000038  f8ad0008          STRH     r0,[sp,#8]
;;;993        r.y1 = (r.y0 = y0) + Height - 1;
00003c  eb040009          ADD      r0,r4,r9
000040  1e40              SUBS     r0,r0,#1
000042  f8ad5004          STRH     r5,[sp,#4]            ;992
000046  f8ad000a          STRH     r0,[sp,#0xa]
00004a  f8ad4006          STRH     r4,[sp,#6]
;;;994        WM_ITERATE_START(&r) {
00004e  a801              ADD      r0,sp,#4
000050  f7fffffe          BL       WM__InitIVRSearch
000054  e009              B        |L2.106|
                  |L2.86|
;;;995      #endif
;;;996      Result = _DrawGIFImage(pSrc, NumBytes, x0, y0, Index);
000056  4623              MOV      r3,r4
000058  462a              MOV      r2,r5
00005a  9700              STR      r7,[sp,#0]
00005c  4640              MOV      r0,r8
00005e  9908              LDR      r1,[sp,#0x20]
000060  f7fffffe          BL       _DrawGIFImage
000064  4606              MOV      r6,r0
;;;997      #if (GUI_WINSUPPORT)
;;;998        } WM_ITERATE_END();
000066  f7fffffe          BL       WM__GetNextIVR
                  |L2.106|
00006a  2800              CMP      r0,#0
00006c  d1f3              BNE      |L2.86|
;;;999      #endif
;;;1000     LCD_SetColorIndex(OldColorIndex);
00006e  9804              LDR      r0,[sp,#0x10]
000070  f7fffffe          BL       LCD_SetColorIndex
;;;1001     GUI_UNLOCK();
;;;1002     return Result;
;;;1003   }
000074  b00b              ADD      sp,sp,#0x2c
000076  4630              MOV      r0,r6                 ;1002
000078  e8bd8ff0          POP      {r4-r11,pc}
;;;1004   
                          ENDP

                  |L2.124|
                          DCD      GUI_Context

                          AREA ||i.GUI_GIF_GetComment||, CODE, READONLY, ALIGN=1

                  GUI_GIF_GetComment PROC
;;;1042   */
;;;1043   int GUI_GIF_GetComment(const void * pGIF, U32 NumBytes, U8 * pBuffer, int MaxSize, int Index) {
000000  b538              PUSH     {r3-r5,lr}
;;;1044     const U8 * pSrc;
;;;1045     pSrc = (const U8 *)pGIF;
;;;1046     if (_GetGIFComment(pSrc, NumBytes, pBuffer, MaxSize, Index)) {
000002  9c04              LDR      r4,[sp,#0x10]
000004  9400              STR      r4,[sp,#0]
000006  f7fffffe          BL       _GetGIFComment
00000a  2800              CMP      r0,#0
00000c  d000              BEQ      |L3.16|
;;;1047       return 1;
00000e  2001              MOVS     r0,#1
                  |L3.16|
;;;1048     }
;;;1049     return 0;
;;;1050   }
000010  bd38              POP      {r3-r5,pc}
;;;1051   
                          ENDP


                          AREA ||i.GUI_GIF_GetImageInfo||, CODE, READONLY, ALIGN=1

                  GUI_GIF_GetImageInfo PROC
;;;1029   */
;;;1030   int GUI_GIF_GetImageInfo(const void * pGIF, U32 NumBytes, GUI_GIF_IMAGE_INFO * pInfo, int Index) {
000000  b510              PUSH     {r4,lr}
;;;1031     const U8 * pSrc;
;;;1032     pSrc = (const U8 *)pGIF;
;;;1033     if (_GetImageInfo(pSrc, NumBytes, pInfo, Index)) {
000002  f7fffffe          BL       _GetImageInfo
000006  2800              CMP      r0,#0
000008  d000              BEQ      |L4.12|
;;;1034       return 1;
00000a  2001              MOVS     r0,#1
                  |L4.12|
;;;1035     }
;;;1036     return 0;
;;;1037   }
00000c  bd10              POP      {r4,pc}
;;;1038   
                          ENDP


                          AREA ||i.GUI_GIF_GetInfo||, CODE, READONLY, ALIGN=1

                  GUI_GIF_GetInfo PROC
;;;1016   */
;;;1017   int GUI_GIF_GetInfo(const void * pGIF, U32 NumBytes, GUI_GIF_INFO * pInfo) {
000000  b510              PUSH     {r4,lr}
;;;1018     const U8 * pSrc;
;;;1019     pSrc = (const U8 *)pGIF;
;;;1020     if (_GetGIFInfo(pSrc, NumBytes, pInfo)) {
000002  f7fffffe          BL       _GetGIFInfo
000006  2800              CMP      r0,#0
000008  d000              BEQ      |L5.12|
;;;1021       return 1;
00000a  2001              MOVS     r0,#1
                  |L5.12|
;;;1022     }
;;;1023     return 0;
;;;1024   }
00000c  bd10              POP      {r4,pc}
;;;1025   
                          ENDP


                          AREA ||i.GUI_GIF_GetXSize||, CODE, READONLY, ALIGN=1

                  GUI_GIF_GetXSize PROC
;;;948    */
;;;949    int GUI_GIF_GetXSize(const void * pGIF) {
000000  b508              PUSH     {r3,lr}
000002  2800              CMP      r0,#0
000004  d004              BEQ      |L6.16|
000006  1d80              ADDS     r0,r0,#6
;;;950      const U8 * pSrc;
;;;951      if (!pGIF) {
;;;952        return 0;
;;;953      }
;;;954      pSrc = (const U8 *)pGIF + 6;
;;;955      return GUI__Read16(&pSrc);
000008  9000              STR      r0,[sp,#0]
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       GUI__Read16
                  |L6.16|
;;;956    }
000010  bd08              POP      {r3,pc}
;;;957    
                          ENDP


                          AREA ||i.GUI_GIF_GetYSize||, CODE, READONLY, ALIGN=1

                  GUI_GIF_GetYSize PROC
;;;964    */
;;;965    int GUI_GIF_GetYSize(const void * pGIF) {
000000  b508              PUSH     {r3,lr}
000002  2800              CMP      r0,#0
000004  d004              BEQ      |L7.16|
000006  3008              ADDS     r0,r0,#8
;;;966      const U8 * pSrc;
;;;967      if (!pGIF) {
;;;968        return 0;
;;;969      }
;;;970      pSrc = (const U8 *)pGIF + 8;
;;;971      return GUI__Read16(&pSrc);
000008  9000              STR      r0,[sp,#0]
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       GUI__Read16
                  |L7.16|
;;;972    }
000010  bd08              POP      {r3,pc}
;;;973    
                          ENDP


                          AREA ||i._ClearUnusedPixels||, CODE, READONLY, ALIGN=1

                  _ClearUnusedPixels PROC
;;;820    */
;;;821    static void _ClearUnusedPixels(int x0, int y0, IMAGE_DESCRIPTOR * pDescriptor, GUI_GIF_IMAGE_INFO * pInfo) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  461c              MOV      r4,r3
000006  4617              MOV      r7,r2
000008  4688              MOV      r8,r1
00000a  4681              MOV      r9,r0
;;;822      LCD_SetColorIndex(LCD_GetBkColorIndex());
00000c  f7fffffe          BL       LCD_GetBkColorIndex
000010  f7fffffe          BL       LCD_SetColorIndex
;;;823      if (pDescriptor->YPos > pInfo->yPos) {
000014  687b              LDR      r3,[r7,#4]
000016  6861              LDR      r1,[r4,#4]
;;;824        LCD_FillRect(x0 + pInfo->xPos,
000018  f1a90601          SUB      r6,r9,#1
00001c  f1a80501          SUB      r5,r8,#1
000020  428b              CMP      r3,r1                 ;823
000022  dd08              BLE      |L8.54|
000024  68a2              LDR      r2,[r4,#8]
000026  6820              LDR      r0,[r4,#0]
000028  442b              ADD      r3,r3,r5
00002a  4402              ADD      r2,r2,r0
00002c  4432              ADD      r2,r2,r6
00002e  4441              ADD      r1,r1,r8
000030  4448              ADD      r0,r0,r9
000032  f7fffffe          BL       LCD_FillRect
                  |L8.54|
;;;825                     y0 + pInfo->yPos,
;;;826                     x0 + pInfo->xPos + pInfo->xSize - 1,
;;;827                     y0 + pDescriptor->YPos - 1);
;;;828      }
;;;829      if (pDescriptor->XPos > pInfo->xPos) {
000036  683a              LDR      r2,[r7,#0]
000038  6820              LDR      r0,[r4,#0]
00003a  4282              CMP      r2,r0
00003c  dd08              BLE      |L8.80|
;;;830        LCD_FillRect(x0 + pInfo->xPos,
00003e  68e3              LDR      r3,[r4,#0xc]
000040  6861              LDR      r1,[r4,#4]
000042  4432              ADD      r2,r2,r6
000044  440b              ADD      r3,r3,r1
000046  442b              ADD      r3,r3,r5
000048  4441              ADD      r1,r1,r8
00004a  4448              ADD      r0,r0,r9
00004c  f7fffffe          BL       LCD_FillRect
                  |L8.80|
;;;831                     y0 + pInfo->yPos,
;;;832                     x0 + pDescriptor->XPos - 1,
;;;833                     y0 + pInfo->yPos + pInfo->ySize - 1);
;;;834      }
;;;835      if ((pDescriptor->YPos + pDescriptor->YSize) < (pInfo->yPos + pInfo->ySize)) {
000050  68f9              LDR      r1,[r7,#0xc]
000052  6878              LDR      r0,[r7,#4]
000054  68e2              LDR      r2,[r4,#0xc]
000056  4401              ADD      r1,r1,r0
000058  6860              LDR      r0,[r4,#4]
00005a  4410              ADD      r0,r0,r2
00005c  4281              CMP      r1,r0
00005e  da08              BGE      |L8.114|
;;;836        LCD_FillRect(x0 + pInfo->xPos,
000060  1943              ADDS     r3,r0,r5
000062  68a2              LDR      r2,[r4,#8]
000064  6820              LDR      r0,[r4,#0]
000066  4429              ADD      r1,r1,r5
000068  4402              ADD      r2,r2,r0
00006a  4432              ADD      r2,r2,r6
00006c  4448              ADD      r0,r0,r9
00006e  f7fffffe          BL       LCD_FillRect
                  |L8.114|
;;;837                     y0 + pDescriptor->YPos + pDescriptor->YSize - 1,
;;;838                     x0 + pInfo->xPos + pInfo->xSize - 1,
;;;839                     y0 + pInfo->yPos + pInfo->ySize - 1);
;;;840      }
;;;841      if ((pDescriptor->XPos + pDescriptor->XSize) < (pInfo->xPos + pInfo->xSize)) {
000072  68b9              LDR      r1,[r7,#8]
000074  6838              LDR      r0,[r7,#0]
000076  68a2              LDR      r2,[r4,#8]
000078  4408              ADD      r0,r0,r1
00007a  6821              LDR      r1,[r4,#0]
00007c  440a              ADD      r2,r2,r1
00007e  4290              CMP      r0,r2
000080  da0a              BGE      |L8.152|
;;;842        LCD_FillRect(x0 + pDescriptor->XPos + pDescriptor->XSize - 1,
000082  68e3              LDR      r3,[r4,#0xc]
000084  6861              LDR      r1,[r4,#4]
000086  4432              ADD      r2,r2,r6
000088  440b              ADD      r3,r3,r1
00008a  442b              ADD      r3,r3,r5
00008c  4430              ADD      r0,r0,r6
00008e  4441              ADD      r1,r1,r8
000090  e8bd47f0          POP      {r4-r10,lr}
000094  f7ffbffe          B.W      LCD_FillRect
                  |L8.152|
;;;843                     y0 + pInfo->yPos,
;;;844                     x0 + pInfo->xPos + pInfo->xSize - 1,
;;;845                     y0 + pInfo->yPos + pInfo->ySize - 1);
;;;846      }
;;;847    }
000098  e8bd87f0          POP      {r4-r10,pc}
;;;848    
                          ENDP


                          AREA ||i._DispGIFImage||, CODE, READONLY, ALIGN=2

                  _DispGIFImage PROC
;;;455    */
;;;456    static int _DispGIFImage(IMAGE_DESCRIPTOR * pDescriptor, int x0, int y0, int Transparency, int Disposal) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  4604              MOV      r4,r0
000006  b089              SUB      sp,sp,#0x24
000008  e9d41002          LDRD     r1,r0,[r4,#8]
;;;457      int Codesize, Index, OldIndex, XPos, YPos, YCnt, Pass, Interlace, XEnd;
;;;458      int Width, Height, NumColors, Cnt, BkColorIndex, ColorIndex;
;;;459      LCD_LOGPALETTE LogPalette;
;;;460      const LCD_PIXELINDEX * pTrans;
;;;461      Width     = pDescriptor->XSize;
;;;462      Height    = pDescriptor->YSize;
00000c  4681              MOV      r9,r0
;;;463      NumColors = pDescriptor->NumColors;
00000e  6960              LDR      r0,[r4,#0x14]
;;;464      XEnd      = Width + x0 - 1;
000010  9002              STR      r0,[sp,#8]
000012  980a              LDR      r0,[sp,#0x28]
000014  180e              ADDS     r6,r1,r0
000016  1e76              SUBS     r6,r6,#1
;;;465      BkColorIndex = LCD_GetBkColorIndex();
000018  f7fffffe          BL       LCD_GetBkColorIndex
;;;466      /* Get color translation table  */
;;;467      LogPalette.NumEntries  = NumColors;
00001c  9001              STR      r0,[sp,#4]
00001e  9802              LDR      r0,[sp,#8]
;;;468      LogPalette.HasTrans    = 0;
000020  9003              STR      r0,[sp,#0xc]
000022  2000              MOVS     r0,#0
000024  f88d0010          STRB     r0,[sp,#0x10]
;;;469      LogPalette.pPalEntries = _aColorTable;
000028  4853              LDR      r0,|L9.376|
;;;470      if ((pTrans = LCD_GetpPalConvTable((const LCD_LOGPALETTE *)&LogPalette)) == NULL) {
00002a  9005              STR      r0,[sp,#0x14]
00002c  a803              ADD      r0,sp,#0xc
00002e  f7fffffe          BL       LCD_GetpPalConvTable
000032  9007              STR      r0,[sp,#0x1c]
000034  b338              CBZ      r0,|L9.134|
;;;471        return 1; /* Error */
;;;472      }
;;;473      Codesize  = _ReadU8();                 /* Read the LZW codesize */
000036  f7fffffe          BL       _ReadU8
;;;474      _InitLZW(Codesize);                    /* Initialize the LZW stack with the LZW codesize */
00003a  f7fffffe          BL       _InitLZW
;;;475      Interlace = pDescriptor->Flags & 0x40; /* Evaluate if image is interlaced */
00003e  7c20              LDRB     r0,[r4,#0x10]
;;;476      for (YCnt = 0, YPos = y0, Pass = 0; YCnt < Height; YCnt++) {
000040  2700              MOVS     r7,#0
000042  f0000040          AND      r0,r0,#0x40           ;475
000046  f8ddb02c          LDR      r11,[sp,#0x2c]
00004a  9008              STR      r0,[sp,#0x20]
;;;477        Cnt      = 0;
;;;478        OldIndex = -1;    
;;;479        for (XPos = x0; XPos <= XEnd; XPos++) {
;;;480          if (_LZWContext.sp > _LZWContext.aDecompBuffer) {
00004c  f8df812c          LDR      r8,|L9.380|
000050  9706              STR      r7,[sp,#0x18]         ;476
000052  e088              B        |L9.358|
                  |L9.84|
000054  9000              STR      r0,[sp,#0]            ;479
000056  f04f3aff          MOV      r10,#0xffffffff       ;478
00005a  9c0a              LDR      r4,[sp,#0x28]         ;479
00005c  e04b              B        |L9.246|
                  |L9.94|
00005e  4948              LDR      r1,|L9.384|
000060  f8d80204          LDR      r0,[r8,#0x204]  ; _LZWContext
000064  4288              CMP      r0,r1
000066  d904              BLS      |L9.114|
000068  1e40              SUBS     r0,r0,#1
;;;481            Index = *--(_LZWContext.sp);
00006a  f8c80204          STR      r0,[r8,#0x204]  ; _LZWContext
00006e  7805              LDRB     r5,[r0,#0]
000070  e002              B        |L9.120|
                  |L9.114|
;;;482          } else {
;;;483            Index = _GetNextByte();
000072  f7fffffe          BL       _GetNextByte
000076  4605              MOV      r5,r0
                  |L9.120|
;;;484          }
;;;485          if (Index == -2) {
000078  1ca8              ADDS     r0,r5,#2
00007a  d005              BEQ      |L9.136|
;;;486            return 0; /* End code */
;;;487          }
;;;488          if ((Index < 0) || (Index >= NumColors)) {
00007c  2d00              CMP      r5,#0
00007e  db02              BLT      |L9.134|
000080  9802              LDR      r0,[sp,#8]
000082  4285              CMP      r5,r0
000084  db03              BLT      |L9.142|
                  |L9.134|
;;;489            /* If Index out of legal range stop decompressing */
;;;490            return 1; /* Error */
000086  2001              MOVS     r0,#1
                  |L9.136|
;;;491          }
;;;492          /* If current index equals old index increment counter */
;;;493          if ((Index == OldIndex) && (XPos <= XEnd)) {
;;;494            Cnt++;
;;;495          } else {
;;;496            if (Cnt) {
;;;497              if (OldIndex != Transparency) {
;;;498                LCD_SetColorIndex(*(pTrans + OldIndex));
;;;499                LCD_DrawHLine(XPos - Cnt - 1, YPos, XPos - 1);
;;;500              } else if (Disposal == 2) {
;;;501                LCD_SetColorIndex(BkColorIndex);
;;;502                LCD_DrawHLine(XPos - Cnt - 1, YPos, XPos - 1);
;;;503              }
;;;504              Cnt = 0;
;;;505            } else {
;;;506              if (OldIndex >= 0) {
;;;507                if (OldIndex != Transparency) {
;;;508                  LCD_SetPixelIndex(XPos - 1, YPos, *(pTrans + OldIndex));
;;;509                } else if (Disposal == 2) {
;;;510                  LCD_SetPixelIndex(XPos - 1, YPos, BkColorIndex);
;;;511                }
;;;512              }
;;;513            }
;;;514          }
;;;515          OldIndex = Index;
;;;516        }
;;;517        if ((OldIndex != Transparency) || (Disposal == 2)) {
;;;518          if (OldIndex != Transparency) {
;;;519            ColorIndex = *(pTrans + OldIndex);
;;;520          } else {
;;;521            ColorIndex = BkColorIndex;
;;;522          }
;;;523          if (Cnt) {
;;;524            LCD_SetColorIndex(ColorIndex);
;;;525            LCD_DrawHLine(XPos - Cnt - 1, YPos, XPos - 1);
;;;526          } else {
;;;527            LCD_SetPixelIndex(XEnd, YPos, ColorIndex);
;;;528          }
;;;529        }
;;;530        /* Adjust YPos if image is interlaced */
;;;531        if (Interlace) {
;;;532          YPos += _aInterlaceOffset[Pass];
;;;533          if ((YPos - y0) >= Height) {
;;;534            ++Pass;
;;;535            YPos = _aInterlaceYPos[Pass] + y0;
;;;536          }
;;;537        } else {
;;;538          YPos++;
;;;539        }
;;;540      }
;;;541      return 0;
;;;542    }
000088  b00d              ADD      sp,sp,#0x34
00008a  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.142|
00008e  4555              CMP      r5,r10                ;493
000090  d104              BNE      |L9.156|
000092  42b4              CMP      r4,r6                 ;493
000094  dc02              BGT      |L9.156|
000096  9800              LDR      r0,[sp,#0]            ;494
000098  1c40              ADDS     r0,r0,#1              ;494
00009a  e016              B        |L9.202|
                  |L9.156|
00009c  9800              LDR      r0,[sp,#0]            ;496
00009e  b1b0              CBZ      r0,|L9.206|
0000a0  990c              LDR      r1,[sp,#0x30]         ;497
0000a2  458a              CMP      r10,r1                ;497
0000a4  d003              BEQ      |L9.174|
0000a6  9907              LDR      r1,[sp,#0x1c]         ;498
0000a8  f831001a          LDRH     r0,[r1,r10,LSL #1]    ;498
0000ac  e003              B        |L9.182|
                  |L9.174|
0000ae  9816              LDR      r0,[sp,#0x58]         ;500
0000b0  2802              CMP      r0,#2                 ;500
0000b2  d109              BNE      |L9.200|
0000b4  9801              LDR      r0,[sp,#4]            ;501
                  |L9.182|
0000b6  f7fffffe          BL       LCD_SetColorIndex
0000ba  9800              LDR      r0,[sp,#0]            ;502
0000bc  1e62              SUBS     r2,r4,#1              ;502
0000be  1a20              SUBS     r0,r4,r0              ;502
0000c0  4659              MOV      r1,r11                ;502
0000c2  1e40              SUBS     r0,r0,#1              ;502
0000c4  f7fffffe          BL       LCD_DrawHLine
                  |L9.200|
0000c8  2000              MOVS     r0,#0                 ;504
                  |L9.202|
0000ca  9000              STR      r0,[sp,#0]            ;504
0000cc  e011              B        |L9.242|
                  |L9.206|
0000ce  f1ba0f00          CMP      r10,#0                ;506
0000d2  db0e              BLT      |L9.242|
0000d4  990c              LDR      r1,[sp,#0x30]         ;507
0000d6  458a              CMP      r10,r1                ;507
0000d8  d003              BEQ      |L9.226|
0000da  9807              LDR      r0,[sp,#0x1c]         ;508
0000dc  f830201a          LDRH     r2,[r0,r10,LSL #1]    ;508
0000e0  e003              B        |L9.234|
                  |L9.226|
0000e2  9816              LDR      r0,[sp,#0x58]         ;509
0000e4  2802              CMP      r0,#2                 ;509
0000e6  d104              BNE      |L9.242|
0000e8  9a01              LDR      r2,[sp,#4]            ;510
                  |L9.234|
0000ea  4659              MOV      r1,r11                ;510
0000ec  1e60              SUBS     r0,r4,#1              ;510
0000ee  f7fffffe          BL       LCD_SetPixelIndex
                  |L9.242|
0000f2  46aa              MOV      r10,r5                ;515
0000f4  1c64              ADDS     r4,r4,#1              ;515
                  |L9.246|
0000f6  42b4              CMP      r4,r6                 ;479
0000f8  ddb1              BLE      |L9.94|
0000fa  990c              LDR      r1,[sp,#0x30]         ;517
0000fc  458a              CMP      r10,r1                ;517
0000fe  d102              BNE      |L9.262|
000100  9816              LDR      r0,[sp,#0x58]         ;517
000102  2802              CMP      r0,#2                 ;517
000104  d118              BNE      |L9.312|
                  |L9.262|
000106  980c              LDR      r0,[sp,#0x30]         ;518
000108  4582              CMP      r10,r0                ;518
00010a  d003              BEQ      |L9.276|
00010c  9807              LDR      r0,[sp,#0x1c]         ;519
00010e  f830001a          LDRH     r0,[r0,r10,LSL #1]    ;519
000112  e000              B        |L9.278|
                  |L9.276|
000114  9801              LDR      r0,[sp,#4]            ;521
                  |L9.278|
000116  9900              LDR      r1,[sp,#0]            ;523
000118  b149              CBZ      r1,|L9.302|
00011a  f7fffffe          BL       LCD_SetColorIndex
00011e  9800              LDR      r0,[sp,#0]            ;525
000120  1e62              SUBS     r2,r4,#1              ;525
000122  1a20              SUBS     r0,r4,r0              ;525
000124  4659              MOV      r1,r11                ;525
000126  1e40              SUBS     r0,r0,#1              ;525
000128  f7fffffe          BL       LCD_DrawHLine
00012c  e004              B        |L9.312|
                  |L9.302|
00012e  4602              MOV      r2,r0                 ;527
000130  4659              MOV      r1,r11                ;527
000132  4630              MOV      r0,r6                 ;527
000134  f7fffffe          BL       LCD_SetPixelIndex
                  |L9.312|
000138  9808              LDR      r0,[sp,#0x20]         ;531
00013a  b1d0              CBZ      r0,|L9.370|
00013c  4911              LDR      r1,|L9.388|
00013e  9806              LDR      r0,[sp,#0x18]         ;532
000140  f8511020          LDR      r1,[r1,r0,LSL #2]     ;532
000144  448b              ADD      r11,r11,r1            ;532
000146  990b              LDR      r1,[sp,#0x2c]         ;533
000148  ebab0101          SUB      r1,r11,r1             ;533
00014c  4549              CMP      r1,r9                 ;533
00014e  db09              BLT      |L9.356|
000150  9806              LDR      r0,[sp,#0x18]         ;534
000152  490c              LDR      r1,|L9.388|
000154  1c40              ADDS     r0,r0,#1              ;534
000156  3110              ADDS     r1,r1,#0x10           ;535
000158  9006              STR      r0,[sp,#0x18]         ;535
00015a  f8511020          LDR      r1,[r1,r0,LSL #2]     ;535
00015e  980b              LDR      r0,[sp,#0x2c]         ;535
000160  4408              ADD      r0,r0,r1              ;535
                  |L9.354|
000162  4683              MOV      r11,r0                ;535
                  |L9.356|
000164  1c7f              ADDS     r7,r7,#1              ;535
                  |L9.358|
000166  454f              CMP      r7,r9                 ;476
000168  f04f0000          MOV      r0,#0                 ;541
00016c  f6ffaf72          BLT      |L9.84|
000170  e78a              B        |L9.136|
                  |L9.370|
000172  f10b0001          ADD      r0,r11,#1             ;538
000176  e7f4              B        |L9.354|
;;;543    
                          ENDP

                  |L9.376|
                          DCD      ||.bss||+0x323c
                  |L9.380|
                          DCD      ||.bss||+0x3000
                  |L9.384|
                          DCD      ||.bss||+0x3102
                  |L9.388|
                          DCD      ||.constdata||+0x40

                          AREA ||i._DrawGIFImage||, CODE, READONLY, ALIGN=2

                  _DrawGIFImage PROC
;;;865    */
;;;866    static int _DrawGIFImage(const U8 * pData, U32 NumBytes, int x0, int y0, int Index) {
000000  e92d43f0          PUSH     {r4-r9,lr}
000004  b091              SUB      sp,sp,#0x44
000006  460d              MOV      r5,r1
000008  4681              MOV      r9,r0
00000a  461f              MOV      r7,r3
00000c  4690              MOV      r8,r2
;;;867      U8 Disposal;
;;;868      int XSize, YSize, TransIndex, ImageCnt;
;;;869      IMAGE_DESCRIPTOR Descriptor = {0};
00000e  2118              MOVS     r1,#0x18
000010  a806              ADD      r0,sp,#0x18
000012  9e18              LDR      r6,[sp,#0x60]
000014  f7fffffe          BL       __aeabi_memclr4
;;;870      GUI_GIF_IMAGE_INFO Info = {0};
000018  2114              MOVS     r1,#0x14
00001a  a801              ADD      r0,sp,#4
00001c  f7fffffe          BL       __aeabi_memclr4
;;;871      U8 Introducer;
;;;872      ImageCnt   =  0;
000020  2400              MOVS     r4,#0
;;;873      TransIndex = -1;
000022  1e60              SUBS     r0,r4,#1
;;;874      /* Initialize decoding and get size and global color table */
;;;875      if (_GetSizeAndColorTable(pData, NumBytes, &XSize, &YSize, &Descriptor.NumColors)) {
000024  900c              STR      r0,[sp,#0x30]
000026  a80b              ADD      r0,sp,#0x2c
000028  9000              STR      r0,[sp,#0]
00002a  ab10              ADD      r3,sp,#0x40
00002c  aa0f              ADD      r2,sp,#0x3c
00002e  4629              MOV      r1,r5
000030  4648              MOV      r0,r9
000032  f7fffffe          BL       _GetSizeAndColorTable
000036  e067              B        |L10.264|
                  |L10.56|
;;;876        return 1; /* Error */
;;;877      }
;;;878      /* Iterate over the blocks */
;;;879      do {
;;;880        Introducer = _ReadU8();
000038  f7fffffe          BL       _ReadU8
00003c  4605              MOV      r5,r0
;;;881        switch (Introducer) {
00003e  2821              CMP      r0,#0x21
000040  d054              BEQ      |L10.236|
000042  2d2c              CMP      r5,#0x2c
000044  d002              BEQ      |L10.76|
000046  283b              CMP      r0,#0x3b
000048  d160              BNE      |L10.268|
00004a  e04c              B        |L10.230|
                  |L10.76|
;;;882        case GIF_INTRO_IMAGE:
;;;883          /* Read image descriptor */
;;;884          Descriptor.XPos  = _ReadU16();
00004c  f7fffffe          BL       _ReadU16
;;;885          Descriptor.YPos  = _ReadU16();
000050  9006              STR      r0,[sp,#0x18]
000052  f7fffffe          BL       _ReadU16
;;;886          Descriptor.XSize = _ReadU16();
000056  9007              STR      r0,[sp,#0x1c]
000058  f7fffffe          BL       _ReadU16
;;;887          Descriptor.YSize = _ReadU16();
00005c  9008              STR      r0,[sp,#0x20]
00005e  f7fffffe          BL       _ReadU16
;;;888          Descriptor.Flags = _ReadU8 ();
000062  9009              STR      r0,[sp,#0x24]
000064  f7fffffe          BL       _ReadU8
;;;889          if (_Source.RemBytes < 0) {
000068  900a              STR      r0,[sp,#0x28]
00006a  4829              LDR      r0,|L10.272|
00006c  6840              LDR      r0,[r0,#4]  ; _Source
00006e  2800              CMP      r0,#0
000070  db4c              BLT      |L10.268|
;;;890            return 1; /* Error */
;;;891          }
;;;892          if (Descriptor.Flags & 0x80) {
000072  980a              LDR      r0,[sp,#0x28]
000074  0600              LSLS     r0,r0,#24
000076  d503              BPL      |L10.128|
;;;893            /* Read local color table */
;;;894            if (_ReadColorMap(Descriptor.NumColors)) {
000078  980b              LDR      r0,[sp,#0x2c]
00007a  f7fffffe          BL       _ReadColorMap
00007e  bba0              CBNZ     r0,|L10.234|
                  |L10.128|
;;;895              return 1; /* Error */
;;;896            }
;;;897          }
;;;898          if (ImageCnt == Index - 1) {
000080  1e70              SUBS     r0,r6,#1
000082  4284              CMP      r4,r0
000084  d107              BNE      |L10.150|
;;;899            Info.xPos  = Descriptor.XPos;
000086  9806              LDR      r0,[sp,#0x18]
;;;900            Info.yPos  = Descriptor.YPos;
000088  9001              STR      r0,[sp,#4]
00008a  9807              LDR      r0,[sp,#0x1c]
;;;901            Info.xSize = Descriptor.XSize;
00008c  9002              STR      r0,[sp,#8]
00008e  9808              LDR      r0,[sp,#0x20]
;;;902            Info.ySize = Descriptor.YSize;
000090  9003              STR      r0,[sp,#0xc]
000092  9809              LDR      r0,[sp,#0x24]
000094  9004              STR      r0,[sp,#0x10]
                  |L10.150|
;;;903          }
;;;904          if (Index == ImageCnt) {
000096  42a6              CMP      r6,r4
000098  d11b              BNE      |L10.210|
;;;905            if (Disposal == 2) {
00009a  f89d0034          LDRB     r0,[sp,#0x34]
00009e  2802              CMP      r0,#2
0000a0  d105              BNE      |L10.174|
;;;906              _ClearUnusedPixels(x0, y0, &Descriptor, &Info);
0000a2  ab01              ADD      r3,sp,#4
0000a4  aa06              ADD      r2,sp,#0x18
0000a6  4639              MOV      r1,r7
0000a8  4640              MOV      r0,r8
0000aa  f7fffffe          BL       _ClearUnusedPixels
                  |L10.174|
;;;907            }
;;;908            if (_DispGIFImage(&Descriptor, x0 + Descriptor.XPos, y0 + Descriptor.YPos, TransIndex, Disposal)) {
0000ae  f89d0034          LDRB     r0,[sp,#0x34]
0000b2  9000              STR      r0,[sp,#0]
0000b4  9807              LDR      r0,[sp,#0x1c]
0000b6  9906              LDR      r1,[sp,#0x18]
0000b8  19c2              ADDS     r2,r0,r7
0000ba  4441              ADD      r1,r1,r8
0000bc  a806              ADD      r0,sp,#0x18
0000be  9b0c              LDR      r3,[sp,#0x30]
0000c0  f7fffffe          BL       _DispGIFImage
0000c4  b988              CBNZ     r0,|L10.234|
;;;909              return 1; /* Error */
;;;910            }
;;;911            if (_ReadU8() != 0) {
0000c6  f7fffffe          BL       _ReadU8
0000ca  b970              CBNZ     r0,|L10.234|
                  |L10.204|
;;;912              return 1; /* Error */
;;;913            }
;;;914            return 0;
;;;915          } else {
;;;916            _ReadU8();                    /* Skip codesize */
;;;917            while (_GetDataBlock(0) > 0); /* Skip data blocks */
;;;918          }
;;;919          ImageCnt++;
;;;920          break;
;;;921        case GIF_INTRO_TERMINATOR:
;;;922          break;
;;;923        case GIF_INTRO_EXTENSION:
;;;924          /* Read image extension */
;;;925          if (_ReadExtension(&TransIndex, (Index == ImageCnt) ? &Info : NULL, (Index == ImageCnt) ? &Disposal : NULL)) {
;;;926            return 1;
;;;927          }
;;;928          break;
;;;929        default:
;;;930          return 1;
;;;931        }
;;;932      } while (Introducer != GIF_INTRO_TERMINATOR); /* We do not support more than one image, so stop when the first terminator has been read */
;;;933      return 0;
;;;934    }
0000cc  b011              ADD      sp,sp,#0x44
0000ce  e8bd83f0          POP      {r4-r9,pc}
                  |L10.210|
0000d2  f7fffffe          BL       _ReadU8
                  |L10.214|
0000d6  2000              MOVS     r0,#0                 ;917
0000d8  f7fffffe          BL       _GetDataBlock
0000dc  2800              CMP      r0,#0                 ;917
0000de  dcfa              BGT      |L10.214|
0000e0  1c64              ADDS     r4,r4,#1              ;917
0000e2  2d3b              CMP      r5,#0x3b              ;932
0000e4  d1a8              BNE      |L10.56|
                  |L10.230|
0000e6  2000              MOVS     r0,#0                 ;933
0000e8  e7f0              B        |L10.204|
                  |L10.234|
0000ea  e00f              B        |L10.268|
                  |L10.236|
0000ec  42a6              CMP      r6,r4                 ;925
0000ee  d101              BNE      |L10.244|
0000f0  aa0d              ADD      r2,sp,#0x34           ;925
0000f2  e001              B        |L10.248|
                  |L10.244|
0000f4  f04f0200          MOV      r2,#0                 ;925
                  |L10.248|
0000f8  d101              BNE      |L10.254|
0000fa  a901              ADD      r1,sp,#4              ;925
0000fc  e001              B        |L10.258|
                  |L10.254|
0000fe  f04f0100          MOV      r1,#0                 ;925
                  |L10.258|
000102  a80c              ADD      r0,sp,#0x30           ;925
000104  f7fffffe          BL       _ReadExtension
                  |L10.264|
000108  2800              CMP      r0,#0                 ;925
00010a  d095              BEQ      |L10.56|
                  |L10.268|
00010c  2001              MOVS     r0,#1                 ;930
00010e  e7dd              B        |L10.204|
;;;935    
                          ENDP

                  |L10.272|
                          DCD      ||.data||

                          AREA ||i._GetDataBlock||, CODE, READONLY, ALIGN=2

                  _GetDataBlock PROC
;;;218    */
;;;219    static int _GetDataBlock(U8 * pBuffer) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;220      U8 Count;
;;;221      Count = _ReadU8(); /* Read the length of the data block */
000004  f7fffffe          BL       _ReadU8
000008  0004              MOVS     r4,r0
;;;222      if (Count) {
00000a  d009              BEQ      |L11.32|
;;;223        if (pBuffer) {
00000c  b125              CBZ      r5,|L11.24|
;;;224          _ReadBytes(pBuffer, Count);
00000e  4601              MOV      r1,r0
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       _ReadBytes
000016  e003              B        |L11.32|
                  |L11.24|
;;;225        } else {
;;;226          _Source.pSrc += Count;
000018  4802              LDR      r0,|L11.36|
00001a  6801              LDR      r1,[r0,#0]  ; _Source
00001c  4421              ADD      r1,r1,r4
00001e  6001              STR      r1,[r0,#0]  ; _Source
                  |L11.32|
;;;227        }
;;;228      }
;;;229      return((int)Count);
000020  4620              MOV      r0,r4
;;;230    }
000022  bd70              POP      {r4-r6,pc}
;;;231    
                          ENDP

                  |L11.36|
                          DCD      ||.data||

                          AREA ||i._GetGIFComment||, CODE, READONLY, ALIGN=2

                  _GetGIFComment PROC
;;;776    */
;;;777    static int _GetGIFComment(const U8 * pData, U32 NumBytes, U8 * pBuffer, int MaxSize, int Index) {
000000  e92d47fc          PUSH     {r2-r10,lr}
000004  4692              MOV      r10,r2
000006  4699              MOV      r9,r3
;;;778      U8 Flags, Introducer;
;;;779      int NumColors, CommentCnt, Size;
;;;780      /* Initialize decoding and skip size and global color table */
;;;781      if (_GetSizeAndColorTable(pData, NumBytes, NULL, NULL, &NumColors)) {
000008  aa01              ADD      r2,sp,#4
00000a  9f0a              LDR      r7,[sp,#0x28]
00000c  2300              MOVS     r3,#0
00000e  9200              STR      r2,[sp,#0]
000010  461a              MOV      r2,r3
000012  f7fffffe          BL       _GetSizeAndColorTable
000016  b9f0              CBNZ     r0,|L12.86|
;;;782        return 1; /* Error */
;;;783      }
;;;784      CommentCnt = Size = 0;
000018  2400              MOVS     r4,#0
00001a  4626              MOV      r6,r4
                  |L12.28|
;;;785      /* Iterate over the blocks */
;;;786      do {
;;;787        Introducer = _ReadU8();
00001c  f7fffffe          BL       _ReadU8
000020  4605              MOV      r5,r0
;;;788        switch (Introducer) {
000022  2821              CMP      r0,#0x21
000024  d01a              BEQ      |L12.92|
000026  2d2c              CMP      r5,#0x2c
000028  d115              BNE      |L12.86|
;;;789        case GIF_INTRO_IMAGE:
;;;790          _SkipBytes(8);                /* Skip the first 8 bytes of the image descriptor */
00002a  2008              MOVS     r0,#8
00002c  f7fffffe          BL       _SkipBytes
;;;791          Flags = _ReadU8();            /* Only 'Flags' are intresting */
000030  f7fffffe          BL       _ReadU8
;;;792          if (Flags & 0x80) {
000034  0600              LSLS     r0,r0,#24
000036  d504              BPL      |L12.66|
;;;793            _SkipBytes(NumColors * 3);  /* Skip local color table */
000038  9801              LDR      r0,[sp,#4]
00003a  eb000040          ADD      r0,r0,r0,LSL #1
00003e  f7fffffe          BL       _SkipBytes
                  |L12.66|
;;;794          }
;;;795          _SkipBytes(1);                /* Skip codesize */
000042  2001              MOVS     r0,#1
000044  f7fffffe          BL       _SkipBytes
                  |L12.72|
;;;796          while (_GetDataBlock(0) > 0); /* Skip data blocks */
000048  2000              MOVS     r0,#0
00004a  f7fffffe          BL       _GetDataBlock
00004e  2800              CMP      r0,#0
000050  dcfa              BGT      |L12.72|
;;;797          break;
;;;798        case GIF_INTRO_TERMINATOR:
;;;799          break;
;;;800        case GIF_INTRO_EXTENSION:
;;;801          _ReadComment((Index == CommentCnt) ? pBuffer : NULL, MaxSize, &Size);
;;;802          if ((Size) && (Index == CommentCnt)) {
;;;803            return 0;
;;;804          }
;;;805          break;
;;;806        default:
;;;807          return 1;
;;;808        }
;;;809      } while (Introducer != GIF_INTRO_TERMINATOR); /* We do not support more than one image, so stop when the first terminator has been read */
000052  2d3b              CMP      r5,#0x3b
000054  d1e2              BNE      |L12.28|
                  |L12.86|
;;;810      return 1;
000056  2001              MOVS     r0,#1
                  |L12.88|
;;;811    }
000058  e8bd87fc          POP      {r2-r10,pc}
                  |L12.92|
00005c  42b7              CMP      r7,r6                 ;801
00005e  d101              BNE      |L12.100|
000060  4650              MOV      r0,r10                ;801
000062  e000              B        |L12.102|
                  |L12.100|
000064  2000              MOVS     r0,#0                 ;801
                  |L12.102|
000066  4680              MOV      r8,r0                 ;801
000068  464d              MOV      r5,r9                 ;801
00006a  f7fffffe          BL       _ReadU8
00006e  2801              CMP      r0,#1                 ;801
000070  d005              BEQ      |L12.126|
000072  28f9              CMP      r0,#0xf9              ;801
000074  d018              BEQ      |L12.168|
000076  28fe              CMP      r0,#0xfe              ;801
000078  d007              BEQ      |L12.138|
00007a  28ff              CMP      r0,#0xff              ;801
00007c  d11b              BNE      |L12.182|
                  |L12.126|
00007e  4811              LDR      r0,|L12.196|
000080  f7fffffe          BL       _GetDataBlock
000084  2800              CMP      r0,#0                 ;801
000086  dcfa              BGT      |L12.126|
000088  e015              B        |L12.182|
                  |L12.138|
00008a  480e              LDR      r0,|L12.196|
00008c  f7fffffe          BL       _GetDataBlock
000090  4602              MOV      r2,r0                 ;801
000092  42a8              CMP      r0,r5                 ;801
000094  dd00              BLE      |L12.152|
000096  462a              MOV      r2,r5                 ;801
                  |L12.152|
000098  ea5f0008          MOVS     r0,r8                 ;801
00009c  d00b              BEQ      |L12.182|
00009e  4614              MOV      r4,r2                 ;801
0000a0  4908              LDR      r1,|L12.196|
0000a2  f7fffffe          BL       __aeabi_memcpy
0000a6  e006              B        |L12.182|
                  |L12.168|
0000a8  4806              LDR      r0,|L12.196|
0000aa  f7fffffe          BL       _GetDataBlock
0000ae  2804              CMP      r0,#4                 ;801
0000b0  d101              BNE      |L12.182|
0000b2  f7fffffe          BL       _ReadU8
                  |L12.182|
0000b6  2c00              CMP      r4,#0                 ;802
0000b8  d0b0              BEQ      |L12.28|
0000ba  42b7              CMP      r7,r6                 ;802
0000bc  d1ae              BNE      |L12.28|
0000be  2000              MOVS     r0,#0                 ;803
0000c0  e7ca              B        |L12.88|
;;;812    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L12.196|
                          DCD      ||.bss||+0x363c

                          AREA ||i._GetGIFInfo||, CODE, READONLY, ALIGN=1

                  _GetGIFInfo PROC
;;;675    */
;;;676    static int _GetGIFInfo(const U8 * pData, U32 NumBytes, GUI_GIF_INFO * pInfo) {
000000  b57c              PUSH     {r2-r6,lr}
000002  4615              MOV      r5,r2
;;;677      U8 Flags, Introducer;
;;;678      int NumColors, ImageCnt;
;;;679      /* Initialize decoding and get size and global color table */
;;;680      if (_GetSizeAndColorTable(pData, NumBytes, &pInfo->xSize, &pInfo->ySize, &NumColors)) {
000004  aa01              ADD      r2,sp,#4
000006  9200              STR      r2,[sp,#0]
000008  1d2b              ADDS     r3,r5,#4
00000a  462a              MOV      r2,r5
00000c  f7fffffe          BL       _GetSizeAndColorTable
000010  bb58              CBNZ     r0,|L13.106|
;;;681        return 1; /* Error */
;;;682      }
;;;683      ImageCnt = 0;
000012  2400              MOVS     r4,#0
                  |L13.20|
;;;684      /* Iterate over the blocks */
;;;685      do {
;;;686        Introducer = _ReadU8();
000014  f7fffffe          BL       _ReadU8
000018  4606              MOV      r6,r0
;;;687        switch (Introducer) {
00001a  2821              CMP      r0,#0x21
00001c  d01e              BEQ      |L13.92|
00001e  2e2c              CMP      r6,#0x2c
000020  d002              BEQ      |L13.40|
000022  283b              CMP      r0,#0x3b
000024  d121              BNE      |L13.106|
000026  e016              B        |L13.86|
                  |L13.40|
;;;688        case GIF_INTRO_IMAGE:
;;;689          _SkipBytes(8);                /* Skip the first 8 bytes of the image descriptor */
000028  2008              MOVS     r0,#8
00002a  f7fffffe          BL       _SkipBytes
;;;690          Flags = _ReadU8();            /* Only 'Flags' are intresting */
00002e  f7fffffe          BL       _ReadU8
;;;691          if (Flags & 0x80) {
000032  0600              LSLS     r0,r0,#24
000034  d504              BPL      |L13.64|
;;;692            _SkipBytes(NumColors * 3);  /* Skip local color table */
000036  9801              LDR      r0,[sp,#4]
000038  eb000040          ADD      r0,r0,r0,LSL #1
00003c  f7fffffe          BL       _SkipBytes
                  |L13.64|
;;;693          }
;;;694          _SkipBytes(1);                /* Skip codesize */
000040  2001              MOVS     r0,#1
000042  f7fffffe          BL       _SkipBytes
                  |L13.70|
;;;695          while (_GetDataBlock(0) > 0); /* Skip data blocks */
000046  2000              MOVS     r0,#0
000048  f7fffffe          BL       _GetDataBlock
00004c  2800              CMP      r0,#0
00004e  dcfa              BGT      |L13.70|
000050  1c64              ADDS     r4,r4,#1
;;;696          ImageCnt++;
;;;697          break;
;;;698        case GIF_INTRO_TERMINATOR:
;;;699          break;
;;;700        case GIF_INTRO_EXTENSION:
;;;701          if (_ReadExtension(NULL, NULL, NULL)) { /* Skip image extension */
;;;702            return 1;
;;;703          }
;;;704          break;
;;;705        default:
;;;706          return 1;
;;;707        }
;;;708      } while (Introducer != GIF_INTRO_TERMINATOR); /* We do not support more than one image, so stop when the first terminator has been read */
000052  2e3b              CMP      r6,#0x3b
000054  d1de              BNE      |L13.20|
                  |L13.86|
;;;709      pInfo->NumImages = ImageCnt;
;;;710      return 0;
000056  2000              MOVS     r0,#0
000058  60ac              STR      r4,[r5,#8]
;;;711    }
00005a  bd7c              POP      {r2-r6,pc}
                  |L13.92|
00005c  2200              MOVS     r2,#0                 ;701
00005e  4611              MOV      r1,r2                 ;701
000060  4610              MOV      r0,r2                 ;701
000062  f7fffffe          BL       _ReadExtension
000066  2800              CMP      r0,#0                 ;701
000068  d0d4              BEQ      |L13.20|
                  |L13.106|
00006a  2001              MOVS     r0,#1                 ;706
00006c  bd7c              POP      {r2-r6,pc}
;;;712    
                          ENDP


                          AREA ||i._GetImageInfo||, CODE, READONLY, ALIGN=1

                  _GetImageInfo PROC
;;;716    */
;;;717    static int _GetImageInfo(const U8 * pData, U32 NumBytes, GUI_GIF_IMAGE_INFO * pInfo, int Index) {
000000  e92d41fc          PUSH     {r2-r8,lr}
000004  4614              MOV      r4,r2
000006  461f              MOV      r7,r3
;;;718      U8 Flags, Introducer;
;;;719      int NumColors, ImageCnt;
;;;720      /* Initialize decoding and get size and global color table */
;;;721      if (_GetSizeAndColorTable(pData, NumBytes, NULL, NULL, &NumColors)) {
000008  aa01              ADD      r2,sp,#4
00000a  2300              MOVS     r3,#0
00000c  9200              STR      r2,[sp,#0]
00000e  461a              MOV      r2,r3
000010  f7fffffe          BL       _GetSizeAndColorTable
000014  bb98              CBNZ     r0,|L14.126|
;;;722        return 1; /* Error */
;;;723      }
;;;724      ImageCnt = 0;
000016  2500              MOVS     r5,#0
                  |L14.24|
;;;725      /* Iterate over the blocks */
;;;726      do {
;;;727        Introducer = _ReadU8();
000018  f7fffffe          BL       _ReadU8
00001c  4606              MOV      r6,r0
;;;728        switch (Introducer) {
00001e  2821              CMP      r0,#0x21
000020  d02e              BEQ      |L14.128|
000022  2e2c              CMP      r6,#0x2c
000024  d002              BEQ      |L14.44|
000026  283b              CMP      r0,#0x3b
000028  d135              BNE      |L14.150|
00002a  e025              B        |L14.120|
                  |L14.44|
;;;729        case GIF_INTRO_IMAGE:
;;;730          if (Index == ImageCnt) {
00002c  42af              CMP      r7,r5
00002e  d10c              BNE      |L14.74|
;;;731            pInfo->xPos  = _ReadU16();
000030  f7fffffe          BL       _ReadU16
;;;732            pInfo->xPos  = _ReadU16();
000034  6020              STR      r0,[r4,#0]
000036  f7fffffe          BL       _ReadU16
;;;733            pInfo->xSize = _ReadU16();
00003a  6020              STR      r0,[r4,#0]
00003c  f7fffffe          BL       _ReadU16
;;;734            pInfo->ySize = _ReadU16();
000040  60a0              STR      r0,[r4,#8]
000042  f7fffffe          BL       _ReadU16
;;;735            return 0;
000046  60e0              STR      r0,[r4,#0xc]
000048  e016              B        |L14.120|
                  |L14.74|
;;;736          }
;;;737          _SkipBytes(8);                /* Skip the first 8 bytes of the image descriptor */
00004a  2008              MOVS     r0,#8
00004c  f7fffffe          BL       _SkipBytes
;;;738          Flags = _ReadU8();            /* Only 'Flags' are intresting */
000050  f7fffffe          BL       _ReadU8
;;;739          if (Flags & 0x80) {
000054  0600              LSLS     r0,r0,#24
000056  d504              BPL      |L14.98|
;;;740            _SkipBytes(NumColors * 3);  /* Skip local color table */
000058  9801              LDR      r0,[sp,#4]
00005a  eb000040          ADD      r0,r0,r0,LSL #1
00005e  f7fffffe          BL       _SkipBytes
                  |L14.98|
;;;741          }
;;;742          _SkipBytes(1);                /* Skip codesize */
000062  2001              MOVS     r0,#1
000064  f7fffffe          BL       _SkipBytes
                  |L14.104|
;;;743          while (_GetDataBlock(0) > 0); /* Skip data blocks */
000068  2000              MOVS     r0,#0
00006a  f7fffffe          BL       _GetDataBlock
00006e  2800              CMP      r0,#0
000070  dcfa              BGT      |L14.104|
000072  1c6d              ADDS     r5,r5,#1
;;;744          ImageCnt++;
;;;745          break;
;;;746        case GIF_INTRO_TERMINATOR:
;;;747          break;
;;;748        case GIF_INTRO_EXTENSION:
;;;749          if (_ReadExtension(NULL, (Index == ImageCnt) ? pInfo : NULL, NULL)) {
;;;750            return 1;
;;;751          }
;;;752          break;
;;;753        default:
;;;754          return 1;
;;;755        }
;;;756      } while (Introducer != GIF_INTRO_TERMINATOR); /* We do not support more than one image, so stop when the first terminator has been read */
000074  2e3b              CMP      r6,#0x3b
000076  d1cf              BNE      |L14.24|
                  |L14.120|
;;;757      return 0;
000078  2000              MOVS     r0,#0
                  |L14.122|
;;;758    }
00007a  e8bd81fc          POP      {r2-r8,pc}
                  |L14.126|
00007e  e00a              B        |L14.150|
                  |L14.128|
000080  42af              CMP      r7,r5                 ;749
000082  d101              BNE      |L14.136|
000084  4621              MOV      r1,r4                 ;749
000086  e000              B        |L14.138|
                  |L14.136|
000088  2100              MOVS     r1,#0                 ;749
                  |L14.138|
00008a  2200              MOVS     r2,#0                 ;749
00008c  4610              MOV      r0,r2                 ;749
00008e  f7fffffe          BL       _ReadExtension
000092  2800              CMP      r0,#0                 ;749
000094  d0c0              BEQ      |L14.24|
                  |L14.150|
000096  2001              MOVS     r0,#1                 ;754
000098  e7ef              B        |L14.122|
;;;759    
                          ENDP


                          AREA ||i._GetNextByte||, CODE, READONLY, ALIGN=2

                  _GetNextByte PROC
;;;295    */
;;;296    static int _GetNextByte(void) {
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;297      int i, Code, Incode;
;;;298      while ((Code = _GetNextCode()) >= 0) {
;;;299        if (Code == _LZWContext.ClearCode) {
000004  4d5b              LDR      r5,|L15.372|
;;;300          /* Corrupt GIFs can make this happen */
;;;301          if (_LZWContext.ClearCode >= (1 << MAX_NUM_LWZ_BITS)) {
;;;302            return -1; /* Error */
;;;303          }
;;;304          /* Clear the tables */
;;;305          GUI__memset((U8 *)_LZWContext.aCode, 0, sizeof(_LZWContext.aCode));
;;;306          for (i = 0; i < _LZWContext.ClearCode; ++i) {
;;;307            _LZWContext.aPrefix[i] = i;
;;;308          }
;;;309          /* Calculate the 'special codes' in dependence of the initial code size
;;;310             and initialize the stack pointer */
;;;311          _LZWContext.CodeSize    = _LZWContext.SetCodeSize + 1;
;;;312          _LZWContext.MaxCodeSize = _LZWContext.ClearCode << 1;
;;;313          _LZWContext.MaxCode     = _LZWContext.ClearCode + 2;
;;;314          _LZWContext.sp          = _LZWContext.aDecompBuffer;
000006  f2431002          MOV      r0,#0x3102
00000a  f44f5780          MOV      r7,#0x1000            ;301
00000e  182e              ADDS     r6,r5,r0
000010  f5055440          ADD      r4,r5,#0x3000         ;299
000014  e0a8              B        |L15.360|
000016  bf00              NOP                            ;299
                  |L15.24|
000018  f8d4122c          LDR      r1,[r4,#0x22c]        ;299  ; _LZWContext
00001c  4281              CMP      r1,r0                 ;299
00001e  d12e              BNE      |L15.126|
000020  42b9              CMP      r1,r7                 ;301
000022  db03              BLT      |L15.44|
000024  f04f30ff          MOV      r0,#0xffffffff        ;302
                  |L15.40|
;;;315          /* Read the first code from the stack after clearing and initializing */
;;;316          do {
;;;317            _LZWContext.FirstCode = _GetNextCode();
;;;318          } while (_LZWContext.FirstCode == _LZWContext.ClearCode);
;;;319          _LZWContext.OldCode = _LZWContext.FirstCode;
;;;320          return _LZWContext.FirstCode;
;;;321        }
;;;322        if (Code == _LZWContext.EndCode) {
;;;323          return -2; /* End code */
;;;324        }
;;;325        Incode = Code;
;;;326        if (Code >= _LZWContext.MaxCode) {
;;;327          *(_LZWContext.sp)++ = _LZWContext.FirstCode;
;;;328          Code = _LZWContext.OldCode;
;;;329        }
;;;330        while (Code >= _LZWContext.ClearCode) {
;;;331          *(_LZWContext.sp)++ = _LZWContext.aPrefix[Code];
;;;332          if (Code == _LZWContext.aCode[Code]) {
;;;333            return Code;
;;;334          }
;;;335          if ((_LZWContext.sp - _LZWContext.aDecompBuffer) >= sizeof(_LZWContext.aDecompBuffer)) {
;;;336            return Code;
;;;337          }
;;;338          Code = _LZWContext.aCode[Code];
;;;339        }
;;;340        *(_LZWContext.sp)++ = _LZWContext.FirstCode = _LZWContext.aPrefix[Code];
;;;341        if ((Code = _LZWContext.MaxCode) < (1 << MAX_NUM_LWZ_BITS)) {
;;;342          _LZWContext.aCode  [Code] = _LZWContext.OldCode;
;;;343          _LZWContext.aPrefix[Code] = _LZWContext.FirstCode;
;;;344          ++_LZWContext.MaxCode;
;;;345          if ((_LZWContext.MaxCode >= _LZWContext.MaxCodeSize) && (_LZWContext.MaxCodeSize < (1 << MAX_NUM_LWZ_BITS))) {
;;;346            _LZWContext.MaxCodeSize <<= 1;
;;;347            ++_LZWContext.CodeSize;
;;;348          }
;;;349        }
;;;350        _LZWContext.OldCode = Incode;
;;;351        if (_LZWContext.sp > _LZWContext.aDecompBuffer) {
;;;352          return *--(_LZWContext.sp);
;;;353        }
;;;354      }
;;;355      return Code;
;;;356    }
000028  e8bd81f0          POP      {r4-r8,pc}
                  |L15.44|
00002c  f44f5200          MOV      r2,#0x2000            ;305
000030  2100              MOVS     r1,#0                 ;305
000032  4851              LDR      r0,|L15.376|
000034  f7fffffe          BL       GUI__memset
000038  2000              MOVS     r0,#0                 ;306
00003a  e005              B        |L15.72|
                  |L15.60|
00003c  1829              ADDS     r1,r5,r0              ;307
00003e  f5015100          ADD      r1,r1,#0x2000         ;307
000042  f8810102          STRB     r0,[r1,#0x102]        ;307
000046  1c40              ADDS     r0,r0,#1              ;307
                  |L15.72|
000048  f8d4122c          LDR      r1,[r4,#0x22c]        ;306  ; _LZWContext
00004c  4281              CMP      r1,r0                 ;306
00004e  dcf5              BGT      |L15.60|
000050  f8d40220          LDR      r0,[r4,#0x220]        ;311  ; _LZWContext
000054  1c40              ADDS     r0,r0,#1              ;311
000056  f8c4021c          STR      r0,[r4,#0x21c]        ;312  ; _LZWContext
00005a  4608              MOV      r0,r1                 ;312
00005c  0049              LSLS     r1,r1,#1              ;312
00005e  1c80              ADDS     r0,r0,#2              ;314
000060  f8c46204          STR      r6,[r4,#0x204]        ;314  ; _LZWContext
000064  e9c40189          STRD     r0,r1,[r4,#0x224]     ;314
                  |L15.104|
000068  f7fffffe          BL       _GetNextCode
00006c  f8c40234          STR      r0,[r4,#0x234]        ;318  ; _LZWContext
000070  f8d4122c          LDR      r1,[r4,#0x22c]        ;318  ; _LZWContext
000074  4288              CMP      r0,r1                 ;318
000076  d0f7              BEQ      |L15.104|
000078  f8c40238          STR      r0,[r4,#0x238]        ;320  ; _LZWContext
00007c  e7d4              B        |L15.40|
                  |L15.126|
00007e  f8d41230          LDR      r1,[r4,#0x230]        ;322  ; _LZWContext
000082  4281              CMP      r1,r0                 ;322
000084  d102              BNE      |L15.140|
000086  f06f0001          MVN      r0,#1                 ;323
00008a  e7cd              B        |L15.40|
                  |L15.140|
00008c  f8d41224          LDR      r1,[r4,#0x224]        ;326  ; _LZWContext
000090  4603              MOV      r3,r0                 ;325
000092  4281              CMP      r1,r0                 ;326
000094  dc26              BGT      |L15.228|
000096  f8d41204          LDR      r1,[r4,#0x204]        ;327  ; _LZWContext
00009a  f8940234          LDRB     r0,[r4,#0x234]        ;327  ; _LZWContext
00009e  7008              STRB     r0,[r1,#0]            ;327
0000a0  f8d40204          LDR      r0,[r4,#0x204]        ;327  ; _LZWContext
0000a4  1c40              ADDS     r0,r0,#1              ;327
0000a6  f8c40204          STR      r0,[r4,#0x204]        ;328  ; _LZWContext
0000aa  f8d40238          LDR      r0,[r4,#0x238]        ;328  ; _LZWContext
0000ae  e019              B        |L15.228|
                  |L15.176|
0000b0  1829              ADDS     r1,r5,r0              ;331
0000b2  f5015100          ADD      r1,r1,#0x2000         ;331
0000b6  f8d42204          LDR      r2,[r4,#0x204]        ;331  ; _LZWContext
0000ba  f8911102          LDRB     r1,[r1,#0x102]        ;331
0000be  7011              STRB     r1,[r2,#0]            ;331
0000c0  f8d41204          LDR      r1,[r4,#0x204]        ;331  ; _LZWContext
0000c4  eb050240          ADD      r2,r5,r0,LSL #1       ;332
0000c8  1c49              ADDS     r1,r1,#1              ;331
0000ca  f8c41204          STR      r1,[r4,#0x204]        ;332  ; _LZWContext
0000ce  f9b22102          LDRSH    r2,[r2,#0x102]        ;332
0000d2  4282              CMP      r2,r0                 ;332
0000d4  d0a8              BEQ      |L15.40|
0000d6  1b49              SUBS     r1,r1,r5              ;335
0000d8  f5a15144          SUB      r1,r1,#0x3100         ;335
0000dc  3902              SUBS     r1,#2                 ;335
0000de  29ff              CMP      r1,#0xff              ;335
0000e0  d8a2              BHI      |L15.40|
0000e2  4610              MOV      r0,r2                 ;335
                  |L15.228|
0000e4  f8d4122c          LDR      r1,[r4,#0x22c]        ;330  ; _LZWContext
0000e8  4281              CMP      r1,r0                 ;330
0000ea  dde1              BLE      |L15.176|
0000ec  4428              ADD      r0,r0,r5              ;340
0000ee  f5005000          ADD      r0,r0,#0x2000         ;340
0000f2  f8900102          LDRB     r0,[r0,#0x102]        ;340
0000f6  f8c40234          STR      r0,[r4,#0x234]        ;340  ; _LZWContext
0000fa  f8d41204          LDR      r1,[r4,#0x204]        ;340  ; _LZWContext
0000fe  7008              STRB     r0,[r1,#0]            ;340
000100  f8d40204          LDR      r0,[r4,#0x204]        ;340  ; _LZWContext
000104  1c40              ADDS     r0,r0,#1              ;340
000106  f8c40204          STR      r0,[r4,#0x204]        ;341  ; _LZWContext
00010a  f8d40224          LDR      r0,[r4,#0x224]        ;341  ; _LZWContext
00010e  42b8              CMP      r0,r7                 ;341
000110  da1f              BGE      |L15.338|
000112  eb050240          ADD      r2,r5,r0,LSL #1       ;342
000116  f8b41238          LDRH     r1,[r4,#0x238]        ;342  ; _LZWContext
00011a  4428              ADD      r0,r0,r5              ;343
00011c  f8a21102          STRH     r1,[r2,#0x102]        ;342
000120  f5005000          ADD      r0,r0,#0x2000         ;343
000124  f8941234          LDRB     r1,[r4,#0x234]        ;343  ; _LZWContext
000128  f8801102          STRB     r1,[r0,#0x102]        ;343
00012c  f8d41224          LDR      r1,[r4,#0x224]        ;344  ; _LZWContext
000130  1c49              ADDS     r1,r1,#1              ;344
000132  f8c41224          STR      r1,[r4,#0x224]        ;345  ; _LZWContext
000136  f8d40228          LDR      r0,[r4,#0x228]        ;345  ; _LZWContext
00013a  4281              CMP      r1,r0                 ;345
00013c  db09              BLT      |L15.338|
00013e  42b8              CMP      r0,r7                 ;345
000140  da07              BGE      |L15.338|
000142  0040              LSLS     r0,r0,#1              ;346
000144  f8c40228          STR      r0,[r4,#0x228]        ;347  ; _LZWContext
000148  f8d4021c          LDR      r0,[r4,#0x21c]        ;347  ; _LZWContext
00014c  1c40              ADDS     r0,r0,#1              ;347
00014e  f8c4021c          STR      r0,[r4,#0x21c]        ;347  ; _LZWContext
                  |L15.338|
000152  f8c43238          STR      r3,[r4,#0x238]        ;351  ; _LZWContext
000156  f8d40204          LDR      r0,[r4,#0x204]        ;351  ; _LZWContext
00015a  42b0              CMP      r0,r6                 ;351
00015c  d904              BLS      |L15.360|
00015e  1e40              SUBS     r0,r0,#1              ;351
000160  f8c40204          STR      r0,[r4,#0x204]        ;352  ; _LZWContext
000164  7800              LDRB     r0,[r0,#0]            ;352
000166  e75f              B        |L15.40|
                  |L15.360|
000168  f7fffffe          BL       _GetNextCode
00016c  2800              CMP      r0,#0                 ;298
00016e  f6bfaf53          BGE      |L15.24|
000172  e759              B        |L15.40|
;;;357    
                          ENDP

                  |L15.372|
                          DCD      ||.bss||
                  |L15.376|
                          DCD      ||.bss||+0x102

                          AREA ||i._GetNextCode||, CODE, READONLY, ALIGN=2

                  _GetNextCode PROC
;;;242    */
;;;243    static int _GetNextCode(void) {
000000  b570              PUSH     {r4-r6,lr}
;;;244      int i, j, End;
;;;245      long Result;
;;;246      if (_LZWContext.ReturnClear) {
000002  4c30              LDR      r4,|L16.196|
000004  f8d40218          LDR      r0,[r4,#0x218]        ;243  ; _LZWContext
000008  b128              CBZ      r0,|L16.22|
;;;247        /* The first code should be a clear code. */
;;;248        _LZWContext.ReturnClear = 0;
00000a  2000              MOVS     r0,#0
;;;249        return _LZWContext.ClearCode;
00000c  f8c40218          STR      r0,[r4,#0x218]  ; _LZWContext
000010  f8d4022c          LDR      r0,[r4,#0x22c]  ; _LZWContext
;;;250      }
;;;251      End = _LZWContext.CurBit + _LZWContext.CodeSize;
;;;252      if (End >= _LZWContext.LastBit) {
;;;253        int Count;
;;;254        if (_LZWContext.GetDone) {
;;;255          return -1; /* Error */
;;;256        }
;;;257        _LZWContext.aBuffer[0] = _LZWContext.aBuffer[_LZWContext.LastByte - 2];
;;;258        _LZWContext.aBuffer[1] = _LZWContext.aBuffer[_LZWContext.LastByte - 1];
;;;259        if ((Count = _GetDataBlock(&_LZWContext.aBuffer[2])) == 0) {
;;;260          _LZWContext.GetDone = 1;
;;;261        }
;;;262        if (Count < 0) {
;;;263          return -1; /* Error */
;;;264        }
;;;265        _LZWContext.LastByte = 2 + Count;
;;;266        _LZWContext.CurBit   = (_LZWContext.CurBit - _LZWContext.LastBit) + 16;
;;;267        _LZWContext.LastBit  = (2 + Count) * 8 ;
;;;268        End                  = _LZWContext.CurBit + _LZWContext.CodeSize;
;;;269      }
;;;270      j = End >> 3;
;;;271      i = _LZWContext.CurBit >> 3;
;;;272      if (i == j) {
;;;273        Result = (long)_LZWContext.aBuffer[i];
;;;274      } else if (i + 1 == j) {
;;;275        Result = (long)_LZWContext.aBuffer[i] | ((long)_LZWContext.aBuffer[i + 1] << 8);
;;;276      }  else {
;;;277        Result = (long)_LZWContext.aBuffer[i] | ((long)_LZWContext.aBuffer[i + 1] << 8) | ((long)_LZWContext.aBuffer[i + 2] << 16);
;;;278      }
;;;279      Result = (Result >> (_LZWContext.CurBit & 0x7)) & _aMaskTbl[_LZWContext.CodeSize];
;;;280      _LZWContext.CurBit += _LZWContext.CodeSize;
;;;281      return (int)Result;
;;;282    }
000014  bd70              POP      {r4-r6,pc}
                  |L16.22|
000016  f8d4121c          LDR      r1,[r4,#0x21c]        ;251  ; _LZWContext
00001a  f8d40208          LDR      r0,[r4,#0x208]        ;251  ; _LZWContext
00001e  4d2a              LDR      r5,|L16.200|
000020  4408              ADD      r0,r0,r1              ;251
000022  f8d4120c          LDR      r1,[r4,#0x20c]        ;252  ; _LZWContext
000026  4281              CMP      r1,r0                 ;252
000028  dc2b              BGT      |L16.130|
00002a  f8d40210          LDR      r0,[r4,#0x210]        ;254  ; _LZWContext
00002e  f04f36ff          MOV      r6,#0xffffffff        ;255
000032  b968              CBNZ     r0,|L16.80|
000034  f8d40214          LDR      r0,[r4,#0x214]        ;257  ; _LZWContext
000038  1ea9              SUBS     r1,r5,#2              ;257
00003a  5c41              LDRB     r1,[r0,r1]            ;257
00003c  7029              STRB     r1,[r5,#0]            ;257
00003e  1e69              SUBS     r1,r5,#1              ;258
000040  5c40              LDRB     r0,[r0,r1]            ;258
000042  7068              STRB     r0,[r5,#1]            ;258
000044  1ca8              ADDS     r0,r5,#2              ;259
000046  f7fffffe          BL       _GetDataBlock
00004a  2800              CMP      r0,#0                 ;259
00004c  d002              BEQ      |L16.84|
00004e  da05              BGE      |L16.92|
                  |L16.80|
000050  4630              MOV      r0,r6                 ;263
000052  bd70              POP      {r4-r6,pc}
                  |L16.84|
000054  f04f0101          MOV      r1,#1                 ;260
000058  f8c41210          STR      r1,[r4,#0x210]        ;260  ; _LZWContext
                  |L16.92|
00005c  f1000102          ADD      r1,r0,#2              ;265
000060  f8c41214          STR      r1,[r4,#0x214]        ;265  ; _LZWContext
000064  e9d41282          LDRD     r1,r2,[r4,#0x208]     ;265
000068  eba10102          SUB      r1,r1,r2              ;266
00006c  ea4f00c0          LSL      r0,r0,#3              ;267
000070  f1000010          ADD      r0,r0,#0x10           ;267
000074  f1010110          ADD      r1,r1,#0x10           ;267
000078  e9c41082          STRD     r1,r0,[r4,#0x208]     ;267
00007c  f8d4021c          LDR      r0,[r4,#0x21c]        ;268  ; _LZWContext
000080  4408              ADD      r0,r0,r1              ;268
                  |L16.130|
000082  f8d41208          LDR      r1,[r4,#0x208]        ;271  ; _LZWContext
000086  ea4f02e0          ASR      r2,r0,#3              ;270
00008a  ea4f00e1          ASR      r0,r1,#3              ;271
00008e  4290              CMP      r0,r2                 ;272
000090  d101              BNE      |L16.150|
000092  5c28              LDRB     r0,[r5,r0]            ;273
000094  e008              B        |L16.168|
                  |L16.150|
000096  1c43              ADDS     r3,r0,#1              ;274
000098  4293              CMP      r3,r2                 ;274
00009a  4428              ADD      r0,r0,r5              ;277
00009c  d101              BNE      |L16.162|
00009e  8800              LDRH     r0,[r0,#0]            ;275
0000a0  e002              B        |L16.168|
                  |L16.162|
0000a2  6800              LDR      r0,[r0,#0]            ;277
0000a4  f020407f          BIC      r0,r0,#0xff000000     ;277
                  |L16.168|
0000a8  f0010207          AND      r2,r1,#7              ;279
0000ac  4110              ASRS     r0,r0,r2              ;279
0000ae  4b07              LDR      r3,|L16.204|
0000b0  f8d4221c          LDR      r2,[r4,#0x21c]        ;279  ; _LZWContext
0000b4  4411              ADD      r1,r1,r2              ;280
0000b6  f8533022          LDR      r3,[r3,r2,LSL #2]     ;279
0000ba  f8c41208          STR      r1,[r4,#0x208]        ;280  ; _LZWContext
0000be  4018              ANDS     r0,r0,r3              ;279
0000c0  bd70              POP      {r4-r6,pc}
;;;283    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L16.196|
                          DCD      ||.bss||+0x3000
                  |L16.200|
                          DCD      ||.bss||
                  |L16.204|
                          DCD      ||.constdata||

                          AREA ||i._GetSizeAndColorTable||, CODE, READONLY, ALIGN=2

                  _GetSizeAndColorTable PROC
;;;655    */
;;;656    static int _GetSizeAndColorTable(const U8 * pData, U32 NumBytes, int * pxSize, int * pySize, int * pNumColors) {
000000  e92d41fc          PUSH     {r2-r8,lr}
000004  4616              MOV      r6,r2
000006  2200              MOVS     r2,#0
000008  4d29              LDR      r5,|L17.176|
00000a  f8dd8020          LDR      r8,[sp,#0x20]
00000e  9200              STR      r2,[sp,#0]
000010  9201              STR      r2,[sp,#4]
000012  e9c50100          STRD     r0,r1,[r5,#0]
000016  461c              MOV      r4,r3
000018  2106              MOVS     r1,#6
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       _ReadBytes
000020  6868              LDR      r0,[r5,#4]  ; _Source
000022  b1c8              CBZ      r0,|L17.88|
000024  f89d0000          LDRB     r0,[sp,#0]
000028  2847              CMP      r0,#0x47
00002a  d120              BNE      |L17.110|
00002c  f89d0001          LDRB     r0,[sp,#1]
000030  2849              CMP      r0,#0x49
000032  d11c              BNE      |L17.110|
000034  f89d0002          LDRB     r0,[sp,#2]
000038  2846              CMP      r0,#0x46
00003a  d118              BNE      |L17.110|
00003c  f89d0003          LDRB     r0,[sp,#3]
000040  2838              CMP      r0,#0x38
000042  d114              BNE      |L17.110|
000044  f89d0004          LDRB     r0,[sp,#4]
000048  2837              CMP      r0,#0x37
00004a  d001              BEQ      |L17.80|
00004c  2839              CMP      r0,#0x39
00004e  d10e              BNE      |L17.110|
                  |L17.80|
000050  f89d0005          LDRB     r0,[sp,#5]
000054  2861              CMP      r0,#0x61
000056  d10a              BNE      |L17.110|
                  |L17.88|
000058  f7fffffe          BL       _ReadU16
00005c  4607              MOV      r7,r0
00005e  f7fffffe          BL       _ReadU16
000062  f44f61fa          MOV      r1,#0x7d0
000066  428f              CMP      r7,r1
;;;657      /* Initialize decoding */
;;;658      if (_InitGIFDecoding(pData, NumBytes)) {
;;;659        return 1; /* Error */
;;;660      }
;;;661      /* Get image size */
;;;662      if (_GetImageDimension(pxSize, pySize)) {
000068  dc01              BGT      |L17.110|
00006a  4288              CMP      r0,r1
00006c  dd02              BLE      |L17.116|
                  |L17.110|
;;;663        return 1; /* Error */
00006e  2001              MOVS     r0,#1
                  |L17.112|
;;;664      }
;;;665      /* Get global color table (if available) */
;;;666      if (_GetGlobalColorTable(pNumColors)) {
;;;667        return 1; /* Error */
;;;668      }
;;;669      return 0;
;;;670    }
000070  e8bd81fc          POP      {r2-r8,pc}
                  |L17.116|
000074  b106              CBZ      r6,|L17.120|
000076  6037              STR      r7,[r6,#0]
                  |L17.120|
000078  b104              CBZ      r4,|L17.124|
00007a  6020              STR      r0,[r4,#0]
                  |L17.124|
00007c  4644              MOV      r4,r8                 ;666
00007e  f7fffffe          BL       _ReadU8
000082  4606              MOV      r6,r0                 ;666
000084  f7fffffe          BL       _ReadU8
000088  f7fffffe          BL       _ReadU8
00008c  6868              LDR      r0,[r5,#4]            ;666  ; _Source
00008e  2800              CMP      r0,#0                 ;666
000090  dbed              BLT      |L17.110|
000092  f0060007          AND      r0,r6,#7              ;666
000096  2502              MOVS     r5,#2                 ;666
000098  4085              LSLS     r5,r5,r0              ;666
00009a  0630              LSLS     r0,r6,#24             ;666
00009c  d504              BPL      |L17.168|
00009e  4628              MOV      r0,r5                 ;666
0000a0  f7fffffe          BL       _ReadColorMap
0000a4  2800              CMP      r0,#0                 ;666
0000a6  d1e2              BNE      |L17.110|
                  |L17.168|
0000a8  b104              CBZ      r4,|L17.172|
0000aa  6025              STR      r5,[r4,#0]            ;666
                  |L17.172|
0000ac  2000              MOVS     r0,#0                 ;669
0000ae  e7df              B        |L17.112|
;;;671    
                          ENDP

                  |L17.176|
                          DCD      ||.data||

                          AREA ||i._InitLZW||, CODE, READONLY, ALIGN=2

                  _InitLZW PROC
;;;194    */
;;;195    static void _InitLZW(int InputCodeSize) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;196      GUI__memset((U8 *)&_LZWContext, 0, sizeof(LZW_CONTEXT));
000004  f243223c          MOV      r2,#0x323c
000008  2100              MOVS     r1,#0
00000a  480d              LDR      r0,|L18.64|
00000c  f7fffffe          BL       GUI__memset
;;;197      _LZWContext.SetCodeSize  = InputCodeSize;
000010  490c              LDR      r1,|L18.68|
;;;198      _LZWContext.CodeSize     = InputCodeSize + 1;
000012  1c60              ADDS     r0,r4,#1
000014  e9c10406          STRD     r0,r4,[r1,#0x18]
;;;199      _LZWContext.ClearCode    = (1 << InputCodeSize);
000018  2001              MOVS     r0,#1
00001a  fa00f204          LSL      r2,r0,r4
;;;200      _LZWContext.EndCode      = (1 << InputCodeSize) + 1;
00001e  1c53              ADDS     r3,r2,#1
000020  e9c1230a          STRD     r2,r3,[r1,#0x28]
;;;201      _LZWContext.MaxCode      = (1 << InputCodeSize) + 2;
000024  1c93              ADDS     r3,r2,#2
;;;202      _LZWContext.MaxCodeSize  = (1 << InputCodeSize) << 1;
000026  0052              LSLS     r2,r2,#1
;;;203      _LZWContext.ReturnClear  = 1;
;;;204      _LZWContext.LastByte     = 2;
000028  6148              STR      r0,[r1,#0x14]  ; _LZWContext
00002a  2002              MOVS     r0,#2
;;;205      _LZWContext.sp           = _LZWContext.aDecompBuffer;
00002c  6108              STR      r0,[r1,#0x10]  ; _LZWContext
00002e  e9c13208          STRD     r3,r2,[r1,#0x20]
000032  4803              LDR      r0,|L18.64|
000034  f2431202          MOV      r2,#0x3102
000038  4410              ADD      r0,r0,r2
00003a  6008              STR      r0,[r1,#0]  ; _LZWContext
;;;206    }
00003c  bd10              POP      {r4,pc}
;;;207    
                          ENDP

00003e  0000              DCW      0x0000
                  |L18.64|
                          DCD      ||.bss||
                  |L18.68|
                          DCD      ||.bss||+0x3204

                          AREA ||i._ReadBytes||, CODE, READONLY, ALIGN=2

                  _ReadBytes PROC
;;;155    */
;;;156    static void _ReadBytes(U8 * pBuffer, int Len) {
000000  b570              PUSH     {r4-r6,lr}
;;;157      if (_Source.RemBytes < 0) {
000002  4c08              LDR      r4,|L19.36|
000004  460d              MOV      r5,r1                 ;156
000006  6861              LDR      r1,[r4,#4]  ; _Source
000008  2900              CMP      r1,#0
00000a  db0a              BLT      |L19.34|
;;;158        return;
;;;159      }
;;;160      if (_Source.RemBytes < Len) {
00000c  42a9              CMP      r1,r5
00000e  db08              BLT      |L19.34|
;;;161        Len = _Source.RemBytes;
;;;162        return;
;;;163      }
;;;164      _Source.RemBytes -= Len;
000010  1b49              SUBS     r1,r1,r5
;;;165      memcpy(pBuffer, _Source.pSrc, Len);
000012  6061              STR      r1,[r4,#4]  ; _Source
000014  462a              MOV      r2,r5
000016  6821              LDR      r1,[r4,#0]  ; _Source
000018  f7fffffe          BL       __aeabi_memcpy
;;;166      _Source.pSrc += Len;
00001c  6820              LDR      r0,[r4,#0]  ; _Source
00001e  4428              ADD      r0,r0,r5
000020  6020              STR      r0,[r4,#0]  ; _Source
                  |L19.34|
;;;167    }
000022  bd70              POP      {r4-r6,pc}
;;;168    
                          ENDP

                  |L19.36|
                          DCD      ||.data||

                          AREA ||i._ReadColorMap||, CODE, READONLY, ALIGN=2

                  _ReadColorMap PROC
;;;547    */
;;;548    static int _ReadColorMap(int NumColors) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4605              MOV      r5,r0
;;;549      int i;
;;;550      for (i = 0; i < NumColors; i++) {
000006  2400              MOVS     r4,#0
;;;551        U8 r, g, b;
;;;552        r = _ReadU8 ();
;;;553        g = _ReadU8 ();
;;;554        b = _ReadU8 ();
;;;555        if (_Source.RemBytes < 0) {
000008  4e0e              LDR      r6,|L20.68|
;;;556          return 1; /* Error */
;;;557        }
;;;558        _aColorTable[i] = r | ((U16)g << 8) | ((U32)b << 16);
00000a  4f0f              LDR      r7,|L20.72|
00000c  e015              B        |L20.58|
00000e  bf00              NOP                            ;552
                  |L20.16|
000010  f7fffffe          BL       _ReadU8
000014  4681              MOV      r9,r0                 ;552
000016  f7fffffe          BL       _ReadU8
00001a  4680              MOV      r8,r0                 ;553
00001c  f7fffffe          BL       _ReadU8
000020  6871              LDR      r1,[r6,#4]            ;555  ; _Source
000022  2900              CMP      r1,#0                 ;555
000024  da02              BGE      |L20.44|
000026  2001              MOVS     r0,#1                 ;556
                  |L20.40|
;;;559      }
;;;560      return 0;
;;;561    }
000028  e8bd87f0          POP      {r4-r10,pc}
                  |L20.44|
00002c  ea492108          ORR      r1,r9,r8,LSL #8       ;558
000030  ea414000          ORR      r0,r1,r0,LSL #16      ;558
000034  f8470024          STR      r0,[r7,r4,LSL #2]     ;558
000038  1c64              ADDS     r4,r4,#1              ;558
                  |L20.58|
00003a  42ac              CMP      r4,r5                 ;550
00003c  dbe8              BLT      |L20.16|
00003e  2000              MOVS     r0,#0                 ;560
000040  e7f2              B        |L20.40|
;;;562    
                          ENDP

000042  0000              DCW      0x0000
                  |L20.68|
                          DCD      ||.data||
                  |L20.72|
                          DCD      ||.bss||+0x323c

                          AREA ||i._ReadExtension||, CODE, READONLY, ALIGN=2

                  _ReadExtension PROC
;;;365    */
;;;366    static int _ReadExtension(int * pTransIndex, GUI_GIF_IMAGE_INFO * pInfo, U8 * pDisposal) {
000000  b570              PUSH     {r4-r6,lr}
000002  4614              MOV      r4,r2
000004  460d              MOV      r5,r1
000006  4606              MOV      r6,r0
;;;367      U8 Label;
;;;368      Label = _ReadU8();
000008  f7fffffe          BL       _ReadU8
;;;369      switch (Label) {
00000c  2801              CMP      r0,#1
00000e  d005              BEQ      |L21.28|
000010  28f9              CMP      r0,#0xf9
000012  d00a              BEQ      |L21.42|
000014  28fe              CMP      r0,#0xfe
000016  d001              BEQ      |L21.28|
000018  28ff              CMP      r0,#0xff
00001a  d11f              BNE      |L21.92|
                  |L21.28|
;;;370      case GIF_PLAINTEXT:
;;;371      case GIF_APPLICATION:
;;;372      case GIF_COMMENT:
;;;373        while (_GetDataBlock(_aBuffer) > 0);
00001c  4810              LDR      r0,|L21.96|
00001e  f7fffffe          BL       _GetDataBlock
000022  2800              CMP      r0,#0
000024  dcfa              BGT      |L21.28|
;;;374        return 0;
000026  2000              MOVS     r0,#0
                  |L21.40|
;;;375      case GIF_GRAPHICCTL:
;;;376        if (_GetDataBlock(_aBuffer) != 4) { /* Length of a graphic control block must be 4 */
;;;377          return 1;
;;;378        }
;;;379        if (pInfo) {
;;;380          pInfo->Delay    = (_aBuffer[2] << 8) | _aBuffer[1];
;;;381        }
;;;382        if (pDisposal) {
;;;383          *pDisposal = (_aBuffer[0] >> 2) & 0x7;
;;;384        }
;;;385        if (pTransIndex) {
;;;386          if ((_aBuffer[0] & 0x1) != 0) {
;;;387            *pTransIndex = _aBuffer[3];
;;;388          }
;;;389        }
;;;390        if (_ReadU8() != 0) { /* Read block terminator */
;;;391          return 1;
;;;392        }
;;;393        return 0;
;;;394      }
;;;395      return 1; /* Error */
;;;396    }
000028  bd70              POP      {r4-r6,pc}
                  |L21.42|
00002a  480d              LDR      r0,|L21.96|
00002c  f7fffffe          BL       _GetDataBlock
000030  2804              CMP      r0,#4                 ;376
000032  d113              BNE      |L21.92|
000034  4b0a              LDR      r3,|L21.96|
000036  b115              CBZ      r5,|L21.62|
000038  f8b30001          LDRH     r0,[r3,#1]            ;380  ; _aBuffer
00003c  6128              STR      r0,[r5,#0x10]         ;380
                  |L21.62|
00003e  b11c              CBZ      r4,|L21.72|
000040  7818              LDRB     r0,[r3,#0]            ;383  ; _aBuffer
000042  f3c00082          UBFX     r0,r0,#2,#3           ;383
000046  7020              STRB     r0,[r4,#0]            ;383
                  |L21.72|
000048  b126              CBZ      r6,|L21.84|
00004a  7818              LDRB     r0,[r3,#0]            ;386  ; _aBuffer
00004c  07c0              LSLS     r0,r0,#31             ;386
00004e  d001              BEQ      |L21.84|
000050  78d8              LDRB     r0,[r3,#3]            ;387  ; _aBuffer
000052  6030              STR      r0,[r6,#0]            ;387
                  |L21.84|
000054  f7fffffe          BL       _ReadU8
000058  2800              CMP      r0,#0                 ;390
00005a  d0e5              BEQ      |L21.40|
                  |L21.92|
00005c  2001              MOVS     r0,#1                 ;395
00005e  bd70              POP      {r4-r6,pc}
;;;397    
                          ENDP

                  |L21.96|
                          DCD      ||.bss||+0x363c

                          AREA ||i._ReadU16||, CODE, READONLY, ALIGN=1

                  _ReadU16 PROC
;;;139    */
;;;140    static U16 _ReadU16(void) {
000000  b510              PUSH     {r4,lr}
;;;141      U16 Value;
;;;142      U8 Byte0, Byte1;
;;;143      Byte0 = _ReadU8();
000002  f7fffffe          BL       _ReadU8
000006  4604              MOV      r4,r0
;;;144      Byte1 = _ReadU8();
000008  f7fffffe          BL       _ReadU8
;;;145      Value = (Byte1 << 8) | Byte0;
00000c  ea442000          ORR      r0,r4,r0,LSL #8
;;;146      return Value;
;;;147    }
000010  bd10              POP      {r4,pc}
;;;148    
                          ENDP


                          AREA ||i._ReadU8||, CODE, READONLY, ALIGN=2

                  _ReadU8 PROC
;;;122    */
;;;123    static U8 _ReadU8(void) {
000000  4905              LDR      r1,|L23.24|
;;;124      U8 Value;
;;;125      _Source.RemBytes -= 1;
000002  6848              LDR      r0,[r1,#4]  ; _Source
000004  1e40              SUBS     r0,r0,#1
000006  6048              STR      r0,[r1,#4]            ;123  ; _Source
000008  d501              BPL      |L23.14|
;;;126      if (_Source.RemBytes < 0) {
;;;127        return 0;
00000a  2000              MOVS     r0,#0
;;;128      }
;;;129      Value = *(_Source.pSrc++);
;;;130      return Value;
;;;131    }
00000c  4770              BX       lr
                  |L23.14|
00000e  680a              LDR      r2,[r1,#0]            ;129  ; _Source
000010  f8120b01          LDRB     r0,[r2],#1            ;129
000014  600a              STR      r2,[r1,#0]            ;129  ; _Source
000016  4770              BX       lr
;;;132    
                          ENDP

                  |L23.24|
                          DCD      ||.data||

                          AREA ||i._SkipBytes||, CODE, READONLY, ALIGN=2

                  _SkipBytes PROC
;;;175    */
;;;176    static void _SkipBytes(int Len) {
000000  4905              LDR      r1,|L24.24|
;;;177      if (_Source.RemBytes < 0) {
000002  684a              LDR      r2,[r1,#4]  ; _Source
000004  2a00              CMP      r2,#0
000006  db06              BLT      |L24.22|
;;;178        return;
;;;179      }
;;;180      if (_Source.RemBytes < Len) {
000008  4282              CMP      r2,r0
00000a  db04              BLT      |L24.22|
;;;181        Len = _Source.RemBytes;
;;;182        return;
;;;183      }
;;;184      _Source.RemBytes -= Len;
00000c  1a12              SUBS     r2,r2,r0
;;;185      _Source.pSrc += Len;
00000e  604a              STR      r2,[r1,#4]  ; _Source
000010  680a              LDR      r2,[r1,#0]  ; _Source
000012  4410              ADD      r0,r0,r2
000014  6008              STR      r0,[r1,#0]  ; _Source
                  |L24.22|
;;;186    }
000016  4770              BX       lr
;;;187    
                          ENDP

                  |L24.24|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _LZWContext
                          %        12860
                  _aColorTable
                          %        1024
                  _aBuffer
                          %        256

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  _aMaskTbl
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000003
                          DCD      0x00000007
                          DCD      0x0000000f
                          DCD      0x0000001f
                          DCD      0x0000003f
                          DCD      0x0000007f
                          DCD      0x000000ff
                          DCD      0x000001ff
                          DCD      0x000003ff
                          DCD      0x000007ff
                          DCD      0x00000fff
                          DCD      0x00001fff
                          DCD      0x00003fff
                          DCD      0x00007fff
                  _aInterlaceOffset
                          DCD      0x00000008
                          DCD      0x00000008
                          DCD      0x00000004
                          DCD      0x00000002
                  _aInterlaceYPos
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x00000002
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=2

                  _Source
                          %        8
