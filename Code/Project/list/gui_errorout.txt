; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\gui_errorout.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui_errorout.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\Core\GUI_ErrorOut.c]
                          THUMB

                          AREA ||i.GUI_ErrorOut||, CODE, READONLY, ALIGN=1

                  GUI_ErrorOut PROC
;;;61     */
;;;62     void GUI_ErrorOut(const char *s) { GUI_X_ErrorOut(s); }
000000  f7ffbffe          B.W      GUI_X_ErrorOut
;;;63     
                          ENDP


                          AREA ||i.GUI_ErrorOut1||, CODE, READONLY, ALIGN=1

                  GUI_ErrorOut1 PROC
;;;67     */
;;;68     void GUI_ErrorOut1(const char *s, int p0) {
000000  b530              PUSH     {r4,r5,lr}
000002  b091              SUB      sp,sp,#0x44
000004  460d              MOV      r5,r1
000006  4604              MOV      r4,r0
;;;69       char ac[MAXLEN + 10];
;;;70       char* sOut = ac;
000008  f8cdd03c          STR      sp,[sp,#0x3c]
;;;71       GUI_MEMSET((U8*)ac, 0, sizeof(ac));
00000c  223c              MOVS     r2,#0x3c
00000e  2100              MOVS     r1,#0
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       GUI__memset
;;;72       _CopyString(ac, s, MAXLEN);
000016  2232              MOVS     r2,#0x32
000018  4621              MOV      r1,r4
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       _CopyString
;;;73       sOut += strlen(sOut);
000020  980f              LDR      r0,[sp,#0x3c]
000022  f7fffffe          BL       strlen
000026  990f              LDR      r1,[sp,#0x3c]
;;;74       GUI__AddSpaceHex(p0, 8, &sOut);
000028  aa0f              ADD      r2,sp,#0x3c
00002a  4408              ADD      r0,r0,r1              ;73
00002c  900f              STR      r0,[sp,#0x3c]
00002e  2108              MOVS     r1,#8
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       GUI__AddSpaceHex
;;;75       GUI_ErrorOut(ac);
000036  4668              MOV      r0,sp
000038  f7fffffe          BL       GUI_X_ErrorOut
;;;76     }
00003c  b011              ADD      sp,sp,#0x44
00003e  bd30              POP      {r4,r5,pc}
;;;77     
                          ENDP


                          AREA ||i.GUI_ErrorOut2||, CODE, READONLY, ALIGN=1

                  GUI_ErrorOut2 PROC
;;;81     */
;;;82     void GUI_ErrorOut2(const char *s, int p0, int p1) {
000000  b570              PUSH     {r4-r6,lr}
000002  b094              SUB      sp,sp,#0x50
000004  4615              MOV      r5,r2
000006  460e              MOV      r6,r1
000008  4604              MOV      r4,r0
;;;83       char ac[MAXLEN + 20];
;;;84       char* sOut = ac;
00000a  f8cdd048          STR      sp,[sp,#0x48]
;;;85       GUI_MEMSET((U8*)ac, 0, sizeof(ac));
00000e  2246              MOVS     r2,#0x46
000010  2100              MOVS     r1,#0
000012  4668              MOV      r0,sp
000014  f7fffffe          BL       GUI__memset
;;;86       _CopyString(ac, s, MAXLEN);
000018  2232              MOVS     r2,#0x32
00001a  4621              MOV      r1,r4
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       _CopyString
;;;87       sOut += strlen(sOut);
000022  9812              LDR      r0,[sp,#0x48]
000024  f7fffffe          BL       strlen
000028  9912              LDR      r1,[sp,#0x48]
;;;88       GUI__AddSpaceHex(p0, 8, &sOut);
00002a  aa12              ADD      r2,sp,#0x48
00002c  4408              ADD      r0,r0,r1              ;87
00002e  9012              STR      r0,[sp,#0x48]
000030  2108              MOVS     r1,#8
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       GUI__AddSpaceHex
;;;89       GUI__AddSpaceHex(p1, 8, &sOut);
000038  aa12              ADD      r2,sp,#0x48
00003a  2108              MOVS     r1,#8
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       GUI__AddSpaceHex
;;;90       GUI_ErrorOut(ac);
000042  4668              MOV      r0,sp
000044  f7fffffe          BL       GUI_X_ErrorOut
;;;91     }
000048  b014              ADD      sp,sp,#0x50
00004a  bd70              POP      {r4-r6,pc}
;;;92     
                          ENDP


                          AREA ||i.GUI_ErrorOut3||, CODE, READONLY, ALIGN=1

                  GUI_ErrorOut3 PROC
;;;96     */
;;;97     void GUI_ErrorOut3(const char *s, int p0, int p1, int p2) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b095              SUB      sp,sp,#0x54
000004  4616              MOV      r6,r2
000006  460f              MOV      r7,r1
000008  4604              MOV      r4,r0
00000a  461d              MOV      r5,r3
;;;98       char ac[MAXLEN + 30];
;;;99       char* sOut = ac;
00000c  f8cdd050          STR      sp,[sp,#0x50]
;;;100      GUI_MEMSET((U8*)ac, 0, sizeof(ac));
000010  2250              MOVS     r2,#0x50
000012  2100              MOVS     r1,#0
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       GUI__memset
;;;101      _CopyString(ac, s, MAXLEN);
00001a  2232              MOVS     r2,#0x32
00001c  4621              MOV      r1,r4
00001e  4668              MOV      r0,sp
000020  f7fffffe          BL       _CopyString
;;;102      sOut += strlen(sOut);
000024  9814              LDR      r0,[sp,#0x50]
000026  f7fffffe          BL       strlen
00002a  9914              LDR      r1,[sp,#0x50]
;;;103      GUI__AddSpaceHex(p0, 8, &sOut);
00002c  aa14              ADD      r2,sp,#0x50
00002e  4408              ADD      r0,r0,r1              ;102
000030  9014              STR      r0,[sp,#0x50]
000032  2108              MOVS     r1,#8
000034  4638              MOV      r0,r7
000036  f7fffffe          BL       GUI__AddSpaceHex
;;;104      GUI__AddSpaceHex(p1, 8, &sOut);
00003a  aa14              ADD      r2,sp,#0x50
00003c  2108              MOVS     r1,#8
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       GUI__AddSpaceHex
;;;105      GUI__AddSpaceHex(p2, 8, &sOut);
000044  aa14              ADD      r2,sp,#0x50
000046  2108              MOVS     r1,#8
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       GUI__AddSpaceHex
;;;106      GUI_ErrorOut(ac);
00004e  4668              MOV      r0,sp
000050  f7fffffe          BL       GUI_X_ErrorOut
;;;107    }
000054  b015              ADD      sp,sp,#0x54
000056  bdf0              POP      {r4-r7,pc}
;;;108    
                          ENDP


                          AREA ||i.GUI_ErrorOut4||, CODE, READONLY, ALIGN=1

                  GUI_ErrorOut4 PROC
;;;112    */
;;;113    void GUI_ErrorOut4(const char *s, int p0, int p1, int p2, int p3) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  b098              SUB      sp,sp,#0x60
000006  4688              MOV      r8,r1
000008  4604              MOV      r4,r0
00000a  461e              MOV      r6,r3
00000c  4617              MOV      r7,r2
;;;114      char ac[MAXLEN + 40] = {0};
00000e  215c              MOVS     r1,#0x5c
000010  4668              MOV      r0,sp
000012  9d1e              LDR      r5,[sp,#0x78]
000014  f7fffffe          BL       __aeabi_memclr4
;;;115      char* sOut = ac;
000018  f8cdd05c          STR      sp,[sp,#0x5c]
;;;116      GUI_MEMSET((U8*)ac, 0, sizeof(ac));
00001c  225a              MOVS     r2,#0x5a
00001e  2100              MOVS     r1,#0
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       GUI__memset
;;;117      _CopyString(ac, s, MAXLEN);
000026  2232              MOVS     r2,#0x32
000028  4621              MOV      r1,r4
00002a  4668              MOV      r0,sp
00002c  f7fffffe          BL       _CopyString
;;;118      sOut += strlen(sOut);
000030  9817              LDR      r0,[sp,#0x5c]
000032  f7fffffe          BL       strlen
000036  9917              LDR      r1,[sp,#0x5c]
;;;119      GUI__AddSpaceHex(p0, 8, &sOut);
000038  aa17              ADD      r2,sp,#0x5c
00003a  4408              ADD      r0,r0,r1              ;118
00003c  9017              STR      r0,[sp,#0x5c]
00003e  2108              MOVS     r1,#8
000040  4640              MOV      r0,r8
000042  f7fffffe          BL       GUI__AddSpaceHex
;;;120      GUI__AddSpaceHex(p1, 8, &sOut);
000046  aa17              ADD      r2,sp,#0x5c
000048  2108              MOVS     r1,#8
00004a  4638              MOV      r0,r7
00004c  f7fffffe          BL       GUI__AddSpaceHex
;;;121      GUI__AddSpaceHex(p2, 8, &sOut);
000050  aa17              ADD      r2,sp,#0x5c
000052  2108              MOVS     r1,#8
000054  4630              MOV      r0,r6
000056  f7fffffe          BL       GUI__AddSpaceHex
;;;122      GUI__AddSpaceHex(p3, 8, &sOut);
00005a  aa17              ADD      r2,sp,#0x5c
00005c  2108              MOVS     r1,#8
00005e  4628              MOV      r0,r5
000060  f7fffffe          BL       GUI__AddSpaceHex
;;;123      GUI_ErrorOut(ac);
000064  4668              MOV      r0,sp
000066  f7fffffe          BL       GUI_X_ErrorOut
;;;124    }
00006a  b018              ADD      sp,sp,#0x60
00006c  e8bd81f0          POP      {r4-r8,pc}
;;;125    
                          ENDP


                          AREA ||i._CopyString||, CODE, READONLY, ALIGN=2

                  _CopyString PROC
;;;43     */
;;;44     static void _CopyString(char*d, const char*s, int MaxLen) {
000000  e004              B        |L6.12|
;;;45       while ((MaxLen > 0) && *s) {
;;;46         *d++ = *s++;
000002  bf00              NOP      
                  |L6.4|
000004  1c49              ADDS     r1,r1,#1
000006  f8003b01          STRB     r3,[r0],#1
00000a  1e52              SUBS     r2,r2,#1
                  |L6.12|
00000c  2a00              CMP      r2,#0                 ;45
00000e  dd02              BLE      |L6.22|
000010  780b              LDRB     r3,[r1,#0]            ;45
000012  2b00              CMP      r3,#0                 ;45
000014  d1f6              BNE      |L6.4|
                  |L6.22|
;;;47         MaxLen--;
;;;48       }
;;;49       *d = 0;
000016  2100              MOVS     r1,#0
000018  7001              STRB     r1,[r0,#0]
;;;50     }
00001a  4770              BX       lr
;;;51     
                          ENDP

