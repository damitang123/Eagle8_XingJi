; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\checkbox.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\checkbox.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\Widget\CHECKBOX.c]
                          THUMB

                          AREA ||i.CHECKBOX_Callback||, CODE, READONLY, ALIGN=1

                  CHECKBOX_Callback PROC
;;;270    */
;;;271    void CHECKBOX_Callback (WM_MESSAGE *pMsg) {
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;272      CHECKBOX_Handle hObj;
;;;273      CHECKBOX_Obj* pObj;
;;;274      hObj = pMsg->hWin;
000004  f9b05004          LDRSH    r5,[r0,#4]
000008  4606              MOV      r6,r0                 ;271
;;;275      pObj = (CHECKBOX_Obj *)GUI_ALLOC_h2p(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       GUI_ALLOC_h2p
000010  4604              MOV      r4,r0
;;;276      /* Let widget handle the standard messages */
;;;277      if (WIDGET_HandleActive(hObj, pMsg) == 0) {
000012  4631              MOV      r1,r6
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       WIDGET_HandleActive
00001a  2800              CMP      r0,#0
00001c  d05c              BEQ      |L1.216|
;;;278        return;
;;;279      }
;;;280      switch (pMsg->MsgId) {
00001e  6830              LDR      r0,[r6,#0]
000020  280b              CMP      r0,#0xb
000022  d050              BEQ      |L1.198|
000024  280c              CMP      r0,#0xc
000026  d022              BEQ      |L1.110|
000028  280e              CMP      r0,#0xe
00002a  d002              BEQ      |L1.50|
00002c  280f              CMP      r0,#0xf
00002e  d14e              BNE      |L1.206|
000030  e017              B        |L1.98|
                  |L1.50|
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       WM__IsEnabled
000038  b3a8              CBZ      r0,|L1.166|
00003a  68b0              LDR      r0,[r6,#8]
00003c  6841              LDR      r1,[r0,#4]
00003e  2900              CMP      r1,#0
000040  dd45              BLE      |L1.206|
000042  6800              LDR      r0,[r0,#0]
000044  2820              CMP      r0,#0x20
000046  d142              BNE      |L1.206|
000048  f894005d          LDRB     r0,[r4,#0x5d]
00004c  f894105c          LDRB     r1,[r4,#0x5c]
000050  1c40              ADDS     r0,r0,#1
000052  fbb0f2f1          UDIV     r2,r0,r1
000056  fb010112          MLS      r1,r1,r2,r0
00005a  4628              MOV      r0,r5
00005c  f7fffffe          BL       CHECKBOX_SetState
000060  e035              B        |L1.206|
                  |L1.98|
;;;281      case WM_KEY:
;;;282        _OnKey(hObj, pObj, pMsg);
;;;283        break;
;;;284      case WM_PAINT:
;;;285        GUI_DEBUG_LOG("CHECKBOX: _Callback(WM_PAINT)\n");
;;;286        _Paint(pObj, hObj);
000062  4629              MOV      r1,r5
000064  4620              MOV      r0,r4
000066  e8bd41f0          POP      {r4-r8,lr}
00006a  f7ffbffe          B.W      _Paint
                  |L1.110|
;;;287        return;
;;;288      case WM_TOUCH:
;;;289        _OnTouch(hObj, pObj, pMsg);
00006e  46a8              MOV      r8,r5
000070  68b5              LDR      r5,[r6,#8]
000072  2700              MOVS     r7,#0
000074  b30d              CBZ      r5,|L1.186|
000076  4640              MOV      r0,r8
000078  f7fffffe          BL       WM_HasCaptured
00007c  b9f0              CBNZ     r0,|L1.188|
00007e  7a28              LDRB     r0,[r5,#8]
000080  b190              CBZ      r0,|L1.168|
000082  2101              MOVS     r1,#1
000084  4640              MOV      r0,r8
000086  f7fffffe          BL       WM_SetCapture
00008a  f894005d          LDRB     r0,[r4,#0x5d]
00008e  f894105c          LDRB     r1,[r4,#0x5c]
000092  1c40              ADDS     r0,r0,#1
000094  fbb0f2f1          UDIV     r2,r0,r1
000098  fb010112          MLS      r1,r1,r2,r0
00009c  4640              MOV      r0,r8
00009e  f7fffffe          BL       CHECKBOX_SetState
0000a2  2101              MOVS     r1,#1
0000a4  e00b              B        |L1.190|
                  |L1.166|
0000a6  e012              B        |L1.206|
                  |L1.168|
0000a8  2102              MOVS     r1,#2
0000aa  4640              MOV      r0,r8
0000ac  f7fffffe          BL       WM_NotifyParent
0000b0  f9b40024          LDRSH    r0,[r4,#0x24]
0000b4  f7fffffe          BL       GUI_StoreKey
0000b8  e009              B        |L1.206|
                  |L1.186|
0000ba  2703              MOVS     r7,#3
                  |L1.188|
0000bc  4639              MOV      r1,r7
                  |L1.190|
0000be  4640              MOV      r0,r8
0000c0  f7fffffe          BL       WM_NotifyParent
0000c4  e003              B        |L1.206|
                  |L1.198|
0000c6  f104005e          ADD      r0,r4,#0x5e
0000ca  f7fffffe          BL       GUI_ALLOC_FreePtr
                  |L1.206|
;;;290        break;
;;;291      case WM_DELETE:
;;;292        GUI_DEBUG_LOG("CHECKBOX: _Callback(WM_DELETE)\n");
;;;293        _Delete(pObj);
;;;294        break;       /* No return here ... WM_DefaultProc needs to be called */
;;;295      }
;;;296      WM_DefaultProc(pMsg);
0000ce  4630              MOV      r0,r6
0000d0  e8bd41f0          POP      {r4-r8,lr}
0000d4  f7ffbffe          B.W      WM_DefaultProc
                  |L1.216|
;;;297    }
0000d8  e8bd81f0          POP      {r4-r8,pc}
;;;298    
                          ENDP


                          AREA ||i.CHECKBOX_CreateEx||, CODE, READONLY, ALIGN=2

                  CHECKBOX_CreateEx PROC
;;;312    */
;;;313    CHECKBOX_Handle CHECKBOX_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;314                                        int WinFlags, int ExFlags, int Id)
;;;315    {
;;;316      CHECKBOX_Handle hObj;
;;;317      GUI_USE_PARA(ExFlags);
;;;318      WM_LOCK();
;;;319      /* Calculate size if needed */
;;;320      if ((xsize == 0) || (ysize == 0)) {
;;;321        int EffectSize;
;;;322        EffectSize = WIDGET_GetDefaultEffect()->EffectSize;
;;;323        if (xsize == 0) {
;;;324          xsize = CHECKBOX__DefaultProps.apBm[CHECKBOX_BI_ACTIV]->XSize + 2 * EffectSize;
000004  4f21              LDR      r7,|L2.140|
000006  e9dd860e          LDRD     r8,r6,[sp,#0x38]      ;315
00000a  f8ddb044          LDR      r11,[sp,#0x44]        ;315
00000e  461c              MOV      r4,r3                 ;315
000010  0015              MOVS     r5,r2                 ;315
000012  4689              MOV      r9,r1                 ;315
000014  4682              MOV      r10,r0                ;315
000016  d000              BEQ      |L2.26|
000018  b964              CBNZ     r4,|L2.52|
                  |L2.26|
00001a  f7fffffe          BL       WIDGET_GetDefaultEffect
00001e  6940              LDR      r0,[r0,#0x14]         ;322
000020  b91d              CBNZ     r5,|L2.42|
000022  6ab9              LDR      r1,[r7,#0x28]  ; CHECKBOX__DefaultProps
000024  8809              LDRH     r1,[r1,#0]
000026  eb010540          ADD      r5,r1,r0,LSL #1
                  |L2.42|
;;;325        }
;;;326        if (ysize == 0) {
00002a  b91c              CBNZ     r4,|L2.52|
;;;327          ysize = CHECKBOX__DefaultProps.apBm[CHECKBOX_BI_ACTIV]->YSize + 2 * EffectSize;
00002c  6ab9              LDR      r1,[r7,#0x28]  ; CHECKBOX__DefaultProps
00002e  8849              LDRH     r1,[r1,#2]
000030  eb010440          ADD      r4,r1,r0,LSL #1
                  |L2.52|
;;;328        }
;;;329      }
;;;330    #if WM_SUPPORT_TRANSPARENCY
;;;331      if (CHECKBOX__DefaultProps.BkColor == GUI_INVALID_COLOR) {
000034  68f8              LDR      r0,[r7,#0xc]  ; CHECKBOX__DefaultProps
000036  f06f4170          MVN      r1,#0xf0000000
00003a  4288              CMP      r0,r1
00003c  d101              BNE      |L2.66|
;;;332        WinFlags |= WM_CF_HASTRANS;
00003e  f0460601          ORR      r6,r6,#1
                  |L2.66|
;;;333      }
;;;334    #endif
;;;335      /* Create the window */
;;;336      hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WinFlags, CHECKBOX_Callback,
000042  2240              MOVS     r2,#0x40
000044  4b12              LDR      r3,|L2.144|
000046  9203              STR      r2,[sp,#0xc]
000048  b2b1              UXTH     r1,r6
00004a  f8cd8000          STR      r8,[sp,#0]
00004e  e9cd1301          STRD     r1,r3,[sp,#4]
000052  4623              MOV      r3,r4
000054  462a              MOV      r2,r5
000056  4649              MOV      r1,r9
000058  4650              MOV      r0,r10
00005a  f7fffffe          BL       WM_CreateWindowAsChild
00005e  0005              MOVS     r5,r0
;;;337                                    sizeof(CHECKBOX_Obj) - sizeof(WM_Obj));
;;;338      if (hObj) {
000060  d00f              BEQ      |L2.130|
;;;339        CHECKBOX_Obj* pObj = (CHECKBOX_Obj *)GUI_ALLOC_h2p(hObj); /* Don't use use WIDGET_H2P because WIDGET_INIT_ID() has not be called at this point */
000062  f7fffffe          BL       GUI_ALLOC_h2p
000066  4604              MOV      r4,r0
;;;340        /* init widget specific variables */
;;;341        WIDGET__Init(&pObj->Widget, Id, WIDGET_STATE_FOCUSSABLE);
000068  2210              MOVS     r2,#0x10
00006a  4659              MOV      r1,r11
00006c  f7fffffe          BL       WIDGET__Init
;;;342        CHECKBOX_INIT_ID(pObj);
;;;343        /* init member variables */
;;;344        pObj->Props = CHECKBOX__DefaultProps;
000070  2234              MOVS     r2,#0x34
000072  4906              LDR      r1,|L2.140|
000074  f1040028          ADD      r0,r4,#0x28
000078  f7fffffe          BL       __aeabi_memcpy4
;;;345        pObj->NumStates   = 2; /* Default behaviour is 2 states: checked and unchecked */
00007c  2002              MOVS     r0,#2
00007e  f884005c          STRB     r0,[r4,#0x5c]
                  |L2.130|
;;;346      } else {
;;;347        GUI_DEBUG_ERROROUT_IF(hObj==0, "CHECKBOX_Create failed")
;;;348      }
;;;349      WM_UNLOCK();
;;;350      return hObj;
;;;351    }
000082  b004              ADD      sp,sp,#0x10
000084  4628              MOV      r0,r5                 ;350
000086  e8bd9ff0          POP      {r4-r12,pc}
;;;352    
                          ENDP

00008a  0000              DCW      0x0000
                  |L2.140|
                          DCD      ||.data||
                  |L2.144|
                          DCD      CHECKBOX_Callback

                          AREA ||i._Paint||, CODE, READONLY, ALIGN=1

                  _Paint PROC
;;;107    */
;;;108    static void _Paint(CHECKBOX_Obj* pObj, CHECKBOX_Handle hObj) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  b089              SUB      sp,sp,#0x24
000004  4604              MOV      r4,r0
;;;109      GUI_RECT RectBox = {0};
000006  2000              MOVS     r0,#0
000008  9006              STR      r0,[sp,#0x18]
;;;110      int ColorIndex, EffectSize, Index;
;;;111      EffectSize = pObj->Widget.pEffect->EffectSize;
00000a  9007              STR      r0,[sp,#0x1c]
00000c  6a20              LDR      r0,[r4,#0x20]
00000e  460e              MOV      r6,r1                 ;108
;;;112      ColorIndex = WM__IsEnabled(hObj);
000010  6947              LDR      r7,[r0,#0x14]
000012  4608              MOV      r0,r1
000014  f7fffffe          BL       WM__IsEnabled
000018  4605              MOV      r5,r0
;;;113      /* Clear inside ... Just in case      */
;;;114      /* Fill with parents background color */
;;;115    #if WM_SUPPORT_TRANSPARENCY
;;;116      if (!WM_GetHasTrans(hObj))
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       WM_GetHasTrans
000020  b958              CBNZ     r0,|L3.58|
;;;117    #endif
;;;118      {
;;;119        if (pObj->Props.BkColor == GUI_INVALID_COLOR) {
000022  6b60              LDR      r0,[r4,#0x34]
000024  f06f4170          MVN      r1,#0xf0000000
000028  4288              CMP      r0,r1
00002a  d102              BNE      |L3.50|
;;;120          LCD_SetBkColor(WIDGET__GetBkColor(hObj));
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       WIDGET__GetBkColor
                  |L3.50|
;;;121        } else {
;;;122          LCD_SetBkColor(pObj->Props.BkColor);
000032  f7fffffe          BL       LCD_SetBkColor
;;;123        }
;;;124        GUI_Clear();
000036  f7fffffe          BL       GUI_Clear
                  |L3.58|
;;;125      }
;;;126      /* Get size from bitmap */
;;;127      RectBox.x1 = pObj->Props.apBm[CHECKBOX_BI_ACTIV]->XSize - 1 + 2 * EffectSize;
00003a  6d20              LDR      r0,[r4,#0x50]
00003c  f04f36ff          MOV      r6,#0xffffffff
000040  8801              LDRH     r1,[r0,#0]
000042  eb060047          ADD      r0,r6,r7,LSL #1
000046  4401              ADD      r1,r1,r0
000048  f8ad101c          STRH     r1,[sp,#0x1c]
;;;128      RectBox.y1 = pObj->Props.apBm[CHECKBOX_BI_ACTIV]->YSize - 1 + 2 * EffectSize;
00004c  6d21              LDR      r1,[r4,#0x50]
00004e  8849              LDRH     r1,[r1,#2]
000050  4408              ADD      r0,r0,r1
000052  f8ad001e          STRH     r0,[sp,#0x1e]
;;;129      WM_SetUserClipRect(&RectBox);
000056  a806              ADD      r0,sp,#0x18
000058  f7fffffe          BL       WM_SetUserClipRect
;;;130      /* Clear inside  ... Just in case */
;;;131      LCD_SetBkColor(pObj->Props.aBkColorBox[ColorIndex]);
00005c  eb040085          ADD      r0,r4,r5,LSL #2
000060  6ac0              LDR      r0,[r0,#0x2c]
000062  f7fffffe          BL       LCD_SetBkColor
;;;132      GUI_Clear();
000066  f7fffffe          BL       GUI_Clear
;;;133      Index = pObj->CurrentState * 2 + ColorIndex;
00006a  f894005d          LDRB     r0,[r4,#0x5d]
00006e  eb050040          ADD      r0,r5,r0,LSL #1
;;;134      if (pObj->Props.apBm[Index]) {
000072  eb040080          ADD      r0,r4,r0,LSL #2
000076  6c40              LDR      r0,[r0,#0x44]
000078  b118              CBZ      r0,|L3.130|
;;;135        GUI_DrawBitmap(pObj->Props.apBm[Index], EffectSize, EffectSize);
00007a  463a              MOV      r2,r7
00007c  4611              MOV      r1,r2
00007e  f7fffffe          BL       GUI_DrawBitmap
                  |L3.130|
;;;136      }
;;;137      /* Draw the effect arround the box */
;;;138      WIDGET__EFFECT_DrawDownRect(&pObj->Widget, &RectBox);
000082  a906              ADD      r1,sp,#0x18
000084  4620              MOV      r0,r4
000086  f7fffffe          BL       WIDGET__EFFECT_DrawDownRect
;;;139      WM_SetUserClipRect(NULL);
00008a  2000              MOVS     r0,#0
00008c  f7fffffe          BL       WM_SetUserClipRect
;;;140      /* Draw text if needed */
;;;141      if (pObj->hpText) {
000090  f9b4005e          LDRSH    r0,[r4,#0x5e]
000094  2800              CMP      r0,#0
000096  d075              BEQ      |L3.388|
;;;142        const char * s;
;;;143        GUI_RECT RectText;
;;;144        /* Draw the text */
;;;145        s = (const char *) GUI_ALLOC_h2p(pObj->hpText);
000098  f7fffffe          BL       GUI_ALLOC_h2p
00009c  4605              MOV      r5,r0
;;;146        WM_GetClientRect(&RectText);
00009e  a802              ADD      r0,sp,#8
0000a0  f7fffffe          BL       WM_GetClientRect
;;;147        RectText.x0 += RectBox.x1 + 1 + pObj->Props.Spacing;
0000a4  f8bd0008          LDRH     r0,[sp,#8]
0000a8  f8bd101c          LDRH     r1,[sp,#0x1c]
0000ac  4401              ADD      r1,r1,r0
0000ae  f8940042          LDRB     r0,[r4,#0x42]
0000b2  1c40              ADDS     r0,r0,#1
0000b4  4408              ADD      r0,r0,r1
0000b6  f8ad0008          STRH     r0,[sp,#8]
;;;148        GUI_SetTextMode(GUI_TM_TRANS);
0000ba  2002              MOVS     r0,#2
0000bc  f7fffffe          BL       GUI_SetTextMode
;;;149        LCD_SetColor(pObj->Props.TextColor);
0000c0  6ba0              LDR      r0,[r4,#0x38]
0000c2  f7fffffe          BL       LCD_SetColor
;;;150        GUI_SetFont(pObj->Props.pFont);
0000c6  6aa0              LDR      r0,[r4,#0x28]
0000c8  f7fffffe          BL       GUI_SetFont
;;;151        GUI_DispStringInRect(s, &RectText, pObj->Props.Align);
0000cc  f9b42040          LDRSH    r2,[r4,#0x40]
0000d0  a902              ADD      r1,sp,#8
0000d2  4628              MOV      r0,r5
0000d4  f7fffffe          BL       GUI_DispStringInRect
;;;152        /* Draw focus rectangle */
;;;153        if (pObj->Widget.State & WIDGET_STATE_FOCUS) {
0000d8  f8940026          LDRB     r0,[r4,#0x26]
0000dc  07c0              LSLS     r0,r0,#31
0000de  d051              BEQ      |L3.388|
;;;154          int xSizeText = GUI_GetStringDistX(s);
0000e0  4628              MOV      r0,r5
0000e2  f7fffffe          BL       GUI_GetStringDistX
0000e6  4605              MOV      r5,r0
;;;155          int ySizeText = GUI_GetFontSizeY();
0000e8  f7fffffe          BL       GUI_GetFontSizeY
0000ec  e9dd1202          LDRD     r1,r2,[sp,#8]
0000f0  e9cd1200          STRD     r1,r2,[sp,#0]
;;;156          GUI_RECT RectFocus = RectText;
;;;157          switch (pObj->Props.Align & ~(GUI_TA_HORIZONTAL)) {
0000f4  f9b41040          LDRSH    r1,[r4,#0x40]
0000f8  f0210103          BIC      r1,r1,#3
0000fc  2904              CMP      r1,#4
0000fe  d009              BEQ      |L3.276|
000100  290c              CMP      r1,#0xc
000102  d10c              BNE      |L3.286|
;;;158          case GUI_TA_VCENTER:
;;;159            RectFocus.y0 = (RectText.y1 - ySizeText + 1) / 2;
000104  f9bd100e          LDRSH    r1,[sp,#0xe]
000108  1a09              SUBS     r1,r1,r0
00010a  1c49              ADDS     r1,r1,#1
00010c  eb0171d1          ADD      r1,r1,r1,LSR #31
000110  1049              ASRS     r1,r1,#1
;;;160            break;
000112  e002              B        |L3.282|
                  |L3.276|
;;;161          case GUI_TA_BOTTOM:
;;;162            RectFocus.y0 = RectText.y1 - ySizeText;
000114  f8bd100e          LDRH     r1,[sp,#0xe]
000118  1a09              SUBS     r1,r1,r0
                  |L3.282|
00011a  f8ad1002          STRH     r1,[sp,#2]            ;159
                  |L3.286|
;;;163            break;
;;;164          }
;;;165          switch (pObj->Props.Align & ~(GUI_TA_VERTICAL)) {
00011e  f9b41040          LDRSH    r1,[r4,#0x40]
000122  f021010c          BIC      r1,r1,#0xc
000126  2901              CMP      r1,#1
000128  d00e              BEQ      |L3.328|
00012a  2902              CMP      r1,#2
00012c  d117              BNE      |L3.350|
;;;166          case GUI_TA_HCENTER:
;;;167            RectFocus.x0 += ((RectText.x1 - RectText.x0) - xSizeText) / 2;
00012e  f9bd100c          LDRSH    r1,[sp,#0xc]
000132  f9bd2008          LDRSH    r2,[sp,#8]
000136  1a89              SUBS     r1,r1,r2
000138  1b49              SUBS     r1,r1,r5
00013a  f8bd2000          LDRH     r2,[sp,#0]
00013e  eb0171d1          ADD      r1,r1,r1,LSR #31
000142  eb020161          ADD      r1,r2,r1,ASR #1
;;;168            break;
000146  e008              B        |L3.346|
                  |L3.328|
;;;169          case GUI_TA_RIGHT:
;;;170            RectFocus.x0 += (RectText.x1 - RectText.x0) - xSizeText;
000148  f8bd100c          LDRH     r1,[sp,#0xc]
00014c  f8bd2008          LDRH     r2,[sp,#8]
000150  1a89              SUBS     r1,r1,r2
000152  f8bd2000          LDRH     r2,[sp,#0]
000156  1b49              SUBS     r1,r1,r5
000158  4411              ADD      r1,r1,r2
                  |L3.346|
00015a  f8ad1000          STRH     r1,[sp,#0]            ;167
                  |L3.350|
;;;171            break;
;;;172          }
;;;173          RectFocus.x1 = RectFocus.x0 + xSizeText - 1;
00015e  f8bd1000          LDRH     r1,[sp,#0]
000162  1e6d              SUBS     r5,r5,#1
000164  4429              ADD      r1,r1,r5
000166  f8ad1004          STRH     r1,[sp,#4]
;;;174          RectFocus.y1 = RectFocus.y0 + ySizeText - 1;
00016a  f8bd1002          LDRH     r1,[sp,#2]
00016e  1e40              SUBS     r0,r0,#1
000170  4408              ADD      r0,r0,r1
000172  f8ad0006          STRH     r0,[sp,#6]
;;;175          LCD_SetColor(pObj->Props.FocusColor);
000176  6be0              LDR      r0,[r4,#0x3c]
000178  f7fffffe          BL       LCD_SetColor
;;;176          GUI_DrawFocusRect(&RectFocus, -1);
00017c  4631              MOV      r1,r6
00017e  4668              MOV      r0,sp
000180  f7fffffe          BL       GUI_DrawFocusRect
                  |L3.388|
;;;177        }
;;;178      }
;;;179    }
000184  b009              ADD      sp,sp,#0x24
000186  bdf0              POP      {r4-r7,pc}
;;;180    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  CHECKBOX__DefaultProps
                          DCD      GUI_Font13_1
                          DCD      0x00808080
                          DCD      0x00ffffff
                          DCD      0x00c0c0c0
                          DCD      0x00000000
                          DCD      0x00000000
000018  000c              DCW      0x000c
00001a  0400              DCB      0x04,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      CHECKBOX__abmCheck
                          DCD      CHECKBOX__abmCheck+0x14
                          %        8
