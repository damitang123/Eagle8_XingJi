; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\gui_dispstringinrectex.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui_dispstringinrectex.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\Core\GUI_DispStringInRectEx.c]
                          THUMB

                          AREA ||i.GUI_DispStringInRectEx||, CODE, READONLY, ALIGN=2

                  GUI_DispStringInRectEx PROC
;;;66     */
;;;67     void GUI_DispStringInRectEx(const char GUI_UNI_PTR *s, GUI_RECT* pRect, int TextAlign, int MaxLen, const GUI_ROTATION * pLCD_Api) {
000000  e92d47ff          PUSH     {r0-r10,lr}
000004  461f              MOV      r7,r3
000006  9e0c              LDR      r6,[sp,#0x30]
000008  4690              MOV      r8,r2
00000a  460d              MOV      r5,r1
00000c  4681              MOV      r9,r0
00000e  b376              CBZ      r6,|L1.110|
;;;68       const GUI_ROTATION * pLCD_ApiOld;
;;;69       if (pLCD_Api == GUI_ROTATE_0) {
;;;70         /* Do nothing else but calling GUI_DispStringInRectMax if pLCD_Api == GUI_ROTATE_0 */
;;;71         GUI_DispStringInRectMax(s, pRect, TextAlign, MaxLen);
;;;72       } else {
;;;73         #if (!GUI_WINSUPPORT)
;;;74           GUI_RECT Rect_Old;
;;;75         #else
;;;76           const GUI_RECT * pOldClipRect = NULL;
000010  2400              MOVS     r4,#0
;;;77         #endif
;;;78         GUI_RECT rClip, rText = {0};
000012  9400              STR      r4,[sp,#0]
;;;79         GUI_LOCK();
;;;80         /* Set the clip rectangle */
;;;81         if (pRect) {
000014  9401              STR      r4,[sp,#4]
000016  b1ad              CBZ      r5,|L1.68|
;;;82           rText = *pRect;
000018  6828              LDR      r0,[r5,#0]
00001a  9000              STR      r0,[sp,#0]
00001c  6868              LDR      r0,[r5,#4]
;;;83           GUI_RectDispString = rText;
00001e  9001              STR      r0,[sp,#4]
000020  4816              LDR      r0,|L1.124|
000022  9900              LDR      r1,[sp,#0]
000024  6001              STR      r1,[r0,#0]  ; GUI_RectDispString
000026  9901              LDR      r1,[sp,#4]
000028  6041              STR      r1,[r0,#4]  ; GUI_RectDispString
;;;84           #if (GUI_WINSUPPORT)
;;;85             pOldClipRect = WM_SetUserClipRect(pRect);
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       WM_SetUserClipRect
000030  0004              MOVS     r4,r0
;;;86             if (pOldClipRect) {
000032  d007              BEQ      |L1.68|
;;;87               GUI__IntersectRects(&rClip, pRect, pOldClipRect);
000034  4602              MOV      r2,r0
000036  4629              MOV      r1,r5
000038  a802              ADD      r0,sp,#8
00003a  f7fffffe          BL       GUI__IntersectRects
;;;88               WM_SetUserClipRect(&rClip);
00003e  a802              ADD      r0,sp,#8
000040  f7fffffe          BL       WM_SetUserClipRect
                  |L1.68|
;;;89             }
;;;90           #else
;;;91             Rect_Old = GUI_Context.ClipRect;
;;;92             GUI__IntersectRects(&rClip, pRect, &Rect_Old);
;;;93             LCD_SetClipRectEx(&rClip);
;;;94           #endif
;;;95         }
;;;96         pLCD_ApiOld = _SetRotation(pLCD_Api);                /* Set the new function pointer for rotating text */
000044  4630              MOV      r0,r6
000046  f7fffffe          BL       _SetRotation
00004a  4605              MOV      r5,r0
;;;97         pLCD_Api->pfRect2TextRect(&rText);                   /* Calculate the text rectangle */
00004c  6871              LDR      r1,[r6,#4]
00004e  4668              MOV      r0,sp
000050  4788              BLX      r1
;;;98         GUI__DispStringInRect(s, &rText, TextAlign, MaxLen); /* Display the string */
000052  463b              MOV      r3,r7
000054  4642              MOV      r2,r8
000056  4669              MOV      r1,sp
000058  4648              MOV      r0,r9
00005a  f7fffffe          BL       GUI__DispStringInRect
;;;99         /* Restore old clipping rectangle */
;;;100        #if (GUI_WINSUPPORT)
;;;101          WM_SetUserClipRect(pOldClipRect);
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       WM_SetUserClipRect
;;;102        #else
;;;103          LCD_SetClipRectEx(&Rect_Old);
;;;104        #endif
;;;105        _SetRotation(pLCD_ApiOld);
000064  4628              MOV      r0,r5
000066  f7fffffe          BL       _SetRotation
;;;106        GUI_UNLOCK();
;;;107      }
;;;108    }
00006a  e8bd87ff          POP      {r0-r10,pc}
                  |L1.110|
00006e  e7ff              B        |L1.112|
                  |L1.112|
000070  b004              ADD      sp,sp,#0x10           ;71
000072  e8bd47f0          POP      {r4-r10,lr}           ;71
000076  f7ffbffe          B.W      GUI_DispStringInRectMax
;;;109    
                          ENDP

00007a  0000              DCW      0x0000
                  |L1.124|
                          DCD      ||.data||

                          AREA ||i._SetRotation||, CODE, READONLY, ALIGN=2

                  _SetRotation PROC
;;;42     */
;;;43     static const GUI_ROTATION * _SetRotation(const GUI_ROTATION* pLCD_Api) {
000000  4a06              LDR      r2,|L2.28|
000002  b510              PUSH     {r4,lr}
;;;44       const GUI_ROTATION * pLCD_ApiOld;
;;;45       GUI_LOCK();
;;;46       pLCD_ApiOld = GUI_pLCD_APIList;
;;;47       if (pLCD_Api) {
;;;48         GUI_Context.pClipRect_HL = NULL;           /* Do not perform high level clipping in rotated mode */
000004  4b06              LDR      r3,|L2.32|
000006  6811              LDR      r1,[r2,#0]            ;43  ; GUI_pLCD_APIList
000008  b108              CBZ      r0,|L2.14|
00000a  2400              MOVS     r4,#0
00000c  e001              B        |L2.18|
                  |L2.14|
;;;49       } else {
;;;50         GUI_Context.pClipRect_HL = &GUI_Context.ClipRect;
00000e  4c04              LDR      r4,|L2.32|
000010  3408              ADDS     r4,r4,#8
                  |L2.18|
;;;51       }
;;;52       GUI_pLCD_APIList = pLCD_Api;
000012  615c              STR      r4,[r3,#0x14]  ; GUI_Context
;;;53       GUI_UNLOCK();
;;;54       return pLCD_ApiOld;
000014  6010              STR      r0,[r2,#0]  ; GUI_pLCD_APIList
000016  4608              MOV      r0,r1
;;;55     }
000018  bd10              POP      {r4,pc}
;;;56     
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      GUI_pLCD_APIList
                  |L2.32|
                          DCD      GUI_Context

                          AREA ||.data||, DATA, ALIGN=1

                  GUI_RectDispString
                          %        8
