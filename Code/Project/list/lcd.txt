; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\lcd.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\lcd.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\Core\LCD.c]
                          THUMB

                          AREA ||i.LCD_Color2Index||, CODE, READONLY, ALIGN=2

                  LCD_Color2Index PROC
;;;314    */
;;;315    int LCD_Color2Index(LCD_COLOR Color) {
000000  4901              LDR      r1,|L1.8|
;;;316      return LCDDEV_L0_Color2Index(Color);
000002  6cc9              LDR      r1,[r1,#0x4c]  ; GUI_Context
000004  6809              LDR      r1,[r1,#0]
000006  4708              BX       r1
;;;317    }
;;;318    
                          ENDP

                  |L1.8|
                          DCD      GUI_Context

                          AREA ||i.LCD_DrawBitmap||, CODE, READONLY, ALIGN=2

                  LCD_DrawBitmap PROC
;;;149    */
;;;150    void LCD_DrawBitmap(int x0, int y0, int xsize, int ysize, int xMul, int yMul,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;151                           int BitsPerPixel, int BytesPerLine,
;;;152                           const U8 GUI_UNI_PTR * pPixel, const LCD_PIXELINDEX* pTrans)
;;;153    {
000004  4605              MOV      r5,r0
000006  b08d              SUB      sp,sp,#0x34
;;;154      U8  Data = 0;
;;;155      int x1, y1;
;;;156      /* Handle rotation if necessary */
;;;157      #if GUI_SUPPORT_ROTATION
;;;158      if (GUI_pLCD_APIList) {
000008  4879              LDR      r0,|L2.496|
00000a  f8dd9060          LDR      r9,[sp,#0x60]
00000e  9c1a              LDR      r4,[sp,#0x68]
000010  6800              LDR      r0,[r0,#0]  ; GUI_pLCD_APIList
000012  461e              MOV      r6,r3                 ;153
000014  4617              MOV      r7,r2                 ;153
000016  f04f0800          MOV      r8,#0                 ;154
00001a  b188              CBZ      r0,|L2.64|
;;;159        GUI_pLCD_APIList->pfDrawBitmap(x0, y0, xsize, ysize, xMul, yMul, BitsPerPixel, BytesPerLine, pPixel, pTrans);
00001c  9a1b              LDR      r2,[sp,#0x6c]
00001e  9b19              LDR      r3,[sp,#0x64]
000020  e9cd4204          STRD     r4,r2,[sp,#0x10]
000024  e9cd9302          STRD     r9,r3,[sp,#8]
000028  e9dd2316          LDRD     r2,r3,[sp,#0x58]
00002c  e9cd2300          STRD     r2,r3,[sp,#0]
000030  6804              LDR      r4,[r0,#0]
000032  4633              MOV      r3,r6
000034  463a              MOV      r2,r7
000036  4628              MOV      r0,r5
000038  47a0              BLX      r4
                  |L2.58|
;;;160        return;
;;;161      }
;;;162      #endif
;;;163      /* Handle the optional Y-magnification */
;;;164      y1 = y0 + ysize - 1;
;;;165      x1 = x0 + xsize - 1;
;;;166    /*  Handle BITMAP without magnification */
;;;167      if ((xMul | yMul) == 1) {
;;;168        int Diff;
;;;169        /*  Clip y0 (top) */
;;;170        Diff = GUI_Context.ClipRect.y0 - y0;
;;;171        if (Diff > 0) {
;;;172          ysize -= Diff;
;;;173          if (ysize <= 0) {
;;;174    		    return;
;;;175          }
;;;176          y0     = GUI_Context.ClipRect.y0;
;;;177          #if GUI_SUPPORT_LARGE_BITMAPS                       /* Required only for 16 bit CPUs if some bitmaps are >64kByte */
;;;178            pPixel += (U32)     Diff * (U32)     BytesPerLine;
;;;179          #else
;;;180            pPixel += (unsigned)Diff * (unsigned)BytesPerLine;
;;;181          #endif
;;;182        }
;;;183        /*  Clip y1 (bottom) */
;;;184        Diff = y1 - GUI_Context.ClipRect.y1;
;;;185        if (Diff > 0) {
;;;186          ysize -= Diff;
;;;187          if (ysize <= 0) {
;;;188    		    return;
;;;189          }
;;;190        }
;;;191        /*        Clip right side    */
;;;192        Diff = x1 - GUI_Context.ClipRect.x1;
;;;193        if (Diff > 0) {
;;;194          xsize -= Diff;
;;;195        }
;;;196        /*        Clip left side ... (The difficult side ...)    */
;;;197        Diff = 0;
;;;198        if (x0 < GUI_Context.ClipRect.x0) {
;;;199          Diff = GUI_Context.ClipRect.x0 - x0;
;;;200    			xsize -= Diff;
;;;201    			switch (BitsPerPixel) {
;;;202    			case 1:
;;;203      			pPixel+= (Diff>>3); x0 += (Diff>>3)<<3; Diff &=7;
;;;204    				break;
;;;205    			case 2:
;;;206    	  		pPixel+= (Diff>>2); x0 += (Diff>>2)<<2; Diff &=3;
;;;207    				break;
;;;208    			case 4:
;;;209    				pPixel+= (Diff>>1); x0 += (Diff>>1)<<1; Diff &=1;
;;;210    				break;
;;;211    			case 8:
;;;212    				pPixel+= Diff;      x0 += Diff; Diff=0;
;;;213    				break;
;;;214    			case 16:
;;;215    				pPixel+= (Diff<<1); x0 += Diff; Diff=0;
;;;216    				break;
;;;217    			}
;;;218        }
;;;219        if (xsize <=0) {
;;;220    		  return;
;;;221        }
;;;222        LCDDEV_L0_DrawBitmap   (x0,y0, xsize, ysize, BitsPerPixel, BytesPerLine, pPixel, Diff, pTrans);
;;;223      } else {
;;;224        /**** Handle BITMAP with magnification ***/
;;;225        int x,y;
;;;226        int yi;
;;;227        int Shift = 8-BitsPerPixel;
;;;228        for (y=y0, yi=0; yi<ysize; yi++, y+= yMul, pPixel+=BytesPerLine) {
;;;229          int yMax = y+yMul-1;
;;;230          /* Draw if within clip area (Optimization ... "if" is not required !) */
;;;231          if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
;;;232            int BitsLeft =0;
;;;233            int xi;
;;;234            const U8 GUI_UNI_PTR * pDataLine = pPixel;
;;;235            for (x=x0, xi=0; xi<xsize; xi++, x+=xMul) {
;;;236              U8  Index;
;;;237              if (!BitsLeft) {
;;;238                Data = *pDataLine++;
;;;239                BitsLeft =8;
;;;240              }
;;;241              Index = Data>>Shift;
;;;242              Data    <<= BitsPerPixel;
;;;243              BitsLeft -= BitsPerPixel;
;;;244              if (Index || ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) ==0)) {
;;;245                LCD_PIXELINDEX  OldColor = LCD_COLORINDEX;
;;;246                if (pTrans) {
;;;247                  LCD_COLORINDEX = *(pTrans+Index);
;;;248                } else {
;;;249                  LCD_COLORINDEX = Index;
;;;250                }
;;;251                LCD_FillRect(x,y, x+xMul-1, yMax);
;;;252                LCD_COLORINDEX = OldColor;
;;;253              }
;;;254            }
;;;255          }
;;;256        }
;;;257      }
;;;258    }
00003a  b00d              ADD      sp,sp,#0x34
00003c  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.64|
000040  e9dd0216          LDRD     r0,r2,[sp,#0x58]      ;165
000044  19eb              ADDS     r3,r5,r7              ;165
000046  eb010c06          ADD      r12,r1,r6             ;164
00004a  4310              ORRS     r0,r0,r2              ;167
00004c  1e5b              SUBS     r3,r3,#1              ;167
00004e  f1ac0c01          SUB      r12,r12,#1            ;167
000052  2801              CMP      r0,#1                 ;167
000054  d006              BEQ      |L2.100|
000056  f1c90008          RSB      r0,r9,#8              ;227
00005a  9005              STR      r0,[sp,#0x14]         ;228
00005c  2000              MOVS     r0,#0                 ;228
00005e  9102              STR      r1,[sp,#8]            ;228
000060  9009              STR      r0,[sp,#0x24]         ;228
000062  e0c2              B        |L2.490|
                  |L2.100|
000064  4a63              LDR      r2,|L2.500|
000066  f9b2800a          LDRSH    r8,[r2,#0xa]          ;170  ; GUI_Context
00006a  eba80001          SUB      r0,r8,r1              ;170
00006e  2800              CMP      r0,#0                 ;171
000070  dd07              BLE      |L2.130|
000072  1a36              SUBS     r6,r6,r0              ;172
000074  2e00              CMP      r6,#0                 ;173
000076  dde0              BLE      |L2.58|
000078  4641              MOV      r1,r8                 ;173
00007a  f8dd8064          LDR      r8,[sp,#0x64]         ;180
00007e  fb004408          MLA      r4,r0,r8,r4           ;180
                  |L2.130|
000082  f9b2000e          LDRSH    r0,[r2,#0xe]          ;184  ; GUI_Context
000086  ebac0000          SUB      r0,r12,r0             ;184
00008a  2800              CMP      r0,#0                 ;185
00008c  dd02              BLE      |L2.148|
00008e  1a36              SUBS     r6,r6,r0              ;186
000090  2e00              CMP      r6,#0                 ;187
000092  ddd2              BLE      |L2.58|
                  |L2.148|
000094  f9b2000c          LDRSH    r0,[r2,#0xc]          ;192  ; GUI_Context
000098  1a18              SUBS     r0,r3,r0              ;192
00009a  2800              CMP      r0,#0                 ;193
00009c  dd00              BLE      |L2.160|
00009e  1a3f              SUBS     r7,r7,r0              ;194
                  |L2.160|
0000a0  f9b23008          LDRSH    r3,[r2,#8]            ;198  ; GUI_Context
0000a4  2000              MOVS     r0,#0                 ;197
0000a6  42ab              CMP      r3,r5                 ;198
0000a8  dd37              BLE      |L2.282|
0000aa  1b58              SUBS     r0,r3,r5              ;199
0000ac  1a3f              SUBS     r7,r7,r0              ;200
0000ae  46cc              MOV      r12,r9                ;201
0000b0  f1b90f04          CMP      r9,#4                 ;201
0000b4  d023              BEQ      |L2.254|
0000b6  dc06              BGT      |L2.198|
0000b8  f1bc0f01          CMP      r12,#1                ;201
0000bc  d00f              BEQ      |L2.222|
0000be  f1bc0f02          CMP      r12,#2                ;201
0000c2  d12a              BNE      |L2.282|
0000c4  e013              B        |L2.238|
                  |L2.198|
0000c6  4b4b              LDR      r3,|L2.500|
0000c8  f9b33008          LDRSH    r3,[r3,#8]            ;198
0000cc  1b5b              SUBS     r3,r3,r5              ;199
0000ce  442b              ADD      r3,r3,r5              ;212
0000d0  f1bc0f08          CMP      r12,#8                ;201
0000d4  d01b              BEQ      |L2.270|
0000d6  f1bc0f10          CMP      r12,#0x10             ;201
0000da  d11e              BNE      |L2.282|
0000dc  e019              B        |L2.274|
                  |L2.222|
0000de  f0200307          BIC      r3,r0,#7              ;203
0000e2  eb0404e0          ADD      r4,r4,r0,ASR #3       ;203
0000e6  441d              ADD      r5,r5,r3              ;203
0000e8  f0000007          AND      r0,r0,#7              ;203
0000ec  e015              B        |L2.282|
                  |L2.238|
0000ee  f0200303          BIC      r3,r0,#3              ;206
0000f2  eb0404a0          ADD      r4,r4,r0,ASR #2       ;206
0000f6  441d              ADD      r5,r5,r3              ;206
0000f8  f0000003          AND      r0,r0,#3              ;206
0000fc  e00d              B        |L2.282|
                  |L2.254|
0000fe  f0200301          BIC      r3,r0,#1              ;209
000102  eb040460          ADD      r4,r4,r0,ASR #1       ;209
000106  441d              ADD      r5,r5,r3              ;209
000108  f0000001          AND      r0,r0,#1              ;209
00010c  e005              B        |L2.282|
                  |L2.270|
00010e  4404              ADD      r4,r4,r0              ;212
000110  e001              B        |L2.278|
                  |L2.274|
000112  eb040440          ADD      r4,r4,r0,LSL #1       ;215
                  |L2.278|
000116  461d              MOV      r5,r3                 ;215
000118  2000              MOVS     r0,#0                 ;215
                  |L2.282|
00011a  2f00              CMP      r7,#0                 ;219
00011c  dd8d              BLE      |L2.58|
00011e  9b1b              LDR      r3,[sp,#0x6c]         ;222
000120  f8ddc064          LDR      r12,[sp,#0x64]        ;222
000124  9402              STR      r4,[sp,#8]            ;222
000126  e9cd0303          STRD     r0,r3,[sp,#0xc]       ;222
00012a  e9cd9c00          STRD     r9,r12,[sp,#0]        ;222
00012e  6cd0              LDR      r0,[r2,#0x4c]         ;222  ; GUI_Context
000130  4633              MOV      r3,r6                 ;222
000132  463a              MOV      r2,r7                 ;222
000134  68c4              LDR      r4,[r0,#0xc]          ;222
000136  4628              MOV      r0,r5                 ;222
000138  47a0              BLX      r4                    ;222
00013a  e77e              B        |L2.58|
                  |L2.316|
00013c  9902              LDR      r1,[sp,#8]            ;229
00013e  9817              LDR      r0,[sp,#0x5c]         ;229
000140  4408              ADD      r0,r0,r1              ;229
000142  900b              STR      r0,[sp,#0x2c]         ;229
000144  492b              LDR      r1,|L2.500|
000146  1e40              SUBS     r0,r0,#1              ;229
000148  9000              STR      r0,[sp,#0]            ;231
00014a  f9b1200a          LDRSH    r2,[r1,#0xa]          ;231  ; GUI_Context
00014e  4282              CMP      r2,r0                 ;231
000150  dc43              BGT      |L2.474|
000152  4608              MOV      r0,r1                 ;231
000154  f9b0100e          LDRSH    r1,[r0,#0xe]          ;231  ; GUI_Context
000158  9802              LDR      r0,[sp,#8]            ;231
00015a  4281              CMP      r1,r0                 ;231
00015c  db3d              BLT      |L2.474|
00015e  f04f0b00          MOV      r11,#0                ;232
000162  9503              STR      r5,[sp,#0xc]          ;235
000164  46da              MOV      r10,r11               ;235
000166  9408              STR      r4,[sp,#0x20]         ;235
000168  e035              B        |L2.470|
00016a  bf00              NOP                            ;237
                  |L2.364|
00016c  f1bb0f00          CMP      r11,#0                ;237
000170  d105              BNE      |L2.382|
000172  9808              LDR      r0,[sp,#0x20]         ;238
000174  f04f0b08          MOV      r11,#8                ;239
000178  f8108b01          LDRB     r8,[r0],#1            ;238
00017c  9008              STR      r0,[sp,#0x20]         ;239
                  |L2.382|
00017e  9905              LDR      r1,[sp,#0x14]         ;241
000180  ebab0b09          SUB      r11,r11,r9            ;243
000184  fa38f001          LSRS     r0,r8,r1              ;241
000188  fa08f109          LSL      r1,r8,r9              ;242
00018c  f00108ff          AND      r8,r1,#0xff           ;242
000190  d103              BNE      |L2.410|
000192  4918              LDR      r1,|L2.500|
000194  7c09              LDRB     r1,[r1,#0x10]         ;244  ; GUI_Context
000196  0789              LSLS     r1,r1,#30             ;244
000198  d417              BMI      |L2.458|
                  |L2.410|
00019a  4916              LDR      r1,|L2.500|
00019c  8849              LDRH     r1,[r1,#2]            ;245  ; GUI_Context
00019e  910a              STR      r1,[sp,#0x28]         ;246
0001a0  991b              LDR      r1,[sp,#0x6c]         ;246
0001a2  b121              CBZ      r1,|L2.430|
0001a4  f8311010          LDRH     r1,[r1,r0,LSL #1]     ;247
0001a8  4812              LDR      r0,|L2.500|
0001aa  8041              STRH     r1,[r0,#2]            ;247
0001ac  e001              B        |L2.434|
                  |L2.430|
0001ae  4911              LDR      r1,|L2.500|
0001b0  8048              STRH     r0,[r1,#2]            ;249
                  |L2.434|
0001b2  9903              LDR      r1,[sp,#0xc]          ;251
0001b4  9816              LDR      r0,[sp,#0x58]         ;251
0001b6  9b00              LDR      r3,[sp,#0]            ;251
0001b8  180a              ADDS     r2,r1,r0              ;251
0001ba  e9dd1002          LDRD     r1,r0,[sp,#8]         ;251
0001be  1e52              SUBS     r2,r2,#1              ;251
0001c0  f7fffffe          BL       LCD_FillRect
0001c4  480b              LDR      r0,|L2.500|
0001c6  990a              LDR      r1,[sp,#0x28]         ;252
0001c8  8041              STRH     r1,[r0,#2]            ;252
                  |L2.458|
0001ca  9903              LDR      r1,[sp,#0xc]          ;235
0001cc  9816              LDR      r0,[sp,#0x58]         ;235
0001ce  f10a0a01          ADD      r10,r10,#1            ;235
0001d2  4408              ADD      r0,r0,r1              ;235
0001d4  9003              STR      r0,[sp,#0xc]          ;235
                  |L2.470|
0001d6  45ba              CMP      r10,r7                ;235
0001d8  dbc8              BLT      |L2.364|
                  |L2.474|
0001da  9809              LDR      r0,[sp,#0x24]         ;228
0001dc  1c40              ADDS     r0,r0,#1              ;228
0001de  9009              STR      r0,[sp,#0x24]         ;228
0001e0  980b              LDR      r0,[sp,#0x2c]         ;228
0001e2  9002              STR      r0,[sp,#8]            ;228
0001e4  9819              LDR      r0,[sp,#0x64]         ;228
0001e6  4404              ADD      r4,r4,r0              ;228
0001e8  9809              LDR      r0,[sp,#0x24]         ;228
                  |L2.490|
0001ea  42b0              CMP      r0,r6                 ;228
0001ec  dba6              BLT      |L2.316|
0001ee  e724              B        |L2.58|
;;;259    
                          ENDP

                  |L2.496|
                          DCD      GUI_pLCD_APIList
                  |L2.500|
                          DCD      GUI_Context

                          AREA ||i.LCD_DrawHLine||, CODE, READONLY, ALIGN=2

                  LCD_DrawHLine PROC
;;;119    */
;;;120    void LCD_DrawHLine(int x0, int y,  int x1) {
000000  4b0d              LDR      r3,|L3.56|
000002  b430              PUSH     {r4,r5}
;;;121      /* Perform clipping and check if there is something to do */
;;;122      RETURN_IF_Y_OUT();
000004  f9b3400a          LDRSH    r4,[r3,#0xa]  ; GUI_Context
000008  428c              CMP      r4,r1
00000a  dc13              BGT      |L3.52|
00000c  f9b3400e          LDRSH    r4,[r3,#0xe]  ; GUI_Context
000010  428c              CMP      r4,r1
000012  db0f              BLT      |L3.52|
;;;123      CLIP_X();
000014  f9b34008          LDRSH    r4,[r3,#8]  ; GUI_Context
000018  4284              CMP      r4,r0
00001a  dd00              BLE      |L3.30|
00001c  4620              MOV      r0,r4
                  |L3.30|
00001e  f9b3400c          LDRSH    r4,[r3,#0xc]  ; GUI_Context
000022  4294              CMP      r4,r2
000024  da00              BGE      |L3.40|
000026  4622              MOV      r2,r4
                  |L3.40|
;;;124      if (x1<x0)
000028  4282              CMP      r2,r0
00002a  db03              BLT      |L3.52|
;;;125        return;
;;;126      /* Call driver to draw */
;;;127      LCDDEV_L0_DrawHLine(x0, y, x1);
00002c  6cdb              LDR      r3,[r3,#0x4c]  ; GUI_Context
00002e  691b              LDR      r3,[r3,#0x10]
000030  bc30              POP      {r4,r5}
000032  4718              BX       r3
                  |L3.52|
;;;128    }
000034  bc30              POP      {r4,r5}
000036  4770              BX       lr
;;;129    
                          ENDP

                  |L3.56|
                          DCD      GUI_Context

                          AREA ||i.LCD_DrawPixel||, CODE, READONLY, ALIGN=2

                  LCD_DrawPixel PROC
;;;105    */
;;;106    void LCD_DrawPixel(int x, int y) {
000000  4a0f              LDR      r2,|L4.64|
000002  b430              PUSH     {r4,r5}
;;;107      RETURN_IF_Y_OUT();
000004  f9b2300a          LDRSH    r3,[r2,#0xa]  ; GUI_Context
000008  428b              CMP      r3,r1
00000a  dc17              BGT      |L4.60|
00000c  f9b2300e          LDRSH    r3,[r2,#0xe]  ; GUI_Context
000010  428b              CMP      r3,r1
000012  db13              BLT      |L4.60|
;;;108      RETURN_IF_X_OUT();
000014  f9b23008          LDRSH    r3,[r2,#8]  ; GUI_Context
000018  4283              CMP      r3,r0
00001a  dc0f              BGT      |L4.60|
00001c  f9b2300c          LDRSH    r3,[r2,#0xc]  ; GUI_Context
000020  4283              CMP      r3,r0
000022  db0b              BLT      |L4.60|
;;;109      if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
000024  7c13              LDRB     r3,[r2,#0x10]  ; GUI_Context
000026  07dc              LSLS     r4,r3,#31
000028  4613              MOV      r3,r2                 ;107
;;;110        LCDDEV_L0_XorPixel(x, y);
00002a  6cdb              LDR      r3,[r3,#0x4c]
00002c  d002              BEQ      |L4.52|
00002e  6a9a              LDR      r2,[r3,#0x28]
000030  bc30              POP      {r4,r5}
000032  4710              BX       r2
                  |L4.52|
;;;111      } else {
;;;112        LCDDEV_L0_SetPixelIndex(x, y, LCD_COLORINDEX);
000034  8852              LDRH     r2,[r2,#2]  ; GUI_Context
000036  6a5b              LDR      r3,[r3,#0x24]
000038  bc30              POP      {r4,r5}
00003a  4718              BX       r3
                  |L4.60|
;;;113      }
;;;114    }
00003c  bc30              POP      {r4,r5}
00003e  4770              BX       lr
;;;115    
                          ENDP

                  |L4.64|
                          DCD      GUI_Context

                          AREA ||i.LCD_FillRect||, CODE, READONLY, ALIGN=2

                  LCD_FillRect PROC
;;;133    */
;;;134    void LCD_FillRect(int x0, int y0, int x1, int y1) {
000000  b430              PUSH     {r4,r5}
;;;135      /* Perform clipping and check if there is something to do */
;;;136      CLIP_X();
000002  4c10              LDR      r4,|L5.68|
000004  f9b45008          LDRSH    r5,[r4,#8]  ; GUI_Context
000008  4285              CMP      r5,r0
00000a  dd00              BLE      |L5.14|
00000c  4628              MOV      r0,r5                 ;134
                  |L5.14|
00000e  f9b4500c          LDRSH    r5,[r4,#0xc]  ; GUI_Context
000012  4295              CMP      r5,r2
000014  da00              BGE      |L5.24|
000016  462a              MOV      r2,r5
                  |L5.24|
;;;137      if (x1<x0)
000018  4282              CMP      r2,r0
00001a  db10              BLT      |L5.62|
;;;138        return;
;;;139      CLIP_Y();
00001c  f9b4500a          LDRSH    r5,[r4,#0xa]  ; GUI_Context
000020  428d              CMP      r5,r1
000022  dd00              BLE      |L5.38|
000024  4629              MOV      r1,r5
                  |L5.38|
000026  f9b4500e          LDRSH    r5,[r4,#0xe]  ; GUI_Context
00002a  429d              CMP      r5,r3
00002c  da00              BGE      |L5.48|
00002e  462b              MOV      r3,r5
                  |L5.48|
;;;140      if (y1<y0)
000030  428b              CMP      r3,r1
000032  db04              BLT      |L5.62|
;;;141        return;
;;;142      /* Call driver to draw */
;;;143      LCDDEV_L0_FillRect(x0,y0,x1,y1);
000034  6ce4              LDR      r4,[r4,#0x4c]  ; GUI_Context
000036  69a4              LDR      r4,[r4,#0x18]
000038  46a4              MOV      r12,r4
00003a  bc30              POP      {r4,r5}
00003c  4760              BX       r12
                  |L5.62|
;;;144    }
00003e  bc30              POP      {r4,r5}
000040  4770              BX       lr
;;;145    
                          ENDP

000042  0000              DCW      0x0000
                  |L5.68|
                          DCD      GUI_Context

                          AREA ||i.LCD_Index2Color||, CODE, READONLY, ALIGN=2

                  LCD_Index2Color PROC
;;;322    */
;;;323    LCD_COLOR LCD_Index2Color(int Index) {
000000  4901              LDR      r1,|L6.8|
;;;324      return LCDDEV_L0_Index2Color(Index);
000002  6cc9              LDR      r1,[r1,#0x4c]  ; GUI_Context
000004  6849              LDR      r1,[r1,#4]
000006  4708              BX       r1
;;;325    }
;;;326    
                          ENDP

                  |L6.8|
                          DCD      GUI_Context

                          AREA ||i.LCD_Init||, CODE, READONLY, ALIGN=1

                  LCD_Init PROC
;;;271    */
;;;272    int LCD_Init(void) {
000000  b510              PUSH     {r4,lr}
;;;273      int r = 0;
;;;274      GUI_DEBUG_LOG("\nLCD_Init...");
;;;275      LCD_SetClipRectMax();
000002  f7fffffe          BL       LCD_SetClipRectMax
;;;276      r |= LCD_L0_Init();
000006  f7fffffe          BL       LCD_L0_Init
00000a  4604              MOV      r4,r0
;;;277      #if GUI_NUM_LAYERS > 1
;;;278        r |= LCD_L0_1_Init();
;;;279      #endif
;;;280      #if GUI_NUM_LAYERS > 2
;;;281        r |= LCD_L0_2_Init();
;;;282      #endif
;;;283      #if GUI_NUM_LAYERS > 3
;;;284        r |= LCD_L0_3_Init();
;;;285      #endif
;;;286      #if GUI_NUM_LAYERS > 4
;;;287        r |= LCD_L0_4_Init();
;;;288      #endif
;;;289      LCD_InitLUT();
00000c  f7fffffe          BL       LCD_InitLUT
;;;290      {
;;;291      #if GUI_NUM_LAYERS > 1
;;;292        int i;
;;;293        for (i = GUI_NUM_LAYERS - 1; i >= 0; i--) {
;;;294          GUI_SelectLayer(i);
;;;295      #else
;;;296        {
;;;297      #endif
;;;298          #if (GUI_DEFAULT_BKCOLOR != GUI_INVALID_COLOR)
;;;299            /* Clear video memory */
;;;300            LCD_SetDrawMode(GUI_DRAWMODE_REV);
000010  2004              MOVS     r0,#4
000012  f7fffffe          BL       LCD_SetDrawMode
;;;301            LCD_FillRect(0,0, GUI_XMAX, GUI_YMAX);
000016  f64072ff          MOV      r2,#0xfff
00001a  2100              MOVS     r1,#0
00001c  4613              MOV      r3,r2
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       LCD_FillRect
;;;302            LCD_SetDrawMode(0);
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       LCD_SetDrawMode
;;;303          #endif
;;;304        }
;;;305      }
;;;306      /* Switch LCD on */
;;;307      LCD_On();
00002a  f7fffffe          BL       LCD_L0_On
;;;308      return r;
00002e  4620              MOV      r0,r4
;;;309    }
000030  bd10              POP      {r4,pc}
;;;310    
                          ENDP


                          AREA ||i.LCD_SetBkColor||, CODE, READONLY, ALIGN=2

                  LCD_SetBkColor PROC
;;;330    */
;;;331    void LCD_SetBkColor(GUI_COLOR color) {
000000  4906              LDR      r1,|L8.28|
000002  b510              PUSH     {r4,lr}
;;;332      if (GUI_Context.BkColor != color) {
000004  6b8a              LDR      r2,[r1,#0x38]  ; GUI_Context
000006  4282              CMP      r2,r0
000008  d006              BEQ      |L8.24|
;;;333        GUI_Context.BkColor = color;
;;;334        LCD_SetBkColorIndex(LCD_Color2Index(color));
00000a  6388              STR      r0,[r1,#0x38]  ; GUI_Context
00000c  f7fffffe          BL       LCD_Color2Index
000010  e8bd4010          POP      {r4,lr}
000014  f7ffbffe          B.W      LCD_SetBkColorIndex
                  |L8.24|
;;;335      }
;;;336    }
000018  bd10              POP      {r4,pc}
;;;337    
                          ENDP

00001a  0000              DCW      0x0000
                  |L8.28|
                          DCD      GUI_Context

                          AREA ||i.LCD_SetBkColorIndex||, CODE, READONLY, ALIGN=2

                  LCD_SetBkColorIndex PROC
;;;82     */
;;;83     void LCD_SetBkColorIndex(int Index) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;84       LCD_ACOLORINDEX[_GetColorIndex(0)] = Index;
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       _GetColorIndex
00000a  4902              LDR      r1,|L9.20|
00000c  f8214010          STRH     r4,[r1,r0,LSL #1]
;;;85     }
000010  bd10              POP      {r4,pc}
;;;86     
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      GUI_Context

                          AREA ||i.LCD_SetClipRectMax||, CODE, READONLY, ALIGN=2

                  LCD_SetClipRectMax PROC
;;;263    */
;;;264    void LCD_SetClipRectMax(void) {
000000  4802              LDR      r0,|L10.12|
;;;265      LCDDEV_L0_GetRect(&GUI_Context.ClipRect);
000002  6cc0              LDR      r0,[r0,#0x4c]  ; GUI_Context
000004  6a01              LDR      r1,[r0,#0x20]
000006  4801              LDR      r0,|L10.12|
000008  3008              ADDS     r0,r0,#8
00000a  4708              BX       r1
;;;266    }
;;;267    
                          ENDP

                  |L10.12|
                          DCD      GUI_Context

                          AREA ||i.LCD_SetColor||, CODE, READONLY, ALIGN=2

                  LCD_SetColor PROC
;;;341    */
;;;342    void LCD_SetColor(GUI_COLOR color) {
000000  4906              LDR      r1,|L11.28|
000002  b510              PUSH     {r4,lr}
;;;343      if (GUI_Context.Color != color) {
000004  6b4a              LDR      r2,[r1,#0x34]  ; GUI_Context
000006  4282              CMP      r2,r0
000008  d006              BEQ      |L11.24|
;;;344        GUI_Context.Color = color;
;;;345        LCD_SetColorIndex(LCD_Color2Index(color));
00000a  6348              STR      r0,[r1,#0x34]  ; GUI_Context
00000c  f7fffffe          BL       LCD_Color2Index
000010  e8bd4010          POP      {r4,lr}
000014  f7ffbffe          B.W      LCD_SetColorIndex
                  |L11.24|
;;;346      }
;;;347    }
000018  bd10              POP      {r4,pc}
;;;348    
                          ENDP

00001a  0000              DCW      0x0000
                  |L11.28|
                          DCD      GUI_Context

                          AREA ||i.LCD_SetColorIndex||, CODE, READONLY, ALIGN=2

                  LCD_SetColorIndex PROC
;;;74     */
;;;75     void LCD_SetColorIndex(int Index) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;76       LCD_ACOLORINDEX[_GetColorIndex(1)] = Index;
000004  2001              MOVS     r0,#1
000006  f7fffffe          BL       _GetColorIndex
00000a  4902              LDR      r1,|L12.20|
00000c  f8214010          STRH     r4,[r1,r0,LSL #1]
;;;77     }
000010  bd10              POP      {r4,pc}
;;;78     
                          ENDP

000012  0000              DCW      0x0000
                  |L12.20|
                          DCD      GUI_Context

                          AREA ||i.LCD_SetDrawMode||, CODE, READONLY, ALIGN=2

                  LCD_SetDrawMode PROC
;;;90     */
;;;91     LCD_DRAWMODE LCD_SetDrawMode(LCD_DRAWMODE dm) {
000000  4906              LDR      r1,|L13.28|
000002  b510              PUSH     {r4,lr}
;;;92       LCD_DRAWMODE OldDM = GUI_Context.DrawMode;
000004  7c0a              LDRB     r2,[r1,#0x10]  ; GUI_Context
;;;93       if ((GUI_Context.DrawMode^dm) & LCD_DRAWMODE_REV) {
000006  ea820300          EOR      r3,r2,r0
00000a  075b              LSLS     r3,r3,#29
00000c  d503              BPL      |L13.22|
;;;94         LCD_PIXELINDEX temp = LCD_BKCOLORINDEX;
00000e  880b              LDRH     r3,[r1,#0]  ; GUI_Context
;;;95         LCD_BKCOLORINDEX    = LCD_COLORINDEX;
000010  884c              LDRH     r4,[r1,#2]  ; GUI_Context
000012  800c              STRH     r4,[r1,#0]
;;;96         LCD_COLORINDEX = temp;
000014  804b              STRH     r3,[r1,#2]
                  |L13.22|
;;;97       }
;;;98       GUI_Context.DrawMode = dm;
000016  7408              STRB     r0,[r1,#0x10]
;;;99       return OldDM;
000018  4610              MOV      r0,r2
;;;100    }
00001a  bd10              POP      {r4,pc}
;;;101    
                          ENDP

                  |L13.28|
                          DCD      GUI_Context

                          AREA ||i._GetColorIndex||, CODE, READONLY, ALIGN=2

                  _GetColorIndex PROC
;;;60     */
;;;61     static int _GetColorIndex(int i)  /* i is 0 or 1 */ {
000000  4902              LDR      r1,|L14.12|
;;;62       return  (GUI_Context.DrawMode & LCD_DRAWMODE_REV) ? i-1 : i;
000002  7c09              LDRB     r1,[r1,#0x10]  ; GUI_Context
000004  0749              LSLS     r1,r1,#29
000006  d500              BPL      |L14.10|
000008  1e40              SUBS     r0,r0,#1              ;61
                  |L14.10|
;;;63     }
00000a  4770              BX       lr
;;;64     
                          ENDP

                  |L14.12|
                          DCD      GUI_Context
