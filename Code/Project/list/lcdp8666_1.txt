; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\lcdp8666_1.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\lcdp8666_1.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\ConvertColor\LCDP8666_1.c]
                          THUMB

                          AREA ||i.LCD_Color2Index_8666_1||, CODE, READONLY, ALIGN=1

                  LCD_Color2Index_8666_1 PROC
;;;31     */
;;;32     unsigned LCD_Color2Index_8666_1(LCD_COLOR Color) {
000000  b2c1              UXTB     r1,r0
;;;33       int r, g, b, Index;
;;;34       r = Color & 255;
;;;35       g = (Color >> 8) & 255;
000002  f3c02207          UBFX     r2,r0,#8,#8
;;;36       b = Color >> 16;
000006  0c00              LSRS     r0,r0,#16
;;;37     /* Check if image is a gray scale ... */
;;;38     	if ((r == g) && (g == b)) {
000008  4291              CMP      r1,r2
00000a  d107              BNE      |L1.28|
00000c  4282              CMP      r2,r0
00000e  d105              BNE      |L1.28|
;;;39         return 120 + (r + 8) / 17;  /* Convert into colors from 120 - 135 */
000010  2011              MOVS     r0,#0x11
000012  3108              ADDS     r1,r1,#8
000014  fb91f0f0          SDIV     r0,r1,r0
000018  3078              ADDS     r0,r0,#0x78
;;;40     	}
;;;41     /* Convert into the 6*6*6 colors ... */
;;;42       r = (r * 5 + 127) / 255;
;;;43       g = (g * 5 + 127) / 255;
;;;44       b = (b * 5 + 127) / 255;
;;;45       Index = r + 6 * g + 36 * b;
;;;46       return (Index < 108) ? Index + 12 : Index + 28;
;;;47     }
00001a  4770              BX       lr
                  |L1.28|
00001c  eb010381          ADD      r3,r1,r1,LSL #2       ;42
000020  21ff              MOVS     r1,#0xff              ;42
000022  eb000080          ADD      r0,r0,r0,LSL #2       ;44
000026  eb020282          ADD      r2,r2,r2,LSL #2       ;43
00002a  307f              ADDS     r0,r0,#0x7f           ;44
00002c  337f              ADDS     r3,r3,#0x7f           ;42
00002e  327f              ADDS     r2,r2,#0x7f           ;43
000030  fb90f0f1          SDIV     r0,r0,r1              ;44
000034  fb93f3f1          SDIV     r3,r3,r1              ;42
000038  fb92f2f1          SDIV     r2,r2,r1              ;43
00003c  eb020142          ADD      r1,r2,r2,LSL #1       ;45
000040  eb030141          ADD      r1,r3,r1,LSL #1       ;45
000044  eb0000c0          ADD      r0,r0,r0,LSL #3       ;45
000048  eb010080          ADD      r0,r1,r0,LSL #2       ;45
00004c  286c              CMP      r0,#0x6c              ;46
00004e  da01              BGE      |L1.84|
000050  300c              ADDS     r0,r0,#0xc            ;46
000052  4770              BX       lr
                  |L1.84|
000054  301c              ADDS     r0,r0,#0x1c
000056  4770              BX       lr
;;;48     
                          ENDP


                          AREA ||i.LCD_GetIndexMask_8666_1||, CODE, READONLY, ALIGN=1

                  LCD_GetIndexMask_8666_1 PROC
;;;77     */
;;;78     unsigned LCD_GetIndexMask_8666_1(void) {
000000  20ff              MOVS     r0,#0xff
;;;79       return 0xff;
;;;80     }
000002  4770              BX       lr
;;;81     
                          ENDP


                          AREA ||i.LCD_Index2Color_8666_1||, CODE, READONLY, ALIGN=1

                  LCD_Index2Color_8666_1 PROC
;;;52     */
;;;53     LCD_COLOR LCD_Index2Color_8666_1(int Index) {
000000  b510              PUSH     {r4,lr}
;;;54       unsigned int r,g;
;;;55       U32 b;
;;;56       /* 16 Gray scale range ? */
;;;57       if ((Index >= 120) && (Index < 136)) {
000002  f1a00178          SUB      r1,r0,#0x78
000006  2910              CMP      r1,#0x10
000008  d206              BCS      |L3.24|
;;;58         return (U32)0x111111 * (U32)(Index - 120);
00000a  eb011001          ADD      r0,r1,r1,LSL #4
00000e  eb002001          ADD      r0,r0,r1,LSL #8
000012  eb003000          ADD      r0,r0,r0,LSL #12
;;;59     	}
;;;60       if ((Index < 12) || (Index > 243)) {
;;;61         return 0;  /* Black for illegal indices */
;;;62       }
;;;63       if (Index >= 120) {
;;;64         Index -= 28;
;;;65       } else {
;;;66         Index -= 12;
;;;67       }
;;;68       r = (Index % 6) * (255 / 5);
;;;69       g = ((Index / 6) % 6) * (255 / 5);
;;;70       b = (Index / 36) * (255 / 5);
;;;71       return r + (g << 8) + ((U32)b << 16);
;;;72     }
000016  bd10              POP      {r4,pc}
                  |L3.24|
000018  f1a0010c          SUB      r1,r0,#0xc            ;60
00001c  29e8              CMP      r1,#0xe8              ;60
00001e  d301              BCC      |L3.36|
000020  2000              MOVS     r0,#0                 ;61
000022  bd10              POP      {r4,pc}
                  |L3.36|
000024  2878              CMP      r0,#0x78              ;63
000026  db01              BLT      |L3.44|
000028  381c              SUBS     r0,r0,#0x1c           ;63
00002a  e000              B        |L3.46|
                  |L3.44|
00002c  4608              MOV      r0,r1                 ;64
                  |L3.46|
00002e  2106              MOVS     r1,#6                 ;68
000030  fb90f3f1          SDIV     r3,r0,r1              ;69
000034  fb90f2f1          SDIV     r2,r0,r1              ;68
000038  fb93f4f1          SDIV     r4,r3,r1              ;69
00003c  fb010212          MLS      r2,r1,r2,r0           ;68
000040  fb013114          MLS      r1,r1,r4,r3           ;69
000044  2324              MOVS     r3,#0x24              ;70
000046  fb90f0f3          SDIV     r0,r0,r3              ;70
00004a  eb021202          ADD      r2,r2,r2,LSL #4       ;68
00004e  eb011101          ADD      r1,r1,r1,LSL #4       ;69
000052  eb020242          ADD      r2,r2,r2,LSL #1       ;68
000056  eb010141          ADD      r1,r1,r1,LSL #1       ;69
00005a  eb001000          ADD      r0,r0,r0,LSL #4       ;70
00005e  eb000040          ADD      r0,r0,r0,LSL #1       ;70
000062  eb022101          ADD      r1,r2,r1,LSL #8       ;71
000066  eb014000          ADD      r0,r1,r0,LSL #16      ;71
00006a  bd10              POP      {r4,pc}
;;;73     
                          ENDP

