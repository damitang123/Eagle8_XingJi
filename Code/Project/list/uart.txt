; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\uart.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\uart.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\Board_Support_Package\uart.c]
                          THUMB

                          AREA ||i.Debug_Uart_Init||, CODE, READONLY, ALIGN=1

                  Debug_Uart_Init PROC
;;;8      
;;;9      void Debug_Uart_Init(void)
000000  4770              BX       lr
;;;10     {
;;;11     
;;;12     }
;;;13     
                          ENDP


                          AREA ||i.Setup_USART1||, CODE, READONLY, ALIGN=2

                  Setup_USART1 PROC
;;;13     
;;;14     void Setup_USART1(void)
000000  b530              PUSH     {r4,r5,lr}
;;;15     {
000002  b085              SUB      sp,sp,#0x14
;;;16     	GPIO_InitTypeDef GPIO_InitStructure;
;;;17     	USART_InitTypeDef USART_InitStructure;
;;;18     	
;;;19     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1|RCC_APB2Periph_GPIOA|RCC_APB2Periph_AFIO, ENABLE);
000004  2101              MOVS     r1,#1
000006  f2440005          MOV      r0,#0x4005
00000a  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;20     
;;;21     	/* Configure USARTx_Tx as alternate function push-pull */
;;;22     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
00000e  f44f7000          MOV      r0,#0x200
000012  f8ad0010          STRH     r0,[sp,#0x10]
;;;23     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000016  2003              MOVS     r0,#3
000018  f88d0012          STRB     r0,[sp,#0x12]
;;;24     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00001c  2018              MOVS     r0,#0x18
;;;25     	GPIO_Init(GPIOA, &GPIO_InitStructure);
00001e  4c21              LDR      r4,|L2.164|
000020  f88d0013          STRB     r0,[sp,#0x13]         ;24
000024  a904              ADD      r1,sp,#0x10
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       GPIO_Init
;;;26     
;;;27     	/* Configure USARTx_Rx as input floating */
;;;28     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
00002c  1520              ASRS     r0,r4,#20
00002e  f8ad0010          STRH     r0,[sp,#0x10]
;;;29     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000032  2004              MOVS     r0,#4
000034  f88d0013          STRB     r0,[sp,#0x13]
;;;30     	GPIO_Init(GPIOA, &GPIO_InitStructure);
000038  a904              ADD      r1,sp,#0x10
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       GPIO_Init
;;;31     
;;;32     	USART_InitStructure.USART_BaudRate = 230400;
000040  f44f3061          MOV      r0,#0x38400
;;;33     	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000044  9000              STR      r0,[sp,#0]
000046  2000              MOVS     r0,#0
000048  f8ad0004          STRH     r0,[sp,#4]
;;;34     	USART_InitStructure.USART_StopBits = USART_StopBits_2;
00004c  1461              ASRS     r1,r4,#17
;;;35     	USART_InitStructure.USART_Parity = USART_Parity_No ;
00004e  f8ad0008          STRH     r0,[sp,#8]
;;;36     	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000052  f8ad000c          STRH     r0,[sp,#0xc]
;;;37     	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000056  200c              MOVS     r0,#0xc
;;;38     
;;;39     	/* Configure the USARTx */ 
;;;40     	USART_Init(USART1, &USART_InitStructure);
000058  4c13              LDR      r4,|L2.168|
00005a  f8ad1006          STRH     r1,[sp,#6]            ;34
00005e  f8ad000a          STRH     r0,[sp,#0xa]          ;37
000062  4669              MOV      r1,sp
000064  4620              MOV      r0,r4
000066  f7fffffe          BL       USART_Init
;;;41     
;;;42     	/* Enable the USARTx */
;;;43     	USART_Cmd(USART1, ENABLE);
00006a  2101              MOVS     r1,#1
00006c  4620              MOV      r0,r4
00006e  f7fffffe          BL       USART_Cmd
;;;44     
;;;45     	//串口接收中断开启
;;;46     	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); 
000072  f2405525          MOV      r5,#0x525
000076  2201              MOVS     r2,#1
000078  4629              MOV      r1,r5
00007a  4620              MOV      r0,r4
00007c  f7fffffe          BL       USART_ITConfig
;;;47     	USART_ClearITPendingBit(USART1, USART_IT_RXNE); 
000080  4629              MOV      r1,r5
000082  4620              MOV      r0,r4
000084  f7fffffe          BL       USART_ClearITPendingBit
;;;48     
;;;49     	USART_ClearFlag(USART1, USART_FLAG_TC);
000088  2140              MOVS     r1,#0x40
00008a  4620              MOV      r0,r4
00008c  f7fffffe          BL       USART_ClearFlag
;;;50     
;;;51     	USART_GetFlagStatus(USART1, USART_FLAG_TC);
000090  2140              MOVS     r1,#0x40
000092  4620              MOV      r0,r4
000094  f7fffffe          BL       USART_GetFlagStatus
;;;52     	
;;;53     	g_nCurrentPrintfUART= eUSE_UART1_PRINTF;
000098  4904              LDR      r1,|L2.172|
00009a  2001              MOVS     r0,#1
00009c  7008              STRB     r0,[r1,#0]
;;;54     }
00009e  b005              ADD      sp,sp,#0x14
0000a0  bd30              POP      {r4,r5,pc}
;;;55     
                          ENDP

0000a2  0000              DCW      0x0000
                  |L2.164|
                          DCD      0x40010800
                  |L2.168|
                          DCD      0x40013800
                  |L2.172|
                          DCD      ||.data||

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;90     
;;;91     void USART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;92     {
;;;93     	if(USART_GetITStatus(USART1,USART_IT_RXNE) == SET) 
000002  4c08              LDR      r4,|L3.36|
000004  f2405125          MOV      r1,#0x525
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USART_GetITStatus
00000e  2801              CMP      r0,#1
000010  d107              BNE      |L3.34|
;;;94     	{   	
;;;95     		Receive_Data_From_UART1(USART_ReceiveData(USART1));
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       USART_ReceiveData
000018  e8bd4010          POP      {r4,lr}
00001c  b2c0              UXTB     r0,r0
00001e  f7ffbffe          B.W      Receive_Data_From_UART1
                  |L3.34|
;;;96     	}
;;;97     }
000022  bd10              POP      {r4,pc}
;;;98     
                          ENDP

                  |L3.36|
                          DCD      0x40013800

                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;57     /*TRACE_PRINTF 重映射函数*/
;;;58     int fputc(int ch, FILE *f)
000000  b570              PUSH     {r4-r6,lr}
;;;59     {
000002  4605              MOV      r5,r0
;;;60     	switch(g_nCurrentPrintfUART)
000004  4821              LDR      r0,|L4.140|
;;;61     	{
;;;62     		case eUSE_UART1_PRINTF:
;;;63     			USART1->DR = (ch & 0xFF);
000006  b2e9              UXTB     r1,r5
000008  7802              LDRB     r2,[r0,#0]            ;60  ; g_nCurrentPrintfUART
00000a  4821              LDR      r0,|L4.144|
;;;64     			while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);
00000c  1f04              SUBS     r4,r0,#4
00000e  2a06              CMP      r2,#6                 ;60
000010  d233              BCS      |L4.122|
000012  e8dff002          TBB      [pc,r2]               ;60
000016  3203              DCB      0x32,0x03
000018  0b151f29          DCB      0x0b,0x15,0x1f,0x29
00001c  8001              STRH     r1,[r0,#0]            ;63
                  |L4.30|
00001e  2140              MOVS     r1,#0x40
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       USART_GetFlagStatus
000026  2800              CMP      r0,#0
000028  d0f9              BEQ      |L4.30|
00002a  e02d              B        |L4.136|
;;;65     			break;
;;;66     		case eUSE_UART2_PRINTF:
;;;67     			USART2->DR =  (ch & 0xFF);
00002c  4819              LDR      r0,|L4.148|
00002e  8001              STRH     r1,[r0,#0]
;;;68     			while(USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
000030  1f04              SUBS     r4,r0,#4
                  |L4.50|
000032  2140              MOVS     r1,#0x40
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       USART_GetFlagStatus
00003a  2800              CMP      r0,#0
00003c  d0f9              BEQ      |L4.50|
00003e  e023              B        |L4.136|
;;;69     			break;
;;;70     		case eUSE_UART3_PRINTF:
;;;71     			USART3->DR =  (ch & 0xFF);
000040  4815              LDR      r0,|L4.152|
000042  8001              STRH     r1,[r0,#0]
;;;72     			while(USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET);
000044  1f04              SUBS     r4,r0,#4
                  |L4.70|
000046  2140              MOVS     r1,#0x40
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       USART_GetFlagStatus
00004e  2800              CMP      r0,#0
000050  d0f9              BEQ      |L4.70|
000052  e019              B        |L4.136|
;;;73     			break;
;;;74     		case eUSE_UART4_PRINTF:
;;;75     			UART4->DR =  (ch & 0xFF);
000054  4811              LDR      r0,|L4.156|
000056  8001              STRH     r1,[r0,#0]
;;;76     			while(USART_GetFlagStatus(UART4, USART_FLAG_TC) == RESET);
000058  1f04              SUBS     r4,r0,#4
                  |L4.90|
00005a  2140              MOVS     r1,#0x40
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       USART_GetFlagStatus
000062  2800              CMP      r0,#0
000064  d0f9              BEQ      |L4.90|
000066  e00f              B        |L4.136|
;;;77     			break;
;;;78     		case eUSE_UART5_PRINTF:
;;;79     			UART5->DR =  (ch & 0xFF);
000068  4c0d              LDR      r4,|L4.160|
00006a  80a1              STRH     r1,[r4,#4]
                  |L4.108|
;;;80     			while(USART_GetFlagStatus(UART5, USART_FLAG_TC) == RESET);
00006c  2140              MOVS     r1,#0x40
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       USART_GetFlagStatus
000074  2800              CMP      r0,#0
000076  d0f9              BEQ      |L4.108|
000078  e006              B        |L4.136|
                  |L4.122|
;;;81     			break;
;;;82     		default:
;;;83     			USART1->DR =  (ch & 0xFF);
00007a  8001              STRH     r1,[r0,#0]
                  |L4.124|
;;;84     			while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);
00007c  2140              MOVS     r1,#0x40
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       USART_GetFlagStatus
000084  2800              CMP      r0,#0
000086  d0f9              BEQ      |L4.124|
                  |L4.136|
;;;85     			break;
;;;86     	}
;;;87     	return ch;
000088  4628              MOV      r0,r5
;;;88     }
00008a  bd70              POP      {r4-r6,pc}
;;;89     
                          ENDP

                  |L4.140|
                          DCD      ||.data||
                  |L4.144|
                          DCD      0x40013804
                  |L4.148|
                          DCD      0x40004404
                  |L4.152|
                          DCD      0x40004804
                  |L4.156|
                          DCD      0x40004c04
                  |L4.160|
                          DCD      0x40005000

                          AREA ||.data||, DATA, ALIGN=0

                  g_nCurrentPrintfUART
000000  01                DCB      0x01
