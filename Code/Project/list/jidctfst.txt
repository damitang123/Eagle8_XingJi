; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\jidctfst.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\jidctfst.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\JPEG\jidctfst.c]
                          THUMB

                          AREA ||i.jpeg_idct_ifast||, CODE, READONLY, ALIGN=2

                  jpeg_idct_ifast PROC
;;;167    GLOBAL(void)
;;;168    jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;169    		 JCOEFPTR coef_block,
;;;170    		 JSAMPARRAY output_buf, JDIMENSION output_col)
;;;171    {
;;;172      DCTELEM tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
;;;173      DCTELEM tmp10, tmp11, tmp12, tmp13;
;;;174      DCTELEM z5, z10, z11, z12, z13;
;;;175      JCOEFPTR inptr;
;;;176      IFAST_MULT_TYPE * quantptr;
;;;177      int * wsptr;
;;;178      JSAMPROW outptr;
;;;179      JSAMPLE *range_limit = IDCT_range_limit(cinfo);
;;;180      int ctr;
;;;181      int workspace[DCTSIZE2];	/* buffers data between passes */
;;;182      SHIFT_TEMPS			/* for DESCALE */
;;;183      ISHIFT_TEMPS			/* for IDESCALE */
;;;184    
;;;185      /* Pass 1: process columns from input, store into work array. */
;;;186    
;;;187      inptr = coef_block;
;;;188      quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
000004  f8d03144          LDR      r3,[r0,#0x144]
000008  b0cf              SUB      sp,sp,#0x13c          ;171
00000a  6d09              LDR      r1,[r1,#0x50]
;;;189      wsptr = workspace;
;;;190      for (ctr = DCTSIZE; ctr > 0; ctr--) {
00000c  2508              MOVS     r5,#8
00000e  a80d              ADD      r0,sp,#0x34           ;189
000010  f1130380          ADDS.W   r3,r3,#0x80
                  |L1.20|
;;;191        /* Due to quantization, we will usually find that many of the input
;;;192         * coefficients are zero, especially the AC terms.  We can exploit this
;;;193         * by short-circuiting the IDCT calculation for any column in which all
;;;194         * the AC terms are zero.  In that case each output is equal to the
;;;195         * DC coefficient (with scale factor as needed).
;;;196         * With typical images and quantization tables, half or more of the
;;;197         * column DCT calculations can be simplified this way.
;;;198         */
;;;199        
;;;200        if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
000014  f9b24010          LDRSH    r4,[r2,#0x10]
000018  9402              STR      r4,[sp,#8]
00001a  b984              CBNZ     r4,|L1.62|
00001c  8c14              LDRH     r4,[r2,#0x20]
00001e  b974              CBNZ     r4,|L1.62|
;;;201    	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
000020  8e14              LDRH     r4,[r2,#0x30]
000022  b964              CBNZ     r4,|L1.62|
000024  f8b24040          LDRH     r4,[r2,#0x40]
000028  b94c              CBNZ     r4,|L1.62|
;;;202    	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
00002a  f8b24050          LDRH     r4,[r2,#0x50]
00002e  b934              CBNZ     r4,|L1.62|
000030  f8b24060          LDRH     r4,[r2,#0x60]
000034  b91c              CBNZ     r4,|L1.62|
;;;203    	inptr[DCTSIZE*7] == 0) {
000036  f8b24070          LDRH     r4,[r2,#0x70]
00003a  2c00              CMP      r4,#0
00003c  d07e              BEQ      |L1.316|
                  |L1.62|
;;;204          /* AC terms all zero */
;;;205          int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
;;;206    
;;;207          wsptr[DCTSIZE*0] = dcval;
;;;208          wsptr[DCTSIZE*1] = dcval;
;;;209          wsptr[DCTSIZE*2] = dcval;
;;;210          wsptr[DCTSIZE*3] = dcval;
;;;211          wsptr[DCTSIZE*4] = dcval;
;;;212          wsptr[DCTSIZE*5] = dcval;
;;;213          wsptr[DCTSIZE*6] = dcval;
;;;214          wsptr[DCTSIZE*7] = dcval;
;;;215          
;;;216          inptr++;			/* advance pointers to next column */
;;;217          quantptr++;
;;;218          wsptr++;
;;;219          continue;
;;;220        }
;;;221        
;;;222        /* Even part */
;;;223    
;;;224        tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
00003e  f8516b40          LDR      r6,[r1],#0x40
000042  f9324b20          LDRSH    r4,[r2],#0x20
;;;225        tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
000046  f8517b40          LDR      r7,[r1],#0x40
00004a  4374              MULS     r4,r6,r4              ;224
00004c  f9326b20          LDRSH    r6,[r2],#0x20
;;;226        tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
000050  f851cb40          LDR      r12,[r1],#0x40
000054  437e              MULS     r6,r7,r6              ;225
000056  f9327b20          LDRSH    r7,[r2],#0x20
;;;227        tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
00005a  f85189a0          LDR      r8,[r1],#-0xa0
00005e  fb07f70c          MUL      r7,r7,r12             ;226
000062  f932c930          LDRSH    r12,[r2],#-0x30
000066  fb0cfc08          MUL      r12,r12,r8
;;;228    
;;;229        tmp10 = tmp0 + tmp2;	/* phase 3 */
00006a  eb040807          ADD      r8,r4,r7
;;;230        tmp11 = tmp0 - tmp2;
00006e  1be7              SUBS     r7,r4,r7
;;;231    
;;;232        tmp13 = tmp1 + tmp3;	/* phases 5-3 */
000070  eb06040c          ADD      r4,r6,r12
;;;233        tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
000074  eba6060c          SUB      r6,r6,r12
000078  f44f7cb5          MOV      r12,#0x16a
00007c  fb06f60c          MUL      r6,r6,r12
000080  ebc42626          RSB      r6,r4,r6,ASR #8
;;;234    
;;;235        tmp0 = tmp10 + tmp13;	/* phase 2 */
000084  eb080904          ADD      r9,r8,r4
;;;236        tmp3 = tmp10 - tmp13;
000088  eba80e04          SUB      lr,r8,r4
;;;237        tmp1 = tmp11 + tmp12;
00008c  eb070a06          ADD      r10,r7,r6
;;;238        tmp2 = tmp11 - tmp12;
000090  eba70b06          SUB      r11,r7,r6
;;;239        
;;;240        /* Odd part */
;;;241    
;;;242        tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
000094  9c02              LDR      r4,[sp,#8]
000096  f8516b40          LDR      r6,[r1],#0x40
;;;243        tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
00009a  f9327b20          LDRSH    r7,[r2],#0x20
00009e  4374              MULS     r4,r6,r4              ;242
0000a0  f8516b40          LDR      r6,[r1],#0x40
;;;244        tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
0000a4  f9328b20          LDRSH    r8,[r2],#0x20
0000a8  4377              MULS     r7,r6,r7              ;243
0000aa  f8516b40          LDR      r6,[r1],#0x40
0000ae  fb08f806          MUL      r8,r8,r6
;;;245        tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
0000b2  f932696e          LDRSH    r6,[r2],#-0x6e
0000b6  f851c9dc          LDR      r12,[r1],#-0xdc
0000ba  fb06f60c          MUL      r6,r6,r12
;;;246    
;;;247        z13 = tmp6 + tmp5;		/* phase 6 */
0000be  eb080c07          ADD      r12,r8,r7
;;;248        z10 = tmp6 - tmp5;
0000c2  eba80707          SUB      r7,r8,r7
;;;249        z11 = tmp4 + tmp7;
0000c6  eb040806          ADD      r8,r4,r6
;;;250        z12 = tmp4 - tmp7;
0000ca  1ba6              SUBS     r6,r4,r6
;;;251    
;;;252        tmp7 = z11 + z13;		/* phase 5 */
0000cc  eb08040c          ADD      r4,r8,r12
;;;253        tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
0000d0  eba80c0c          SUB      r12,r8,r12
0000d4  f44f78b5          MOV      r8,#0x16a
0000d8  fb0cfc08          MUL      r12,r12,r8
0000dc  ea4f2c2c          ASR      r12,r12,#8
;;;254    
;;;255        z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
0000e0  f8cdc010          STR      r12,[sp,#0x10]
0000e4  eb070c06          ADD      r12,r7,r6
0000e8  f24018d9          MOV      r8,#0x1d9
0000ec  fb0cfc08          MUL      r12,r12,r8
;;;256        tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
0000f0  f2401815          MOV      r8,#0x115
0000f4  ea4f2c2c          ASR      r12,r12,#8            ;255
0000f8  fb06f608          MUL      r6,r6,r8
0000fc  ebcc2826          RSB      r8,r12,r6,ASR #8
;;;257        tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
000100  f46f7627          MVN      r6,#0x29c
000104  4377              MULS     r7,r6,r7
000106  eb0c2627          ADD      r6,r12,r7,ASR #8
;;;258    
;;;259        tmp6 = tmp12 - tmp7;	/* phase 2 */
;;;260        tmp5 = tmp11 - tmp6;
00010a  f8ddc010          LDR      r12,[sp,#0x10]
00010e  1b37              SUBS     r7,r6,r4              ;259
000110  ebac0607          SUB      r6,r12,r7
;;;261        tmp4 = tmp10 + tmp5;
;;;262    
;;;263        wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
000114  eb090c04          ADD      r12,r9,r4
000118  f840cbe0          STR      r12,[r0],#0xe0
;;;264        wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
00011c  eba90404          SUB      r4,r9,r4
000120  f84049c0          STR      r4,[r0],#-0xc0
;;;265        wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
000124  eb0a0407          ADD      r4,r10,r7
000128  f8404b20          STR      r4,[r0],#0x20
;;;266        wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
00012c  ebaa0407          SUB      r4,r10,r7
;;;267        wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
000130  f8c04080          STR      r4,[r0,#0x80]
000134  44b0              ADD      r8,r8,r6              ;261
000136  eb0b0406          ADD      r4,r11,r6
00013a  e000              B        |L1.318|
                  |L1.316|
00013c  e01a              B        |L1.372|
                  |L1.318|
00013e  f8404b40          STR      r4,[r0],#0x40
;;;268        wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
000142  ebab0406          SUB      r4,r11,r6
;;;269        wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
000146  6204              STR      r4,[r0,#0x20]
000148  eb0e0408          ADD      r4,lr,r8
00014c  f8404920          STR      r4,[r0],#-0x20
;;;270        wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
000150  ebae0408          SUB      r4,lr,r8
000154  f840495c          STR      r4,[r0],#-0x5c
                  |L1.344|
000158  1e6d              SUBS     r5,r5,#1
00015a  2d00              CMP      r5,#0                 ;190
00015c  f73faf5a          BGT      |L1.20|
;;;271    
;;;272        inptr++;			/* advance pointers to next column */
;;;273        quantptr++;
;;;274        wsptr++;
;;;275      }
;;;276      
;;;277      /* Pass 2: process rows from work array, store into output array. */
;;;278      /* Note that we must descale the results by a factor of 8 == 2**3, */
;;;279      /* and also undo the PASS1_BITS scaling. */
;;;280    
;;;281      wsptr = workspace;
000160  a80d              ADD      r0,sp,#0x34
;;;282      for (ctr = 0; ctr < DCTSIZE; ctr++) {
000162  2200              MOVS     r2,#0
                  |L1.356|
;;;283        outptr = output_buf[ctr] + output_col;
000164  9952              LDR      r1,[sp,#0x148]
;;;284        /* Rows of zeroes can be exploited in the same way as we did with columns.
;;;285         * However, the column calculation has created many nonzero AC terms, so
;;;286         * the simplification applies less often (typically 5% to 10% of the time).
;;;287         * On machines with very fast multiplication, it's possible that the
;;;288         * test takes more time than it's worth.  In that case this section
;;;289         * may be commented out.
;;;290         */
;;;291        
;;;292    #ifndef NO_ZERO_ROW_TEST
;;;293        if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
000166  6845              LDR      r5,[r0,#4]
000168  f8514022          LDR      r4,[r1,r2,LSL #2]     ;283
00016c  995c              LDR      r1,[sp,#0x170]        ;283
00016e  4421              ADD      r1,r1,r4              ;283
000170  b1ad              CBZ      r5,|L1.414|
000172  e021              B        |L1.440|
                  |L1.372|
000174  c940              LDM      r1!,{r6}              ;205
000176  f9324b02          LDRSH    r4,[r2],#2            ;205
00017a  4374              MULS     r4,r6,r4              ;205
00017c  f8404b20          STR      r4,[r0],#0x20         ;207
000180  f8404b20          STR      r4,[r0],#0x20         ;208
000184  f8404b20          STR      r4,[r0],#0x20         ;209
000188  f8404b60          STR      r4,[r0],#0x60         ;210
00018c  f8404c40          STR      r4,[r0,#-0x40]        ;211
000190  f8404c20          STR      r4,[r0,#-0x20]        ;212
000194  f8404b20          STR      r4,[r0],#0x20         ;213
000198  f84049dc          STR      r4,[r0],#-0xdc        ;214
00019c  e7dc              B        |L1.344|
                  |L1.414|
00019e  6884              LDR      r4,[r0,#8]
0001a0  b954              CBNZ     r4,|L1.440|
0001a2  68c4              LDR      r4,[r0,#0xc]
0001a4  b944              CBNZ     r4,|L1.440|
0001a6  6904              LDR      r4,[r0,#0x10]
0001a8  b934              CBNZ     r4,|L1.440|
;;;294    	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
0001aa  6944              LDR      r4,[r0,#0x14]
0001ac  b924              CBNZ     r4,|L1.440|
0001ae  6984              LDR      r4,[r0,#0x18]
0001b0  b914              CBNZ     r4,|L1.440|
0001b2  69c4              LDR      r4,[r0,#0x1c]
0001b4  2c00              CMP      r4,#0
0001b6  d07e              BEQ      |L1.694|
                  |L1.440|
;;;295          /* AC terms all zero */
;;;296          JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
;;;297    				  & RANGE_MASK];
;;;298          
;;;299          outptr[0] = dcval;
;;;300          outptr[1] = dcval;
;;;301          outptr[2] = dcval;
;;;302          outptr[3] = dcval;
;;;303          outptr[4] = dcval;
;;;304          outptr[5] = dcval;
;;;305          outptr[6] = dcval;
;;;306          outptr[7] = dcval;
;;;307    
;;;308          wsptr += DCTSIZE;		/* advance pointer to next row */
;;;309          continue;
;;;310        }
;;;311    #endif
;;;312        
;;;313        /* Even part */
;;;314    
;;;315        tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
0001b8  f8307b10          LDRH     r7,[r0],#0x10
0001bc  f8304b10          LDRH     r4,[r0],#0x10
0001c0  193e              ADDS     r6,r7,r4
;;;316        tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
;;;317    
;;;318        tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
0001c2  f8508c18          LDR      r8,[r0,#-0x18]
0001c6  f850cc08          LDR      r12,[r0,#-8]
0001ca  1b3f              SUBS     r7,r7,r4              ;316
0001cc  eb08040c          ADD      r4,r8,r12
;;;319        tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
0001d0  eba80c0c          SUB      r12,r8,r12
0001d4  f44f78b5          MOV      r8,#0x16a
0001d8  fb0cfc08          MUL      r12,r12,r8
0001dc  ebc4282c          RSB      r8,r4,r12,ASR #8
;;;320    	    - tmp13;
;;;321    
;;;322        tmp0 = tmp10 + tmp13;
0001e0  eb060c04          ADD      r12,r6,r4
;;;323        tmp3 = tmp10 - tmp13;
0001e4  eba60b04          SUB      r11,r6,r4
;;;324        tmp1 = tmp11 + tmp12;
0001e8  eb070908          ADD      r9,r7,r8
;;;325        tmp2 = tmp11 - tmp12;
0001ec  eba70a08          SUB      r10,r7,r8
;;;326    
;;;327        /* Odd part */
;;;328    
;;;329        z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
0001f0  f8504c0c          LDR      r4,[r0,#-0xc]
0001f4  f8507c14          LDR      r7,[r0,#-0x14]
;;;330        z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
;;;331        z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
0001f8  f8508c04          LDR      r8,[r0,#-4]
0001fc  19e6              ADDS     r6,r4,r7              ;329
0001fe  1be4              SUBS     r4,r4,r7              ;330
000200  eb050708          ADD      r7,r5,r8
;;;332        z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
000204  eba50808          SUB      r8,r5,r8
;;;333    
;;;334        tmp7 = z11 + z13;		/* phase 5 */
000208  19bd              ADDS     r5,r7,r6
;;;335        tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
00020a  1bbe              SUBS     r6,r7,r6
00020c  f44f77b5          MOV      r7,#0x16a
000210  437e              MULS     r6,r7,r6
000212  ea4f2e26          ASR      lr,r6,#8
;;;336    
;;;337        z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
000216  eb040608          ADD      r6,r4,r8
00021a  f24017d9          MOV      r7,#0x1d9
00021e  437e              MULS     r6,r7,r6
;;;338        tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
000220  f2401715          MOV      r7,#0x115
000224  fb08f807          MUL      r8,r8,r7
000228  1236              ASRS     r6,r6,#8              ;337
;;;339        tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
00022a  f46f7727          MVN      r7,#0x29c
00022e  437c              MULS     r4,r7,r4
000230  ebc62828          RSB      r8,r6,r8,ASR #8       ;338
000234  eb062424          ADD      r4,r6,r4,ASR #8
;;;340    
;;;341        tmp6 = tmp12 - tmp7;	/* phase 2 */
000238  1b66              SUBS     r6,r4,r5
;;;342        tmp5 = tmp11 - tmp6;
00023a  ebae0406          SUB      r4,lr,r6
;;;343        tmp4 = tmp10 + tmp5;
00023e  eb080704          ADD      r7,r8,r4
;;;344    
;;;345        /* Final output stage: scale down by a factor of 8 and range-limit */
;;;346    
;;;347        outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
000242  eb0c0805          ADD      r8,r12,r5
000246  f3c81849          UBFX     r8,r8,#5,#10
;;;348    			    & RANGE_MASK];
;;;349        outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
00024a  ebac0505          SUB      r5,r12,r5
00024e  f8138008          LDRB     r8,[r3,r8]            ;347
000252  f3c51549          UBFX     r5,r5,#5,#10
000256  f8818000          STRB     r8,[r1,#0]            ;347
00025a  5d5d              LDRB     r5,[r3,r5]
00025c  71cd              STRB     r5,[r1,#7]
;;;350    			    & RANGE_MASK];
;;;351        outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
00025e  eb090506          ADD      r5,r9,r6
000262  f3c51549          UBFX     r5,r5,#5,#10
000266  5d5d              LDRB     r5,[r3,r5]
000268  704d              STRB     r5,[r1,#1]
;;;352    			    & RANGE_MASK];
;;;353        outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
00026a  eba90506          SUB      r5,r9,r6
00026e  f3c51549          UBFX     r5,r5,#5,#10
000272  5d5d              LDRB     r5,[r3,r5]
000274  718d              STRB     r5,[r1,#6]
;;;354    			    & RANGE_MASK];
;;;355        outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
000276  eb0a0504          ADD      r5,r10,r4
00027a  f3c51549          UBFX     r5,r5,#5,#10
;;;356    			    & RANGE_MASK];
;;;357        outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
00027e  ebaa0404          SUB      r4,r10,r4
000282  5d5d              LDRB     r5,[r3,r5]            ;355
000284  f3c41449          UBFX     r4,r4,#5,#10
000288  708d              STRB     r5,[r1,#2]            ;355
00028a  5d1c              LDRB     r4,[r3,r4]
00028c  714c              STRB     r4,[r1,#5]
;;;358    			    & RANGE_MASK];
;;;359        outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
00028e  eb0b0407          ADD      r4,r11,r7
000292  f3c41449          UBFX     r4,r4,#5,#10
000296  5d1c              LDRB     r4,[r3,r4]
000298  710c              STRB     r4,[r1,#4]
;;;360    			    & RANGE_MASK];
;;;361        outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
00029a  ebab0407          SUB      r4,r11,r7
00029e  f3c41449          UBFX     r4,r4,#5,#10
0002a2  5d1c              LDRB     r4,[r3,r4]
0002a4  70cc              STRB     r4,[r1,#3]
                  |L1.678|
0002a6  1c52              ADDS     r2,r2,#1
0002a8  2a08              CMP      r2,#8                 ;282
0002aa  f6ffaf5b          BLT      |L1.356|
;;;362    			    & RANGE_MASK];
;;;363    
;;;364        wsptr += DCTSIZE;		/* advance pointer to next row */
;;;365      }
;;;366    }
0002ae  b053              ADD      sp,sp,#0x14c
0002b0  e8bd8ff0          POP      {r4-r11,pc}
0002b4  e7ff              B        |L1.694|
                  |L1.694|
0002b6  f8304b20          LDRH     r4,[r0],#0x20         ;296
0002ba  f3c41449          UBFX     r4,r4,#5,#10          ;296
0002be  5d1c              LDRB     r4,[r3,r4]            ;296
0002c0  700c              STRB     r4,[r1,#0]            ;299
0002c2  704c              STRB     r4,[r1,#1]            ;300
0002c4  708c              STRB     r4,[r1,#2]            ;301
0002c6  70cc              STRB     r4,[r1,#3]            ;302
0002c8  710c              STRB     r4,[r1,#4]            ;303
0002ca  714c              STRB     r4,[r1,#5]            ;304
0002cc  718c              STRB     r4,[r1,#6]            ;305
0002ce  71cc              STRB     r4,[r1,#7]            ;306
0002d0  e7e9              B        |L1.678|
;;;367    
                          ENDP

