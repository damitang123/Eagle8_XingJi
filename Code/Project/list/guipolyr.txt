; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\guipolyr.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guipolyr.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\Core\GUIPolyR.c]
                          THUMB

                          AREA ||i.GUI_RotatePolygon||, CODE, READONLY, ALIGN=1

                  GUI_RotatePolygon PROC
;;;32     */
;;;33     void GUI_RotatePolygon(GUI_POINT* pDest, const GUI_POINT* pSrc, int NumPoints, float Angle) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4680              MOV      r8,r0
000006  4691              MOV      r9,r2
000008  460e              MOV      r6,r1
;;;34       int j;
;;;35       float fcos = cos(Angle);
00000a  4618              MOV      r0,r3
00000c  f7fffffe          BL       __aeabi_f2d
000010  460d              MOV      r5,r1
000012  4604              MOV      r4,r0
000014  f7fffffe          BL       ||cos||
000018  f7fffffe          BL       __aeabi_d2f
00001c  9000              STR      r0,[sp,#0]
00001e  4620              MOV      r0,r4
000020  4629              MOV      r1,r5
;;;36       float fsin = sin(Angle);
000022  f7fffffe          BL       ||sin||
000026  f7fffffe          BL       __aeabi_d2f
00002a  4683              MOV      r11,r0
;;;37       for (j=0; j<NumPoints; j++) {
00002c  2400              MOVS     r4,#0
00002e  e02d              B        |L1.140|
                  |L1.48|
;;;38         int x = (pSrc+j)->x;
;;;39         int y = (pSrc+j)->y;
000030  eb060084          ADD      r0,r6,r4,LSL #2
000034  f9367024          LDRSH    r7,[r6,r4,LSL #2]     ;38
000038  f9b00002          LDRSH    r0,[r0,#2]
;;;40         (pDest+j)->x =  x * fcos + y * fsin;
00003c  f7fffffe          BL       __aeabi_i2f
000040  4682              MOV      r10,r0
000042  4659              MOV      r1,r11
000044  f7fffffe          BL       __aeabi_fmul
000048  4605              MOV      r5,r0
00004a  4638              MOV      r0,r7
00004c  f7fffffe          BL       __aeabi_i2f
000050  9900              LDR      r1,[sp,#0]
000052  f7fffffe          BL       __aeabi_fmul
000056  4629              MOV      r1,r5
000058  f7fffffe          BL       __aeabi_fadd
00005c  f7fffffe          BL       __aeabi_f2iz
000060  f8280024          STRH     r0,[r8,r4,LSL #2]
000064  4650              MOV      r0,r10
;;;41         (pDest+j)->y = -x * fsin + y * fcos;
000066  9900              LDR      r1,[sp,#0]
000068  f7fffffe          BL       __aeabi_fmul
00006c  4605              MOV      r5,r0
00006e  4278              RSBS     r0,r7,#0
000070  f7fffffe          BL       __aeabi_i2f
000074  4659              MOV      r1,r11
000076  f7fffffe          BL       __aeabi_fmul
00007a  4629              MOV      r1,r5
00007c  f7fffffe          BL       __aeabi_fadd
000080  f7fffffe          BL       __aeabi_f2iz
000084  eb080184          ADD      r1,r8,r4,LSL #2
000088  1c64              ADDS     r4,r4,#1
00008a  8048              STRH     r0,[r1,#2]
                  |L1.140|
00008c  454c              CMP      r4,r9                 ;37
00008e  dbcf              BLT      |L1.48|
;;;42       }
;;;43     }
000090  e8bd8ff8          POP      {r3-r11,pc}
;;;44     
                          ENDP

