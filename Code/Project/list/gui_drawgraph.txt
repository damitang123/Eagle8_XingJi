; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\gui_drawgraph.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui_drawgraph.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\Core\GUI_DrawGraph.c]
                          THUMB

                          AREA ||i.GUI_DrawGraph||, CODE, READONLY, ALIGN=2

                  GUI_DrawGraph PROC
;;;81     */  
;;;82     void GUI_DrawGraph(I16 *pay, int NumPoints, int x0, int y0) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
;;;83       GUI_LOCK();
;;;84       #if (GUI_WINSUPPORT)
;;;85         WM_ADDORG(x0,y0);
000006  480b              LDR      r0,|L1.52|
000008  460e              MOV      r6,r1                 ;82
00000a  6c41              LDR      r1,[r0,#0x44]  ; GUI_Context
00000c  6c80              LDR      r0,[r0,#0x48]  ; GUI_Context
00000e  188d              ADDS     r5,r1,r2
000010  18c4              ADDS     r4,r0,r3
;;;86         WM_ITERATE_START(NULL); {
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       WM__InitIVRSearch
000018  e007              B        |L1.42|
                  |L1.26|
;;;87       #endif
;;;88       _DrawGraph(pay, NumPoints, x0, y0);
00001a  4623              MOV      r3,r4
00001c  462a              MOV      r2,r5
00001e  4631              MOV      r1,r6
000020  4638              MOV      r0,r7
000022  f7fffffe          BL       _DrawGraph
;;;89       #if (GUI_WINSUPPORT)
;;;90         } WM_ITERATE_END();
000026  f7fffffe          BL       WM__GetNextIVR
                  |L1.42|
00002a  2800              CMP      r0,#0
00002c  d1f5              BNE      |L1.26|
;;;91       #endif
;;;92       GUI_UNLOCK();
;;;93     }
00002e  e8bd81f0          POP      {r4-r8,pc}
;;;94     
                          ENDP

000032  0000              DCW      0x0000
                  |L1.52|
                          DCD      GUI_Context

                          AREA ||i._DrawGraph||, CODE, READONLY, ALIGN=2

                  _DrawGraph PROC
;;;32     */
;;;33     static void _DrawGraph(I16 *pay, int NumPoints, int xOff, int yOff) {
000000  e92d5ffc          PUSH     {r2-r12,lr}
000004  4683              MOV      r11,r0
;;;34       int i;
;;;35       int y0, y1;
;;;36       int yClip0, yClip1;
;;;37       /* Perform high level clipping in x */
;;;38       yClip0 = GUI_Context.pClipRect_HL->y0;
000006  4826              LDR      r0,|L2.160|
000008  469a              MOV      r10,r3                ;33
00000a  4616              MOV      r6,r2                 ;33
00000c  6940              LDR      r0,[r0,#0x14]  ; GUI_Context
00000e  460f              MOV      r7,r1                 ;33
;;;39       yClip1 = GUI_Context.pClipRect_HL->y1;
;;;40       i=0;
000010  2500              MOVS     r5,#0
000012  f9b08002          LDRSH    r8,[r0,#2]            ;38
000016  f9b09006          LDRSH    r9,[r0,#6]            ;39
00001a  b160              CBZ      r0,|L2.54|
;;;41       if (GUI_Context.pClipRect_HL) {
;;;42         if (xOff < GUI_Context.pClipRect_HL->x0)
00001c  f9b01000          LDRSH    r1,[r0,#0]
000020  42b1              CMP      r1,r6
000022  dd00              BLE      |L2.38|
;;;43           i = GUI_Context.pClipRect_HL->x0 - xOff;
000024  1b8d              SUBS     r5,r1,r6
                  |L2.38|
;;;44         if (xOff+NumPoints-1 > GUI_Context.pClipRect_HL->x1)
000026  19f1              ADDS     r1,r6,r7
000028  f9b00004          LDRSH    r0,[r0,#4]
00002c  1e49              SUBS     r1,r1,#1
00002e  4281              CMP      r1,r0
000030  dd01              BLE      |L2.54|
;;;45           NumPoints = GUI_Context.pClipRect_HL->x1 - xOff + 1;
000032  1b87              SUBS     r7,r0,r6
000034  1c7f              ADDS     r7,r7,#1
                  |L2.54|
;;;46       }
;;;47       /* Start drawing if there is something left to do after x-clipping */
;;;48       if (i < NumPoints) {
000036  42bd              CMP      r5,r7
000038  da30              BGE      |L2.156|
;;;49         y0 = *(pay + i++) + yOff;
00003a  f93b1015          LDRSH    r1,[r11,r5,LSL #1]
00003e  4451              ADD      r1,r1,r10
;;;50         /* Iterate */
;;;51         for (; i < NumPoints; i++) {
000040  e029              B        |L2.150|
;;;52           /* Perform high level clipping in y */
;;;53           y1 = *(pay + i) + yOff;
000042  bf00              NOP      
                  |L2.68|
000044  f93b2015          LDRSH    r2,[r11,r5,LSL #1]
;;;54           if ((y0 >= yClip0) || (y1 >= yClip0)) {
000048  4541              CMP      r1,r8
00004a  eb02040a          ADD      r4,r2,r10             ;53
00004e  da01              BGE      |L2.84|
000050  4544              CMP      r4,r8
000052  db1f              BLT      |L2.148|
                  |L2.84|
;;;55             if ((y0 <= yClip1) || (y1 <= yClip1)) {
000054  4549              CMP      r1,r9
000056  dd01              BLE      |L2.92|
000058  454c              CMP      r4,r9
00005a  dc1b              BGT      |L2.148|
                  |L2.92|
;;;56               int y01;
;;;57               y01 = (y1 + y0) / 2;
00005c  1860              ADDS     r0,r4,r1
00005e  eb0070d0          ADD      r0,r0,r0,LSR #31
000062  1040              ASRS     r0,r0,#1
;;;58               if (y0 <= y1) {
000064  9000              STR      r0,[sp,#0]
;;;59                 LCD_DrawVLine(i + xOff - 1, y0, y01);
;;;60                 LCD_DrawVLine(i + xOff, y01, y1);
;;;61               } else {
;;;62                 LCD_DrawVLine(i + xOff - 1, y01, y0);
000066  eb050006          ADD      r0,r5,r6
00006a  42a1              CMP      r1,r4                 ;58
00006c  9001              STR      r0,[sp,#4]            ;58
00006e  dc07              BGT      |L2.128|
000070  1e40              SUBS     r0,r0,#1              ;59
000072  9a00              LDR      r2,[sp,#0]            ;59
000074  f7fffffe          BL       LCD_DrawVLine
000078  e9dd1000          LDRD     r1,r0,[sp,#0]         ;60
00007c  4622              MOV      r2,r4                 ;60
00007e  e007              B        |L2.144|
                  |L2.128|
000080  460a              MOV      r2,r1
000082  1e40              SUBS     r0,r0,#1
000084  9900              LDR      r1,[sp,#0]
000086  f7fffffe          BL       LCD_DrawVLine
;;;63                 LCD_DrawVLine(i + xOff, y1, y01);
00008a  e9dd2000          LDRD     r2,r0,[sp,#0]
00008e  4621              MOV      r1,r4
                  |L2.144|
000090  f7fffffe          BL       LCD_DrawVLine
                  |L2.148|
;;;64               }
;;;65             }
;;;66           }
;;;67           y0 = y1;
000094  4621              MOV      r1,r4
                  |L2.150|
000096  1c6d              ADDS     r5,r5,#1
000098  42bd              CMP      r5,r7                 ;51
00009a  dbd3              BLT      |L2.68|
                  |L2.156|
;;;68         }
;;;69       }
;;;70     }
00009c  e8bd9ffc          POP      {r2-r12,pc}
;;;71     
                          ENDP

                  |L2.160|
                          DCD      GUI_Context
