; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\guidev_16.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guidev_16.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\MemDev\GUIDEV_16.c]
                          THUMB

                          AREA ||i._DrawBitLine1BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine1BPP PROC
;;;89     */
;;;90     static void _DrawBitLine1BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, unsigned int xsize,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;91                                  const LCD_PIXELINDEX* pTrans, GUI_MEMDEV* pDev, PIXELINDEX* pDest)
;;;92     {
000004  b081              SUB      sp,sp,#4
000006  4698              MOV      r8,r3
000008  4689              MOV      r9,r1
;;;93       PIXELINDEX Index1;
;;;94       PIXELINDEX IndexMask;
;;;95       unsigned pixels;
;;;96       unsigned PixelCnt;
;;;97       PixelCnt = 8 - Diff;
;;;98       pixels = LCD_aMirror[*p] >> Diff;
00000a  f8985000          LDRB     r5,[r8,#0]
00000e  f8dfb0fc          LDR      r11,|L1.268|
000012  e9dd170e          LDRD     r1,r7,[sp,#0x38]      ;92
000016  f81b5005          LDRB     r5,[r11,r5]
00001a  f1c10408          RSB      r4,r1,#8              ;97
00001e  40cd              LSRS     r5,r5,r1
000020  ab10              ADD      r3,sp,#0x40           ;92
;;;99     
;;;100      GUI_DEBUG_ERROROUT3_IF( x < pDev->x0, "GUIDEV.c: DrawBitLine1BPP, Act= %d, Border= %d, Clip= %d", x,pDev->x0, GUI_Context.ClipRect.x0);
;;;101    
;;;102      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000022  493b              LDR      r1,|L1.272|
000024  4682              MOV      r10,r0                ;92
000026  e8930045          LDM      r3,{r0,r2,r6}         ;92
00002a  7c09              LDRB     r1,[r1,#0x10]  ; GUI_Context
00002c  465b              MOV      r3,r11                ;98
00002e  f0110103          ANDS     r1,r1,#3
000032  d020              BEQ      |L1.118|
000034  2901              CMP      r1,#1
000036  d04c              BEQ      |L1.210|
000038  2902              CMP      r1,#2
00003a  d163              BNE      |L1.260|
;;;103      case 0:    /* Write mode */
;;;104        do {
;;;105          /* Prepare loop */
;;;106          if (PixelCnt > xsize) {
;;;107            PixelCnt = xsize;
;;;108          }
;;;109          xsize -= PixelCnt;
;;;110          /* Write as many pixels as we are allowed to and have loaded in this inner loop */
;;;111          do {
;;;112            *pDest++ = *(pTrans + (pixels & 1));
;;;113            pixels >>= 1;
;;;114          } while (--PixelCnt);
;;;115          /* Check if an other Source byte needs to be loaded */
;;;116          if (xsize == 0) {
;;;117            return;
;;;118          }
;;;119          PixelCnt = 8;
;;;120          pixels = LCD_aMirror[*++p];
;;;121        } while (1);
;;;122      case LCD_DRAWMODE_TRANS:
;;;123        Index1 = *(pTrans + 1);
00003c  8840              LDRH     r0,[r0,#2]
00003e  9000              STR      r0,[sp,#0]
                  |L1.64|
;;;124        do {
;;;125          /* Prepare loop */
;;;126          if (PixelCnt > xsize) {
000040  42bc              CMP      r4,r7
000042  d900              BLS      |L1.70|
;;;127            PixelCnt = xsize;
000044  463c              MOV      r4,r7
                  |L1.70|
;;;128          }
;;;129          xsize -= PixelCnt;
000046  1b3f              SUBS     r7,r7,r4
;;;130          if (pUsage) {
000048  f1ba0f00          CMP      r10,#0
00004c  d02c              BEQ      |L1.168|
                  |L1.78|
;;;131            do {
;;;132              if (pixels == 0) {      /* Early out optimization; not required */
00004e  b33d              CBZ      r5,|L1.160|
;;;133                pDest += PixelCnt;
;;;134                x     += PixelCnt;
;;;135                break;
;;;136              }
;;;137              if ((pixels & 1)) {
000050  07e8              LSLS     r0,r5,#31
000052  d008              BEQ      |L1.102|
;;;138                GUI_USAGE_AddPixel(pUsage, x, y);
000054  f8da0008          LDR      r0,[r10,#8]
000058  4649              MOV      r1,r9
00005a  9a03              LDR      r2,[sp,#0xc]
00005c  6803              LDR      r3,[r0,#0]
00005e  4650              MOV      r0,r10
000060  4798              BLX      r3
;;;139                *pDest = Index1;
000062  9800              LDR      r0,[sp,#0]
000064  8030              STRH     r0,[r6,#0]
                  |L1.102|
;;;140              }
;;;141              x++;
000066  f1090901          ADD      r9,r9,#1
00006a  1e64              SUBS     r4,r4,#1
00006c  f1060602          ADD      r6,r6,#2
;;;142              pDest++;
;;;143              if (--PixelCnt == 0) {
000070  d027              BEQ      |L1.194|
;;;144                break;
;;;145              }
;;;146              pixels >>= 1;
000072  086d              LSRS     r5,r5,#1
;;;147            } while (1);
000074  e7eb              B        |L1.78|
                  |L1.118|
000076  4619              MOV      r1,r3                 ;98
                  |L1.120|
000078  42bc              CMP      r4,r7                 ;106
00007a  d900              BLS      |L1.126|
00007c  463c              MOV      r4,r7                 ;107
                  |L1.126|
00007e  1b3f              SUBS     r7,r7,r4              ;109
                  |L1.128|
000080  f0050201          AND      r2,r5,#1              ;112
000084  086d              LSRS     r5,r5,#1              ;113
000086  f8302012          LDRH     r2,[r0,r2,LSL #1]     ;112
00008a  f8262b02          STRH     r2,[r6],#2            ;112
00008e  1e64              SUBS     r4,r4,#1              ;113
000090  d1f6              BNE      |L1.128|
000092  2f00              CMP      r7,#0                 ;116
000094  d036              BEQ      |L1.260|
000096  f8182f01          LDRB     r2,[r8,#1]!           ;120
00009a  2408              MOVS     r4,#8                 ;119
00009c  5c8d              LDRB     r5,[r1,r2]            ;120
00009e  e7eb              B        |L1.120|
                  |L1.160|
0000a0  eb060644          ADD      r6,r6,r4,LSL #1       ;133
0000a4  44a1              ADD      r9,r9,r4              ;134
0000a6  e00c              B        |L1.194|
                  |L1.168|
;;;148          } else {
;;;149            do {
;;;150              if (pixels == 0) {      /* Early out optimization; not required */
0000a8  b14d              CBZ      r5,|L1.190|
;;;151                pDest += PixelCnt;
;;;152                break;
;;;153              }
;;;154              if ((pixels & 1)) {
0000aa  07e8              LSLS     r0,r5,#31
0000ac  d001              BEQ      |L1.178|
;;;155                *pDest = Index1;
0000ae  9800              LDR      r0,[sp,#0]
0000b0  8030              STRH     r0,[r6,#0]
                  |L1.178|
0000b2  1e64              SUBS     r4,r4,#1
0000b4  f1060602          ADD      r6,r6,#2
;;;156              }
;;;157              pDest++;
;;;158              if (--PixelCnt == 0) {
0000b8  d003              BEQ      |L1.194|
;;;159                break;
;;;160              }
;;;161              pixels >>= 1;
0000ba  086d              LSRS     r5,r5,#1
;;;162            } while (1);
0000bc  e7f4              B        |L1.168|
                  |L1.190|
0000be  eb060644          ADD      r6,r6,r4,LSL #1       ;151
                  |L1.194|
;;;163          }
;;;164          /* Check if an other Source byte needs to be loaded */
;;;165          if (xsize == 0) {
0000c2  2f00              CMP      r7,#0
0000c4  d01e              BEQ      |L1.260|
;;;166            return;
;;;167          }
;;;168          PixelCnt = 8;
;;;169          pixels = LCD_aMirror[*(++p)];
0000c6  f8181f01          LDRB     r1,[r8,#1]!
0000ca  2408              MOVS     r4,#8                 ;168
0000cc  f81b5001          LDRB     r5,[r11,r1]
;;;170        } while (1);
0000d0  e7b6              B        |L1.64|
                  |L1.210|
;;;171      case LCD_DRAWMODE_XOR:
;;;172        IndexMask = pDev->pfGetIndexMask();
0000d2  6a50              LDR      r0,[r2,#0x24]
0000d4  4780              BLX      r0
0000d6  b280              UXTH     r0,r0
0000d8  4659              MOV      r1,r11                ;98
                  |L1.218|
;;;173        do {
;;;174          /* Prepare loop */
;;;175          if (PixelCnt > xsize) {
0000da  42bc              CMP      r4,r7
0000dc  d900              BLS      |L1.224|
;;;176            PixelCnt = xsize;
0000de  463c              MOV      r4,r7
                  |L1.224|
;;;177          }
;;;178          xsize -= PixelCnt;
0000e0  1b3f              SUBS     r7,r7,r4
                  |L1.226|
;;;179          /* Write as many pixels as we are allowed to and have loaded in this inner loop */
;;;180          do {
;;;181            if ((pixels & 1)) {
0000e2  07ea              LSLS     r2,r5,#31
0000e4  d002              BEQ      |L1.236|
;;;182              *pDest ^= IndexMask;
0000e6  8832              LDRH     r2,[r6,#0]
0000e8  4042              EORS     r2,r2,r0
0000ea  8032              STRH     r2,[r6,#0]
                  |L1.236|
;;;183            }
;;;184            *pDest++;
;;;185            pixels >>= 1;
0000ec  086d              LSRS     r5,r5,#1
0000ee  1e64              SUBS     r4,r4,#1
0000f0  f1060602          ADD      r6,r6,#2
;;;186          } while (--PixelCnt);
0000f4  d1f5              BNE      |L1.226|
;;;187          /* Check if an other Source byte needs to be loaded */
;;;188          if (xsize == 0) {
0000f6  2f00              CMP      r7,#0
0000f8  d004              BEQ      |L1.260|
;;;189            return;
;;;190          }
;;;191          PixelCnt = 8;
;;;192          pixels = LCD_aMirror[*(++p)];
0000fa  f8182f01          LDRB     r2,[r8,#1]!
0000fe  2408              MOVS     r4,#8                 ;191
000100  5c8d              LDRB     r5,[r1,r2]
;;;193        } while (1);
000102  e7ea              B        |L1.218|
                  |L1.260|
;;;194      }
;;;195    }
000104  b005              ADD      sp,sp,#0x14
000106  e8bd8ff0          POP      {r4-r11,pc}
;;;196    
                          ENDP

00010a  0000              DCW      0x0000
                  |L1.268|
                          DCD      LCD_aMirror
                  |L1.272|
                          DCD      GUI_Context

                          AREA ||i._DrawBitLine2BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine2BPP PROC
;;;200    */
;;;201    static void _DrawBitLine2BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;202                                 const LCD_PIXELINDEX* pTrans, PIXELINDEX* pDest)
;;;203    {
000004  4689              MOV      r9,r1
000006  a90e              ADD      r1,sp,#0x38
000008  4683              MOV      r11,r0
00000a  e8910421          LDM      r1,{r0,r5,r10}
;;;204      U8 pixels;
;;;205      U8  PixelCnt;
;;;206      PixelCnt = 4 - Diff;
00000e  f1c00104          RSB      r1,r0,#4
000012  b2cc              UXTB     r4,r1
;;;207      pixels = (*p) << (Diff << 1);
000014  7819              LDRB     r1,[r3,#0]
000016  0040              LSLS     r0,r0,#1
000018  4081              LSLS     r1,r1,r0
;;;208      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
00001a  482f              LDR      r0,|L2.216|
00001c  9f11              LDR      r7,[sp,#0x44]
00001e  4698              MOV      r8,r3                 ;203
000020  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
000022  b2ce              UXTB     r6,r1                 ;207
000024  f0100003          ANDS     r0,r0,#3
000028  d004              BEQ      |L2.52|
00002a  2801              CMP      r0,#1
00002c  d03a              BEQ      |L2.164|
00002e  2802              CMP      r0,#2
000030  d14f              BNE      |L2.210|
000032  e014              B        |L2.94|
                  |L2.52|
;;;209      case 0:    /* Write mode */
;;;210      PixelLoopWrite:
;;;211        if (PixelCnt > xsize) {
000034  42ac              CMP      r4,r5
000036  dd00              BLE      |L2.58|
;;;212          PixelCnt = xsize;
000038  b2ec              UXTB     r4,r5
                  |L2.58|
;;;213        }
;;;214        xsize -= PixelCnt;
00003a  1b2d              SUBS     r5,r5,r4
                  |L2.60|
;;;215        do {
;;;216          *pDest++ = *(pTrans + (pixels >> 6));
00003c  09b1              LSRS     r1,r6,#6
00003e  f83a0011          LDRH     r0,[r10,r1,LSL #1]
000042  f8270b02          STRH     r0,[r7],#2
000046  06b0              LSLS     r0,r6,#26
;;;217          pixels <<= 2;
000048  0e06              LSRS     r6,r0,#24
00004a  1e64              SUBS     r4,r4,#1
;;;218        } while (--PixelCnt);
00004c  f01404ff          ANDS     r4,r4,#0xff
000050  d1f4              BNE      |L2.60|
;;;219        if (xsize) {
000052  2d00              CMP      r5,#0
000054  d03d              BEQ      |L2.210|
;;;220          PixelCnt = 4;
000056  2404              MOVS     r4,#4
;;;221          pixels = *(++p);
000058  f8186f01          LDRB     r6,[r8,#1]!
;;;222          goto PixelLoopWrite;
00005c  e7ea              B        |L2.52|
                  |L2.94|
;;;223        }
;;;224        break;
;;;225      case LCD_DRAWMODE_TRANS:
;;;226      PixelLoopTrans:
;;;227        if (PixelCnt > xsize)
00005e  42ac              CMP      r4,r5
000060  dd00              BLE      |L2.100|
;;;228          PixelCnt = xsize;
000062  b2ec              UXTB     r4,r5
                  |L2.100|
;;;229        xsize -= PixelCnt;
000064  1b2d              SUBS     r5,r5,r4
                  |L2.102|
;;;230        do {
;;;231          if (pixels & 0xc0) {
000066  09b0              LSRS     r0,r6,#6
000068  d00d              BEQ      |L2.134|
;;;232            *pDest = *(pTrans + (pixels >> 6));
00006a  09b1              LSRS     r1,r6,#6
;;;233            if (pUsage) {
00006c  f1bb0f00          CMP      r11,#0
000070  f83a0011          LDRH     r0,[r10,r1,LSL #1]    ;232
000074  8038              STRH     r0,[r7,#0]            ;232
000076  d006              BEQ      |L2.134|
;;;234              GUI_USAGE_AddPixel(pUsage, x, y);
000078  f8db0008          LDR      r0,[r11,#8]
00007c  4649              MOV      r1,r9
00007e  9a02              LDR      r2,[sp,#8]
000080  6803              LDR      r3,[r0,#0]
000082  4658              MOV      r0,r11
000084  4798              BLX      r3
                  |L2.134|
;;;235            }
;;;236          }
;;;237          pDest++;
;;;238          x++;
000086  06b0              LSLS     r0,r6,#26
;;;239          pixels <<= 2;
000088  0e06              LSRS     r6,r0,#24
00008a  1e64              SUBS     r4,r4,#1
00008c  1cbf              ADDS     r7,r7,#2
00008e  f1090901          ADD      r9,r9,#1              ;238
;;;240        } while (--PixelCnt);
000092  f01404ff          ANDS     r4,r4,#0xff
000096  d1e6              BNE      |L2.102|
;;;241        if (xsize) {
000098  2d00              CMP      r5,#0
00009a  d01a              BEQ      |L2.210|
;;;242          PixelCnt = 4;
00009c  2404              MOVS     r4,#4
;;;243          pixels = *(++p);
00009e  f8186f01          LDRB     r6,[r8,#1]!
;;;244          goto PixelLoopTrans;
0000a2  e7dc              B        |L2.94|
                  |L2.164|
;;;245        }
;;;246        break;
;;;247      case LCD_DRAWMODE_XOR:;
;;;248      PixelLoopXor:
;;;249        if (PixelCnt > xsize)
0000a4  42ac              CMP      r4,r5
0000a6  dd00              BLE      |L2.170|
;;;250          PixelCnt = xsize;
0000a8  b2ec              UXTB     r4,r5
                  |L2.170|
;;;251        xsize -= PixelCnt;
0000aa  1b2d              SUBS     r5,r5,r4
                  |L2.172|
;;;252        do {
;;;253          if ((pixels & 0xc0))
0000ac  09b0              LSRS     r0,r6,#6
0000ae  d003              BEQ      |L2.184|
;;;254            *pDest ^= 255;
0000b0  8838              LDRH     r0,[r7,#0]
0000b2  f08000ff          EOR      r0,r0,#0xff
0000b6  8038              STRH     r0,[r7,#0]
                  |L2.184|
0000b8  06b0              LSLS     r0,r6,#26
;;;255          pDest++;
;;;256          pixels <<= 2;
0000ba  0e06              LSRS     r6,r0,#24
0000bc  1e64              SUBS     r4,r4,#1
0000be  1cbf              ADDS     r7,r7,#2
;;;257        } while (--PixelCnt);
0000c0  f01404ff          ANDS     r4,r4,#0xff
0000c4  d1f2              BNE      |L2.172|
;;;258        if (xsize) {
0000c6  2d00              CMP      r5,#0
0000c8  d003              BEQ      |L2.210|
;;;259          PixelCnt = 4;
0000ca  2404              MOVS     r4,#4
;;;260          pixels = *(++p);
0000cc  f8186f01          LDRB     r6,[r8,#1]!
;;;261          goto PixelLoopXor;
0000d0  e7e8              B        |L2.164|
                  |L2.210|
;;;262        }
;;;263        break;
;;;264      }
;;;265    }
0000d2  e8bd9fff          POP      {r0-r12,pc}
;;;266    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L2.216|
                          DCD      GUI_Context

                          AREA ||i._DrawBitLine4BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine4BPP PROC
;;;270    */
;;;271    static void _DrawBitLine4BPP(GUI_USAGE* pUsage, int x, int y, const U8 GUI_UNI_PTR * p, int Diff, int xsize,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;272                                 const LCD_PIXELINDEX* pTrans, PIXELINDEX* pDest)
;;;273    {
000004  4681              MOV      r9,r0
000006  a80a              ADD      r0,sp,#0x28
000008  468a              MOV      r10,r1
00000a  e8900142          LDM      r0,{r1,r6,r8}
00000e  4693              MOV      r11,r2
000010  461f              MOV      r7,r3
;;;274      U8 pixels;
;;;275      U8 PixelCnt;
;;;276      PixelCnt = 2 - Diff;
;;;277      pixels = (*p) << (Diff << 2);
000012  781a              LDRB     r2,[r3,#0]
000014  008b              LSLS     r3,r1,#2
000016  409a              LSLS     r2,r2,r3
000018  b2d5              UXTB     r5,r2
;;;278      switch (GUI_Context.DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
00001a  4a4f              LDR      r2,|L3.344|
00001c  f1c10002          RSB      r0,r1,#2              ;276
000020  9c0d              LDR      r4,[sp,#0x34]
000022  7c12              LDRB     r2,[r2,#0x10]  ; GUI_Context
000024  b2c0              UXTB     r0,r0                 ;276
000026  f0120203          ANDS     r2,r2,#3
00002a  d01b              BEQ      |L3.100|
00002c  2a01              CMP      r2,#1
00002e  d07c              BEQ      |L3.298|
000030  2a02              CMP      r2,#2
000032  d13a              BNE      |L3.170|
;;;279    /*
;;;280              * Write mode *
;;;281    */
;;;282      case 0:
;;;283        /* Draw incomplete bytes to the left of center area */
;;;284        if (Diff) {
;;;285          *pDest = *(pTrans + (pixels >> 4));
;;;286          pDest++;
;;;287          xsize--;
;;;288          pixels = *++p;
;;;289        }
;;;290        /* Draw center area (2 pixels in one byte) */
;;;291        if (xsize >= 2) {
;;;292          int i = xsize >> 1;
;;;293          xsize &= 1;
;;;294          do {
;;;295            *pDest     = *(pTrans + (pixels >> 4));   /* Draw 1. (left) pixel */
;;;296            *(pDest+1) = *(pTrans + (pixels & 15));   /* Draw 2. (right) pixel */
;;;297            pDest += 2;
;;;298            pixels = *++p;
;;;299          } while (--i);
;;;300        }
;;;301        /* Draw incomplete bytes to the right of center area */
;;;302        if (xsize) {
;;;303          *pDest = * (pTrans + (pixels >> 4));
;;;304        }
;;;305        break;
;;;306    /*
;;;307              * Transparent draw mode *
;;;308    */
;;;309      case LCD_DRAWMODE_TRANS:
;;;310        /* Draw incomplete bytes to the left of center area */
;;;311        if (Diff) {
000034  b3d9              CBZ      r1,|L3.174|
;;;312          if (pixels & 0xF0) {
000036  0928              LSRS     r0,r5,#4
000038  d00d              BEQ      |L3.86|
;;;313            *pDest = *(pTrans + (pixels >> 4));
00003a  0929              LSRS     r1,r5,#4
;;;314            if (pUsage) {
00003c  f1b90f00          CMP      r9,#0
000040  f8380011          LDRH     r0,[r8,r1,LSL #1]     ;313
000044  8020              STRH     r0,[r4,#0]            ;313
000046  d006              BEQ      |L3.86|
;;;315              GUI_USAGE_AddPixel(pUsage, x, y);
000048  f8d90008          LDR      r0,[r9,#8]
00004c  465a              MOV      r2,r11
00004e  4651              MOV      r1,r10
000050  6803              LDR      r3,[r0,#0]
000052  4648              MOV      r0,r9
000054  4798              BLX      r3
                  |L3.86|
;;;316            }
;;;317          }
;;;318          pDest++;
;;;319          x++;
;;;320          xsize--;
;;;321          pixels = *++p;
000056  1ca4              ADDS     r4,r4,#2
000058  f10a0a01          ADD      r10,r10,#1            ;319
00005c  f8175f01          LDRB     r5,[r7,#1]!
000060  1e76              SUBS     r6,r6,#1
000062  e04c              B        |L3.254|
                  |L3.100|
000064  b139              CBZ      r1,|L3.118|
000066  0929              LSRS     r1,r5,#4              ;285
000068  1e76              SUBS     r6,r6,#1              ;288
00006a  f8380011          LDRH     r0,[r8,r1,LSL #1]     ;285
00006e  f8240b02          STRH     r0,[r4],#2            ;285
000072  f8175f01          LDRB     r5,[r7,#1]!           ;288
                  |L3.118|
000076  2e02              CMP      r6,#2                 ;291
000078  db11              BLT      |L3.158|
00007a  1070              ASRS     r0,r6,#1              ;292
00007c  f0060601          AND      r6,r6,#1              ;293
                  |L3.128|
000080  092a              LSRS     r2,r5,#4              ;295
000082  1e40              SUBS     r0,r0,#1              ;298
000084  f8381012          LDRH     r1,[r8,r2,LSL #1]     ;295
000088  f005020f          AND      r2,r5,#0xf            ;296
00008c  f8241b02          STRH     r1,[r4],#2            ;295
000090  f8381012          LDRH     r1,[r8,r2,LSL #1]     ;296
000094  f8241b02          STRH     r1,[r4],#2            ;296
000098  f8175f01          LDRB     r5,[r7,#1]!           ;298
00009c  d1f0              BNE      |L3.128|
                  |L3.158|
00009e  2e00              CMP      r6,#0                 ;302
0000a0  d003              BEQ      |L3.170|
0000a2  0929              LSRS     r1,r5,#4              ;303
0000a4  f8380011          LDRH     r0,[r8,r1,LSL #1]     ;303
0000a8  8020              STRH     r0,[r4,#0]            ;303
                  |L3.170|
;;;322        }
;;;323        /* Draw center area (2 pixels in one byte) */
;;;324        while (xsize >= 2) {
;;;325          /* Draw 1. (left) pixel */
;;;326          if (pixels & 0xF0) {
;;;327            *pDest = *(pTrans + (pixels >> 4));
;;;328            if (pUsage) {
;;;329              GUI_USAGE_AddPixel(pUsage, x, y);
;;;330            }
;;;331          }
;;;332          /* Draw 2. (right) pixel */
;;;333          if (pixels &= 15) {
;;;334            *(pDest + 1) = *(pTrans + pixels);
;;;335            if (pUsage) {
;;;336              GUI_USAGE_AddPixel(pUsage, x + 1, y);
;;;337            }
;;;338          }
;;;339          pDest += 2;
;;;340          x += 2;
;;;341          xsize -= 2;
;;;342          pixels = *++p;
;;;343        }
;;;344        /* Draw incomplete bytes to the right of center area */
;;;345        if (xsize) {
;;;346          if (pixels >>= 4) {
;;;347            *pDest = *(pTrans + pixels);
;;;348            if (pUsage) {
;;;349              GUI_USAGE_AddPixel(pUsage, x, y);
;;;350            }
;;;351          }
;;;352        }
;;;353        break;
;;;354      case LCD_DRAWMODE_XOR:;
;;;355      PixelLoopXor:
;;;356        if (PixelCnt > xsize)
;;;357          PixelCnt = xsize;
;;;358        xsize -= PixelCnt;
;;;359        do {
;;;360          if ((pixels & 0xc0)) {
;;;361            *pDest ^= 255;
;;;362          }
;;;363          pDest++;
;;;364          pixels <<= 4;
;;;365        } while (--PixelCnt);
;;;366        if (xsize) {
;;;367          PixelCnt = 2;
;;;368          pixels = *(++p);
;;;369          goto PixelLoopXor;
;;;370        }
;;;371        break;
;;;372      }
;;;373    }
0000aa  e8bd9ff0          POP      {r4-r12,pc}
                  |L3.174|
0000ae  e026              B        |L3.254|
                  |L3.176|
0000b0  0928              LSRS     r0,r5,#4              ;326
0000b2  d00d              BEQ      |L3.208|
0000b4  0929              LSRS     r1,r5,#4              ;327
0000b6  f1b90f00          CMP      r9,#0                 ;328
0000ba  f8380011          LDRH     r0,[r8,r1,LSL #1]     ;327
0000be  8020              STRH     r0,[r4,#0]            ;327
0000c0  d006              BEQ      |L3.208|
0000c2  f8d90008          LDR      r0,[r9,#8]            ;329
0000c6  465a              MOV      r2,r11                ;329
0000c8  4651              MOV      r1,r10                ;329
0000ca  6803              LDR      r3,[r0,#0]            ;329
0000cc  4648              MOV      r0,r9                 ;329
0000ce  4798              BLX      r3                    ;329
                  |L3.208|
0000d0  f015000f          ANDS     r0,r5,#0xf            ;333
0000d4  d00d              BEQ      |L3.242|
0000d6  f8380010          LDRH     r0,[r8,r0,LSL #1]     ;334
0000da  8060              STRH     r0,[r4,#2]            ;334
0000dc  f1b90f00          CMP      r9,#0                 ;335
0000e0  d007              BEQ      |L3.242|
0000e2  f8d90008          LDR      r0,[r9,#8]            ;336
0000e6  465a              MOV      r2,r11                ;336
0000e8  f10a0101          ADD      r1,r10,#1             ;336
0000ec  6803              LDR      r3,[r0,#0]            ;336
0000ee  4648              MOV      r0,r9                 ;336
0000f0  4798              BLX      r3                    ;336
                  |L3.242|
0000f2  f8175f01          LDRB     r5,[r7,#1]!           ;342
0000f6  1d24              ADDS     r4,r4,#4              ;342
0000f8  f10a0a02          ADD      r10,r10,#2            ;340
0000fc  1eb6              SUBS     r6,r6,#2              ;342
                  |L3.254|
0000fe  2e02              CMP      r6,#2                 ;324
000100  dad6              BGE      |L3.176|
000102  2e00              CMP      r6,#0                 ;345
000104  d0d1              BEQ      |L3.170|
000106  0928              LSRS     r0,r5,#4              ;346
000108  d0cf              BEQ      |L3.170|
00010a  f8380010          LDRH     r0,[r8,r0,LSL #1]     ;347
00010e  8020              STRH     r0,[r4,#0]            ;347
000110  f1b90f00          CMP      r9,#0                 ;348
000114  d0c9              BEQ      |L3.170|
000116  f8d90008          LDR      r0,[r9,#8]            ;349
00011a  465a              MOV      r2,r11                ;349
00011c  4651              MOV      r1,r10                ;349
00011e  6803              LDR      r3,[r0,#0]            ;349
000120  4648              MOV      r0,r9                 ;349
000122  e8bd5ff0          POP      {r4-r12,lr}           ;349
000126  4718              BX       r3                    ;349
000128  e7ff              B        |L3.298|
                  |L3.298|
00012a  42b0              CMP      r0,r6                 ;356
00012c  dd00              BLE      |L3.304|
00012e  b2f0              UXTB     r0,r6                 ;357
                  |L3.304|
000130  1a36              SUBS     r6,r6,r0              ;358
                  |L3.306|
000132  09a9              LSRS     r1,r5,#6              ;360
000134  d003              BEQ      |L3.318|
000136  8821              LDRH     r1,[r4,#0]            ;361
000138  f08101ff          EOR      r1,r1,#0xff           ;361
00013c  8021              STRH     r1,[r4,#0]            ;361
                  |L3.318|
00013e  0729              LSLS     r1,r5,#28             ;361
000140  0e0d              LSRS     r5,r1,#24             ;364
000142  1e40              SUBS     r0,r0,#1              ;364
000144  1ca4              ADDS     r4,r4,#2              ;364
000146  f01000ff          ANDS     r0,r0,#0xff           ;365
00014a  d1f2              BNE      |L3.306|
00014c  2e00              CMP      r6,#0                 ;366
00014e  d0ac              BEQ      |L3.170|
000150  2002              MOVS     r0,#2                 ;367
000152  f8175f01          LDRB     r5,[r7,#1]!           ;368
000156  e7e8              B        |L3.298|
;;;374    
                          ENDP

                  |L3.344|
                          DCD      GUI_Context

                          AREA ||i._DrawBitmap||, CODE, READONLY, ALIGN=2

                  _DrawBitmap PROC
;;;449    */
;;;450    static void _DrawBitmap(int x0, int y0, int xsize, int ysize,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;451                            int BitsPerPixel, int BytesPerLine,
;;;452                            const U8 GUI_UNI_PTR * pData, int Diff, const LCD_PIXELINDEX* pTrans)
;;;453    {
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
;;;454      int i;
;;;455      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000008  4887              LDR      r0,|L4.552|
00000a  e9dd8716          LDRD     r8,r7,[sp,#0x58]      ;453
00000e  469a              MOV      r10,r3                ;453
000010  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
000014  f8dd9050          LDR      r9,[sp,#0x50]
000018  f7fffffe          BL       GUI_ALLOC_h2p
00001c  4606              MOV      r6,r0
;;;456      GUI_USAGE*  pUsage = (pDev->hUsage) ? GUI_USAGE_H2P(pDev->hUsage) : 0;
00001e  f9b00018          LDRSH    r0,[r0,#0x18]
000022  b108              CBZ      r0,|L4.40|
000024  f7fffffe          BL       GUI_ALLOC_h2p
                  |L4.40|
;;;457      unsigned    BytesPerLineDest;
;;;458      PIXELINDEX* pDest;
;;;459      BytesPerLineDest = pDev->BytesPerLine;
000028  9005              STR      r0,[sp,#0x14]
00002a  68f0              LDR      r0,[r6,#0xc]
;;;460      x0 += Diff;
00002c  9006              STR      r0,[sp,#0x18]
00002e  19e0              ADDS     r0,r4,r7
;;;461      /* Mark all affected pixels dirty unless transparency is set */
;;;462      if (pUsage) {
000030  9007              STR      r0,[sp,#0x1c]
000032  9805              LDR      r0,[sp,#0x14]
000034  b158              CBZ      r0,|L4.78|
;;;463        if ((GUI_Context.DrawMode & LCD_DRAWMODE_TRANS) == 0) {
000036  487c              LDR      r0,|L4.552|
000038  7c00              LDRB     r0,[r0,#0x10]  ; GUI_Context
00003a  0780              LSLS     r0,r0,#30
00003c  d407              BMI      |L4.78|
;;;464          GUI_USAGE_AddRect(pUsage, x0, y0 , xsize, ysize);
00003e  f8cda000          STR      r10,[sp,#0]
000042  ac07              ADD      r4,sp,#0x1c
000044  9805              LDR      r0,[sp,#0x14]
000046  e894000e          LDM      r4,{r1-r3}
00004a  f7fffffe          BL       GUI_USAGE_AddRect
                  |L4.78|
00004e  e9dd0107          LDRD     r0,r1,[sp,#0x1c]
;;;465        }
;;;466      }
;;;467      pDest = _XY2PTR(x0, y0);
000052  f7fffffe          BL       _XY2PTR
000056  4604              MOV      r4,r0
;;;468    #if BITSPERPIXEL == 16
;;;469      /* handle 16 bpp bitmaps in high color modes, but only without palette */
;;;470      if (BitsPerPixel == 16) {
000058  f1b90f10          CMP      r9,#0x10
00005c  d006              BEQ      |L4.108|
;;;471        for (i = 0; i < ysize; i++) {
;;;472          _DrawBitLine16BPP_DDB(pUsage, x0, i + y0, (const U16*)pData, xsize, pDest);
;;;473          pData += BytesPerLine;
;;;474          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;475        }
;;;476        return;
;;;477      }
;;;478    #endif
;;;479      /* Handle 8 bpp bitmaps seperately as we have different routine bitmaps with or without palette */
;;;480      if (BitsPerPixel == 8) {
00005e  f1b90f08          CMP      r9,#8
000062  d03a              BEQ      |L4.218|
;;;481        for (i = 0; i < ysize; i++) {
;;;482          if (pTrans) {
;;;483            _DrawBitLine8BPP(pUsage, x0, i + y0, pData, xsize, pTrans, pDest);
;;;484          } else {
;;;485            _DrawBitLine8BPP_DDB(pUsage, x0, i + y0, pData, xsize, pDest);
;;;486          }
;;;487          pData += BytesPerLine;
;;;488          pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;489        }
;;;490        return;
;;;491      }
;;;492      /* Use aID for bitmaps without palette */
;;;493      if (!pTrans) {
000064  9818              LDR      r0,[sp,#0x60]
000066  2800              CMP      r0,#0
000068  d06f              BEQ      |L4.330|
00006a  e09e              B        |L4.426|
                  |L4.108|
00006c  2000              MOVS     r0,#0                 ;471
00006e  e02e              B        |L4.206|
                  |L4.112|
000070  9805              LDR      r0,[sp,#0x14]         ;472
000072  9000              STR      r0,[sp,#0]            ;472
000074  e9dd9107          LDRD     r9,r1,[sp,#0x1c]      ;472
000078  eb0b0001          ADD      r0,r11,r1             ;472
00007c  9001              STR      r0,[sp,#4]            ;472
00007e  486a              LDR      r0,|L4.552|
000080  9f09              LDR      r7,[sp,#0x24]         ;472
000082  4645              MOV      r5,r8                 ;472
000084  7c00              LDRB     r0,[r0,#0x10]         ;472  ; GUI_Context
000086  4626              MOV      r6,r4                 ;472
000088  f0100003          ANDS     r0,r0,#3              ;472
00008c  d002              BEQ      |L4.148|
00008e  2802              CMP      r0,#2                 ;472
000090  d117              BNE      |L4.194|
000092  e005              B        |L4.160|
                  |L4.148|
000094  007a              LSLS     r2,r7,#1              ;472
000096  4641              MOV      r1,r8                 ;472
000098  4620              MOV      r0,r4                 ;472
00009a  f7fffffe          BL       __aeabi_memcpy
00009e  e010              B        |L4.194|
                  |L4.160|
0000a0  8828              LDRH     r0,[r5,#0]            ;472
0000a2  b140              CBZ      r0,|L4.182|
0000a4  8030              STRH     r0,[r6,#0]            ;472
0000a6  9800              LDR      r0,[sp,#0]            ;472
0000a8  b128              CBZ      r0,|L4.182|
0000aa  6880              LDR      r0,[r0,#8]            ;472
0000ac  4649              MOV      r1,r9                 ;472
0000ae  6803              LDR      r3,[r0,#0]            ;472
0000b0  e9dd0200          LDRD     r0,r2,[sp,#0]         ;472
0000b4  4798              BLX      r3                    ;472
                  |L4.182|
0000b6  1cad              ADDS     r5,r5,#2              ;472
0000b8  1cb6              ADDS     r6,r6,#2              ;472
0000ba  f1090901          ADD      r9,r9,#1              ;472
0000be  1e7f              SUBS     r7,r7,#1              ;472
0000c0  d1ee              BNE      |L4.160|
                  |L4.194|
0000c2  9806              LDR      r0,[sp,#0x18]         ;474
0000c4  9915              LDR      r1,[sp,#0x54]         ;473
0000c6  4404              ADD      r4,r4,r0              ;474
0000c8  4488              ADD      r8,r8,r1              ;473
0000ca  f10b0001          ADD      r0,r11,#1             ;471
                  |L4.206|
0000ce  4683              MOV      r11,r0                ;471
0000d0  4550              CMP      r0,r10                ;471
0000d2  dbcd              BLT      |L4.112|
                  |L4.212|
;;;494        pTrans = aID;
;;;495      }
;;;496      for (i = 0; i < ysize; i++) {
;;;497        switch (BitsPerPixel) {
;;;498        case 1:
;;;499          _DrawBitLine1BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDev, pDest);
;;;500          break;
;;;501        case 2:
;;;502          _DrawBitLine2BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDest);
;;;503          break;
;;;504        case 4:
;;;505          _DrawBitLine4BPP(pUsage, x0, i + y0, pData, Diff, xsize, pTrans, pDest);
;;;506          break;
;;;507        }
;;;508        pData += BytesPerLine;
;;;509        pDest = (PIXELINDEX*)((U8*)pDest + BytesPerLineDest); 
;;;510      }
;;;511    }
0000d4  b00b              ADD      sp,sp,#0x2c
0000d6  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.218|
0000da  2000              MOVS     r0,#0                 ;481
0000dc  e05f              B        |L4.414|
                  |L4.222|
0000de  9818              LDR      r0,[sp,#0x60]         ;482
0000e0  2800              CMP      r0,#0                 ;482
0000e2  9805              LDR      r0,[sp,#0x14]         ;485
0000e4  9000              STR      r0,[sp,#0]            ;485
0000e6  e9dd9107          LDRD     r9,r1,[sp,#0x1c]      ;485
0000ea  eb0b0001          ADD      r0,r11,r1             ;485
0000ee  d02d              BEQ      |L4.332|
0000f0  9002              STR      r0,[sp,#8]            ;483
0000f2  9818              LDR      r0,[sp,#0x60]         ;483
0000f4  9001              STR      r0,[sp,#4]            ;483
0000f6  484c              LDR      r0,|L4.552|
0000f8  9f09              LDR      r7,[sp,#0x24]         ;483
0000fa  4645              MOV      r5,r8                 ;483
0000fc  7c00              LDRB     r0,[r0,#0x10]         ;483  ; GUI_Context
0000fe  4626              MOV      r6,r4                 ;483
000100  f0100003          ANDS     r0,r0,#3              ;483
000104  d002              BEQ      |L4.268|
000106  2802              CMP      r0,#2                 ;483
000108  d143              BNE      |L4.402|
00010a  e009              B        |L4.288|
                  |L4.268|
00010c  f8151b01          LDRB     r1,[r5],#1            ;483
000110  9801              LDR      r0,[sp,#4]            ;483
000112  1e7f              SUBS     r7,r7,#1              ;483
000114  f8300011          LDRH     r0,[r0,r1,LSL #1]     ;483
000118  f8260b02          STRH     r0,[r6],#2            ;483
00011c  d1f6              BNE      |L4.268|
00011e  e038              B        |L4.402|
                  |L4.288|
000120  7828              LDRB     r0,[r5,#0]            ;483
000122  b158              CBZ      r0,|L4.316|
000124  9901              LDR      r1,[sp,#4]            ;483
000126  f8310010          LDRH     r0,[r1,r0,LSL #1]     ;483
00012a  8030              STRH     r0,[r6,#0]            ;483
00012c  9800              LDR      r0,[sp,#0]            ;483
00012e  b128              CBZ      r0,|L4.316|
000130  6880              LDR      r0,[r0,#8]            ;483
000132  4649              MOV      r1,r9                 ;483
000134  9a02              LDR      r2,[sp,#8]            ;483
000136  6803              LDR      r3,[r0,#0]            ;483
000138  9800              LDR      r0,[sp,#0]            ;483
00013a  4798              BLX      r3                    ;483
                  |L4.316|
00013c  1c6d              ADDS     r5,r5,#1              ;483
00013e  1cb6              ADDS     r6,r6,#2              ;483
000140  f1090901          ADD      r9,r9,#1              ;483
000144  1e7f              SUBS     r7,r7,#1              ;483
000146  d1eb              BNE      |L4.288|
000148  e023              B        |L4.402|
                  |L4.330|
00014a  e02c              B        |L4.422|
                  |L4.332|
00014c  9001              STR      r0,[sp,#4]            ;485
00014e  4836              LDR      r0,|L4.552|
000150  9f09              LDR      r7,[sp,#0x24]         ;485
000152  4645              MOV      r5,r8                 ;485
000154  7c00              LDRB     r0,[r0,#0x10]         ;485  ; GUI_Context
000156  4626              MOV      r6,r4                 ;485
000158  f0100003          ANDS     r0,r0,#3              ;485
00015c  d002              BEQ      |L4.356|
00015e  2802              CMP      r0,#2                 ;485
000160  d117              BNE      |L4.402|
000162  e005              B        |L4.368|
                  |L4.356|
000164  463a              MOV      r2,r7                 ;485
000166  4641              MOV      r1,r8                 ;485
000168  4620              MOV      r0,r4                 ;485
00016a  f7fffffe          BL       __aeabi_memcpy
00016e  e010              B        |L4.402|
                  |L4.368|
000170  7828              LDRB     r0,[r5,#0]            ;485
000172  b140              CBZ      r0,|L4.390|
000174  8030              STRH     r0,[r6,#0]            ;485
000176  9800              LDR      r0,[sp,#0]            ;485
000178  b128              CBZ      r0,|L4.390|
00017a  6880              LDR      r0,[r0,#8]            ;485
00017c  4649              MOV      r1,r9                 ;485
00017e  6803              LDR      r3,[r0,#0]            ;485
000180  e9dd0200          LDRD     r0,r2,[sp,#0]         ;485
000184  4798              BLX      r3                    ;485
                  |L4.390|
000186  1c6d              ADDS     r5,r5,#1              ;485
000188  1cb6              ADDS     r6,r6,#2              ;485
00018a  f1090901          ADD      r9,r9,#1              ;485
00018e  1e7f              SUBS     r7,r7,#1              ;485
000190  d1ee              BNE      |L4.368|
                  |L4.402|
000192  9806              LDR      r0,[sp,#0x18]         ;488
000194  9915              LDR      r1,[sp,#0x54]         ;487
000196  4404              ADD      r4,r4,r0              ;488
000198  4488              ADD      r8,r8,r1              ;487
00019a  f10b0001          ADD      r0,r11,#1             ;481
                  |L4.414|
00019e  4683              MOV      r11,r0                ;481
0001a0  4550              CMP      r0,r10                ;481
0001a2  db9c              BLT      |L4.222|
0001a4  e796              B        |L4.212|
                  |L4.422|
0001a6  4821              LDR      r0,|L4.556|
0001a8  9018              STR      r0,[sp,#0x60]         ;494
                  |L4.426|
0001aa  2500              MOVS     r5,#0                 ;496
0001ac  e038              B        |L4.544|
                  |L4.430|
0001ae  4648              MOV      r0,r9                 ;497
0001b0  f1b90f01          CMP      r9,#1                 ;497
0001b4  d005              BEQ      |L4.450|
0001b6  2802              CMP      r0,#2                 ;497
0001b8  d012              BEQ      |L4.480|
0001ba  f1b90f04          CMP      r9,#4                 ;497
0001be  d12a              BNE      |L4.534|
0001c0  e01c              B        |L4.508|
                  |L4.450|
0001c2  9918              LDR      r1,[sp,#0x60]         ;499
0001c4  9809              LDR      r0,[sp,#0x24]         ;499
0001c6  aa01              ADD      r2,sp,#4              ;499
0001c8  9700              STR      r7,[sp,#0]            ;499
0001ca  9404              STR      r4,[sp,#0x10]         ;499
0001cc  e8820043          STM      r2,{r0,r1,r6}         ;499
0001d0  9808              LDR      r0,[sp,#0x20]         ;499
0001d2  4643              MOV      r3,r8                 ;499
0001d4  182a              ADDS     r2,r5,r0              ;499
0001d6  9907              LDR      r1,[sp,#0x1c]         ;499
0001d8  9805              LDR      r0,[sp,#0x14]         ;499
0001da  f7fffffe          BL       _DrawBitLine1BPP
0001de  e01a              B        |L4.534|
                  |L4.480|
0001e0  9809              LDR      r0,[sp,#0x24]         ;502
0001e2  aa01              ADD      r2,sp,#4              ;502
0001e4  9918              LDR      r1,[sp,#0x60]         ;502
0001e6  9700              STR      r7,[sp,#0]            ;502
0001e8  e8820013          STM      r2,{r0,r1,r4}         ;502
0001ec  9808              LDR      r0,[sp,#0x20]         ;502
0001ee  4643              MOV      r3,r8                 ;502
0001f0  182a              ADDS     r2,r5,r0              ;502
0001f2  9907              LDR      r1,[sp,#0x1c]         ;502
0001f4  9805              LDR      r0,[sp,#0x14]         ;502
0001f6  f7fffffe          BL       _DrawBitLine2BPP
0001fa  e00c              B        |L4.534|
                  |L4.508|
0001fc  9809              LDR      r0,[sp,#0x24]         ;505
0001fe  aa01              ADD      r2,sp,#4              ;505
000200  9918              LDR      r1,[sp,#0x60]         ;505
000202  9700              STR      r7,[sp,#0]            ;505
000204  e8820013          STM      r2,{r0,r1,r4}         ;505
000208  9808              LDR      r0,[sp,#0x20]         ;505
00020a  4643              MOV      r3,r8                 ;505
00020c  182a              ADDS     r2,r5,r0              ;505
00020e  9907              LDR      r1,[sp,#0x1c]         ;505
000210  9805              LDR      r0,[sp,#0x14]         ;505
000212  f7fffffe          BL       _DrawBitLine4BPP
                  |L4.534|
000216  9915              LDR      r1,[sp,#0x54]         ;508
000218  9806              LDR      r0,[sp,#0x18]         ;509
00021a  4488              ADD      r8,r8,r1              ;508
00021c  4404              ADD      r4,r4,r0              ;509
00021e  1c6d              ADDS     r5,r5,#1              ;509
                  |L4.544|
000220  4555              CMP      r5,r10                ;496
000222  dbc4              BLT      |L4.430|
000224  e756              B        |L4.212|
;;;512    
                          ENDP

000226  0000              DCW      0x0000
                  |L4.552|
                          DCD      GUI_Context
                  |L4.556|
                          DCD      ||.constdata||

                          AREA ||i._DrawHLine||, CODE, READONLY, ALIGN=1

                  _DrawHLine PROC
;;;557    */
;;;558    static void _DrawHLine(int x0, int y, int x1) {
000000  460b              MOV      r3,r1
;;;559      _FillRect(x0, y, x1, y);
000002  f7ffbffe          B.W      _FillRect
;;;560    }
;;;561    
                          ENDP


                          AREA ||i._DrawVLine||, CODE, READONLY, ALIGN=2

                  _DrawVLine PROC
;;;565    */
;;;566    static void _DrawVLine(int x , int y0, int y1) {
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;567      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000004  f8df809c          LDR      r8,|L6.164|
000008  4691              MOV      r9,r2                 ;566
00000a  460d              MOV      r5,r1                 ;566
00000c  f9b80050          LDRSH    r0,[r8,#0x50]  ; GUI_Context
000010  f7fffffe          BL       GUI_ALLOC_h2p
;;;568      GUI_USAGE_h hUsage = pDev->hUsage; 
000014  f9b07018          LDRSH    r7,[r0,#0x18]
000018  4606              MOV      r6,r0                 ;567
;;;569      GUI_USAGE*  pUsage = hUsage ? GUI_USAGE_H2P(hUsage) : NULL;
00001a  b11f              CBZ      r7,|L6.36|
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       GUI_ALLOC_h2p
000022  e000              B        |L6.38|
                  |L6.36|
000024  2000              MOVS     r0,#0
                  |L6.38|
000026  4683              MOV      r11,r0
;;;570      PIXELINDEX* pData  = _XY2PTR(x, y0);
000028  4629              MOV      r1,r5
00002a  9800              LDR      r0,[sp,#0]
00002c  f7fffffe          BL       _XY2PTR
000030  4604              MOV      r4,r0
;;;571      unsigned BytesPerLine = pDev->BytesPerLine;
;;;572    
;;;573      if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
000032  f8980010          LDRB     r0,[r8,#0x10]  ; GUI_Context
000036  f8d6a00c          LDR      r10,[r6,#0xc]
00003a  07c0              LSLS     r0,r0,#31
00003c  d016              BEQ      |L6.108|
;;;574        PIXELINDEX IndexMask;
;;;575        IndexMask = pDev->pfGetIndexMask();
00003e  6a70              LDR      r0,[r6,#0x24]
000040  4780              BLX      r0
000042  fa1ff880          UXTH     r8,r0
                  |L6.70|
;;;576        do {
;;;577          if (hUsage) {
000046  b137              CBZ      r7,|L6.86|
;;;578            GUI_USAGE_AddPixel(pUsage, x, y0);
000048  f8db0008          LDR      r0,[r11,#8]
00004c  462a              MOV      r2,r5
00004e  9900              LDR      r1,[sp,#0]
000050  6803              LDR      r3,[r0,#0]
000052  4658              MOV      r0,r11
000054  4798              BLX      r3
                  |L6.86|
;;;579          }
;;;580          *pData = *pData ^ IndexMask;
000056  8820              LDRH     r0,[r4,#0]
;;;581          pData = (PIXELINDEX*)((U8*)pData + pDev->BytesPerLine); /* Same as "pData += pDev->BytesPerLine >> 1;", Just more efficient */
000058  1c6d              ADDS     r5,r5,#1
00005a  ea800008          EOR      r0,r0,r8              ;580
00005e  8020              STRH     r0,[r4,#0]            ;580
000060  68f0              LDR      r0,[r6,#0xc]
;;;582        } while (++y0 <= y1);
000062  454d              CMP      r5,r9
000064  4404              ADD      r4,r4,r0              ;581
000066  ddee              BLE      |L6.70|
                  |L6.104|
;;;583      } else {
;;;584        if (hUsage) {
;;;585          do {
;;;586            GUI_USAGE_AddPixel(pUsage, x, y0);
;;;587            *pData = LCD_COLORINDEX;
;;;588            pData = (PIXELINDEX*)((U8*)pData + BytesPerLine); /* Same as "pData += pDev->BytesPerLine >> 1;", Just more efficient */
;;;589          } while (++y0 <= y1);
;;;590        } else {
;;;591          unsigned NumPixels;
;;;592          NumPixels = y1 - y0 + 1;
;;;593          do {
;;;594            *pData = LCD_COLORINDEX;
;;;595            pData = (PIXELINDEX*)((U8*)pData + BytesPerLine); /* Same as "pData += pDev->BytesPerLine >> 1;", Just more efficient */
;;;596          } while (--NumPixels);
;;;597        }
;;;598      }
;;;599    }
000068  e8bd8ffe          POP      {r1-r11,pc}
                  |L6.108|
00006c  b17f              CBZ      r7,|L6.142|
00006e  bf00              NOP                            ;586
                  |L6.112|
000070  f8db0008          LDR      r0,[r11,#8]           ;586
000074  462a              MOV      r2,r5                 ;586
000076  9900              LDR      r1,[sp,#0]            ;586
000078  6803              LDR      r3,[r0,#0]            ;586
00007a  4658              MOV      r0,r11                ;586
00007c  4798              BLX      r3                    ;586
00007e  f8b80002          LDRH     r0,[r8,#2]            ;587  ; GUI_Context
000082  8020              STRH     r0,[r4,#0]            ;587
000084  1c6d              ADDS     r5,r5,#1              ;588
000086  4454              ADD      r4,r4,r10             ;588
000088  454d              CMP      r5,r9                 ;589
00008a  ddf1              BLE      |L6.112|
00008c  e7ec              B        |L6.104|
                  |L6.142|
00008e  eba90005          SUB      r0,r9,r5              ;592
000092  1c40              ADDS     r0,r0,#1              ;592
                  |L6.148|
000094  f8b81002          LDRH     r1,[r8,#2]            ;594  ; GUI_Context
000098  8021              STRH     r1,[r4,#0]            ;594
00009a  4454              ADD      r4,r4,r10             ;595
00009c  1e40              SUBS     r0,r0,#1              ;595
00009e  d1f9              BNE      |L6.148|
0000a0  e7e2              B        |L6.104|
;;;600    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L6.164|
                          DCD      GUI_Context

                          AREA ||i._FillRect||, CODE, READONLY, ALIGN=2

                  _FillRect PROC
;;;516    */
;;;517    static void _FillRect(int x0, int y0, int x1, int y1) {
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;518      unsigned BytesPerLine;
;;;519      int Len;
;;;520      GUI_MEMDEV* pDev   = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000004  f8dfb080          LDR      r11,|L7.136|
000008  4604              MOV      r4,r0                 ;517
00000a  4698              MOV      r8,r3                 ;517
00000c  4617              MOV      r7,r2                 ;517
00000e  460d              MOV      r5,r1                 ;517
000010  f9bb0050          LDRSH    r0,[r11,#0x50]  ; GUI_Context
000014  f7fffffe          BL       GUI_ALLOC_h2p
000018  4681              MOV      r9,r0
;;;521      PIXELINDEX* pData  = _XY2PTR(x0, y0);
00001a  4629              MOV      r1,r5
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       _XY2PTR
000022  4606              MOV      r6,r0
;;;522      BytesPerLine = pDev->BytesPerLine;
;;;523      Len = x1 - x0 + 1;
000024  1b38              SUBS     r0,r7,r4
000026  1c40              ADDS     r0,r0,#1
000028  f8d9a00c          LDR      r10,[r9,#0xc]
;;;524      /* Mark rectangle as modified */
;;;525      if (pDev->hUsage) {
00002c  9001              STR      r0,[sp,#4]
00002e  f9b90018          LDRSH    r0,[r9,#0x18]
000032  b320              CBZ      r0,|L7.126|
;;;526        GUI_USAGE_AddRect(GUI_USAGE_H2P(pDev->hUsage), x0, y0, Len, y1 - y0 + 1);
000034  f7fffffe          BL       GUI_ALLOC_h2p
000038  eba80105          SUB      r1,r8,r5
00003c  1c49              ADDS     r1,r1,#1
00003e  9100              STR      r1,[sp,#0]
000040  462a              MOV      r2,r5
000042  4621              MOV      r1,r4
000044  9b01              LDR      r3,[sp,#4]
000046  f7fffffe          BL       GUI_USAGE_AddRect
00004a  e018              B        |L7.126|
                  |L7.76|
;;;527      }
;;;528      /* Do the drawing */
;;;529      for (; y0 <= y1; y0++) {
;;;530        if (GUI_Context.DrawMode & LCD_DRAWMODE_XOR) {
00004c  f89b1010          LDRB     r1,[r11,#0x10]  ; GUI_Context
000050  07c9              LSLS     r1,r1,#31
000052  d00c              BEQ      |L7.110|
;;;531          int RemPixels;
;;;532          PIXELINDEX* pDest;
;;;533          PIXELINDEX IndexMask;
;;;534          RemPixels = Len;
;;;535          pDest  = pData;
;;;536          IndexMask = pDev->pfGetIndexMask();
000054  f8d90024          LDR      r0,[r9,#0x24]
000058  4634              MOV      r4,r6                 ;535
00005a  9f01              LDR      r7,[sp,#4]
00005c  4780              BLX      r0
00005e  b280              UXTH     r0,r0
                  |L7.96|
;;;537          do {
;;;538            *pDest = *pDest ^ IndexMask;
000060  8821              LDRH     r1,[r4,#0]
000062  4041              EORS     r1,r1,r0
000064  f8241b02          STRH     r1,[r4],#2
000068  1e7f              SUBS     r7,r7,#1
;;;539            pDest++;
;;;540          } while (--RemPixels);
00006a  d1f9              BNE      |L7.96|
00006c  e005              B        |L7.122|
                  |L7.110|
;;;541        } else {  /* Fill */
;;;542          #if BITSPERPIXEL == 8
;;;543            GUI_MEMSET(pData, LCD_COLORINDEX, Len);
;;;544          #elif BITSPERPIXEL == 16
;;;545            GUI__memset16(pData, LCD_COLORINDEX, Len);
00006e  f8bb1002          LDRH     r1,[r11,#2]  ; GUI_Context
000072  4630              MOV      r0,r6
000074  9a01              LDR      r2,[sp,#4]
000076  f7fffffe          BL       GUI__memset16
                  |L7.122|
;;;546          #else
;;;547            #error Unsupported
;;;548          #endif
;;;549        }
;;;550        pData = (PIXELINDEX*)((U8*)pData + BytesPerLine); 
00007a  4456              ADD      r6,r6,r10
00007c  1c6d              ADDS     r5,r5,#1
                  |L7.126|
00007e  4545              CMP      r5,r8                 ;529
000080  dde4              BLE      |L7.76|
;;;551      }
;;;552    }
000082  e8bd9ffc          POP      {r2-r12,pc}
;;;553    
                          ENDP

000086  0000              DCW      0x0000
                  |L7.136|
                          DCD      GUI_Context

                          AREA ||i._GetPixelIndex||, CODE, READONLY, ALIGN=1

                  _GetPixelIndex PROC
;;;634    */
;;;635    static unsigned int _GetPixelIndex(int x, int y) {
000000  b510              PUSH     {r4,lr}
;;;636      PIXELINDEX* pData = _XY2PTR(x, y);
000002  f7fffffe          BL       _XY2PTR
;;;637      return *pData;
000006  8800              LDRH     r0,[r0,#0]
;;;638    }
000008  bd10              POP      {r4,pc}
;;;639    
                          ENDP


                          AREA ||i._SetPixelIndex||, CODE, READONLY, ALIGN=2

                  _SetPixelIndex PROC
;;;604    */
;;;605    static void _SetPixelIndex(int x, int y, int Index) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
;;;606      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000006  4810              LDR      r0,|L9.72|
000008  4615              MOV      r5,r2                 ;605
00000a  460e              MOV      r6,r1                 ;605
00000c  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
000010  f7fffffe          BL       GUI_ALLOC_h2p
;;;607      GUI_USAGE_h hUsage = pDev->hUsage; 
000014  f9b04018          LDRSH    r4,[r0,#0x18]
;;;608      PIXELINDEX* pData = _XY2PTR(x, y);
000018  4631              MOV      r1,r6
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       _XY2PTR
;;;609      *pData = Index;
000020  8005              STRH     r5,[r0,#0]
;;;610      if (hUsage) {
000022  2c00              CMP      r4,#0
000024  d00e              BEQ      |L9.68|
;;;611        GUI_USAGE_AddPixel(GUI_USAGE_H2P(hUsage), x, y);
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       GUI_ALLOC_h2p
00002c  4605              MOV      r5,r0
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       GUI_ALLOC_h2p
000034  6880              LDR      r0,[r0,#8]
000036  4632              MOV      r2,r6
000038  4639              MOV      r1,r7
00003a  6803              LDR      r3,[r0,#0]
00003c  4628              MOV      r0,r5
00003e  e8bd41f0          POP      {r4-r8,lr}
000042  4718              BX       r3
                  |L9.68|
;;;612      }
;;;613    }
000044  e8bd81f0          POP      {r4-r8,pc}
;;;614    
                          ENDP

                  |L9.72|
                          DCD      GUI_Context

                          AREA ||i._XY2PTR||, CODE, READONLY, ALIGN=2

                  _XY2PTR PROC
;;;73     */
;;;74     static PIXELINDEX* _XY2PTR(int x, int y) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;75       GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000004  480a              LDR      r0,|L10.48|
000006  460c              MOV      r4,r1                 ;74
000008  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
00000c  f7fffffe          BL       GUI_ALLOC_h2p
;;;76       U8 *pData = (U8*)(pDev + 1);
;;;77       #if GUI_DEBUG_LEVEL >= GUI_DEBUG_LEVEL_CHECK_ALL
;;;78         if ((x >= pDev->x0+pDev->XSize) | (x<pDev->x0) | (y >= pDev->y0+pDev->YSize) | (y<pDev->y0)) {
;;;79           GUI_DEBUG_ERROROUT2("_XY2PTR: parameters out of bounds",x,y);
;;;80         }
;;;81       #endif
;;;82       pData += (GUI_ALLOC_DATATYPE_U)(y - pDev->y0) * (GUI_ALLOC_DATATYPE_U)pDev->BytesPerLine;
000010  8842              LDRH     r2,[r0,#2]
000012  8983              LDRH     r3,[r0,#0xc]
000014  f100012c          ADD      r1,r0,#0x2c           ;76
000018  1aa2              SUBS     r2,r4,r2
00001a  b292              UXTH     r2,r2
00001c  b29b              UXTH     r3,r3
00001e  fb021103          MLA      r1,r2,r3,r1
;;;83       return ((PIXELINDEX*)pData) + x - pDev->x0;
000022  f9b00000          LDRSH    r0,[r0,#0]
000026  eb010145          ADD      r1,r1,r5,LSL #1
00002a  eba10040          SUB      r0,r1,r0,LSL #1
;;;84     }
00002e  bd70              POP      {r4-r6,pc}
;;;85     
                          ENDP

                  |L10.48|
                          DCD      GUI_Context

                          AREA ||i._XorPixel||, CODE, READONLY, ALIGN=2

                  _XorPixel PROC
;;;618    */
;;;619    static void _XorPixel(int x, int y) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4680              MOV      r8,r0
;;;620      PIXELINDEX IndexMask;
;;;621      GUI_MEMDEV* pDev = GUI_MEMDEV_H2P(GUI_Context.hDevData);
000006  4813              LDR      r0,|L11.84|
000008  460f              MOV      r7,r1                 ;619
00000a  f9b00050          LDRSH    r0,[r0,#0x50]  ; GUI_Context
00000e  f7fffffe          BL       GUI_ALLOC_h2p
000012  4605              MOV      r5,r0
;;;622      GUI_USAGE_h hUsage = pDev->hUsage; 
000014  f9b06018          LDRSH    r6,[r0,#0x18]
;;;623      PIXELINDEX* pData = _XY2PTR(x, y);
000018  4639              MOV      r1,r7
00001a  4640              MOV      r0,r8
00001c  f7fffffe          BL       _XY2PTR
000020  4604              MOV      r4,r0
;;;624      IndexMask = pDev->pfGetIndexMask();
000022  6a68              LDR      r0,[r5,#0x24]
000024  4780              BLX      r0
;;;625      *pData = *pData ^ IndexMask;
000026  8821              LDRH     r1,[r4,#0]
000028  4041              EORS     r1,r1,r0
00002a  8021              STRH     r1,[r4,#0]
;;;626      if (hUsage) {
00002c  2e00              CMP      r6,#0
00002e  d00e              BEQ      |L11.78|
;;;627        GUI_USAGE_AddPixel(GUI_USAGE_H2P(hUsage), x, y);
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       GUI_ALLOC_h2p
000036  4604              MOV      r4,r0
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       GUI_ALLOC_h2p
00003e  6880              LDR      r0,[r0,#8]
000040  463a              MOV      r2,r7
000042  4641              MOV      r1,r8
000044  6803              LDR      r3,[r0,#0]
000046  4620              MOV      r0,r4
000048  e8bd41f0          POP      {r4-r8,lr}
00004c  4718              BX       r3
                  |L11.78|
;;;628      }
;;;629    }
00004e  e8bd81f0          POP      {r4-r8,pc}
;;;630    
                          ENDP

000052  0000              DCW      0x0000
                  |L11.84|
                          DCD      GUI_Context

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  aID
000000  00000001          DCW      0x0000,0x0001
000004  00020003          DCW      0x0002,0x0003
000008  00040005          DCW      0x0004,0x0005
00000c  00060007          DCW      0x0006,0x0007
000010  00080009          DCW      0x0008,0x0009
000014  000a000b          DCW      0x000a,0x000b
000018  000c000d          DCW      0x000c,0x000d
00001c  000e000f          DCW      0x000e,0x000f

                          AREA ||area_number.15||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.constdata||
                  GUI_MEMDEV__APIList16
                          DCD      GUI_MEMDEV__Color2Index
                          DCD      GUI_MEMDEV__Index2Color
                          DCD      GUI_MEMDEV__GetIndexMask
                          DCD      _DrawBitmap
                          DCD      _DrawHLine
                          DCD      _DrawVLine
                          DCD      _FillRect
                          DCD      _GetPixelIndex
                          DCD      GUI_MEMDEV__GetRect
                          DCD      _SetPixelIndex
                          DCD      _XorPixel
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000010
