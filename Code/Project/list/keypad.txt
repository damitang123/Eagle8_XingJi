; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\keypad.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\keypad.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\Board_Support_Package\keypad.c]
                          THUMB

                          AREA ||i.Get_Key_PressDurationTime||, CODE, READONLY, ALIGN=2

                  Get_Key_PressDurationTime PROC
;;;145    /*返回值单位为ms*/
;;;146    unsigned long Get_Key_PressDurationTime(eKey nKey)
000000  b500              PUSH     {lr}
;;;147    {
;;;148    	return (unsigned long)s_aKeyCnt[KeyValueToKeyIndex(nKey)] * 10;
000002  f7fffffe          BL       KeyValueToKeyIndex
000006  4903              LDR      r1,|L1.20|
000008  f8310010          LDRH     r0,[r1,r0,LSL #1]
00000c  eb000080          ADD      r0,r0,r0,LSL #2
000010  0040              LSLS     r0,r0,#1
;;;149    }
000012  bd00              POP      {pc}
;;;150    
                          ENDP

                  |L1.20|
                          DCD      ||.data||+0xa

                          AREA ||i.Get_Key_Pressed_State||, CODE, READONLY, ALIGN=2

                  Get_Key_Pressed_State PROC
;;;129    
;;;130    bool Get_Key_Pressed_State(eKey nKey)
000000  490a              LDR      r1,|L2.44|
;;;131    {
;;;132    	switch(nKey)
000002  280d              CMP      r0,#0xd
000004  d005              BEQ      |L2.18|
000006  2810              CMP      r0,#0x10
000008  d007              BEQ      |L2.26|
00000a  2812              CMP      r0,#0x12
00000c  d009              BEQ      |L2.34|
;;;133    	{
;;;134    		case eKey_OK:
;;;135    			return (GPIOB->IDR & GPIO_Pin_13) ? true : false;
;;;136    		case eKey_Left:
;;;137    			return (GPIOB->IDR & GPIO_Pin_12) ? false : true;
;;;138    		case eKey_Right:
;;;139    			return (GPIOB->IDR & GPIO_Pin_14) ? false : true;
;;;140    		default:
;;;141    			return false;
00000e  2000              MOVS     r0,#0
;;;142    	}
;;;143    }
000010  4770              BX       lr
                  |L2.18|
000012  6808              LDR      r0,[r1,#0]            ;135
000014  f3c03040          UBFX     r0,r0,#13,#1          ;135
000018  4770              BX       lr
                  |L2.26|
00001a  6808              LDR      r0,[r1,#0]            ;137
00001c  f3403000          SBFX     r0,r0,#12,#1          ;137
000020  e002              B        |L2.40|
                  |L2.34|
000022  6808              LDR      r0,[r1,#0]            ;139
000024  f3403080          SBFX     r0,r0,#14,#1          ;139
                  |L2.40|
000028  1c40              ADDS     r0,r0,#1              ;139
00002a  4770              BX       lr
;;;144    
                          ENDP

                  |L2.44|
                          DCD      0x40010c08

                          AREA ||i.KeyIndexToKeyValue||, CODE, READONLY, ALIGN=1

                  KeyIndexToKeyValue PROC
;;;68     
;;;69     int KeyIndexToKeyValue(char nKeyIndex)
000000  b118              CBZ      r0,|L3.10|
;;;70     {
;;;71     	switch(nKeyIndex)
000002  2801              CMP      r0,#1
000004  d003              BEQ      |L3.14|
000006  2802              CMP      r0,#2
000008  d003              BEQ      |L3.18|
                  |L3.10|
;;;72     	{
;;;73     		case 0:
;;;74     			return eKey_OK;
;;;75     		case 1:
;;;76     			return ekey_Left_Fun;
;;;77     
;;;78     		case 2:
;;;79     			return ekey_Right_Fun;
;;;80     
;;;81     	}
;;;82     	return eKey_OK;
00000a  200d              MOVS     r0,#0xd
;;;83     }
00000c  4770              BX       lr
                  |L3.14|
00000e  2005              MOVS     r0,#5                 ;76
000010  4770              BX       lr
                  |L3.18|
000012  2006              MOVS     r0,#6                 ;79
000014  4770              BX       lr
;;;84     
                          ENDP


                          AREA ||i.KeyLeftIsPressed||, CODE, READONLY, ALIGN=2

                  KeyLeftIsPressed PROC
;;;14     
;;;15     bool KeyLeftIsPressed(void)
000000  b510              PUSH     {r4,lr}
;;;16     {
;;;17     	return GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_12) ? false : true;
000002  f44f5180          MOV      r1,#0x1000
000006  4804              LDR      r0,|L4.24|
000008  f7fffffe          BL       GPIO_ReadInputDataBit
00000c  b108              CBZ      r0,|L4.18|
00000e  2000              MOVS     r0,#0
;;;18     }
000010  bd10              POP      {r4,pc}
                  |L4.18|
000012  2001              MOVS     r0,#1                 ;17
000014  bd10              POP      {r4,pc}
;;;19     
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      0x40010c00

                          AREA ||i.KeyMiddleIsPressed||, CODE, READONLY, ALIGN=2

                  KeyMiddleIsPressed PROC
;;;24     
;;;25     bool KeyMiddleIsPressed(void)
000000  b510              PUSH     {r4,lr}
;;;26     {
;;;27     	return GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_13) ? true : false;
000002  f44f5100          MOV      r1,#0x2000
000006  4803              LDR      r0,|L5.20|
000008  f7fffffe          BL       GPIO_ReadInputDataBit
00000c  2800              CMP      r0,#0
00000e  d000              BEQ      |L5.18|
000010  2001              MOVS     r0,#1
                  |L5.18|
;;;28     }
000012  bd10              POP      {r4,pc}
;;;29     
                          ENDP

                  |L5.20|
                          DCD      0x40010c00

                          AREA ||i.KeyRightIsPressed||, CODE, READONLY, ALIGN=2

                  KeyRightIsPressed PROC
;;;19     
;;;20     bool KeyRightIsPressed(void)
000000  b510              PUSH     {r4,lr}
;;;21     {
;;;22     	return GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_14) ? false : true;
000002  f44f4180          MOV      r1,#0x4000
000006  4804              LDR      r0,|L6.24|
000008  f7fffffe          BL       GPIO_ReadInputDataBit
00000c  b108              CBZ      r0,|L6.18|
00000e  2000              MOVS     r0,#0
;;;23     }
000010  bd10              POP      {r4,pc}
                  |L6.18|
000012  2001              MOVS     r0,#1                 ;22
000014  bd10              POP      {r4,pc}
;;;24     
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      0x40010c00

                          AREA ||i.KeyValueToKeyIndex||, CODE, READONLY, ALIGN=1

                  KeyValueToKeyIndex PROC
;;;84     
;;;85     int KeyValueToKeyIndex(char nKeyValue)
000000  2805              CMP      r0,#5
;;;86     {
000002  d003              BEQ      |L7.12|
;;;87     	switch(nKeyValue)
000004  2806              CMP      r0,#6
000006  d003              BEQ      |L7.16|
;;;88     	{
;;;89     		case eKey_OK:
;;;90     			return 0;
;;;91     		case ekey_Left_Fun:
;;;92     			return 1;
;;;93     
;;;94     		case ekey_Right_Fun:
;;;95     			return 2;
;;;96     
;;;97     	}
;;;98     	return 0;
000008  2000              MOVS     r0,#0
;;;99     }
00000a  4770              BX       lr
                  |L7.12|
00000c  2001              MOVS     r0,#1                 ;92
00000e  4770              BX       lr
                  |L7.16|
000010  2002              MOVS     r0,#2                 ;95
000012  4770              BX       lr
;;;100    
                          ENDP


                          AREA ||i.Key_Init||, CODE, READONLY, ALIGN=2

                  Key_Init PROC
;;;29     
;;;30     void Key_Init(void)
000000  b508              PUSH     {r3,lr}
;;;31     {
;;;32     	GPIO_InitTypeDef GPIO_InitStructure;
;;;33     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12|GPIO_Pin_13|GPIO_Pin_14;
000002  f44f40e0          MOV      r0,#0x7000
000006  f8ad0000          STRH     r0,[sp,#0]
;;;34     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
00000a  2004              MOVS     r0,#4
00000c  f88d0003          STRB     r0,[sp,#3]
;;;35     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
000010  2001              MOVS     r0,#1
000012  f88d0002          STRB     r0,[sp,#2]
;;;36     	GPIO_Init(GPIOB, &GPIO_InitStructure);
000016  4669              MOV      r1,sp
000018  4801              LDR      r0,|L8.32|
00001a  f7fffffe          BL       GPIO_Init
;;;37     }
00001e  bd08              POP      {r3,pc}
;;;38     
                          ENDP

                  |L8.32|
                          DCD      0x40010c00

                          AREA ||i.Key_Scan||, CODE, READONLY, ALIGN=2

                  Key_Scan PROC
;;;152    /*此函数的调用周期10ms*/
;;;153    void Key_Scan(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;154    {
000004  4a40              LDR      r2,|L9.264|
000006  2100              MOVS     r1,#0
000008  4608              MOV      r0,r1
00000a  6813              LDR      r3,[r2,#0]
00000c  f04f0801          MOV      r8,#1
000010  049b              LSLS     r3,r3,#18
000012  d501              BPL      |L9.24|
000014  2101              MOVS     r1,#1
000016  4608              MOV      r0,r1
                  |L9.24|
000018  6813              LDR      r3,[r2,#0]
00001a  04db              LSLS     r3,r3,#19
00001c  d402              BMI      |L9.36|
00001e  f0410102          ORR      r1,r1,#2
000022  1c40              ADDS     r0,r0,#1
                  |L9.36|
000024  6812              LDR      r2,[r2,#0]
000026  0452              LSLS     r2,r2,#17
000028  d402              BMI      |L9.48|
00002a  f0410104          ORR      r1,r1,#4
00002e  1c40              ADDS     r0,r0,#1
                  |L9.48|
;;;155    	unsigned char i, nMutiKeyCnt;
;;;156    	static unsigned short nKey;
;;;157    
;;;158    	nKey = Get_Key_Value(&nMutiKeyCnt);
000030  4d36              LDR      r5,|L9.268|
000032  2700              MOVS     r7,#0
;;;159    
;;;160    	if(nMutiKeyCnt && nMutiKeyCnt != 1)
;;;161    	{
;;;162    		for(i = 0; i < KEY_TOTAL_COUNTER; i++)
;;;163    		{
;;;164    			s_aKeyCnt[i] = 0;
000034  f105060a          ADD      r6,r5,#0xa
000038  8069              STRH     r1,[r5,#2]            ;158
00003a  b168              CBZ      r0,|L9.88|
00003c  2801              CMP      r0,#1                 ;160
00003e  d00b              BEQ      |L9.88|
000040  f05f0000          MOVS.W   r0,#0                 ;162
                  |L9.68|
000044  f8267010          STRH     r7,[r6,r0,LSL #1]
000048  1c40              ADDS     r0,r0,#1
00004a  b2c0              UXTB     r0,r0                 ;162
00004c  2803              CMP      r0,#3                 ;162
00004e  d3f9              BCC      |L9.68|
;;;165    		}
;;;166    		s_bInvalidComblinationKey = true;
000050  f8858001          STRB     r8,[r5,#1]
                  |L9.84|
;;;167    	}
;;;168    	else
;;;169    	{
;;;170    		if(s_bInvalidComblinationKey)
;;;171    		{
;;;172    			if(nKey == 0)
;;;173    			{
;;;174    				s_bInvalidComblinationKey = false;
;;;175    				GUI_StoreKeyMsg(eKey_OK, eKeyIgnore);
;;;176    			}
;;;177    			else
;;;178    			{
;;;179    				return;
;;;180    			}
;;;181    		}
;;;182    
;;;183    		for(i = 0; i < KEY_TOTAL_COUNTER; i++)
;;;184    		{
;;;185    			if(nKey & (1 << i))
;;;186    			{
;;;187    				s_aKeyCnt[i]++;
;;;188    				
;;;189    				if(s_aKeyCnt[i] == 3)	
;;;190    				{
;;;191    					Key_Press_Hook(i,s_aKeyCnt[i]);
;;;192    				}
;;;193    				else if(s_aKeyCnt[i] > 100 )
;;;194    				{
;;;195    					if(s_aKeyCnt[i] == 150)
;;;196    					{
;;;197    						g_bLongKeyEvent[i] = true;
;;;198    					}
;;;199    				}
;;;200    			}
;;;201    			else if(s_aKeyCnt[i] > 3)
;;;202    			{
;;;203    				s_aKeyCnt[i] = 0;
;;;204    				g_bShortKeyEvent[i] = true;
;;;205    				Key_Release_Hook(i);
;;;206    			}
;;;207    			else
;;;208    			{
;;;209    				s_aKeyCnt[i] = 0;
;;;210    			}
;;;211    		}
;;;212    	}
;;;213    }
000054  e8bd87f0          POP      {r4-r10,pc}
                  |L9.88|
000058  7868              LDRB     r0,[r5,#1]            ;170  ; s_bInvalidComblinationKey
00005a  b130              CBZ      r0,|L9.106|
00005c  2900              CMP      r1,#0                 ;172
00005e  d1f9              BNE      |L9.84|
000060  706f              STRB     r7,[r5,#1]            ;174
000062  2103              MOVS     r1,#3                 ;175
000064  200d              MOVS     r0,#0xd               ;175
000066  f7fffffe          BL       GUI_StoreKeyMsg
                  |L9.106|
00006a  46c1              MOV      r9,r8                 ;175
00006c  f8dfa0a0          LDR      r10,|L9.272|
000070  2400              MOVS     r4,#0                 ;183
000072  46b0              MOV      r8,r6                 ;164
                  |L9.116|
000074  8869              LDRH     r1,[r5,#2]            ;185  ; nKey
000076  fa09f004          LSL      r0,r9,r4              ;185
00007a  464e              MOV      r6,r9                 ;185
00007c  4208              TST      r0,r1                 ;185
00007e  d021              BEQ      |L9.196|
000080  f8380014          LDRH     r0,[r8,r4,LSL #1]     ;187
000084  1c40              ADDS     r0,r0,#1              ;187
000086  b280              UXTH     r0,r0                 ;187
000088  f8280014          STRH     r0,[r8,r4,LSL #1]     ;187
00008c  2803              CMP      r0,#3                 ;189
00008e  d004              BEQ      |L9.154|
000090  2864              CMP      r0,#0x64              ;193
000092  d933              BLS      |L9.252|
000094  2896              CMP      r0,#0x96              ;195
000096  d010              BEQ      |L9.186|
000098  e030              B        |L9.252|
                  |L9.154|
00009a  f7fffffe          BL       Get_System_Time
00009e  4601              MOV      r1,r0                 ;195
0000a0  f8da0000          LDR      r0,[r10,#0]           ;195  ; pApp
0000a4  6041              STR      r1,[r0,#4]            ;195
0000a6  7800              LDRB     r0,[r0,#0]            ;195
0000a8  2801              CMP      r0,#1                 ;195
0000aa  d001              BEQ      |L9.176|
0000ac  702e              STRB     r6,[r5,#0]            ;195
0000ae  e025              B        |L9.252|
                  |L9.176|
0000b0  4620              MOV      r0,r4                 ;195
0000b2  f7fffffe          BL       KeyIndexToKeyValue
0000b6  2101              MOVS     r1,#1                 ;195
0000b8  e01e              B        |L9.248|
                  |L9.186|
0000ba  4814              LDR      r0,|L9.268|
0000bc  1dc0              ADDS     r0,r0,#7              ;197
0000be  f8009004          STRB     r9,[r0,r4]            ;197
0000c2  e01b              B        |L9.252|
                  |L9.196|
0000c4  f8381014          LDRH     r1,[r8,r4,LSL #1]     ;201
0000c8  f8287014          STRH     r7,[r8,r4,LSL #1]     ;209
0000cc  2903              CMP      r1,#3                 ;201
0000ce  d915              BLS      |L9.252|
0000d0  480e              LDR      r0,|L9.268|
0000d2  1d00              ADDS     r0,r0,#4              ;204
0000d4  f8009004          STRB     r9,[r0,r4]            ;204
0000d8  2010              MOVS     r0,#0x10              ;204
0000da  f7fffffe          BL       Buzzer_Beep
0000de  f8da0000          LDR      r0,[r10,#0]           ;204  ; pApp
0000e2  7800              LDRB     r0,[r0,#0]            ;204
0000e4  2801              CMP      r0,#1                 ;204
0000e6  d109              BNE      |L9.252|
0000e8  7828              LDRB     r0,[r5,#0]            ;204  ; g_bIgnoreReleaseKeyEvent
0000ea  b108              CBZ      r0,|L9.240|
0000ec  702f              STRB     r7,[r5,#0]            ;204
0000ee  e005              B        |L9.252|
                  |L9.240|
0000f0  4620              MOV      r0,r4                 ;204
0000f2  f7fffffe          BL       KeyIndexToKeyValue
0000f6  2100              MOVS     r1,#0                 ;204
                  |L9.248|
0000f8  f7fffffe          BL       GUI_StoreKeyMsg
                  |L9.252|
0000fc  1c64              ADDS     r4,r4,#1              ;204
0000fe  b2e4              UXTB     r4,r4                 ;183
000100  2c03              CMP      r4,#3                 ;183
000102  d3b7              BCC      |L9.116|
000104  e7a6              B        |L9.84|
;;;214    
                          ENDP

000106  0000              DCW      0x0000
                  |L9.264|
                          DCD      0x40010c08
                  |L9.268|
                          DCD      ||.data||
                  |L9.272|
                          DCD      pApp

                          AREA ||.data||, DATA, ALIGN=1

                  g_bIgnoreReleaseKeyEvent
000000  00                DCB      0x00
                  s_bInvalidComblinationKey
000001  00                DCB      0x00
                  nKey
000002  0000              DCB      0x00,0x00
                  g_bShortKeyEvent
000004  000000            DCB      0x00,0x00,0x00
                  g_bLongKeyEvent
000007  00                DCB      0x00
000008  0000              DCB      0x00,0x00
                  s_aKeyCnt
00000a  0000              DCB      0x00,0x00
                          DCDU     0x00000000
