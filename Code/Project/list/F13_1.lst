L 1 "..\GUI\Font\F13_1.c"
N/*
N*********************************************************************************************************
N*                                             uC/GUI V3.98
N*                        Universal graphic software for embedded applications
N*
N*                       (c) Copyright 2002, Micrium Inc., Weston, FL
N*                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
N*
N*              µC/GUI is protected by international copyright laws. Knowledge of the
N*              source code may not be used to write a similar product. This file may
N*              only be used in accordance with a license and should not be redistributed
N*              in any way. We appreciate your understanding and fairness.
N*
N----------------------------------------------------------------------
NFile        : F13_1.c
NPurpose     : ISO 8859-1 West European Character Set similar to Swiss
NHeight      : 13
N---------------------------END-OF-HEADER------------------------------
N*/
N
N#include "GUI_FontIntern.h"
L 1 "..\GUI\Core\GUI_FontIntern.h" 1
N/*
N*********************************************************************************************************
N*                                             uC/GUI V3.98
N*                        Universal graphic software for embedded applications
N*
N*                       (c) Copyright 2002, Micrium Inc., Weston, FL
N*                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
N*
N*              µC/GUI is protected by international copyright laws. Knowledge of the
N*              source code may not be used to write a similar product. This file may
N*              only be used in accordance with a license and should not be redistributed
N*              in any way. We appreciate your understanding and fairness.
N*
N----------------------------------------------------------------------
NFile        : GUI_FontIntern.h
NPurpose     : Internal decalrations used in font files
N---------------------------END-OF-HEADER------------------------------
N
NAttention : Do not modify this file ! If you do, you will not
N            be able do update to a later GUI version !
N
N*/
N
N
N#ifndef  GUI_FONTINTERN_H    /* Guard against multiple inclusion */
N#define  GUI_FONTINTERN_H
N
N#include "GUI.h"
L 1 "..\GUI\Core\GUI.h" 1
N/*
N*********************************************************************************************************
N*                                             uC/GUI V3.98
N*                        Universal graphic software for embedded applications
N*
N*                       (c) Copyright 2002, Micrium Inc., Weston, FL
N*                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
N*
N*              µC/GUI is protected by international copyright laws. Knowledge of the
N*              source code may not be used to write a similar product. This file may
N*              only be used in accordance with a license and should not be redistributed
N*              in any way. We appreciate your understanding and fairness.
N*
N----------------------------------------------------------------------
NFile        : GUI.h
NPurpose     : GUI API include file
N---------------------------END-OF-HEADER------------------------------
N
NAttention : Do not modify this file ! If you do, you will not
N            be able do update to a later GUI version !
N
N*/
N
N
N#ifndef  GUI_H
N#define  GUI_H
N#define __EMWIN_GSC__   /* Allow "C" to find out that emWin GSC is used */
N
N
N#include "GUI_ConfDefaults.h"
L 1 "..\GUI\Core\GUI_ConfDefaults.h" 1
N/*
N*********************************************************************************************************
N*                                             uC/GUI V3.98
N*                        Universal graphic software for embedded applications
N*
N*                       (c) Copyright 2002, Micrium Inc., Weston, FL
N*                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
N*
N*              µC/GUI is protected by international copyright laws. Knowledge of the
N*              source code may not be used to write a similar product. This file may
N*              only be used in accordance with a license and should not be redistributed
N*              in any way. We appreciate your understanding and fairness.
N*
N----------------------------------------------------------------------
NFile        : GUI_ConfDefaults.h
NPurpose     : Defaults for GUI config switches.
N---------------------------END-OF-HEADER------------------------------
N
NAttention : Do not modify this file ! If you do, you will not
N            be able do update to a later GUI version !
N
N*/
N
N#ifndef  GUI_CONFDEFAULTS_H
N#define  GUI_CONFDEFAULTS_H
N
N#include "GUIConf.h"
L 1 "..\Config\GUIConf.h" 1
N/*
N*********************************************************************************************************
N*                                                uC/GUI
N*                        Universal graphic software for embedded applications
N*
N*                       (c) Copyright 2002, Micrium Inc., Weston, FL
N*                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
N*
N*              µC/GUI is protected by international copyright laws. Knowledge of the
N*              source code may not be used to write a similar product. This file may
N*              only be used in accordance with a license and should not be redistributed
N*              in any way. We appreciate your understanding and fairness.
N*
N----------------------------------------------------------------------
NFile        : GUIConf.h
NPurpose     : Configures abilities, fonts etc.
N----------------------------------------------------------------------
N*/
N
N
N#ifndef GUICONF_H
N#define GUICONF_H
N
N#define GUI_OS                    (0)  /* Compile with multitasking support */
N#define GUI_SUPPORT_TOUCH         (1)  /* Support a touch screen (req. win-manager) */
N#define GUI_SUPPORT_UNICODE       (1)  /* Support mixed ASCII/UNICODE strings */
N
N#define GUI_DEFAULT_FONT          &GUI_Font6x8
N#define GUI_ALLOC_SIZE          	(1024*30)  /* Size of dynamic memory ... For WM and memory devices*/
N/*********************************************************************
N*
N*         Configuration of available packages
N*/
N
N#define GUI_WINSUPPORT            1  /* Window manager package available */
N#define GUI_SUPPORT_MEMDEV       1  /* Memory devices available */
N#define GUI_SUPPORT_AA            1  /* Anti aliasing available */
N
N#endif  /* Avoid multiple inclusion */
N
N
N
L 28 "..\GUI\Core\GUI_ConfDefaults.h" 2
N
N/**********************************************************************
N*
N*       Defaults for config switches
N*
N***********************************************************************
N*/
N
N/* Define "universal pointer". Normally, this is not needed (define will expand to nothing)
N   However, on some systems (AVR - IAR compiler) it can be necessary ( -> __generic),
N   since a default pointer can access RAM only, not the built-in Flash
N*/
N#ifndef GUI_UNI_PTR
N  #define GUI_UNI_PTR
N  #define GUI_UNI_PTR_USED 0
N#else
S  #define GUI_UNI_PTR_USED 1
N#endif
N
N/* Define const storage. Normally, this is not needed (define will expand to const)
N   However, on some systems (AVR - IAR compiler) it can be necessary ( -> __flash const),
N   since otherwise constants are copied into RAM
N*/
N#ifndef GUI_USE_MEMDEV_1BPP_FOR_SCREEN
N  #define GUI_USE_MEMDEV_1BPP_FOR_SCREEN 0
N#endif
N
N#ifndef GUI_SUPPORT_UNICODE
S  #define GUI_SUPPORT_UNICODE 1
N#endif
N
N#ifndef GUI_SUPPORT_ARABIC
N  #define GUI_SUPPORT_ARABIC 0
N#endif
N
N#ifndef GUI_ALLOC_SIZE
S  #define GUI_ALLOC_SIZE      1000
N#endif
N
N#ifndef GUI_MAXBLOCKS
N  #define GUI_MAXBLOCKS (2 + GUI_ALLOC_SIZE / 32)
N#endif
N
N#ifndef GUI_CONST_STORAGE
N  #define GUI_CONST_STORAGE const
N#endif
N
N#ifndef GUI_SUPPORT_TOUCH
S  #define GUI_SUPPORT_TOUCH   0
N#endif
N
N#ifndef GUI_SUPPORT_MOUSE
N  #define GUI_SUPPORT_MOUSE   0
N#endif
N
N#ifndef GUI_SUPPORT_MEMDEV
S  #define GUI_SUPPORT_MEMDEV  0
N#endif
N
N#ifndef GUI_SUPPORT_AA
S  #define GUI_SUPPORT_AA      0
N#endif
N
N#ifndef GUI_OS
S  #define GUI_OS              0
N#endif
N
N#ifndef GUI_SUPPORT_LARGE_BITMAPS
N  #if GUI_ALLOC_SIZE > 65535
X  #if (1024*30) > 65535
S    #define GUI_SUPPORT_LARGE_BITMAPS 1
N  #else
N    #define GUI_SUPPORT_LARGE_BITMAPS 0
N  #endif
N#endif
N
N#ifndef GUI_COMPATIBLE_MODE
N  #define GUI_COMPATIBLE_MODE 1
N#endif
N
N#ifndef GUI_NUM_LAYERS
N  #define GUI_NUM_LAYERS      1
N#endif
N
N#ifndef GUI_SUPPORT_CURSOR
N  #define GUI_SUPPORT_CURSOR  (GUI_SUPPORT_MOUSE | GUI_SUPPORT_TOUCH)
N#endif
N
N#ifndef GUI_SUPPORT_DEVICES
N  #ifdef __C51__               /* Keil C51 limitation ... Indirect function calls are limited */
S    #define GUI_SUPPORT_DEVICES 0
N  #else
N    #define GUI_SUPPORT_DEVICES (GUI_SUPPORT_MEMDEV | (GUI_NUM_LAYERS > 1))
N  #endif
N#endif
N
N/* Some compilers for very simple chips can not generate code for function pointers
Nwith parameters. In this case, we do not use function pointers, but limit the functionality slightly */
N#ifndef GUI_COMPILER_SUPPORTS_FP
N  #ifdef __C51__
S    #define GUI_COMPILER_SUPPORTS_FP 0
N  #else
N    #define GUI_COMPILER_SUPPORTS_FP 1
N  #endif
N#endif
N
N#ifndef GUI_SUPPORT_ROTATION
N  #if GUI_COMPILER_SUPPORTS_FP
X  #if 1
N    #define GUI_SUPPORT_ROTATION 1
N  #else
S    #define GUI_SUPPORT_ROTATION 0
N  #endif
N#endif
N
N/* In order to avoid warnings for undefined parameters */
N#ifndef GUI_USE_PARA
N  #if defined (__BORLANDC__) || defined(NC30) || defined(NC308)
X  #if 0L || 0L || 0L
S    #define GUI_USE_PARA(para)
N  #else
N    #define GUI_USE_PARA(para) para=para;
N  #endif
N#endif
N
N/* Default for types */
N#ifndef GUI_TIMER_TIME
N  #define GUI_TIMER_TIME int  /* default is to use 16 bits for 16 bit CPUs,
N	                           32 bits on 32 bit CPUs for timing */
N#endif
N
N/* Types used for memory allocation */
N#if GUI_ALLOC_SIZE <32767
X#if (1024*30) <32767
N  #define GUI_ALLOC_DATATYPE   I16
N  #define GUI_ALLOC_DATATYPE_U U16
N#else
S  #define GUI_ALLOC_DATATYPE   I32
S  #define GUI_ALLOC_DATATYPE_U U32
N#endif
N
N#ifndef   GUI_MEMSET
N  #define GUI_MEMSET GUI__memset
N#endif
N
N
N#endif   /* ifdef GUI_CONFDEFAULTS_H */
N/*************************** End of file ****************************/
N	 	 			 		    	 				 	  			   	 	 	 	 	 	  	  	      	   		 	 	 		  		  	 		 	  	  			     			       	   	 			  		    	 	     	 				  	 					 	 			   	  	  			 				 		 	 	 			     			 
L 31 "..\GUI\Core\GUI.h" 2
N#include "GUIType.h"
L 1 "..\GUI\Core\GUIType.h" 1
N/*
N*********************************************************************************************************
N*                                             uC/GUI V3.98
N*                        Universal graphic software for embedded applications
N*
N*                       (c) Copyright 2002, Micrium Inc., Weston, FL
N*                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
N*
N*              µC/GUI is protected by international copyright laws. Knowledge of the
N*              source code may not be used to write a similar product. This file may
N*              only be used in accordance with a license and should not be redistributed
N*              in any way. We appreciate your understanding and fairness.
N*
N----------------------------------------------------------------------
NFile        : GUIType.h
NPurpose     : Include file define the types used for GUI
N---------------------------END-OF-HEADER------------------------------
N
NAttention : Do not modify this file ! If you do, you will not
N            be able do update to a later GUI version !
N
N*/
N
N#ifndef  GUITYPE_H_INCLUDED
N#define  GUITYPE_H_INCLUDED
N
N#include "LCD.h"
L 1 "..\GUI\Core\LCD.h" 1
N/*
N*********************************************************************************************************
N*                                             uC/GUI V3.98
N*                        Universal graphic software for embedded applications
N*
N*                       (c) Copyright 2002, Micrium Inc., Weston, FL
N*                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
N*
N*              µC/GUI is protected by international copyright laws. Knowledge of the
N*              source code may not be used to write a similar product. This file may
N*              only be used in accordance with a license and should not be redistributed
N*              in any way. We appreciate your understanding and fairness.
N*
N----------------------------------------------------------------------
NFile        : LCD.h
NPurpose     : Declares LCD interface functions
N----------------------------------------------------------------------
N*/
N
N#ifndef LCD_H
N#define LCD_H
N
N#include "GUI_ConfDefaults.h" /* Used for GUI_UNI_PTR */
N
N#if defined(__cplusplus)
X#if 0L
Sextern "C" {     /* Make sure we have C-declarations in C++ programs */
N#endif
N
N/*
N  ********************************************************************
N  *                                                                  *
N  *                   Basic type defines                             *
N  *                                                                  *
N  ********************************************************************
N
NThe follwing are defines for types used in the LCD-driver and the
NGUI layers on top of that. Since "C" does not provide data types of
Nfixed length which are identical on all platforms, this is done here.
NFor most 16/32 controllers, the settings will work fine. However, if
Nyou have similar defines in other sections of your program, you might
Nwant to change or relocate these defines, e.g. in a TYPE.h file.
N*/
N 
N#define I8    signed char
N#define U8  unsigned char     /* unsigned 8  bits. */
N#define I16   signed short    /*   signed 16 bits. */
N#define U16 unsigned short    /* unsigned 16 bits. */
N#define I32   signed long   /*   signed 32 bits. */
N#define U32 unsigned long   /* unsigned 32 bits. */
N#define I16P I16              /*   signed 16 bits OR MORE ! */
N#define U16P U16              /* unsigned 16 bits OR MORE ! */
N
N/*
N  ********************************************************************
N  *                                                                  *
N  *               Settings for windows simulation                    *
N  *                                                                  *
N  ********************************************************************
N
NSome settings in the configuration may conflict with the values required
Nin the Simulation. This is why we ignore the target settings for data
Ntypes and use the correct settings for the simulation.
N(U32 could be defined as long, which would yield a 64 bit type on
Nthe PC)
N*/
N
N#ifdef WIN32
S  #pragma warning( disable : 4244 )  // Disable warning messages in simulation
S  #pragma warning( disable : 4761 )  // Disable warning "integral size mismatch in argument; conversion supplied"
N#endif                                      
N
N
N/*      *************************************************************
N        *                                                           *
N        *                Constants                                  *
N        *                                                           *
N        *************************************************************
N*/
N#define LCD_ERR0 (0x10)
N#define LCD_ERR_CONTROLLER_NOT_FOUND (LCD_ERR0+1)
N#define LCD_ERR_MEMORY               (LCD_ERR0+2)
N
N/*
N      *********************************
N      *                               *
N      *      Drawing modes            *
N      *                               *
N      *********************************
N*/
N
N#define LCD_DRAWMODE_NORMAL (0)
N#define LCD_DRAWMODE_XOR    (1<<0)
N#define LCD_DRAWMODE_TRANS  (1<<1)
N#define LCD_DRAWMODE_REV    (1<<2)
N
N
N 
N/*      *************************************************************
N        *                                                           *
N        *                Typedefs                                   *
N        *                                                           *
N        *************************************************************
N*/
N
Ntypedef int LCD_DRAWMODE;
Ntypedef U32 LCD_COLOR;
Xtypedef unsigned long LCD_COLOR;
N
N 
N/********************************************************
N*
N*     Data structures
N*
N*********************************************************
N*/
N
Ntypedef struct { I16P x,y; } GUI_POINT;
Xtypedef struct { signed short x,y; } GUI_POINT;
Ntypedef struct { I16 x0,y0,x1,y1; } LCD_RECT;
Xtypedef struct { signed short x0,y0,x1,y1; } LCD_RECT;
N/*typedef struct { GUI_POINT P0, P1; } LCD_RECT; */
N
Ntypedef struct {
N  int              NumEntries; 
N  char             HasTrans;         
N  const LCD_COLOR GUI_UNI_PTR * pPalEntries; 
X  const LCD_COLOR  * pPalEntries; 
N} LCD_LOGPALETTE; 
N
N/* This is used for the simulation only ! */
Ntypedef struct {
N  int x,y;
N  unsigned char KeyStat;
N} LCD_tMouseState;
N
N/*********************************************************************
N*
N*     Index2Color
N
N  This function needs to be int the public part of the software
N  since it is needed by the simulation. Most other driver
N  functions are hidden in the private header file.
N*/
N
Ntypedef LCD_COLOR      tLCDDEV_Index2Color  (int Index);
Ntypedef unsigned int   tLCDDEV_Color2Index  (LCD_COLOR Color);
Ntypedef unsigned int   tLCDDEV_GetIndexMask (void);
NLCD_COLOR      LCD_L0_Index2Color  (int Index);
NLCD_COLOR      LCD_L0_1_Index2Color(int Index);
NLCD_COLOR      LCD_L0_2_Index2Color(int Index);
NLCD_COLOR      LCD_L0_3_Index2Color(int Index);
NLCD_COLOR      LCD_L0_4_Index2Color(int Index);
Nunsigned int   LCD_L0_Color2Index  (LCD_COLOR Color);
Nunsigned int   LCD_L0_1_Color2Index(LCD_COLOR Color);
Nunsigned int   LCD_L0_2_Color2Index(LCD_COLOR Color);
Nunsigned int   LCD_L0_3_Color2Index(LCD_COLOR Color);
Nunsigned int   LCD_L0_4_Color2Index(LCD_COLOR Color);
Nunsigned int   LCD_L0_GetIndexMask  (void);
Nunsigned int   LCD_L0_1_GetIndexMask(void);
Nunsigned int   LCD_L0_2_GetIndexMask(void);
Nunsigned int   LCD_L0_3_GetIndexMask(void);
Nunsigned int   LCD_L0_4_GetIndexMask(void);
N
N
N/*********************************************************************
N*
N*     Color conversion API tables
N*/
N
Ntypedef struct {
N  tLCDDEV_Color2Index*  pfColor2Index;
N  tLCDDEV_Index2Color*  pfIndex2Color;
N  tLCDDEV_GetIndexMask* pfGetIndexMask;
N} LCD_API_COLOR_CONV;
N
Nextern const LCD_API_COLOR_CONV LCD_API_ColorConv_1;
Nextern const LCD_API_COLOR_CONV LCD_API_ColorConv_2;
Nextern const LCD_API_COLOR_CONV LCD_API_ColorConv_4;
Nextern const LCD_API_COLOR_CONV LCD_API_ColorConv_8666;
N
N#define GUI_COLOR_CONV_1    &LCD_API_ColorConv_1
N#define GUI_COLOR_CONV_2    &LCD_API_ColorConv_2
N#define GUI_COLOR_CONV_4    &LCD_API_ColorConv_4
N#define GUI_COLOR_CONV_8666 &LCD_API_ColorConv_8666
N
N/*********************************************************************
N*
N*      LCDDEV function table
N*
N**********************************************************************
N
N  Below the routines which need to in an LCDDEV routine table are
N  defined. All of these routines have to be in the low-level driver
N  (LCD_L0) or in the memory device which can be used to replace the
N  driver.
N  The one exception to this is the SetClipRect routine, which would
N  be identical for all drivers and is therefor contained in the
N  level above (LCD).
N*/
Ntypedef void         tLCDDEV_DrawHLine    (int x0, int y0,  int x1);
Ntypedef void         tLCDDEV_DrawVLine    (int x , int y0,  int y1);
Ntypedef void         tLCDDEV_FillRect     (int x0, int y0, int x1, int y1);
Ntypedef unsigned int tLCDDEV_GetPixelIndex(int x, int y);
Ntypedef void         tLCDDEV_SetPixelIndex(int x, int y, int ColorIndex);
Ntypedef void         tLCDDEV_XorPixel     (int x, int y);
Ntypedef void         tLCDDEV_FillPolygon  (const GUI_POINT* pPoints, int NumPoints, int x0, int y0);
Ntypedef void         tLCDDEV_FillPolygonAA(const GUI_POINT* pPoints, int NumPoints, int x0, int y0);
Ntypedef void         tLCDDEV_GetRect      (LCD_RECT*pRect);
Ntypedef int          tLCDDEV_Init         (void);
Ntypedef void         tLCDDEV_On           (void);
Ntypedef void         tLCDDEV_Off          (void);
Ntypedef void         tLCDDEV_SetLUTEntry  (U8 Pos, LCD_COLOR color);
Xtypedef void         tLCDDEV_SetLUTEntry  (unsigned char Pos, LCD_COLOR color);
Ntypedef void *       tLCDDEV_GetDevFunc   (int Index);
N
N/*********************************************************************
N*
N*     Memory device API tables
N*/
N#if GUI_COMPILER_SUPPORTS_FP
X#if 1
N  typedef struct tLCDDEV_APIList_struct tLCDDEV_APIList;
N#endif
N
Ntypedef void tLCDDEV_DrawBitmap   (int x0, int y0, int xsize, int ysize,
N                       int BitsPerPixel, int BytesPerLine,
N                       const U8 GUI_UNI_PTR * pData, int Diff,
X                       const unsigned char  * pData, int Diff,
N                       const void* pTrans);   /* Really LCD_PIXELINDEX, but is void to avoid compiler warnings*/
N
Nstruct tLCDDEV_APIList_struct {
N  tLCDDEV_Color2Index*        pfColor2Index;
N  tLCDDEV_Index2Color*        pfIndex2Color;
N  tLCDDEV_GetIndexMask*       pfGetIndexMask;
N  tLCDDEV_DrawBitmap*         pfDrawBitmap;
N  tLCDDEV_DrawHLine*          pfDrawHLine;
N  tLCDDEV_DrawVLine*          pfDrawVLine;
N  tLCDDEV_FillRect*           pfFillRect;
N  tLCDDEV_GetPixelIndex*      pfGetPixelIndex;
N  tLCDDEV_GetRect*            pfGetRect;
N  tLCDDEV_SetPixelIndex*      pfSetPixelIndex;
N  tLCDDEV_XorPixel*           pfXorPixel;
N  tLCDDEV_SetLUTEntry*        pfSetLUTEntry;
N  tLCDDEV_GetDevFunc*         pfGetDevFunc;
N  #if GUI_SUPPORT_MEMDEV
X  #if 1
N    tLCDDEV_FillPolygon*      pfFillPolygon;
N    tLCDDEV_FillPolygonAA*    pfFillPolygonAA;
N    const tLCDDEV_APIList*    pMemDevAPI;
N    unsigned                  BitsPerPixel;
N  #endif
N};
N#if GUI_COMPILER_SUPPORTS_FP
X#if 1
N  extern const struct tLCDDEV_APIList_struct GUI_MEMDEV__APIList1;
N  extern const struct tLCDDEV_APIList_struct GUI_MEMDEV__APIList8;
N  extern const struct tLCDDEV_APIList_struct GUI_MEMDEV__APIList16;
N
N  #define GUI_MEMDEV_APILIST_1  &GUI_MEMDEV__APIList1
N  #define GUI_MEMDEV_APILIST_8  &GUI_MEMDEV__APIList8
N  #define GUI_MEMDEV_APILIST_16 &GUI_MEMDEV__APIList16
N#endif
N
N/*      *************************************************************
N        *                                                           *
N        *                   Defines                                 *
N        *                                                           *
N        *    for device capabilities                                *
N        *                                                           *
N        *************************************************************
N
NThe following is the list of device capabilities which can, but do
Nnot have to be implemented in the driver. This way the driver can be
Nenhanced in the future without affecting the driver interface,
Nkeeping older drivers compatible.
NMore DevCaps can always be added in the future, as older drivers
Nare guaranteed to return 0 for all unimplemented features or queries.
N
NThe values below define the legal parameters to the LCD_GetDeviceCaps
Nand the LCD_GetpCapFunc routines.
N*/
N
N#define LCD_DEVCAP_NUMCOLORS    0x0     /* Quest number of colors
N                                           which LCD can display */
N#define LCD_DEVCAP_XSIZE        0x1     /* Quest horiz. res. of display */
N#define LCD_DEVCAP_YSIZE        0x2     /* Quest vert. res. of display */
N#define LCD_DEVCAP_VXSIZE       0x3     /* Quest vert. res. of virtual disp.*/
N#define LCD_DEVCAP_VYSIZE       0x4     /* Quest vert. res. of virtual disp.*/
N#define LCD_DEVCAP_XORG         0x5     /* X-origin ... usually 0 */
N#define LCD_DEVCAP_YORG         0x6     /* Y-origin ... usually 0 */
N#define LCD_DEVCAP_CONTROLLER   0x7     /* LCD Controller (Numerical) */
N#define LCD_DEVCAP_BITSPERPIXEL 0x8     /* Bits per pixel ... 1/2/4/8 */
N#define LCD_DEVCAP_NUMPAGES     0x10    /* Quest number of pages of display */
N
N#define LCD_DEVCAP_COLOR        0x1000  /* Quest Color[0]
N                                0x1001     Quest Color[1]
N                                0x1002     Quest Color[2]
N                                         ...                    */
N /* The next 4095 entries are reserved so up to 4096 colors
N    can be queried          ...*/
N
Nint LCD_GetXSize(void);
Nint LCD_GetXSize_1(void);
Nint LCD_GetXSizeEx(int Index);
N
Nint LCD_GetYSize(void);
Nint LCD_GetYSize_1(void);
Nint LCD_GetYSizeEx(int Index);
N
Nint LCD_GetVXSize(void);
Nint LCD_GetVXSize_1(void);
Nint LCD_GetVXSizeEx(int Index);
N
Nint LCD_GetVYSize(void);
Nint LCD_GetVYSize_1(void);
Nint LCD_GetVYSizeEx(int Index);
N
NU32 LCD_GetNumColors(void);
Xunsigned long LCD_GetNumColors(void);
NU32 LCD_GetNumColors_1(void);
Xunsigned long LCD_GetNumColors_1(void);
NU32 LCD_GetNumColorsEx(int Index);
Xunsigned long LCD_GetNumColorsEx(int Index);
N
Nint LCD_GetBitsPerPixel(void);
Nint LCD_GetBitsPerPixel_1(void);
Nint LCD_GetBitsPerPixelEx(int Index);
N
Nint LCD_GetFixedPalette(void);
Nint LCD_GetFixedPalette_1(void);
NI32 LCD_GetFixedPaletteEx(int Index);
Xsigned long LCD_GetFixedPaletteEx(int Index);
N
Nint LCD_GetXMag(void);
Nint LCD_GetXMag_1(void);
Nint LCD_GetXMagEx(int Index);
N
Nint LCD_GetYMag(void);
Nint LCD_GetYMag_1(void);
Nint LCD_GetYMagEx(int Index);
N
Nint LCD_GetMirrorXEx(int LayerIndex);
Nint LCD_GetMirrorYEx(int LayerIndex);
Nint LCD_GetSwapXYEx(int LayerIndex);
N
Nint LCD_GetSwapRBEx(int LayerIndex);
Nint LCD_GetDeltaModeEx(int LayerIndex);
Nint LCD_GetBitsPerPixel_L0Ex(int LayerIndex);
N
NtLCDDEV_Index2Color * LCD_GetpfIndex2ColorEx(int LayerIndex);
N
Nint LCD_GetNumLayers(void);
N
N#define LCD_GetNumDisplays() LCD_GetNumLayers()
N
N#define LCD_GET_XSIZE()        LCD_GetXSize()
N#define LCD_GET_YSIZE()        LCD_GetYSize()
N#define LCD_GET_VXSIZE()       LCD_GetVXSize()
N#define LCD_GET_VYSIZE()       LCD_GetVYSize()
N#define LCD_GET_NUMCOLORS()    LCD_GetNumColors()
N#define LCD_GET_BITSPERPIXEL() LCD_GetBitsPerPixel()
N
N#define LCD_DEVFUNC_READRECT  0x1     /* Request of a function pointer for reading a rectangular display area */
N
Nvoid * LCD_L0_GetDevFunc(int Index);
N
N/*********************************************************************
N*
N*      LCD_CLIP function table
N*
N**********************************************************************
N*/
Ntypedef void         tLCD_HL_DrawHLine    (int x0, int y0,  int x1);
Ntypedef void         tLCD_HL_DrawPixel    (int x0, int y0);
N
Ntypedef struct {
N  tLCD_HL_DrawHLine*          pfDrawHLine;
N  tLCD_HL_DrawPixel*          pfDrawPixel;
N} tLCD_HL_APIList;
N
Nvoid LCD_DrawHLine(int x0, int y0,  int x1);
Nvoid LCD_DrawPixel(int x0, int y0);
Nvoid LCD_DrawVLine  (int x, int y0,  int y1);
N
N
N
N/*********************************************************************
N*
N*              Declarations for LCD_
N*
N**********************************************************************
N*/
N
Nvoid LCD_SetClipRectEx(const LCD_RECT* pRect);
Nvoid LCD_SetClipRectMax(void);
N
N/* Get device capabilities (0 if not supported) */
NI32  LCD_GetDevCap(int Index);
Xsigned long  LCD_GetDevCap(int Index);
N
N/* Initialize LCD using config-paramters */
Nint LCD_Init(void);
N
Nvoid LCD_SetBkColor   (LCD_COLOR Color); /* Set background color */
Nvoid LCD_SetColor     (LCD_COLOR Color); /* Set foreground color */
Nvoid LCD_SetPixelIndex(int x, int y, int ColorIndex);
N
N/* Palette routines (Not available on all drivers) */
Nvoid LCD_InitLUT(void);
N
N/* Decompressors */
N//typedef void tfDrawSpecialBitmap(int x0,int y0,int xsize, int ysize, const U8 GUI_UNI_PTR *pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag);
Nvoid         LCD_DrawBitmap_RLE8(int x0,int y0,int xsize, int ysize, const U8 GUI_UNI_PTR *pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag);
Xvoid         LCD_DrawBitmap_RLE8(int x0,int y0,int xsize, int ysize, const unsigned char  *pPixel, const LCD_LOGPALETTE  * pLogPal, int xMag, int yMag);
Nvoid         LCD_DrawBitmap_RLE4(int x0,int y0,int xsize, int ysize, const U8 GUI_UNI_PTR *pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag);
Xvoid         LCD_DrawBitmap_RLE4(int x0,int y0,int xsize, int ysize, const unsigned char  *pPixel, const LCD_LOGPALETTE  * pLogPal, int xMag, int yMag);
Nvoid         LCD_DrawBitmap_565 (int x0,int y0,int xsize, int ysize, const U8 GUI_UNI_PTR *pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag);
Xvoid         LCD_DrawBitmap_565 (int x0,int y0,int xsize, int ysize, const unsigned char  *pPixel, const LCD_LOGPALETTE  * pLogPal, int xMag, int yMag);
Nvoid         LCD_DrawBitmap_M565(int x0,int y0,int xsize, int ysize, const U8 GUI_UNI_PTR *pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag);
Xvoid         LCD_DrawBitmap_M565(int x0,int y0,int xsize, int ysize, const unsigned char  *pPixel, const LCD_LOGPALETTE  * pLogPal, int xMag, int yMag);
N
NLCD_DRAWMODE LCD_SetDrawMode  (LCD_DRAWMODE dm);
Nvoid LCD_SetColorIndex(int Index);
Nvoid LCD_SetBkColorIndex(int Index);
Nvoid LCD_FillRect(int x0, int y0, int x1, int y1);
Ntypedef void tLCD_SetPixelAA(int x, int y, U8 Intens);
Xtypedef void tLCD_SetPixelAA(int x, int y, unsigned char Intens);
N
Nvoid LCD_SetPixelAA(int x, int y, U8 Intens);
Xvoid LCD_SetPixelAA(int x, int y, unsigned char Intens);
Nvoid LCD_SetPixelAA_NoTrans(int x, int y, U8 Intens);
Xvoid LCD_SetPixelAA_NoTrans(int x, int y, unsigned char Intens);
N
NLCD_COLOR    LCD_AA_MixColors(LCD_COLOR Color, LCD_COLOR BkColor, U8 Intens);
XLCD_COLOR    LCD_AA_MixColors(LCD_COLOR Color, LCD_COLOR BkColor, unsigned char Intens);
NLCD_COLOR    LCD_MixColors256(LCD_COLOR Color, LCD_COLOR BkColor, unsigned Intens);
NLCD_COLOR    LCD_GetPixelColor(int x, int y);     /* Get RGB color of pixel */
Nunsigned int LCD_GetPixelIndex(int x, int y);
Nint          LCD_GetBkColorIndex (void);
Nint          LCD_GetColorIndex (void);
N
N/*********************************************************************
N*
N*       Optional support for rotatation
N*
N**********************************************************************
N*/
N
N#if GUI_SUPPORT_ROTATION
X#if 1
N
Ntypedef void tLCD_DrawBitmap(int x0, int y0, int xsize, int ysize,
N                             int xMul, int yMul, int BitsPerPixel, int BytesPerLine,
N                             const U8 GUI_UNI_PTR * pPixel, const void * pTrans);
X                             const unsigned char  * pPixel, const void * pTrans);
Ntypedef void tRect2TextRect (LCD_RECT * pRect);
N
Nstruct tLCD_APIList_struct {
N  tLCD_DrawBitmap   * pfDrawBitmap;
N  tRect2TextRect    * pfRect2TextRect;
N};
N
Ntypedef struct tLCD_APIList_struct tLCD_APIList;
N
Nextern tLCD_APIList LCD_APIListCCW;
Nextern tLCD_APIList LCD_APIListCW;
Nextern tLCD_APIList LCD_APIList180;
N
N#define GUI_ROTATION   tLCD_APIList
N#define GUI_ROTATE_CCW &LCD_APIListCCW
N#define GUI_ROTATE_CW  &LCD_APIListCW
N#define GUI_ROTATE_180 &LCD_APIList180
N#define GUI_ROTATE_0   0
N#endif
N
N
N/*      *************************************************************
N        *                                                           *
N        *      LCD  publics not used by GUI                         *
N        *                                                           *
N        *************************************************************
N  
N
NThe following functions can, but do not have to be defined in the LCD driver
Nas they are not used by the GUI level.
N
N*/
N
N
N
N#define LCD_On          LCD_L0_On
N#define LCD_Off         LCD_L0_Off
N#define LCD_ReInit      LCD_L0_ReInit
N#define LCD_SetLUTEntry LCD_L0_SetLUTEntry
N
N
N#define LCD_CC_UNLOCK (0)    /* Default mode: Cache is transparent */
N#define LCD_CC_LOCK   (1)    /* Cache is locked, no write operations */
N#define LCD_CC_FLUSH  (2)    /* Flush cache, do not change mode */
NU8 LCD_L0_ControlCache(U8 mode);
Xunsigned char LCD_L0_ControlCache(unsigned char mode);
NU8 LCD_L0_1_ControlCache(U8 mode);
Xunsigned char LCD_L0_1_ControlCache(unsigned char mode);
NU8 LCD_L0_2_ControlCache(U8 mode);
Xunsigned char LCD_L0_2_ControlCache(unsigned char mode);
NU8 LCD_L0_3_ControlCache(U8 mode);
Xunsigned char LCD_L0_3_ControlCache(unsigned char mode);
NU8 LCD_L0_4_ControlCache(U8 mode);
Xunsigned char LCD_L0_4_ControlCache(unsigned char mode);
Nvoid LCD_L0_Refresh(void);
Nvoid LCD_L0_1_Refresh(void);
Nvoid LCD_L0_2_Refresh(void);
Nvoid LCD_L0_3_Refresh(void);
Nvoid LCD_L0_4_Refresh(void);
N/* Check if controller is still properly initialized */
Nint  LCD_L0_CheckInit(void);        /* returns if init is still O.K.
N                                      by reading all available registers of
N                                      Display controller.
N                                      0: Init O.K.
N                                    */
N
N#define LCD_ControlCache LCD_L0_ControlCache
N
N/*
N        ******************************************
N        *                                        *
N        *        Support for paging              *
N        *                                        *
N        ******************************************
N*/
N
Nint LCD_SelPage  (int NewPage);    /* returns formerly sel. page */
Nint LCD_ShowPage (int NewPage);    /* sets / returns visible page */
Nint LCD_GetSelPage (void);         /* returns selected page */
Nint LCD_GetVisPage (void);         /* returns visible page */
N
N
N/*      *************************************************************
N        *                                                           *
N        *      LCD  imports                                         *
N        *                  (for routines in LCDColor)               *
N        *                                                           *
N        *************************************************************
N*/
N  
N
Nint              LCD_Color2Index     (LCD_COLOR Color);
NLCD_COLOR        LCD_Index2Color     (int Index);
NLCD_COLOR        LCD_Index2ColorEx   (int i, unsigned int LayerIndex);
N
N/*********************************************************************
N*
N*       LCD_X_...
N*
N**********************************************************************
N*/
N
Nvoid LCD_X_Init(void);
Nvoid LCD_X_On  (void);
Nvoid LCD_X_Off (void);
N
Nchar LCD_X_Read00(void);
Nchar LCD_X_Read01(void);
Nvoid LCD_X_Write00(char c);
Nvoid LCD_X_Write01(char c);
Nvoid LCD_X_WriteM01(char * pData, int NumBytes);
N
N#if defined(__cplusplus)
X#if 0L
S  }
N#endif
N
N#endif /* LCD_H */
N
N/*************************** End of file ****************************/
N	 	 			 		    	 				 	  			   	 	 	 	 	 	  	  	      	   		 	 	 		  		  	 		 	  	  			     			       	   	 			  		    	 	     	 				  	 					 	 			   	  	  			 				 		 	 	 			     			 
L 28 "..\GUI\Core\GUIType.h" 2
N#include "GUIConf.h"
N
N/*      *************************************************************
N        *                                                           *
N        *                Simple types                               *
N        *                                                           *
N        *************************************************************
N*/
N
Ntypedef const char *  GUI_ConstString;
N
N
N/*      *************************************************************
N        *                                                           *
N        *                Structures                                 *
N        *                                                           *
N        *************************************************************
N*/
N
Ntypedef LCD_COLOR       GUI_COLOR;
Ntypedef LCD_LOGPALETTE  GUI_LOGPALETTE;
Ntypedef LCD_DRAWMODE    GUI_DRAWMODE;
Ntypedef LCD_RECT        GUI_RECT;
N
Ntypedef struct {
N  void      (* pfDraw)(int x0,int y0,int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag);
X  void      (* pfDraw)(int x0,int y0,int xsize, int ysize, const unsigned char  * pPixel, const LCD_LOGPALETTE  * pLogPal, int xMag, int yMag);
N  GUI_COLOR (* pfIndex2Color)(int Index);
N} GUI_BITMAP_METHODS;
N
Ntypedef struct {
N  U16P XSize;
X  unsigned short XSize;
N  U16P YSize;
X  unsigned short YSize;
N  U16P BytesPerLine;
X  unsigned short BytesPerLine;
N  U16P BitsPerPixel;
X  unsigned short BitsPerPixel;
N  const U8 GUI_UNI_PTR * pData;
X  const unsigned char  * pData;
N  const GUI_LOGPALETTE GUI_UNI_PTR * pPal;
X  const GUI_LOGPALETTE  * pPal;
N  const GUI_BITMAP_METHODS * pMethods;
N} GUI_BITMAP;
N
N/* This structure may not be changed because the data that it
N   expects is read in binary form (via any kind of interface,
N   at runtime).
N   This structure should therefor not be changed.
N*/
Ntypedef struct {
N  U16 ID;           /* Version 1.00 => 100*/
X  unsigned short ID;            
N  U16 Version;
X  unsigned short Version;
N  U16 XSize;
X  unsigned short XSize;
N  U16 YSize;
X  unsigned short YSize;
N  U16 BytesPerLine;
X  unsigned short BytesPerLine;
N  U16 BitsPerPixel;
X  unsigned short BitsPerPixel;
N  U16 NumColors;
X  unsigned short NumColors;
N  U16 HasTrans;
X  unsigned short HasTrans;
N} GUI_BITMAP_STREAM;
N
Ntypedef struct {
N  int x,y;
N  unsigned char Pressed;
N} GUI_PID_STATE;
N
Ntypedef struct {
N  int xPos;
N  int yPos;
N  int xSize;
N  int ySize;
N  int Delay;
N} GUI_GIF_IMAGE_INFO;
N
Ntypedef struct {
N  int xSize;
N  int ySize;
N  int NumImages;
N} GUI_GIF_INFO;
N
N/*
N      ****************************************
N      *                                      *
N      *      FONT structures (new in V1.10)  *
N      *                                      *
N      ****************************************
N*/
N
N/* Translation list. Translates a character code into up to 2
N   indices of images to display on top of each other;
N   'á' -> index('a'), index('´') */
Ntypedef struct {
N  I16P c0;
X  signed short c0;
N  I16P c1;
X  signed short c1;
N} GUI_FONT_TRANSLIST;
N
Ntypedef struct {
N  U16P FirstChar;
X  unsigned short FirstChar;
N  U16P LastChar;
X  unsigned short LastChar;
N  const GUI_FONT_TRANSLIST GUI_UNI_PTR * pList;
X  const GUI_FONT_TRANSLIST  * pList;
N} GUI_FONT_TRANSINFO;
N
Ntypedef struct {
N  U8 XSize;
X  unsigned char XSize;
N  U8 XDist;
X  unsigned char XDist;
N  U8 BytesPerLine;
X  unsigned char BytesPerLine;
N  const unsigned char GUI_UNI_PTR * pData;
X  const unsigned char  * pData;
N} GUI_CHARINFO;
N
Ntypedef struct GUI_FONT_PROP {
N  U16P First;                                /* first character               */
X  unsigned short First;                                 
N  U16P Last;                                 /* last character                */
X  unsigned short Last;                                  
N  const GUI_CHARINFO GUI_UNI_PTR * paCharInfo;            /* address of first character    */
X  const GUI_CHARINFO  * paCharInfo;             
N  const struct GUI_FONT_PROP GUI_UNI_PTR * pNext;        /* pointer to next */
X  const struct GUI_FONT_PROP  * pNext;         
N} GUI_FONT_PROP;
N
Ntypedef struct {
N  const unsigned char GUI_UNI_PTR * pData;
X  const unsigned char  * pData;
N  const U8 GUI_UNI_PTR * pTransData;
X  const unsigned char  * pTransData;
N  const GUI_FONT_TRANSINFO GUI_UNI_PTR * pTrans;
X  const GUI_FONT_TRANSINFO  * pTrans;
N  U16P FirstChar;
X  unsigned short FirstChar;
N  U16P LastChar;
X  unsigned short LastChar;
N  U8 XSize;
X  unsigned char XSize;
N  U8 XDist;
X  unsigned char XDist;
N  U8 BytesPerLine;
X  unsigned char BytesPerLine;
N} GUI_FONT_MONO;
N
N
Ntypedef struct GUI_FONT_INFO {
N  U16P First;                        /* first character               */
X  unsigned short First;                         
N  U16P Last;                         /* last character                */
X  unsigned short Last;                          
N  const GUI_CHARINFO* paCharInfo;    /* address of first character    */
N  const struct GUI_FONT_INFO* pNext; /* pointer to next */
N} GUI_FONT_INFO;
N
N/*
N      ****************************************
N      *                                      *
N      *      FONT info structure             *
N      *                                      *
N      ****************************************
N
NThis structure is used when retrieving information about a font.
NIt is designed for future expansion without incompatibilities.
N*/
Ntypedef struct {
N  U16 Flags;
X  unsigned short Flags;
N  U8 Baseline;
X  unsigned char Baseline;
N  U8 LHeight;     /* height of a small lower case character (a,x) */
X  unsigned char LHeight;      
N  U8 CHeight;     /* height of a small upper case character (A,X) */
X  unsigned char CHeight;      
N} GUI_FONTINFO;
N
N#define GUI_FONTINFO_FLAG_PROP (1<<0)    /* Is proportional */
N#define GUI_FONTINFO_FLAG_MONO (1<<1)    /* Is monospaced */
N#define GUI_FONTINFO_FLAG_AA   (1<<2)    /* Is an antialiased font */
N#define GUI_FONTINFO_FLAG_AA2  (1<<3)    /* Is an antialiased font, 2bpp */
N#define GUI_FONTINFO_FLAG_AA4  (1<<4)    /* Is an antialiased font, 4bpp */
N
N
N/**********************************************************************
N*
N*         UNICODE Encoding
N*
N***********************************************************************
N*/
Ntypedef U16  tGUI_GetCharCode(const char GUI_UNI_PTR *s);
Xtypedef unsigned short  tGUI_GetCharCode(const char  *s);
Ntypedef int  tGUI_GetCharSize(const char GUI_UNI_PTR *s);
Xtypedef int  tGUI_GetCharSize(const char  *s);
Ntypedef int  tGUI_CalcSizeOfChar(U16 Char);
Xtypedef int  tGUI_CalcSizeOfChar(unsigned short Char);
Ntypedef int  tGUI_Encode(char *s, U16 Char);
Xtypedef int  tGUI_Encode(char *s, unsigned short Char);
N
Ntypedef struct {
N  tGUI_GetCharCode*            pfGetCharCode;
N  tGUI_GetCharSize*            pfGetCharSize;
N  tGUI_CalcSizeOfChar*         pfCalcSizeOfChar;
N  tGUI_Encode*                 pfEncode;
N} GUI_UC_ENC_APILIST;
N
N/**********************************************************************
N*
N*                 FONT Encoding
N*
N***********************************************************************
N*/
N
Ntypedef int  tGUI_GetLineDistX(const char GUI_UNI_PTR *s, int Len);
Xtypedef int  tGUI_GetLineDistX(const char  *s, int Len);
Ntypedef int  tGUI_GetLineLen(const char GUI_UNI_PTR *s, int MaxLen);
Xtypedef int  tGUI_GetLineLen(const char  *s, int MaxLen);
Ntypedef void tGL_DispLine(const char GUI_UNI_PTR *s, int Len);
Xtypedef void tGL_DispLine(const char  *s, int Len);
N
Ntypedef struct {
N  tGUI_GetLineDistX*          pfGetLineDistX;
N  tGUI_GetLineLen*            pfGetLineLen;
N  tGL_DispLine*               pfDispLine;
N} tGUI_ENC_APIList;
N
Nextern const tGUI_ENC_APIList GUI_ENC_APIList_SJIS;
N
N
N/*
N      ****************************************
N      *                                      *
N      *      FONT methods                    *
N      *                                      *
N      ****************************************
N
NThe parameter to the methods called pFont should be of type
NGUI_FONT, but unfortunately a lot of compilers can not handle
Nforward declarations right ...
NSo it ends up to be a void pointer.
N*/
N
Ntypedef struct GUI_FONT GUI_FONT;
N
Ntypedef void GUI_DISPCHAR(U16 c);
Xtypedef void GUI_DISPCHAR(unsigned short c);
Ntypedef int  GUI_GETCHARDISTX(U16P c);
Xtypedef int  GUI_GETCHARDISTX(unsigned short c);
Ntypedef void GUI_GETFONTINFO(const GUI_FONT GUI_UNI_PTR * pFont, GUI_FONTINFO * pfi);
Xtypedef void GUI_GETFONTINFO(const GUI_FONT  * pFont, GUI_FONTINFO * pfi);
Ntypedef char GUI_ISINFONT   (const GUI_FONT GUI_UNI_PTR * pFont, U16 c);
Xtypedef char GUI_ISINFONT   (const GUI_FONT  * pFont, unsigned short c);
N
N#define DECLARE_FONT(Type)                                     \
Nvoid GUI##Type##_DispChar    (U16P c);                         \
Nint  GUI##Type##_GetCharDistX(U16P c);                         \
Nvoid GUI##Type##_GetFontInfo (const GUI_FONT GUI_UNI_PTR * pFont, GUI_FONTINFO * pfi); \
Nchar GUI##Type##_IsInFont    (const GUI_FONT GUI_UNI_PTR * pFont, U16 c)
X#define DECLARE_FONT(Type)                                     void GUI##Type##_DispChar    (U16P c);                         int  GUI##Type##_GetCharDistX(U16P c);                         void GUI##Type##_GetFontInfo (const GUI_FONT GUI_UNI_PTR * pFont, GUI_FONTINFO * pfi); char GUI##Type##_IsInFont    (const GUI_FONT GUI_UNI_PTR * pFont, U16 c)
N
N#if defined(__cplusplus)
X#if 0L
Sextern "C" {     /* Make sure we have C-declarations in C++ programs */
N#endif
N
N/* MONO: Monospaced fonts */
NDECLARE_FONT(MONO);
Xvoid GUIMONO_DispChar (unsigned short c); int GUIMONO_GetCharDistX(unsigned short c); void GUIMONO_GetFontInfo (const GUI_FONT  * pFont, GUI_FONTINFO * pfi); char GUIMONO_IsInFont (const GUI_FONT  * pFont, unsigned short c);
N#define GUI_FONTTYPE_MONO       \
N  GUIMONO_DispChar,             \
N	GUIMONO_GetCharDistX,         \
N	GUIMONO_GetFontInfo,          \
N	GUIMONO_IsInFont,             \
N  (tGUI_ENC_APIList*)0
X#define GUI_FONTTYPE_MONO         GUIMONO_DispChar,             	GUIMONO_GetCharDistX,         	GUIMONO_GetFontInfo,          	GUIMONO_IsInFont,               (tGUI_ENC_APIList*)0
N
N/* PROP: Proportional fonts */
NDECLARE_FONT(PROP);
Xvoid GUIPROP_DispChar (unsigned short c); int GUIPROP_GetCharDistX(unsigned short c); void GUIPROP_GetFontInfo (const GUI_FONT  * pFont, GUI_FONTINFO * pfi); char GUIPROP_IsInFont (const GUI_FONT  * pFont, unsigned short c);
N#define GUI_FONTTYPE_PROP       \
N  GUIPROP_DispChar,             \
N	GUIPROP_GetCharDistX,         \
N	GUIPROP_GetFontInfo,          \
N	GUIPROP_IsInFont,             \
N  (tGUI_ENC_APIList*)0
X#define GUI_FONTTYPE_PROP         GUIPROP_DispChar,             	GUIPROP_GetCharDistX,         	GUIPROP_GetFontInfo,          	GUIPROP_IsInFont,               (tGUI_ENC_APIList*)0
N
N/* PROP: Proportional fonts SJIS */
NDECLARE_FONT(PROP);
Xvoid GUIPROP_DispChar (unsigned short c); int GUIPROP_GetCharDistX(unsigned short c); void GUIPROP_GetFontInfo (const GUI_FONT  * pFont, GUI_FONTINFO * pfi); char GUIPROP_IsInFont (const GUI_FONT  * pFont, unsigned short c);
N#define GUI_FONTTYPE_PROP_SJIS  \
N  GUIPROP_DispChar,             \
N	GUIPROP_GetCharDistX,         \
N	GUIPROP_GetFontInfo,          \
N	GUIPROP_IsInFont,             \
N  &GUI_ENC_APIList_SJIS
X#define GUI_FONTTYPE_PROP_SJIS    GUIPROP_DispChar,             	GUIPROP_GetCharDistX,         	GUIPROP_GetFontInfo,          	GUIPROP_IsInFont,               &GUI_ENC_APIList_SJIS
N
N/* PROPAA: Proportional, antialiased fonts */
NDECLARE_FONT(PROPAA);
Xvoid GUIPROPAA_DispChar (unsigned short c); int GUIPROPAA_GetCharDistX(unsigned short c); void GUIPROPAA_GetFontInfo (const GUI_FONT  * pFont, GUI_FONTINFO * pfi); char GUIPROPAA_IsInFont (const GUI_FONT  * pFont, unsigned short c);
N#define GUI_FONTTYPE_PROPAA       \
N  GUIPROPAA_DispChar,             \
N	GUIPROPAA_GetCharDistX,         \
N	GUIPROPAA_GetFontInfo,          \
N	GUIPROPAA_IsInFont,             \
N  (tGUI_ENC_APIList*)0
X#define GUI_FONTTYPE_PROPAA         GUIPROPAA_DispChar,             	GUIPROPAA_GetCharDistX,         	GUIPROPAA_GetFontInfo,          	GUIPROPAA_IsInFont,               (tGUI_ENC_APIList*)0
N
N/* PROPAA: Proportional, antialiased fonts, 2bpp */
NDECLARE_FONT(PROP_AA2);
Xvoid GUIPROP_AA2_DispChar (unsigned short c); int GUIPROP_AA2_GetCharDistX(unsigned short c); void GUIPROP_AA2_GetFontInfo (const GUI_FONT  * pFont, GUI_FONTINFO * pfi); char GUIPROP_AA2_IsInFont (const GUI_FONT  * pFont, unsigned short c);
N#define GUI_FONTTYPE_PROP_AA2       \
N  GUIPROP_AA2_DispChar,             \
N	GUIPROP_AA2_GetCharDistX,         \
N	GUIPROP_AA2_GetFontInfo,          \
N	GUIPROP_AA2_IsInFont,             \
N  (tGUI_ENC_APIList*)0
X#define GUI_FONTTYPE_PROP_AA2         GUIPROP_AA2_DispChar,             	GUIPROP_AA2_GetCharDistX,         	GUIPROP_AA2_GetFontInfo,          	GUIPROP_AA2_IsInFont,               (tGUI_ENC_APIList*)0
N
N/* PROPAA: Proportional, antialiased fonts, 2bpp, SJIS encoding */
NDECLARE_FONT(PROP_AA2);
Xvoid GUIPROP_AA2_DispChar (unsigned short c); int GUIPROP_AA2_GetCharDistX(unsigned short c); void GUIPROP_AA2_GetFontInfo (const GUI_FONT  * pFont, GUI_FONTINFO * pfi); char GUIPROP_AA2_IsInFont (const GUI_FONT  * pFont, unsigned short c);
N#define GUI_FONTTYPE_PROP_AA2_SJIS  \
N  GUIPROP_AA2_DispChar,             \
N	GUIPROP_AA2_GetCharDistX,         \
N	GUIPROP_AA2_GetFontInfo,          \
N	GUIPROP_AA2_IsInFont,             \
N  GUI_ENCODE_SJIS
X#define GUI_FONTTYPE_PROP_AA2_SJIS    GUIPROP_AA2_DispChar,             	GUIPROP_AA2_GetCharDistX,         	GUIPROP_AA2_GetFontInfo,          	GUIPROP_AA2_IsInFont,               GUI_ENCODE_SJIS
N
N/* PROPAA: Proportional, antialiased fonts, 4bpp */
NDECLARE_FONT(PROP_AA4);
Xvoid GUIPROP_AA4_DispChar (unsigned short c); int GUIPROP_AA4_GetCharDistX(unsigned short c); void GUIPROP_AA4_GetFontInfo (const GUI_FONT  * pFont, GUI_FONTINFO * pfi); char GUIPROP_AA4_IsInFont (const GUI_FONT  * pFont, unsigned short c);
N#define GUI_FONTTYPE_PROP_AA4       \
N  GUIPROP_AA4_DispChar,             \
N	GUIPROP_AA4_GetCharDistX,         \
N	GUIPROP_AA4_GetFontInfo,          \
N	GUIPROP_AA4_IsInFont,             \
N  (tGUI_ENC_APIList*)0
X#define GUI_FONTTYPE_PROP_AA4         GUIPROP_AA4_DispChar,             	GUIPROP_AA4_GetCharDistX,         	GUIPROP_AA4_GetFontInfo,          	GUIPROP_AA4_IsInFont,               (tGUI_ENC_APIList*)0
N
N/* PROPAA: Proportional, antialiased fonts, 4bpp, SJIS encoding */
NDECLARE_FONT(PROP_AA4);
Xvoid GUIPROP_AA4_DispChar (unsigned short c); int GUIPROP_AA4_GetCharDistX(unsigned short c); void GUIPROP_AA4_GetFontInfo (const GUI_FONT  * pFont, GUI_FONTINFO * pfi); char GUIPROP_AA4_IsInFont (const GUI_FONT  * pFont, unsigned short c);
N#define GUI_FONTTYPE_PROP_AA4_SJIS  \
N  GUIPROP_AA4_DispChar,             \
N	GUIPROP_AA4_GetCharDistX,         \
N	GUIPROP_AA4_GetFontInfo,          \
N	GUIPROP_AA4_IsInFont,             \
N  GUI_ENCODE_SJIS
X#define GUI_FONTTYPE_PROP_AA4_SJIS    GUIPROP_AA4_DispChar,             	GUIPROP_AA4_GetCharDistX,         	GUIPROP_AA4_GetFontInfo,          	GUIPROP_AA4_IsInFont,               GUI_ENCODE_SJIS
N
N#if defined(__cplusplus)
X#if 0L
S  }
N#endif
N
Nstruct GUI_FONT {
N  GUI_DISPCHAR*     pfDispChar; 
N  GUI_GETCHARDISTX* pfGetCharDistX; 
N  GUI_GETFONTINFO*  pfGetFontInfo; 
N  GUI_ISINFONT*     pfIsInFont;
N  const tGUI_ENC_APIList* pafEncode;
N  U8 YSize;
X  unsigned char YSize;
N  U8 YDist;
X  unsigned char YDist;
N  U8 XMag;
X  unsigned char XMag;
N  U8 YMag;
X  unsigned char YMag;
N  union {
N    const void          GUI_UNI_PTR * pFontData;
X    const void           * pFontData;
N    const GUI_FONT_MONO GUI_UNI_PTR * pMono;
X    const GUI_FONT_MONO  * pMono;
N    const GUI_FONT_PROP GUI_UNI_PTR * pProp;
X    const GUI_FONT_PROP  * pProp;
N  } p;
N  U8 Baseline;
X  unsigned char Baseline;
N  U8 LHeight;     /* height of a small lower case character (a,x) */
X  unsigned char LHeight;      
N  U8 CHeight;     /* height of a small upper case character (A,X) */
X  unsigned char CHeight;      
N};
N
N/*********************************************************************
N*
N*       Position independent font structures
N*/
Ntypedef struct {
N  U32 ID;           /* Font file ID */
X  unsigned long ID;            
N  U16 YSize;        /* Height of font */
X  unsigned short YSize;         
N  U16 YDist;        /* Space of font Y */
X  unsigned short YDist;         
N  U16 Baseline;     /* Index of baseline */
X  unsigned short Baseline;      
N  U16 LHeight;      /* Height of a small lower case character (a) */
X  unsigned short LHeight;       
N  U16 CHeight;      /* Height of a upper case character (A) */
X  unsigned short CHeight;       
N  U16 NumAreas;     /* Number of character areas */
X  unsigned short NumAreas;      
N} GUI_SI_FONT;
N
Ntypedef struct {
N  U16 First;        /* Index of first character */
X  unsigned short First;         
N  U16 Last;         /* Index of last character */
X  unsigned short Last;          
N} GUI_SIF_CHAR_AREA;
N
Ntypedef struct {
N  U16 XSize;        /* Size of bitmap data in X */
X  unsigned short XSize;         
N  U16 XDist;        /* Number of pixels for increment cursor in X */
X  unsigned short XDist;         
N  U16 BytesPerLine; /* Number of bytes per line */
X  unsigned short BytesPerLine;  
N  U16 Dummy;
X  unsigned short Dummy;
N  U32 OffData;      /* Offset of pixel data */
X  unsigned long OffData;       
N} GUI_SIF_CHARINFO;
N
Ntypedef struct tGUI_SIF_APIList_struct {
N  GUI_DISPCHAR     * pDispChar;
N  GUI_GETCHARDISTX * pGetCharDistX;
N  GUI_GETFONTINFO  * pGetFontInfo;
N  GUI_ISINFONT     * pIsInFont;
N} tGUI_SIF_APIList;
N
N#define GUI_SIF_TYPE          tGUI_SIF_APIList
N#define GUI_SIF_TYPE_PROP     &GUI_SIF_APIList_Prop
N#define GUI_SIF_TYPE_PROP_AA2 &GUI_SIF_APIList_Prop_AA2
N#define GUI_SIF_TYPE_PROP_AA4 &GUI_SIF_APIList_Prop_AA4
N
N/*
N      *********************************
N      *                               *
N      *      Typedefs                 *
N      *                               *
N      *********************************
N*/
N
N#ifndef     GUI_HMEM
N  #if GUI_MAXBLOCKS < 32768
X  #if (2 + (1024*30) / 32) < 32768
N    #define     GUI_HMEM        I16P
N  #else
S    #define     GUI_HMEM        I32
N  #endif
N#endif
N#define     GUI_HMEM_NULL     (0)
Ntypedef     GUI_HMEM      GUI_HWIN;
Xtypedef     signed short      GUI_HWIN;
N#endif  /* GUITYPE_H_INCLUDED */
N
N/*************************** End of file ****************************/
N	 	 			 		    	 				 	  			   	 	 	 	 	 	  	  	      	   		 	 	 		  		  	 		 	  	  			     			       	   	 			  		    	 	     	 				  	 					 	 			   	  	  			 				 		 	 	 			     			 
L 32 "..\GUI\Core\GUI.h" 2
N#include "GUIVersion.h"
L 1 "..\GUI\Core\GUIVersion.h" 1
N/*
N*********************************************************************************************************
N*                                             uC/GUI V3.98
N*                        Universal graphic software for embedded applications
N*
N*                       (c) Copyright 2002, Micrium Inc., Weston, FL
N*                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
N*
N*              µC/GUI is protected by international copyright laws. Knowledge of the
N*              source code may not be used to write a similar product. This file may
N*              only be used in accordance with a license and should not be redistributed
N*              in any way. We appreciate your understanding and fairness.
N*
N----------------------------------------------------------------------
NFile        : GUIVersion.h
NPurpose     : Include file defining current GUI version
N---------------------------END-OF-HEADER------------------------------
N*/
N
N#ifndef  GUI_VERSION_H
N#define  GUI_VERSION_H
N
N#define GUI_VERSION 39800
N
N#endif   /* Avoid multiple inclusion */
N
N/*************************** End of file ****************************/
N	 	 			 		    	 				 	  			   	 	 	 	 	 	  	  	      	   		 	 	 		  		  	 		 	  	  			     			       	   	 			  		    	 	     	 				  	 					 	 			   	  	  			 				 		 	 	 			     			 
L 33 "..\GUI\Core\GUI.h" 2
N
N
N#if defined(__cplusplus)
X#if 0L
Sextern "C" {     /* Make sure we have C-declarations in C++ programs */
N#endif
N
N/*********************************************************************
N*
N*        Limitations for certain C51 Keil  (__C51__)
N*
N**********************************************************************
N*/
N#if defined (__C51__) && GUI_SUPPORT_MEMDEV
X#if 0L && 1
S  #error __C51__ (Keil) can not support function pointers sufficiently !  -> Disable memory devices  -> GUI_SUPPORT_MEMDEV 0
N#endif
N
N/*********************************************************************
N*
N*        macros, function replacement
N*
N**********************************************************************
N*/
N#define GUI_COUNTOF(a) (sizeof(a) / sizeof(a[0]))
N
N/************************************************************
N*
N*                    GUI_KEY_...
N*
N*************************************************************
NThese ID values are basically meant to be used with widgets
NNote that we have chosen the values to be close to existing
N"standards", so do not change them unless forced to.
N
N*/
N
N#define GUI_KEY_BACKSPACE         8         /* ASCII: BACKSPACE Crtl-H */
N#define GUI_KEY_TAB               9         /* ASCII: TAB       Crtl-I */
N#define GUI_KEY_BACKTAB           10
N#define GUI_KEY_ENTER             13        /* ASCII: ENTER     Crtl-M */
N#define GUI_KEY_LEFT              16
N#define GUI_KEY_UP                17
N#define GUI_KEY_RIGHT             18
N#define GUI_KEY_DOWN              19
N#define GUI_KEY_HOME              23
N#define GUI_KEY_END               24
N#define GUI_KEY_SHIFT             25
N#define GUI_KEY_CONTROL           26
N#define GUI_KEY_ESCAPE            27        /* ASCII: ESCAPE    0x1b   */
N#define GUI_KEY_INSERT            29
N#define GUI_KEY_DELETE            30
N#define GUI_KEY_SPACE             32
N#define GUI_KEY_PGUP              33
N#define GUI_KEY_PGDOWN            34
N
N#define GUI_KEY_F1                40
N#define GUI_KEY_F2                41
N
N#define GUI_KEY_NUM0		48
N#define GUI_KEY_NUM1		49
N#define GUI_KEY_NUM2		50
N#define GUI_KEY_NUM3		51
N#define GUI_KEY_NUM4		52
N#define GUI_KEY_NUM5		53
N#define GUI_KEY_NUM6		54
N#define GUI_KEY_NUM7		55
N#define GUI_KEY_NUM8		56
N#define GUI_KEY_NUM9		57
N
N#define GUI_KEY_STAR			42
N#define GUI_KEY_NUMBER_KEY	35
N
N#define GUI_KEY_LEFT_FUN		5
N#define GUI_KEY_RIGHT_FUN		6
N#define GUI_KEY_MIDDLE_FUN		GUI_KEY_ENTER
N
N
N/*********************************************************************
N*
N*       Dialog item IDs
N*
N*  The IDs below are arbitrary values. They just have to be unique
N*  within the dialog.
N*
N*  If you use your own Ids, we recommend to use values above GUI_ID_USER.
N*/
N
N#define GUI_ID_OK                1
N#define GUI_ID_CANCEL            2
N#define GUI_ID_YES               3
N#define GUI_ID_NO                4
N#define GUI_ID_CLOSE             5
N#define GUI_ID_HELP              6
N#define GUI_ID_MAXIMIZE          7
N#define GUI_ID_MINIMIZE          8
N
N#define GUI_ID_VSCROLL  0xFE
N#define GUI_ID_HSCROLL  0xFF
N
N#define GUI_ID_EDIT0    0x100
N#define GUI_ID_EDIT1    0x101
N#define GUI_ID_EDIT2    0x102
N#define GUI_ID_EDIT3    0x103
N#define GUI_ID_EDIT4    0x104
N#define GUI_ID_EDIT5    0x105
N#define GUI_ID_EDIT6    0x106
N#define GUI_ID_EDIT7    0x107
N#define GUI_ID_EDIT8    0x108
N#define GUI_ID_EDIT9    0x109
N
N#define GUI_ID_LISTBOX0 0x110
N#define GUI_ID_LISTBOX1 0x111
N#define GUI_ID_LISTBOX2 0x112
N#define GUI_ID_LISTBOX3 0x113
N#define GUI_ID_LISTBOX4 0x114
N#define GUI_ID_LISTBOX5 0x115
N#define GUI_ID_LISTBOX6 0x116
N#define GUI_ID_LISTBOX7 0x117
N#define GUI_ID_LISTBOX8 0x118
N#define GUI_ID_LISTBOX9 0x119
N
N#define GUI_ID_CHECK0   0x120
N#define GUI_ID_CHECK1   0x121
N#define GUI_ID_CHECK2   0x122
N#define GUI_ID_CHECK3   0x123
N#define GUI_ID_CHECK4   0x124
N#define GUI_ID_CHECK5   0x125
N#define GUI_ID_CHECK6   0x126
N#define GUI_ID_CHECK7   0x127
N#define GUI_ID_CHECK8   0x128
N#define GUI_ID_CHECK9   0x129
N
N#define GUI_ID_SLIDER0  0x130
N#define GUI_ID_SLIDER1  0x131
N#define GUI_ID_SLIDER2  0x132
N#define GUI_ID_SLIDER3  0x133
N#define GUI_ID_SLIDER4  0x134
N#define GUI_ID_SLIDER5  0x135
N#define GUI_ID_SLIDER6  0x136
N#define GUI_ID_SLIDER7  0x137
N#define GUI_ID_SLIDER8  0x138
N#define GUI_ID_SLIDER9  0x139
N
N#define GUI_ID_SCROLLBAR0 0x140
N#define GUI_ID_SCROLLBAR1 0x141
N#define GUI_ID_SCROLLBAR2 0x142
N#define GUI_ID_SCROLLBAR3 0x142
N
N#define GUI_ID_RADIO0 0x150
N#define GUI_ID_RADIO1 0x151
N#define GUI_ID_RADIO2 0x152
N#define GUI_ID_RADIO3 0x153
N#define GUI_ID_RADIO4 0x154
N#define GUI_ID_RADIO5 0x155
N#define GUI_ID_RADIO6 0x156
N#define GUI_ID_RADIO7 0x157
N
N#define GUI_ID_TEXT0  0x160
N#define GUI_ID_TEXT1  0x161
N#define GUI_ID_TEXT2  0x162
N#define GUI_ID_TEXT3  0x163
N#define GUI_ID_TEXT4  0x164
N#define GUI_ID_TEXT5  0x165
N#define GUI_ID_TEXT6  0x166
N#define GUI_ID_TEXT7  0x167
N#define GUI_ID_TEXT8  0x168
N#define GUI_ID_TEXT9  0x169
N
N#define GUI_ID_BUTTON0 0x170
N#define GUI_ID_BUTTON1 0x171
N#define GUI_ID_BUTTON2 0x172
N#define GUI_ID_BUTTON3 0x173
N#define GUI_ID_BUTTON4 0x174
N#define GUI_ID_BUTTON5 0x175
N#define GUI_ID_BUTTON6 0x176
N#define GUI_ID_BUTTON7 0x177
N#define GUI_ID_BUTTON8 0x178
N#define GUI_ID_BUTTON9 0x179
N
N#define GUI_ID_DROPDOWN0  0x180
N#define GUI_ID_DROPDOWN1  0x181
N#define GUI_ID_DROPDOWN2  0x182
N#define GUI_ID_DROPDOWN3  0x183
N
N#define GUI_ID_MULTIEDIT0 0x190
N#define GUI_ID_MULTIEDIT1 0x191
N#define GUI_ID_MULTIEDIT2 0x192
N#define GUI_ID_MULTIEDIT3 0x193
N
N#define GUI_ID_LISTVIEW0  0x200
N#define GUI_ID_LISTVIEW1  0x201
N#define GUI_ID_LISTVIEW2  0x202
N#define GUI_ID_LISTVIEW3  0x203
N
N#define GUI_ID_PROGBAR0   0x210
N#define GUI_ID_PROGBAR1   0x211
N#define GUI_ID_PROGBAR2   0x212
N#define GUI_ID_PROGBAR3   0x213
N
N#define GUI_ID_GRAPH0 0x220
N#define GUI_ID_GRAPH1 0x221
N#define GUI_ID_GRAPH2 0x222
N#define GUI_ID_GRAPH3 0x223
N
N#define GUI_ID_MULTIPAGE0 0x230
N#define GUI_ID_MULTIPAGE1 0x231
N#define GUI_ID_MULTIPAGE2 0x232
N#define GUI_ID_MULTIPAGE3 0x233
N
N#define GUI_ID_USER     0x800
N
N/*********************************************************************
N*
N*       Mouse buttons
N*/
N#define GUI_LBUTTON (1 << 0) /* Left button */
N#define GUI_RBUTTON (1 << 1) /* Right button */
N#define GUI_MBUTTON (1 << 2) /* Middle button */
N#define GUI_DBUTTON (1 << 7) /* Double-click button */
N
N/*********************************************************************
N*
N*       Wrap modes
N*/
Ntypedef enum { GUI_WRAPMODE_NONE, GUI_WRAPMODE_WORD, GUI_WRAPMODE_CHAR } GUI_WRAPMODE;
N
N/*********************************************************************
N*
N*               Constants  needed for GL
N*
N**********************************************************************
N*/
N
N/**********************************
N*
N*      Text styles
N*
N***********************************
N*/
N
N#define GUI_TS_NORMAL           (0)
N#define GUI_TS_UNDERLINE        (1 << 0)
N#define GUI_TS_STRIKETHRU       (1 << 1)
N#define GUI_TS_OVERLINE         (1 << 2)
N
N/**********************************
N*
N*      Line styles
N*
N***********************************
N*/
N
N#define GUI_LS_SOLID        (0)
N#define GUI_LS_DASH         (1)
N#define GUI_LS_DOT          (2)
N#define GUI_LS_DASHDOT      (3)
N#define GUI_LS_DASHDOTDOT   (4)
N
N
N/**********************************
N*
N*      Pen shapes
N*
N***********************************
N*/
N
N#define GUI_PS_ROUND        (0)
N#define GUI_PS_FLAT         (1)
N#define GUI_PS_SQUARE       (2)
N
N
N
N/*      *********************************
N        *
N        *      Standard colors
N        *
N        *********************************
N*/
N
N#define GUI_BLUE          0xFF0000
N#define GUI_GREEN         0x00FF00
N#define GUI_RED           0x0000FF
N#define GUI_CYAN          0xFFFF00
N#define GUI_MAGENTA       0xFF00FF
N#define GUI_YELLOW        0x00FFFF
N#define GUI_LIGHTBLUE     0xFF8080
N#define GUI_LIGHTGREEN    0x80FF80
N#define GUI_LIGHTRED      0x8080FF
N#define GUI_LIGHTCYAN     0xFFFF80
N#define GUI_LIGHTMAGENTA  0xFF80FF
N#define GUI_LIGHTYELLOW   0x80FFFF
N#define GUI_DARKBLUE      0x800000
N#define GUI_DARKGREEN     0x008000
N#define GUI_DARKRED       0x000080
N#define GUI_DARKCYAN      0x808000
N#define GUI_DARKMAGENTA   0x800080
N#define GUI_DARKYELLOW    0x008080
N#define GUI_WHITE         0xFFFFFF
N#define GUI_LIGHTGRAY     0xD3D3D3
N#define GUI_GRAY          0x808080
N#define GUI_DARKGRAY      0x404040
N#define GUI_BLACK         0x000000
N
N#define GUI_BROWN         0x2A2AA5
N
N#define GUI_INVALID_COLOR 0xFFFFFFF      /* Invalid color - more than 24 bits */
N
N/*      *********************************
N        *
N        *      Coordinates
N        *
N        *********************************
N*/
N#define GUI_COORD_X 0
N#define GUI_COORD_Y 1
N
N/*********************************************************************
N*
N*            Standard Fonts
N*
N**********************************************************************
N
NNote: The external declarations for the fonts are now also included in
N      this file.
N*/
N
N
N/* Proportional fonts */
Nextern GUI_CONST_STORAGE GUI_FONT GUI_Font8_ASCII,        GUI_Font8_1;
Xextern const GUI_FONT GUI_Font8_ASCII,        GUI_Font8_1;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_Font10S_ASCII,      GUI_Font10S_1;
Xextern const GUI_FONT GUI_Font10S_ASCII,      GUI_Font10S_1;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_Font10_ASCII,       GUI_Font10_1;
Xextern const GUI_FONT GUI_Font10_ASCII,       GUI_Font10_1;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_Font13_ASCII,       GUI_Font13_1;
Xextern const GUI_FONT GUI_Font13_ASCII,       GUI_Font13_1;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_Font13B_ASCII,      GUI_Font13B_1;
Xextern const GUI_FONT GUI_Font13B_ASCII,      GUI_Font13B_1;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_Font13H_ASCII,      GUI_Font13H_1;
Xextern const GUI_FONT GUI_Font13H_ASCII,      GUI_Font13H_1;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_Font13HB_ASCII,     GUI_Font13HB_1;
Xextern const GUI_FONT GUI_Font13HB_ASCII,     GUI_Font13HB_1;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_Font16_ASCII,       GUI_Font16_1,       GUI_Font16_HK,    GUI_Font16_1HK;
Xextern const GUI_FONT GUI_Font16_ASCII,       GUI_Font16_1,       GUI_Font16_HK,    GUI_Font16_1HK;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_Font16B_ASCII,      GUI_Font16B_1;
Xextern const GUI_FONT GUI_Font16B_ASCII,      GUI_Font16B_1;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_Font24_ASCII,       GUI_Font24_1;
Xextern const GUI_FONT GUI_Font24_ASCII,       GUI_Font24_1;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_Font24B_ASCII,      GUI_Font24B_1;
Xextern const GUI_FONT GUI_Font24B_ASCII,      GUI_Font24B_1;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_Font32_ASCII,       GUI_Font32_1;
Xextern const GUI_FONT GUI_Font32_ASCII,       GUI_Font32_1;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_Font32B_ASCII,      GUI_Font32B_1;
Xextern const GUI_FONT GUI_Font32B_ASCII,      GUI_Font32B_1;
N
N/* Monospaced */
Nextern GUI_CONST_STORAGE GUI_FONT GUI_Font4x6;
Xextern const GUI_FONT GUI_Font4x6;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_Font6x8,            GUI_Font6x9;
Xextern const GUI_FONT GUI_Font6x8,            GUI_Font6x9;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_Font8x8,            GUI_Font8x9;
Xextern const GUI_FONT GUI_Font8x8,            GUI_Font8x9;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_Font8x10_ASCII;
Xextern const GUI_FONT GUI_Font8x10_ASCII;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_Font8x12_ASCII;
Xextern const GUI_FONT GUI_Font8x12_ASCII;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_Font8x13_ASCII,     GUI_Font8x13_1;
Xextern const GUI_FONT GUI_Font8x13_ASCII,     GUI_Font8x13_1;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_Font8x15B_ASCII,    GUI_Font8x15B_1;
Xextern const GUI_FONT GUI_Font8x15B_ASCII,    GUI_Font8x15B_1;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_Font8x16,           GUI_Font8x17,       GUI_Font8x18;
Xextern const GUI_FONT GUI_Font8x16,           GUI_Font8x17,       GUI_Font8x18;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_Font8x16x1x2,       GUI_Font8x16x2x2,   GUI_Font8x16x3x3;
Xextern const GUI_FONT GUI_Font8x16x1x2,       GUI_Font8x16x2x2,   GUI_Font8x16x3x3;
N
N/* Digits */
Nextern GUI_CONST_STORAGE GUI_FONT GUI_FontD24x32;
Xextern const GUI_FONT GUI_FontD24x32;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_FontD32;
Xextern const GUI_FONT GUI_FontD32;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_FontD36x48;
Xextern const GUI_FONT GUI_FontD36x48;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_FontD48;
Xextern const GUI_FONT GUI_FontD48;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_FontD48x64;
Xextern const GUI_FONT GUI_FontD48x64;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_FontD64;
Xextern const GUI_FONT GUI_FontD64;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_FontD60x80;
Xextern const GUI_FONT GUI_FontD60x80;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_FontD80;
Xextern const GUI_FONT GUI_FontD80;
N
N/* Comic fonts */
Nextern GUI_CONST_STORAGE GUI_FONT GUI_FontComic18B_ASCII, GUI_FontComic18B_1;
Xextern const GUI_FONT GUI_FontComic18B_ASCII, GUI_FontComic18B_1;
Nextern GUI_CONST_STORAGE GUI_FONT GUI_FontComic24B_ASCII, GUI_FontComic24B_1;
Xextern const GUI_FONT GUI_FontComic24B_ASCII, GUI_FontComic24B_1;
N
N
N/*
N      *********************************
N      *                               *
N      * Text and drawing mode defines *
N      *                               *
N      *********************************
N
NThese defines come in two flavors: the long version (.._DRAWMODE_..)
Nand the short ones (.._DM_..). They are identical, feel free to use
Nwhich ever one you like best.
N
N*/
N
N#define GUI_DRAWMODE_NORMAL  LCD_DRAWMODE_NORMAL
N#define GUI_DRAWMODE_XOR     LCD_DRAWMODE_XOR
N#define GUI_DRAWMODE_TRANS   LCD_DRAWMODE_TRANS
N#define GUI_DRAWMODE_REV     LCD_DRAWMODE_REV
N#define GUI_DM_NORMAL        LCD_DRAWMODE_NORMAL
N#define GUI_DM_XOR           LCD_DRAWMODE_XOR
N#define GUI_DM_TRANS         LCD_DRAWMODE_TRANS
N#define GUI_DM_REV           LCD_DRAWMODE_REV
N
N#define GUI_TEXTMODE_NORMAL  LCD_DRAWMODE_NORMAL
N#define GUI_TEXTMODE_XOR     LCD_DRAWMODE_XOR
N#define GUI_TEXTMODE_TRANS   LCD_DRAWMODE_TRANS
N#define GUI_TEXTMODE_REV     LCD_DRAWMODE_REV
N#define GUI_TM_NORMAL        LCD_DRAWMODE_NORMAL
N#define GUI_TM_XOR           LCD_DRAWMODE_XOR
N#define GUI_TM_TRANS         LCD_DRAWMODE_TRANS
N#define GUI_TM_REV           LCD_DRAWMODE_REV
N
N/* Text alignment flags, horizontal */
N#define GUI_TA_HORIZONTAL  (3<<0)
N#define GUI_TA_LEFT        (0<<0)
N#define GUI_TA_RIGHT	     (1<<0)
N#define GUI_TA_CENTER	     (2<<0)
N#define GUI_TA_HCENTER	   GUI_TA_CENTER  /* easier to remember :-)  */
N
N/* Text alignment flags, vertical */
N#define GUI_TA_VERTICAL   (3<<2)
N#define GUI_TA_TOP	      (0<<2)
N#define GUI_TA_BOTTOM	    (1<<2)
N#define GUI_TA_BASELINE   (2<<2)
N#define GUI_TA_VCENTER    (3<<2)
N
N/*    *********************************
N      *
N      *     Min/Max coordinates
N      *
N      *********************************
N*/
N/* Define minimum and maximum coordinates in x and y */
N#define GUI_XMIN -4095
N#define GUI_XMAX  4095
N#define GUI_YMIN -4095
N#define GUI_YMAX  4095
N
N/*********************************************************************
N*
N*       Support for multitasking systems (locking)
N*
N**********************************************************************
N*/
N
Ntypedef struct GUI_CONTEXT GUI_CONTEXT;
N
N#if !GUI_OS
X#if !(0)
N  #define GUI_LOCK()
N  #define GUI_UNLOCK()
N  #define GUITASK_INIT()
N  #define GUITASK_COPY_CONTEXT()
N#else
S  void GUI_Lock(void);
S  void GUI_Unlock(void);
S  void GUITASK_Init(void);
S  void GUITASK_CopyContext(void);
S  GUI_CONTEXT * GUITASK_GetpContext(int Index);
S  #define GUI_LOCK()             GUI_Lock()
S  #define GUI_UNLOCK()           GUI_Unlock()
S  #define GUITASK_INIT()         GUITASK_Init()
S  #define GUITASK_COPY_CONTEXT() GUITASK_CopyContext()
N#endif
N
N/*********************************************************************
N*
N*             GUI_CONTEXT
N*
N**********************************************************************
N
N  This structure is public for one reason only:
N  To allow the application to save and restore the context.
N*/
N
Ntypedef union {
N  U8  aColorIndex8[2];
X  unsigned char  aColorIndex8[2];
N  U16 aColorIndex16[2];
X  unsigned short aColorIndex16[2];
N  U32 aColorIndex32[2];
X  unsigned long aColorIndex32[2];
N} LCD_COLORINDEX_UNION;
N
Nstruct GUI_CONTEXT {
N/* Variables in LCD module */
N  LCD_COLORINDEX_UNION LCD;
N  LCD_RECT       ClipRect;
N  U8             DrawMode;
X  unsigned char             DrawMode;
N  U8             SelLayer;
X  unsigned char             SelLayer;
N  U8             TextStyle;
X  unsigned char             TextStyle;
N/* Variables in GL module */
N  GUI_RECT* pClipRect_HL;                /* High level clip rectangle ... Speed optimization so drawing routines can optimize */
N  U8        PenSize;
X  unsigned char        PenSize;
N  U8        PenShape;
X  unsigned char        PenShape;
N  U8        LineStyle;
X  unsigned char        LineStyle;
N  U8        FillStyle;
X  unsigned char        FillStyle;
N/* Variables in GUICHAR module */
N  const GUI_FONT           GUI_UNI_PTR * pAFont;
X  const GUI_FONT            * pAFont;
N  #if GUI_SUPPORT_UNICODE
X  #if (1)
N    const GUI_UC_ENC_APILIST * pUC_API;    /* Unicode encoding API */
N  #endif
N  I16P LBorder;
X  signed short LBorder;
N  I16P DispPosX, DispPosY;
X  signed short DispPosX, DispPosY;
N  I16P DrawPosX, DrawPosY;
X  signed short DrawPosX, DrawPosY;
N  I16P TextMode, TextAlign;
X  signed short TextMode, TextAlign;
N  GUI_COLOR Color, BkColor;           /* Required only when changing devices and for speed opt (caching) */
N/* Variables in WM module */
N  #if GUI_WINSUPPORT
X  #if 1
N    const GUI_RECT* WM__pUserClipRect;
N    GUI_HWIN hAWin;
N    int xOff, yOff;
N  #endif
N/* Variables in MEMDEV module (with memory devices only) */
N  #if GUI_SUPPORT_DEVICES
X  #if (1 | (1 > 1))
N    const tLCDDEV_APIList* pDeviceAPI;  /* function pointers only */
N    GUI_HMEM    hDevData;
X    signed short    hDevData;
N    GUI_RECT    ClipRectPrev;
N  #endif
N/* Variables in Anitaliasing module */
N  #if GUI_SUPPORT_AA
X  #if 1
N    const tLCD_HL_APIList* pLCD_HL;     /* Required to reroute drawing (HLine & Pixel) to the AA module */
N    U8 AA_Factor;
X    unsigned char AA_Factor;
N    U8 AA_HiResEnable;
X    unsigned char AA_HiResEnable;
N  #endif
N};
N
N/* Rename GUI_SaveContext in order to avoid crashes if wrong GUIConf is used */
N#if   ( GUI_WINSUPPORT &&  GUI_SUPPORT_DEVICES)
X#if   ( 1 &&  (1 | (1 > 1)))
N  #define GUI_SaveContext GUI_SaveContext_W_M
N#elif (!GUI_WINSUPPORT &&  GUI_SUPPORT_DEVICES)
S  #define GUI_SaveContext GUI_SaveContext_M
S#elif ( GUI_WINSUPPORT && !GUI_SUPPORT_DEVICES)
S  #define GUI_SaveContext GUI_SaveContext_W
S#else
S  #define GUI_SaveContext GUI_SaveContext_
N#endif
N
N/*********************************************************************
N*
N*             General routines
N*
N**********************************************************************
N*/
Nint          GUI_Init             (void);
Nvoid         GUI_SetDefault       (void);
NGUI_DRAWMODE GUI_SetDrawMode      (GUI_DRAWMODE dm);
Nconst char * GUI_GetVersionString (void);
Nvoid         GUI_SaveContext      (      GUI_CONTEXT* pContext);
Xvoid         GUI_SaveContext_W_M      (      GUI_CONTEXT* pContext);
Nvoid         GUI_RestoreContext   (const GUI_CONTEXT* pContext);
Nvoid         GUI_SetScreenSizeX   (int xSize);
Nvoid         GUI_SetScreenSizeY   (int ySize);
Nint          GUI_GetScreenSizeX   (void);
Nint          GUI_GetScreenSizeY   (void);
Nconst GUI_RECT * GUI_SetClipRect  (const GUI_RECT * pRect);
N
N/*********************************************************************
N*
N*           Rectangle helper functions
N*
N**********************************************************************
N*/
N
Nint  GUI_RectsIntersect(const GUI_RECT* pr0, const GUI_RECT* pr1);
Nvoid GUI_MoveRect       (GUI_RECT *pRect, int x, int y);
Nvoid GUI_MergeRect      (GUI_RECT* pDest, const GUI_RECT* pr0, const GUI_RECT* pr1);
Nint  GUI__IntersectRects(GUI_RECT* pDest, const GUI_RECT* pr0, const GUI_RECT* pr1);
Nvoid GUI__IntersectRect (GUI_RECT* pDest, const GUI_RECT* pr0);
Nvoid GUI__ReduceRect    (GUI_RECT* pDest, const GUI_RECT *pRect, int Dist);
N
N/*********************************************************************
N*
N*       Misc helper functions
N*
N**********************************************************************
N*/
N
Nint  GUI__DivideRound     (int a, int b);
NI32  GUI__DivideRound32   (I32 a, I32 b);
Xsigned long  GUI__DivideRound32   (signed long a, signed long b);
Nint  GUI__SetText(GUI_HMEM* phText, const char* s);
Xint  GUI__SetText(signed short* phText, const char* s);
N
N
N
N/*********************************************************************
N*
N*      Get / Set Attributes
N*
N**********************************************************************
N*/
N 
NGUI_COLOR GUI_GetBkColor     (void);
NGUI_COLOR GUI_GetColor       (void);
Nint       GUI_GetBkColorIndex(void);
Nint       GUI_GetColorIndex  (void);
NU8        GUI_GetPenSize     (void);
Xunsigned char        GUI_GetPenSize     (void);
NU8        GUI_GetPenShape    (void);
Xunsigned char        GUI_GetPenShape    (void);
NU8        GUI_GetLineStyle   (void);
Xunsigned char        GUI_GetLineStyle   (void);
NU8        GUI_GetFillStyle   (void);
Xunsigned char        GUI_GetFillStyle   (void);
N
Nvoid      GUI_SetBkColor   (GUI_COLOR);
Nvoid      GUI_SetColor     (GUI_COLOR);
Nvoid      GUI_SetBkColorIndex(int Index);
Nvoid      GUI_SetColorIndex(int Index);
N
NU8        GUI_SetPenSize   (U8 Size);
Xunsigned char        GUI_SetPenSize   (unsigned char Size);
NU8        GUI_SetPenShape  (U8 Shape);
Xunsigned char        GUI_SetPenShape  (unsigned char Shape);
NU8        GUI_SetLineStyle (U8 Style);
Xunsigned char        GUI_SetLineStyle (unsigned char Style);
NU8        GUI_SetFillStyle (U8 Style);
Xunsigned char        GUI_SetFillStyle (unsigned char Style);
N
N/* Get/Set Character used as decimal point (usually '.' or ',') */
Nchar      GUI_GetDecChar(void);
Nchar      GUI_SetDecChar(char c);
N
N
N/*********************************************************************
N*
N*       Color / Index related functions
N*
N**********************************************************************
N*/
N
Nint       GUI_Color2Index(GUI_COLOR color);
NGUI_COLOR GUI_Color2VisColor(GUI_COLOR color);
Nchar      GUI_ColorIsAvailable(GUI_COLOR color);
NGUI_COLOR GUI_Index2Color(int Index);
Nvoid      GUI_InitLUT(void);
Nvoid      GUI_SetLUTEntry (U8 Pos, GUI_COLOR Color);
Xvoid      GUI_SetLUTEntry (unsigned char Pos, GUI_COLOR Color);
Nvoid      GUI_SetLUTColor (U8 Pos, GUI_COLOR Color);
Xvoid      GUI_SetLUTColor (unsigned char Pos, GUI_COLOR Color);
Nvoid      GUI_SetLUTColorEx(U8 Pos, LCD_COLOR Color, unsigned int LayerIndex);
Xvoid      GUI_SetLUTColorEx(unsigned char Pos, LCD_COLOR Color, unsigned int LayerIndex);
NU32       GUI_CalcColorDist (GUI_COLOR Color0, GUI_COLOR  Color1);
Xunsigned long       GUI_CalcColorDist (GUI_COLOR Color0, GUI_COLOR  Color1);
NU32       GUI_CalcVisColorError(GUI_COLOR color);
Xunsigned long       GUI_CalcVisColorError(GUI_COLOR color);
N
N/*********************************************************************
N*
N*       Logging (for debugging primarily)
N*
N**********************************************************************
N*/
Nvoid GUI_Log      (const char *s);
Nvoid GUI_Log1     (const char *s, int p0);
Nvoid GUI_Log2     (const char *s, int p0, int p1);
Nvoid GUI_Log3     (const char *s, int p0, int p1, int p2);
Nvoid GUI_Log4     (const char *s, int p0, int p1, int p2,int p3);
Nvoid GUI_Warn     (const char *s);
Nvoid GUI_Warn1    (const char *s, int p0);
Nvoid GUI_Warn2    (const char *s, int p0, int p1);
Nvoid GUI_Warn3    (const char *s, int p0, int p1, int p2);
Nvoid GUI_Warn4    (const char *s, int p0, int p1, int p2, int p3);
Nvoid GUI_ErrorOut (const char *s);
Nvoid GUI_ErrorOut1(const char *s, int p0);
Nvoid GUI_ErrorOut2(const char *s, int p0, int p1);
Nvoid GUI_ErrorOut3(const char *s, int p0, int p1, int p2);
Nvoid GUI_ErrorOut4(const char *s, int p0, int p1, int p2, int p3);
N
N/*********************************************************************
N*
N*             2d - GL
N*
N**********************************************************************
N*/
N
Nint  GUI_BMP_Draw         (const void * pFileData, int x0, int y0);
Nint  GUI_BMP_GetXSize     (const void * pFileData);
Nint  GUI_BMP_GetYSize     (const void * pFileData);
Nvoid GUI_Clear            (void);
Nvoid GUI_ClearRect        (int x0, int y0, int x1, int y1);
Nvoid GUI_ClearRectEx      (const GUI_RECT* pRect);
Nvoid GUI_DrawArc          (int x0, int y0, int rx, int ry, int a0, int a1);
Nvoid GUI_DrawBitmap       (const GUI_BITMAP GUI_UNI_PTR * pBM, int x0, int y0);
Xvoid GUI_DrawBitmap       (const GUI_BITMAP  * pBM, int x0, int y0);
Nvoid GUI_DrawBitmapMag    (const GUI_BITMAP GUI_UNI_PTR * pBM, int x0, int y0, int XMul, int YMul);
Xvoid GUI_DrawBitmapMag    (const GUI_BITMAP  * pBM, int x0, int y0, int XMul, int YMul);
Nvoid GUI_DrawBitmapEx     (const GUI_BITMAP GUI_UNI_PTR * pBitmap, int x0, int y0, int xCenter, int yCenter, int xMag, int yMag);
Xvoid GUI_DrawBitmapEx     (const GUI_BITMAP  * pBitmap, int x0, int y0, int xCenter, int yCenter, int xMag, int yMag);
Nvoid GUI_DrawBitmapExp    (int x0, int y0, int XSize, int YSize, int XMul,  int YMul, int BitsPerPixel, int BytesPerLine, const U8 GUI_UNI_PTR * pData, const GUI_LOGPALETTE GUI_UNI_PTR * pPal);
Xvoid GUI_DrawBitmapExp    (int x0, int y0, int XSize, int YSize, int XMul,  int YMul, int BitsPerPixel, int BytesPerLine, const unsigned char  * pData, const GUI_LOGPALETTE  * pPal);
Nvoid GUI_DrawCircle       (int x0, int y0, int r);
Nvoid GUI_DrawEllipse      (int x0, int y0, int rx, int ry);
Nvoid GUI_DrawGraph        (I16 *pay, int NumPoints, int x0, int y0);
Xvoid GUI_DrawGraph        (signed short *pay, int NumPoints, int x0, int y0);
Nvoid GUI_DrawGraphEx      (I16 *pay, int NumPoints, int x0, int y0, int Numerator, int Denominator);
Xvoid GUI_DrawGraphEx      (signed short *pay, int NumPoints, int x0, int y0, int Numerator, int Denominator);
Nvoid GUI_DrawHLine        (int y0, int x0, int x1);
Nvoid GUI_DrawLine         (int x0, int y0, int x1, int y1);
Nvoid GUI_DrawLineRel      (int dx, int dy);
Nvoid GUI_DrawLineTo       (int x, int y);
Nvoid GUI_DrawPie          (int x0, int y0, int r, int a0, int a1, int Type);
Nvoid GUI_DrawPixel        (int x, int y);
Nvoid GUI_DrawPoint        (int x, int y);
Nvoid GUI_DrawPolygon      (const GUI_POINT* pPoints, int NumPoints, int x0, int y0);
Nvoid GUI_DrawPolyLine     (const GUI_POINT* pPoints, int NumPoints, int x0, int y0);
Nvoid GUI_DrawFocusRect    (const GUI_RECT *pRect, int Dist);
Nvoid GUI_DrawRect         (int x0, int y0, int x1, int y1);
Nvoid GUI_DrawRectEx       (const GUI_RECT *pRect);
Nvoid GUI_DrawVLine        (int x0, int y0, int y1);
Nvoid GUI_FillCircle       (int x0, int y0, int r);
Nvoid GUI_FillEllipse      (int x0, int y0, int rx, int ry);
Nvoid GUI_FillPolygon      (const GUI_POINT* pPoints, int NumPoints, int x0, int y0);
Nvoid GUI_FillRect         (int x0, int y0, int x1, int y1);
Nvoid GUI_FillRectEx       (const GUI_RECT* pRect);
Nvoid GUI_GetClientRect    (GUI_RECT* pRect);
Nint  GUI_GIF_Draw         (const void * pGIF, U32 NumBytes, int x0, int y0);
Xint  GUI_GIF_Draw         (const void * pGIF, unsigned long NumBytes, int x0, int y0);
Nint  GUI_GIF_DrawEx       (const void * pGIF, U32 NumBytes, int x0, int y0, int Index);
Xint  GUI_GIF_DrawEx       (const void * pGIF, unsigned long NumBytes, int x0, int y0, int Index);
Nint  GUI_GIF_GetComment   (const void * pGIF, U32 NumBytes, U8 * pBuffer, int MaxSize, int Index);
Xint  GUI_GIF_GetComment   (const void * pGIF, unsigned long NumBytes, unsigned char * pBuffer, int MaxSize, int Index);
Nint  GUI_GIF_GetXSize     (const void * pGIF);
Nint  GUI_GIF_GetYSize     (const void * pGIF);
Nint  GUI_GIF_GetImageInfo (const void * pGIF, U32 NumBytes, GUI_GIF_IMAGE_INFO * pInfo, int Index);
Xint  GUI_GIF_GetImageInfo (const void * pGIF, unsigned long NumBytes, GUI_GIF_IMAGE_INFO * pInfo, int Index);
Nint  GUI_GIF_GetInfo      (const void * pGIF, U32 NumBytes, GUI_GIF_INFO * pInfo);
Xint  GUI_GIF_GetInfo      (const void * pGIF, unsigned long NumBytes, GUI_GIF_INFO * pInfo);
Nvoid GUI_InvertRect       (int x0, int y0, int x1, int y1);
Nvoid GUI_MoveRel          (int dx, int dy);
Nvoid GUI_MoveTo           (int x, int y);
N
N/*********************************************************************
N*
N*       JPEG support
N*
N**********************************************************************
N*/
Ntypedef struct {
N  int XSize;
N  int YSize;
N} GUI_JPEG_INFO;
N
Ntypedef int GUI_JPEG_GET_DATA_FUNC(void * p, int MaxNumBytes, const U8 ** ppData, unsigned StartOfFile);
Xtypedef int GUI_JPEG_GET_DATA_FUNC(void * p, int MaxNumBytes, const unsigned char ** ppData, unsigned StartOfFile);
N
Nint  GUI_JPEG_Draw        (const void * pFileData, int DataSize, int x0, int y0);
Nint  GUI_JPEG_DrawEx      (GUI_JPEG_GET_DATA_FUNC * fpGetData, void * p, int x0, int y0);
Nint  GUI_JPEG_DrawScaled  (const void * pFileData, int DataSize, int x0, int y0, int Num, int Denom);
Nint  GUI_JPEG_DrawScaledEx(GUI_JPEG_GET_DATA_FUNC * fpGetData, void * p, int x0, int y0, int Num, int Denom);
Nint  GUI_JPEG_GetInfo     (const void * pFileData, int DataSize, GUI_JPEG_INFO* pInfo);
Nint  GUI_JPEG_GetInfoEx   (GUI_JPEG_GET_DATA_FUNC * fpGetData, void * p, GUI_JPEG_INFO * pInfo);
N
N/*********************************************************************
N*
N*              Cursor routines
N*
N**********************************************************************
N*/
N
Ntypedef struct {
N  const GUI_UNI_PTR GUI_BITMAP * pBitmap;
X  const  GUI_BITMAP * pBitmap;
N  int xHot, yHot;
N} GUI_CURSOR;
N
N#if GUI_SUPPORT_CURSOR
X#if (0 | (1))
N  void               GUI_CURSOR_Activate   (void);
N  void               GUI_CURSOR_Deactivate (void);
N  int                GUI_CURSOR_GetState   (void);
N  void               GUI_CURSOR_Hide       (void);
N  void               GUI_CURSOR_SetXor     (const GUI_BITMAP * pBM, int x, int y);
N  void               GUI_CURSOR_SetPosition(int x, int y);
N  const GUI_CURSOR GUI_UNI_PTR * GUI_CURSOR_Select     (const GUI_CURSOR GUI_UNI_PTR * pCursor);
X  const GUI_CURSOR  * GUI_CURSOR_Select     (const GUI_CURSOR  * pCursor);
N  void               GUI_CURSOR_Show       (void);
N#else
S  #define GUI_CURSOR_Show()
S  #define GUI_CURSOR_Clear();
N#endif
N
N/*********************************************************************
N*
N*       Cursors and their bitmaps
N*
N**********************************************************************
N*/
Nextern GUI_CONST_STORAGE GUI_CURSOR GUI_CursorArrowS,  GUI_CursorArrowSI;
Xextern const GUI_CURSOR GUI_CursorArrowS,  GUI_CursorArrowSI;
Nextern GUI_CONST_STORAGE GUI_CURSOR GUI_CursorArrowM,  GUI_CursorArrowMI;
Xextern const GUI_CURSOR GUI_CursorArrowM,  GUI_CursorArrowMI;
Nextern GUI_CONST_STORAGE GUI_CURSOR GUI_CursorArrowL,  GUI_CursorArrowLI;
Xextern const GUI_CURSOR GUI_CursorArrowL,  GUI_CursorArrowLI;
Nextern GUI_CONST_STORAGE GUI_CURSOR GUI_CursorCrossS,  GUI_CursorCrossSI;
Xextern const GUI_CURSOR GUI_CursorCrossS,  GUI_CursorCrossSI;
Nextern GUI_CONST_STORAGE GUI_CURSOR GUI_CursorCrossM,  GUI_CursorCrossMI;
Xextern const GUI_CURSOR GUI_CursorCrossM,  GUI_CursorCrossMI;
Nextern GUI_CONST_STORAGE GUI_CURSOR GUI_CursorCrossL,  GUI_CursorCrossLI;
Xextern const GUI_CURSOR GUI_CursorCrossL,  GUI_CursorCrossLI;
Nextern GUI_CONST_STORAGE GUI_CURSOR GUI_CursorHeaderM, GUI_CursorHeaderMI;
Xextern const GUI_CURSOR GUI_CursorHeaderM, GUI_CursorHeaderMI;
N
Nextern GUI_CONST_STORAGE GUI_BITMAP GUI_BitmapArrowS, GUI_BitmapArrowSI;
Xextern const GUI_BITMAP GUI_BitmapArrowS, GUI_BitmapArrowSI;
Nextern GUI_CONST_STORAGE GUI_BITMAP GUI_BitmapArrowM, GUI_BitmapArrowMI;
Xextern const GUI_BITMAP GUI_BitmapArrowM, GUI_BitmapArrowMI;
Nextern GUI_CONST_STORAGE GUI_BITMAP GUI_BitmapArrowL, GUI_BitmapArrowLI;
Xextern const GUI_BITMAP GUI_BitmapArrowL, GUI_BitmapArrowLI;
Nextern GUI_CONST_STORAGE GUI_BITMAP GUI_BitmapCrossS, GUI_BitmapCrossSI;
Xextern const GUI_BITMAP GUI_BitmapCrossS, GUI_BitmapCrossSI;
Nextern GUI_CONST_STORAGE GUI_BITMAP GUI_BitmapCrossM, GUI_BitmapCrossMI;
Xextern const GUI_BITMAP GUI_BitmapCrossM, GUI_BitmapCrossMI;
Nextern GUI_CONST_STORAGE GUI_BITMAP GUI_BitmapCrossL, GUI_BitmapCrossLI;
Xextern const GUI_BITMAP GUI_BitmapCrossL, GUI_BitmapCrossLI;
N
N/*********************************************************************
N*
N*              Text related routines
N*
N**********************************************************************
N*/
N
Nvoid  GUI_DispCEOL (void);
Nvoid  GUI_DispChar  (U16 c);
Xvoid  GUI_DispChar  (unsigned short c);
Nvoid  GUI_DispChars (U16 c, int Cnt);
Xvoid  GUI_DispChars (unsigned short c, int Cnt);
Nvoid  GUI_DispCharAt(U16 c, I16P x, I16P y);
Xvoid  GUI_DispCharAt(unsigned short c, signed short x, signed short y);
Nvoid  GUI_DispString         (const char GUI_UNI_PTR *s);
Xvoid  GUI_DispString         (const char  *s);
Nvoid  GUI_DispStringAt       (const char GUI_UNI_PTR *s, int x, int y);
Xvoid  GUI_DispStringAt       (const char  *s, int x, int y);
Nvoid  GUI_DispStringAtCEOL   (const char GUI_UNI_PTR *s, int x, int y);
Xvoid  GUI_DispStringAtCEOL   (const char  *s, int x, int y);
Nvoid  GUI_DispStringHCenterAt(const char GUI_UNI_PTR *s, int x, int y);
Xvoid  GUI_DispStringHCenterAt(const char  *s, int x, int y);
Nvoid  GUI__DispStringInRect  (const char GUI_UNI_PTR *s, GUI_RECT* pRect, int TextAlign, int MaxNumChars);
Xvoid  GUI__DispStringInRect  (const char  *s, GUI_RECT* pRect, int TextAlign, int MaxNumChars);
Nvoid  GUI_DispStringInRect   (const char GUI_UNI_PTR *s, GUI_RECT* pRect, int Flags);
Xvoid  GUI_DispStringInRect   (const char  *s, GUI_RECT* pRect, int Flags);
N#if GUI_SUPPORT_ROTATION
X#if 1
N  void  GUI_DispStringInRectEx (const char GUI_UNI_PTR *s, GUI_RECT* pRect, int TextAlign, int MaxLen, const GUI_ROTATION * pLCD_Api);
X  void  GUI_DispStringInRectEx (const char  *s, GUI_RECT* pRect, int TextAlign, int MaxLen, const tLCD_APIList * pLCD_Api);
N#endif
Nvoid  GUI_DispStringInRectMax(const char GUI_UNI_PTR *s, GUI_RECT* pRect, int TextAlign, int MaxLen); /* Not to be doc. */
Xvoid  GUI_DispStringInRectMax(const char  *s, GUI_RECT* pRect, int TextAlign, int MaxLen);  
Nvoid  GUI_DispStringInRectWrap(const char GUI_UNI_PTR *s, GUI_RECT* pRect, int TextAlign, GUI_WRAPMODE WrapMode); /* Not to be doc. */
Xvoid  GUI_DispStringInRectWrap(const char  *s, GUI_RECT* pRect, int TextAlign, GUI_WRAPMODE WrapMode);  
Nvoid  GUI_DispStringLen      (const char GUI_UNI_PTR *s, int Len);
Xvoid  GUI_DispStringLen      (const char  *s, int Len);
Nvoid  GUI_GetTextExtend(GUI_RECT* pRect, const char GUI_UNI_PTR * s, int Len);
Xvoid  GUI_GetTextExtend(GUI_RECT* pRect, const char  * s, int Len);
Nint   GUI_GetYAdjust(void);
Nint   GUI_GetDispPosX(void);
Nint   GUI_GetDispPosY(void);
Nconst GUI_FONT GUI_UNI_PTR * GUI_GetFont(void);
Xconst GUI_FONT  * GUI_GetFont(void);
Nint   GUI_GetCharDistX(U16 c);
Xint   GUI_GetCharDistX(unsigned short c);
Nint   GUI_GetStringDistX(const char GUI_UNI_PTR *s);
Xint   GUI_GetStringDistX(const char  *s);
NGUI_DRAWMODE GUI_GetDrawMode(void);
Nint   GUI_GetFontDistY(void);
Nint   GUI_GetFontSizeY(void);
Nvoid  GUI_GetFontInfo   (const GUI_FONT GUI_UNI_PTR * pFont, GUI_FONTINFO* pfi);
Xvoid  GUI_GetFontInfo   (const GUI_FONT  * pFont, GUI_FONTINFO* pfi);
Nvoid  GUI_GetOrg(int * px, int * py);
Nint   GUI_GetYSizeOfFont(const GUI_FONT GUI_UNI_PTR * pFont);
Xint   GUI_GetYSizeOfFont(const GUI_FONT  * pFont);
Nint   GUI_GetYDistOfFont(const GUI_FONT GUI_UNI_PTR * pFont);
Xint   GUI_GetYDistOfFont(const GUI_FONT  * pFont);
Nint   GUI_GetTextAlign(void);
Nint   GUI_GetTextMode(void);
Nchar  GUI_IsInFont(const GUI_FONT GUI_UNI_PTR * pFont, U16 c);
Xchar  GUI_IsInFont(const GUI_FONT  * pFont, unsigned short c);
Nint   GUI_SetTextAlign(int Align);
Nint   GUI_SetTextMode(int Mode);
Nchar  GUI_SetTextStyle(char Style);
Nint   GUI_SetLBorder(int x);
Nvoid  GUI_SetOrg(int x, int y);
Nconst GUI_FONT GUI_UNI_PTR * GUI_SetFont(const GUI_FONT GUI_UNI_PTR * pNewFont);
Xconst GUI_FONT  * GUI_SetFont(const GUI_FONT  * pNewFont);
Nchar  GUI_GotoXY(int x, int y);
Nchar  GUI_GotoX(int x);
Nchar  GUI_GotoY(int y);
Nvoid  GUI_DispNextLine(void);
N
N/*********************************************************************
N*
N*       Position independent fonts
N*
N**********************************************************************
N*/
Nvoid GUI_SIF_CreateFont(void * pFontData, GUI_FONT * pFont, const GUI_SIF_TYPE * pFontType);
Xvoid GUI_SIF_CreateFont(void * pFontData, GUI_FONT * pFont, const tGUI_SIF_APIList * pFontType);
Nvoid GUI_SIF_DeleteFont(GUI_FONT * pFont);
N
N/*********************************************************************
N*
N*         Unicode support
N*
N**********************************************************************
N*/
N
Nint   GUI_UC_ConvertUC2UTF8   (const U16 GUI_UNI_PTR * s, int Len, char * pBuffer, int BufferSize);
Xint   GUI_UC_ConvertUC2UTF8   (const unsigned short  * s, int Len, char * pBuffer, int BufferSize);
Nint   GUI_UC_ConvertUTF82UC   (const char GUI_UNI_PTR * s, int Len, U16 * pBuffer, int BufferSize);
Xint   GUI_UC_ConvertUTF82UC   (const char  * s, int Len, unsigned short * pBuffer, int BufferSize);
Nint   GUI_UC_Encode           (char* s, U16 Char);
Xint   GUI_UC_Encode           (char* s, unsigned short Char);
Nint   GUI_UC_GetCharSize      (const char GUI_UNI_PTR * s);
Xint   GUI_UC_GetCharSize      (const char  * s);
NU16   GUI_UC_GetCharCode      (const char GUI_UNI_PTR * s);
Xunsigned short   GUI_UC_GetCharCode      (const char  * s);
Nvoid  GUI_UC_SetEncodeNone    (void);
Nvoid  GUI_UC_SetEncodeUTF8    (void);
N
Nvoid GUI_UC_DispString(const U16 GUI_UNI_PTR *s);
Xvoid GUI_UC_DispString(const unsigned short  *s);
Nvoid GUI_UC2DB (U16 Code, U8* pOut);
Xvoid GUI_UC2DB (unsigned short Code, unsigned char* pOut);
NU16  GUI_DB2UC (U8 Byte0, U8 Byte1);
Xunsigned short  GUI_DB2UC (unsigned char Byte0, unsigned char Byte1);
N
N/*    *********************************
N      *                               *
N      *         GUIVAL.C              *
N      *                               *
N      *********************************
N*/
N
Nvoid GUI_DispBin  (U32  v, U8 Len);
Xvoid GUI_DispBin  (unsigned long  v, unsigned char Len);
Nvoid GUI_DispBinAt(U32  v, I16P x, I16P y, U8 Len);
Xvoid GUI_DispBinAt(unsigned long  v, signed short x, signed short y, unsigned char Len);
Nvoid GUI_DispDec  (I32 v, U8 Len);
Xvoid GUI_DispDec  (signed long v, unsigned char Len);
Nvoid GUI_DispDecAt (I32 v, I16P x, I16P y, U8 Len);
Xvoid GUI_DispDecAt (signed long v, signed short x, signed short y, unsigned char Len);
Nvoid GUI_DispDecMin(I32 v);
Xvoid GUI_DispDecMin(signed long v);
Nvoid GUI_DispDecShift(I32 v, U8 Len, U8 Shift);
Xvoid GUI_DispDecShift(signed long v, unsigned char Len, unsigned char Shift);
Nvoid GUI_DispDecSpace(I32 v, U8 MaxDigits);
Xvoid GUI_DispDecSpace(signed long v, unsigned char MaxDigits);
Nvoid GUI_DispHex  (U32 v, U8 Len);
Xvoid GUI_DispHex  (unsigned long v, unsigned char Len);
Nvoid GUI_DispHexAt(U32 v, I16P x, I16P y, U8 Len);
Xvoid GUI_DispHexAt(unsigned long v, signed short x, signed short y, unsigned char Len);
Nvoid GUI_DispSDec(I32 v, U8 Len);
Xvoid GUI_DispSDec(signed long v, unsigned char Len);
Nvoid GUI_DispSDecShift(I32 v, U8 Len, U8 Shift);
Xvoid GUI_DispSDecShift(signed long v, unsigned char Len, unsigned char Shift);
N
N/*    *********************************
N      *                               *
N      *         GUIVALF.C             *
N      *                               *
N      *********************************
N
NRoutines to display floating point values. These routines use the routines
Ndefined in the module GUIVAL.C as base routines.
N
N*/
N
Nvoid GUI_DispFloat    (float v, char Len);
Nvoid GUI_DispFloatFix (float v, char Len, char Fract);
Nvoid GUI_DispFloatMin (float v, char Fract);
Nvoid GUI_DispSFloatFix(float v, char Len, char Fract);
Nvoid GUI_DispSFloatMin(float v, char Fract);
N
N
N/*********************************************************************
N*
N*         Dynamic memory management
N*
N**********************************************************************
N*/
N
N#if !defined(GUI_ALLOC_ALLOC)
X#if !0L
N  /* diagnostics */
N  GUI_ALLOC_DATATYPE GUI_ALLOC_GetNumFreeBytes (void);
X  signed short GUI_ALLOC_GetNumFreeBytes (void);
N  GUI_ALLOC_DATATYPE GUI_ALLOC_GetNumFreeBlocks(void);
X  signed short GUI_ALLOC_GetNumFreeBlocks(void);
N  GUI_ALLOC_DATATYPE GUI_ALLOC_GetNumUsedBytes (void);
X  signed short GUI_ALLOC_GetNumUsedBytes (void);
N  GUI_ALLOC_DATATYPE GUI_ALLOC_GetNumUsedBlocks(void);
X  signed short GUI_ALLOC_GetNumUsedBlocks(void);
N#else
S  #define GUI_ALLOC_GetNumFreeBytes()  0
S  #define GUI_ALLOC_GetNumFreeBlocks() 0
S  #define GUI_ALLOC_GetNumUsedBytes()  0
S  #define GUI_ALLOC_GetNumUsedBlocks() 0
N#endif
N
NGUI_HMEM           GUI_ALLOC_AllocInit  (const void *pInitData, GUI_ALLOC_DATATYPE Size);
Xsigned short           GUI_ALLOC_AllocInit  (const void *pInitData, signed short Size);
NGUI_HMEM           GUI_ALLOC_AllocNoInit(GUI_ALLOC_DATATYPE size);
Xsigned short           GUI_ALLOC_AllocNoInit(signed short size);
NGUI_HMEM           GUI_ALLOC_AllocZero  (GUI_ALLOC_DATATYPE size);
Xsigned short           GUI_ALLOC_AllocZero  (signed short size);
Nvoid               GUI_ALLOC_Free       (GUI_HMEM  hMem);
Xvoid               GUI_ALLOC_Free       (signed short  hMem);
Nvoid               GUI_ALLOC_FreePtrArray(GUI_HMEM * pArray, int NumElems);
Xvoid               GUI_ALLOC_FreePtrArray(signed short * pArray, int NumElems);
Nvoid               GUI_ALLOC_FreePtr    (GUI_HMEM *phMem);
Xvoid               GUI_ALLOC_FreePtr    (signed short *phMem);
NGUI_ALLOC_DATATYPE GUI_ALLOC_GetSize    (GUI_HMEM  hMem);
Xsigned short GUI_ALLOC_GetSize    (signed short  hMem);
NGUI_ALLOC_DATATYPE GUI_ALLOC_GetMaxSize (void);
Xsigned short GUI_ALLOC_GetMaxSize (void);
Nvoid*              GUI_ALLOC_h2p        (GUI_HMEM  hMem);
Xvoid*              GUI_ALLOC_h2p        (signed short  hMem);
Nvoid               GUI_ALLOC_Init       (void);
NGUI_HMEM           GUI_ALLOC_Realloc    (GUI_HMEM hOld, int NewSize);
Xsigned short           GUI_ALLOC_Realloc    (signed short hOld, int NewSize);
Nvoid               GUI_ALLOC_Lock       (void);
Nvoid               GUI_ALLOC_Unlock     (void);
N
N
N/*********************************************************************
N*
N*      Memory device: GUI_MEMDEV
N*
N**********************************************************************
N*/
N
N#define GUI_MEMDEV_HASTRANS       0
N#define GUI_MEMDEV_NOTRANS    (1<<0)
N
N#if GUI_SUPPORT_DEVICES
X#if (1 | (1 > 1))
N  typedef GUI_HMEM GUI_MEMDEV_Handle;
X  typedef signed short GUI_MEMDEV_Handle;
N  typedef void GUI_CALLBACK_VOID_P(void* p);
N
N  typedef struct {
N    GUI_RECT rView, rPrev;
N    char FirstCall;
N  } GUI_AUTODEV;
N
N  typedef struct {
N    char DrawFixed;
N    char IsMeasurement;
N  } GUI_AUTODEV_INFO;
N
N  int  GUI_MEMDEV_CreateAuto(GUI_AUTODEV * pAutoDev);
N  void GUI_MEMDEV_DeleteAuto(GUI_AUTODEV * pAutoDev);
N  int  GUI_MEMDEV_DrawAuto  (GUI_AUTODEV * pAutoDev, GUI_AUTODEV_INFO * pAutoDevInfo, GUI_CALLBACK_VOID_P * pfDraw, void * pData);
N
N  /* Create a memory device which is compatible to the selected LCD */
N  GUI_MEMDEV_Handle GUI_MEMDEV_Create     (int x0, int y0, int XSize, int YSize);
N  GUI_MEMDEV_Handle GUI_MEMDEV_CreateEx   (int x0, int y0, int XSize, int YSize, int Flags);
N  GUI_MEMDEV_Handle GUI_MEMDEV_CreateFixed(int x0, int y0, int xsize, int ysize, int Flags,
N                                           const tLCDDEV_APIList * pMemDevAPI,
N                                           const LCD_API_COLOR_CONV * pColorConvAPI);
N  void GUI_MEMDEV_Clear         (GUI_MEMDEV_Handle hMem);
N  void GUI_MEMDEV_CopyFromLCD   (GUI_MEMDEV_Handle hMem);
N  void GUI_MEMDEV_CopyFromLCDAA (GUI_MEMDEV_Handle hMem);
N  void GUI_MEMDEV_CopyToLCD     (GUI_MEMDEV_Handle hMem);
N  void GUI_MEMDEV_CopyToLCDAA   (GUI_MEMDEV_Handle hMem);
N  void GUI_MEMDEV_CopyToLCDAt   (GUI_MEMDEV_Handle hMem, int x, int y);
N  int  GUI_MEMDEV_CompareWithLCD(GUI_MEMDEV_Handle hMem, int*px, int*py, int *pExp, int*pAct);
N  void GUI_MEMDEV_Delete        (GUI_MEMDEV_Handle MemDev);
N  int  GUI_MEMDEV_GetXSize      (GUI_MEMDEV_Handle hMem);
N  int  GUI_MEMDEV_GetYSize      (GUI_MEMDEV_Handle hMem);
N  void GUI_MEMDEV_MarkDirty     (GUI_MEMDEV_Handle hMem, int x0, int y0, int x1, int y1);
N  void GUI_MEMDEV_ReduceYSize   (GUI_MEMDEV_Handle hMem, int YSize);
N  GUI_MEMDEV_Handle GUI_MEMDEV_Select (GUI_MEMDEV_Handle hMem);  /* Select (activate) a particular memory device. */
N  void  GUI_MEMDEV_SetOrg        (GUI_MEMDEV_Handle hMem, int x0, int y0);
N  void  GUI_MEMDEV_WriteAt       (GUI_MEMDEV_Handle hMem, int x, int y);
N  void  GUI_MEMDEV_Write         (GUI_MEMDEV_Handle hMem);
N  void  GUI_MEMDEV_WriteAlphaAt  (GUI_MEMDEV_Handle hMem, int Alpha, int x, int y);
N  void  GUI_MEMDEV_WriteAlpha    (GUI_MEMDEV_Handle hMem, int Alpha);
N  void  GUI_MEMDEV_WriteExAt     (GUI_MEMDEV_Handle hMem, int x, int y, int xMag, int yMag, int Alpha);
N  void  GUI_MEMDEV_WriteEx       (GUI_MEMDEV_Handle hMem, int xMag, int yMag, int Alpha);
N  int   GUI_MEMDEV_Draw          (GUI_RECT* pRect, GUI_CALLBACK_VOID_P* pfDraw, void* pData, int MemSize, int Flags);
N  void* GUI_MEMDEV_GetDataPtr    (GUI_MEMDEV_Handle hMem);
N  void  GUI_MEMDEV_SetColorConv  (GUI_MEMDEV_Handle hMem, const LCD_API_COLOR_CONV * pColorConvAPI);
N#endif
N
Nvoid GUI_SelectLCD(void);
Nunsigned int GUI_SelectLayer(unsigned int Index);
N
N/**************************************************************
N*
N*      Measure device: GUI_MEASDEV
N*
N***************************************************************
N*/
N
Ntypedef GUI_HMEM GUI_MEASDEV_Handle;
Xtypedef signed short GUI_MEASDEV_Handle;
N
NGUI_MEASDEV_Handle GUI_MEASDEV_Create (void);
Nvoid               GUI_MEASDEV_Delete (GUI_MEASDEV_Handle hMemDev);
Nvoid               GUI_MEASDEV_Select (GUI_MEASDEV_Handle hMem);
Nvoid               GUI_MEASDEV_GetRect(GUI_MEASDEV_Handle hMem, GUI_RECT *pRect);
Nvoid               GUI_MEASDEV_ClearRect(GUI_MEASDEV_Handle hMem);
N
N/************************************************************
N*
N*                 Polygon helpers
N*
N*************************************************************
N*/
Nvoid GUI_RotatePolygon(GUI_POINT* pDest, const GUI_POINT* pSrc, int NumPoints, float Angle);
Nvoid GUI_MagnifyPolygon(GUI_POINT* pDest, const GUI_POINT* pSrc, int NumPoints, int Mag);
Nvoid GUI_EnlargePolygon(GUI_POINT* pDest, const GUI_POINT* pSrc, int NumPoints, int Len);
N
N/************************************************************
N*
N*                 Streamed bitmap
N*
N*************************************************************
N*/
Nvoid GUI_DrawStreamedBitmap(const GUI_BITMAP_STREAM *pBitmapStream, int x, int y);
N
N/************************************************************
N*
N*                 BMP-export
N*
N*************************************************************
N*/
Ntypedef void GUI_CALLBACK_VOID_U8_P(U8 Data, void * p);
Xtypedef void GUI_CALLBACK_VOID_U8_P(unsigned char Data, void * p);
N
Nvoid GUI_BMP_SerializeEx(GUI_CALLBACK_VOID_U8_P * pfSerialize, int x0, int y0, int xSize, int ySize, void * p);
Nvoid GUI_BMP_Serialize  (GUI_CALLBACK_VOID_U8_P * pfSerialize, void * p);
N
N/*********************************************************************
N*
N*      Time / execution related routines
N*
N**********************************************************************
N*/
Nvoid GUI_Delay  (int Period);
Nint  GUI_GetTime(void);
Nint  GUI_Exec(void);         /* Execute all jobs ... Return 0 if nothing was done. */
Nint  GUI_Exec1(void);        /* Execute one job  ... Return 0 if nothing was done. */
N
N/*********************************************************************
N*
N*                 MessageBox
N*
N**********************************************************************
N
N  Note: These should be moved into a separate file.
N*/
Nint     GUI_MessageBox   (const char * sMessage, const char * sCaption, int Flags);
N#define GUI_MESSAGEBOX_CF_MOVEABLE (1 << 0)
N#define GUI_MESSAGEBOX_CF_MODAL    (1 << 1)
N
N#define GUI_MB_OK                20
N#define GUI_MB_WARNING           21
N
N/*********************************************************************
N*
N*                 GUI_TIMER module
N*
N**********************************************************************
N*/
N
Ntypedef struct {
N  GUI_TIMER_TIME Time;
X  int Time;
N  U32            Context;
X  unsigned long            Context;
N  GUI_HMEM hTimer;
X  signed short hTimer;
N} GUI_TIMER_MESSAGE;
N
Ntypedef GUI_HMEM GUI_TIMER_HANDLE;
Xtypedef signed short GUI_TIMER_HANDLE;
Ntypedef void GUI_TIMER_CALLBACK(/*const*/ GUI_TIMER_MESSAGE* pTM);
N
NGUI_TIMER_HANDLE GUI_TIMER_Create   (GUI_TIMER_CALLBACK* cb, int Time,  U32 Context, int Flags);
XGUI_TIMER_HANDLE GUI_TIMER_Create   (GUI_TIMER_CALLBACK* cb, int Time,  unsigned long Context, int Flags);
Nvoid             GUI_TIMER_Delete   (GUI_TIMER_HANDLE hObj);
N
N/* Methods changing properties */
Nvoid GUI_TIMER_SetPeriod (GUI_TIMER_HANDLE hObj, GUI_TIMER_TIME Period);
Xvoid GUI_TIMER_SetPeriod (GUI_TIMER_HANDLE hObj, int Period);
Nvoid GUI_TIMER_SetTime   (GUI_TIMER_HANDLE hObj, GUI_TIMER_TIME Period);
Xvoid GUI_TIMER_SetTime   (GUI_TIMER_HANDLE hObj, int Period);
Nvoid GUI_TIMER_SetDelay  (GUI_TIMER_HANDLE hObj, GUI_TIMER_TIME Delay);
Xvoid GUI_TIMER_SetDelay  (GUI_TIMER_HANDLE hObj, int Delay);
Nvoid GUI_TIMER_Restart   (GUI_TIMER_HANDLE hObj);
Nint  GUI_TIMER_Exec(void);
N
N
N/******************************************************************
N*
N*                 Anti Aliasing
N*
N*******************************************************************
N*/
N
Nvoid GUI_AA_DisableHiRes     (void);
Nvoid GUI_AA_EnableHiRes      (void);
Nint  GUI_AA_GetFactor        (void);
Nvoid GUI_AA_SetFactor        (int Factor);
Nvoid GUI_AA_DrawArc          (int x0, int y0, int rx, int ry, int a0, int a1);
Nvoid GUI_AA_DrawLine         (int x0, int y0, int x1, int y1);
Nvoid GUI_AA_DrawPolyOutline  (const GUI_POINT * pSrc, int NumPoints, int Thickness, int x, int y);
Nvoid GUI_AA_DrawPolyOutlineEx(const GUI_POINT * pSrc, int NumPoints, int Thickness, int x, int y, GUI_POINT * pBuffer);
Nvoid GUI_AA_FillCircle       (int x0, int y0, int r);
Nvoid GUI_AA_FillPolygon      (GUI_POINT* pPoints, int NumPoints, int x0, int y0);
N
N/******************************************************************
N*
N*                 Keyboard
N*
N*******************************************************************
N*/
N
N/* Message layer */
Nvoid GUI_StoreKeyMsg(int Key, int Pressed);
Nvoid GUI_SendKeyMsg (int Key, int Pressed);
Nint  GUI_PollKeyMsg(void);
N
N/* Message hook */
Ntypedef int GUI_KEY_MSG_HOOK(int Key, int Pressed);
Nextern  GUI_KEY_MSG_HOOK* GUI_pfKeyMsgHook;
NGUI_KEY_MSG_HOOK* GUI_SetKeyMsgHook(GUI_KEY_MSG_HOOK* pHook);
N
N/* Application layer */
Nint  GUI_GetKey(void);
Nint  GUI_WaitKey(void);
Nvoid GUI_StoreKey(int c);
Nvoid GUI_ClearKeyBuffer(void);
N
N/*********************************************************************
N*
N*       Task syncronisation (depends on configuration)
N*/
Nvoid GUI_WaitEvent(void);
N
N/*********************************************************************
N*
N*          PID  (Pointer input device ... mouse/touch) 
N*/
N
Nvoid GUI_PID_StoreState(const GUI_PID_STATE *pState);
Nint  GUI_PID_GetState  (      GUI_PID_STATE *pState);
N
N/*********************************************************************
N*
N*        Mouse, generic
N*/
Nint  GUI_MOUSE_GetState  (      GUI_PID_STATE *pState);
Nvoid GUI_MOUSE_StoreState(const GUI_PID_STATE *pState);
N
N/*********************************************************************
N*
N*          TOUCH screen, generic
N*/
N
Nint  GUI_TOUCH_GetState     (GUI_PID_STATE *pState);
Nvoid GUI_TOUCH_GetUnstable  (int* px, int* py);  /* for diagnostics only */
Nvoid GUI_TOUCH_StoreState   (int x, int y);
Nvoid GUI_TOUCH_StoreStateEx (const GUI_PID_STATE *pState);
Nvoid GUI_TOUCH_StoreUnstable(int x, int y);
N
N
N/*********************************************************************
N*
N*        Mouse, PS2 driver
N*/
Nvoid GUI_MOUSE_DRIVER_PS2_Init(void);               /* optional */
Nvoid GUI_MOUSE_DRIVER_PS2_OnRx(unsigned char Data);
N
N
N/*********************************************************************
N*
N*          TOUCH screen, analog driver
N*/
Nvoid GUI_TOUCH_Exec(void);
Nint  GUI_TOUCH_Calibrate(int Coord, int Log0, int Log1, int Phys0, int Phys1);
Nvoid GUI_TOUCH_SetDefaultCalibration(void);
Nint  GUI_TOUCH_GetxPhys(void);    /* for diagnostics only */
Nint  GUI_TOUCH_GetyPhys(void);    /* for diagnostics only */
Nvoid GUI_TOUCH_GetCalData(int Coord, int* pMin,int* pMax);
Nvoid GUI_TOUCH_SetCalData(int Coord, int* pMin,int* pMax);
N
N
N/*********************************************************************
N*
N*          TOUCH
N*
N*          imports
N*
N**********************************************************************
N
NPlease note: The following functions are required by the module.
NThey need to be part of your application software (or rather, part
Nof the hardware-layer of your software).
N*/
N
Nvoid GUI_TOUCH_X_ActivateX(void);
Nvoid GUI_TOUCH_X_ActivateY(void);
Nvoid GUI_TOUCH_X_Disable(void);
Nint  GUI_TOUCH_X_MeasureX(void);
Nint  GUI_TOUCH_X_MeasureY(void);
N
N/**************************************************************
N*
N*   Constants for fonts and bitmaps
N*
N***************************************************************
N*/
N
Nextern const GUI_BITMAP_METHODS GUI_BitmapMethodsRLE4;
Nextern const GUI_BITMAP_METHODS GUI_BitmapMethodsRLE8;
Nextern const GUI_BITMAP_METHODS GUI_BitmapMethodsRLE16;
Nextern const GUI_BITMAP_METHODS GUI_BitmapMethodsRLEM16;
Nextern const GUI_BITMAP_METHODS GUI_BitmapMethods555;
Nextern const GUI_BITMAP_METHODS GUI_BitmapMethodsM555;
Nextern const GUI_BITMAP_METHODS GUI_BitmapMethods565;
Nextern const GUI_BITMAP_METHODS GUI_BitmapMethodsM565;
Nextern const GUI_BITMAP_METHODS GUI_BitmapMethods888;
Nextern const GUI_BITMAP_METHODS GUI_BitmapMethodsM888;
N
N#define GUI_COMPRESS_RLE4 0
N#define GUI_COMPRESS_RLE8 0
N
N#define GUI_DRAW_RLE4    &GUI_BitmapMethodsRLE4   /* Method table ! */
N#define GUI_DRAW_RLE8    &GUI_BitmapMethodsRLE8   /* Method table ! */
N#define GUI_DRAW_RLE16   &GUI_BitmapMethodsRLE16  /* Method table ! */
N#define GUI_DRAW_RLEM16  &GUI_BitmapMethodsRLEM16 /* Method table ! */
N#define GUI_DRAW_BMP555  &GUI_BitmapMethods555    /* Method table ! */
N#define GUI_DRAW_BMPM555 &GUI_BitmapMethodsM555   /* Method table ! */
N#define GUI_DRAW_BMP565  &GUI_BitmapMethods565    /* Method table ! */
N#define GUI_DRAW_BMPM565 &GUI_BitmapMethodsM565   /* Method table ! */
N#define GUI_DRAW_BMP888  &GUI_BitmapMethods888    /* Method table ! */
N#define GUI_DRAW_BMPM888 &GUI_BitmapMethodsM888   /* Method table ! */
N
Nextern const tGUI_SIF_APIList GUI_SIF_APIList_Prop;
Nextern const tGUI_SIF_APIList GUI_SIF_APIList_Prop_AA2;
Nextern const tGUI_SIF_APIList GUI_SIF_APIList_Prop_AA4;
N
N/**************************************************************
N*
N*      Defines for constants
N*
N***************************************************************
N*/
N
N#define	________	0x0
N#define	_______X	0x1
N#define	______X_	0x2
N#define	______XX	0x3
N#define	_____X__	0x4
N#define	_____X_X	0x5
N#define	_____XX_	0x6
N#define	_____XXX	0x7
N#define	____X___	0x8
N#define	____X__X	0x9
N#define	____X_X_	0xa
N#define	____X_XX	0xb
N#define	____XX__	0xc
N#define	____XX_X	0xd
N#define	____XXX_	0xe
N#define	____XXXX	0xf
N#define	___X____	0x10
N#define	___X___X	0x11
N#define	___X__X_	0x12
N#define	___X__XX	0x13
N#define	___X_X__	0x14
N#define	___X_X_X	0x15
N#define	___X_XX_	0x16
N#define	___X_XXX	0x17
N#define	___XX___	0x18
N#define	___XX__X	0x19
N#define	___XX_X_	0x1a
N#define	___XX_XX	0x1b
N#define	___XXX__	0x1c
N#define	___XXX_X	0x1d
N#define	___XXXX_	0x1e
N#define	___XXXXX	0x1f
N#define	__X_____	0x20
N#define	__X____X	0x21
N#define	__X___X_	0x22
N#define	__X___XX	0x23
N#define	__X__X__	0x24
N#define	__X__X_X	0x25
N#define	__X__XX_	0x26
N#define	__X__XXX	0x27
N#define	__X_X___	0x28
N#define	__X_X__X	0x29
N#define	__X_X_X_	0x2a
N#define	__X_X_XX	0x2b
N#define	__X_XX__	0x2c
N#define	__X_XX_X	0x2d
N#define	__X_XXX_	0x2e
N#define	__X_XXXX	0x2f
N#define	__XX____	0x30
N#define	__XX___X	0x31
N#define	__XX__X_	0x32
N#define	__XX__XX	0x33
N#define	__XX_X__	0x34
N#define	__XX_X_X	0x35
N#define	__XX_XX_	0x36
N#define	__XX_XXX	0x37
N#define	__XXX___	0x38
N#define	__XXX__X	0x39
N#define	__XXX_X_	0x3a
N#define	__XXX_XX	0x3b
N#define	__XXXX__	0x3c
N#define	__XXXX_X	0x3d
N#define	__XXXXX_	0x3e
N#define	__XXXXXX	0x3f
N#define	_X______	0x40
N#define	_X_____X	0x41
N#define	_X____X_	0x42
N#define	_X____XX	0x43
N#define	_X___X__	0x44
N#define	_X___X_X	0x45
N#define	_X___XX_	0x46
N#define	_X___XXX	0x47
N#define	_X__X___	0x48
N#define	_X__X__X	0x49
N#define	_X__X_X_	0x4a
N#define	_X__X_XX	0x4b
N#define	_X__XX__	0x4c
N#define	_X__XX_X	0x4d
N#define	_X__XXX_	0x4e
N#define	_X__XXXX	0x4f
N#define	_X_X____	0x50
N#define	_X_X___X	0x51
N#define	_X_X__X_	0x52
N#define	_X_X__XX	0x53
N#define	_X_X_X__	0x54
N#define	_X_X_X_X	0x55
N#define	_X_X_XX_	0x56
N#define	_X_X_XXX	0x57
N#define	_X_XX___	0x58
N#define	_X_XX__X	0x59
N#define	_X_XX_X_	0x5a
N#define	_X_XX_XX	0x5b
N#define	_X_XXX__	0x5c
N#define	_X_XXX_X	0x5d
N#define	_X_XXXX_	0x5e
N#define	_X_XXXXX	0x5f
N#define	_XX_____	0x60
N#define	_XX____X	0x61
N#define	_XX___X_	0x62
N#define	_XX___XX	0x63
N#define	_XX__X__	0x64
N#define	_XX__X_X	0x65
N#define	_XX__XX_	0x66
N#define	_XX__XXX	0x67
N#define	_XX_X___	0x68
N#define	_XX_X__X	0x69
N#define	_XX_X_X_	0x6a
N#define	_XX_X_XX	0x6b
N#define	_XX_XX__	0x6c
N#define	_XX_XX_X	0x6d
N#define	_XX_XXX_	0x6e
N#define	_XX_XXXX	0x6f
N#define	_XXX____	0x70
N#define	_XXX___X	0x71
N#define	_XXX__X_	0x72
N#define	_XXX__XX	0x73
N#define	_XXX_X__	0x74
N#define	_XXX_X_X	0x75
N#define	_XXX_XX_	0x76
N#define	_XXX_XXX	0x77
N#define	_XXXX___	0x78
N#define	_XXXX__X	0x79
N#define	_XXXX_X_	0x7a
N#define	_XXXX_XX	0x7b
N#define	_XXXXX__	0x7c
N#define	_XXXXX_X	0x7d
N#define	_XXXXXX_	0x7e
N#define	_XXXXXXX	0x7f
N#define	X_______	0x80
N#define	X______X	0x81
N#define	X_____X_	0x82
N#define	X_____XX	0x83
N#define	X____X__	0x84
N#define	X____X_X	0x85
N#define	X____XX_	0x86
N#define	X____XXX	0x87
N#define	X___X___	0x88
N#define	X___X__X	0x89
N#define	X___X_X_	0x8a
N#define	X___X_XX	0x8b
N#define	X___XX__	0x8c
N#define	X___XX_X	0x8d
N#define	X___XXX_	0x8e
N#define	X___XXXX	0x8f
N#define	X__X____	0x90
N#define	X__X___X	0x91
N#define	X__X__X_	0x92
N#define	X__X__XX	0x93
N#define	X__X_X__	0x94
N#define	X__X_X_X	0x95
N#define	X__X_XX_	0x96
N#define	X__X_XXX	0x97
N#define	X__XX___	0x98
N#define	X__XX__X	0x99
N#define	X__XX_X_	0x9a
N#define X__XX_XX	0x9b
N#define X__XXX__	0x9c
N#define X__XXX_X	0x9d
N#define	X__XXXX_	0x9e
N#define	X__XXXXX	0x9f
N#define	X_X_____	0xa0
N#define	X_X____X	0xa1
N#define	X_X___X_	0xa2
N#define	X_X___XX	0xa3
N#define	X_X__X__	0xa4
N#define	X_X__X_X	0xa5
N#define	X_X__XX_	0xa6
N#define	X_X__XXX	0xa7
N#define	X_X_X___	0xa8
N#define	X_X_X__X	0xa9
N#define	X_X_X_X_	0xaa
N#define	X_X_X_XX	0xab
N#define	X_X_XX__	0xac
N#define	X_X_XX_X	0xad
N#define	X_X_XXX_	0xae
N#define	X_X_XXXX	0xaf
N#define	X_XX____	0xb0
N#define X_XX___X	0xb1
N#define	X_XX__X_	0xb2
N#define	X_XX__XX	0xb3
N#define	X_XX_X__	0xb4
N#define	X_XX_X_X	0xb5
N#define	X_XX_XX_	0xb6
N#define	X_XX_XXX	0xb7
N#define	X_XXX___	0xb8
N#define	X_XXX__X	0xb9
N#define	X_XXX_X_	0xba
N#define	X_XXX_XX	0xbb
N#define	X_XXXX__	0xbc
N#define	X_XXXX_X	0xbd
N#define	X_XXXXX_	0xbe
N#define	X_XXXXXX	0xbf
N#define	XX______	0xc0
N#define	XX_____X	0xc1
N#define	XX____X_	0xc2
N#define	XX____XX	0xc3
N#define	XX___X__	0xc4
N#define	XX___X_X	0xc5
N#define	XX___XX_	0xc6
N#define	XX___XXX	0xc7
N#define	XX__X___	0xc8
N#define	XX__X__X	0xc9
N#define	XX__X_X_	0xca
N#define	XX__X_XX	0xcb
N#define	XX__XX__	0xcc
N#define	XX__XX_X	0xcd
N#define	XX__XXX_	0xce
N#define XX__XXXX	0xcf
N#define	XX_X____	0xd0
N#define	XX_X___X	0xd1
N#define	XX_X__X_	0xd2
N#define	XX_X__XX	0xd3
N#define	XX_X_X__	0xd4
N#define	XX_X_X_X	0xd5
N#define	XX_X_XX_	0xd6
N#define	XX_X_XXX	0xd7
N#define	XX_XX___	0xd8
N#define	XX_XX__X	0xd9
N#define	XX_XX_X_	0xda
N#define	XX_XX_XX	0xdb
N#define	XX_XXX__	0xdc
N#define	XX_XXX_X	0xdd
N#define	XX_XXXX_	0xde
N#define	XX_XXXXX	0xdf
N#define	XXX_____	0xe0
N#define	XXX____X	0xe1
N#define	XXX___X_	0xe2
N#define	XXX___XX	0xe3
N#define	XXX__X__	0xe4
N#define	XXX__X_X	0xe5
N#define	XXX__XX_	0xe6
N#define	XXX__XXX	0xe7
N#define	XXX_X___	0xe8
N#define	XXX_X__X	0xe9
N#define	XXX_X_X_	0xea
N#define	XXX_X_XX	0xeb
N#define	XXX_XX__	0xec
N#define	XXX_XX_X	0xed
N#define	XXX_XXX_	0xee
N#define	XXX_XXXX	0xef
N#define	XXXX____	0xf0
N#define	XXXX___X	0xf1
N#define	XXXX__X_	0xf2
N#define	XXXX__XX	0xf3
N#define	XXXX_X__	0xf4
N#define	XXXX_X_X	0xf5
N#define	XXXX_XX_	0xf6
N#define	XXXX_XXX	0xf7
N#define	XXXXX___	0xf8
N#define	XXXXX__X	0xf9
N#define	XXXXX_X_	0xfa
N#define	XXXXX_XX	0xfb
N#define	XXXXXX__	0xfc
N#define	XXXXXX_X	0xfd
N#define	XXXXXXX_	0xfe
N#define	XXXXXXXX	0xff
N
N/**************************************************************
N*
N*      Compatibility with older versions
N*
N***************************************************************
N*/
N
N#define GUI_DispString_UC  GUI_UC_DispString
N#define TOUCH_X_ActivateX  GUI_TOUCH_X_ActivateX
N#define TOUCH_X_ActivateY  GUI_TOUCH_X_ActivateY
N#define TOUCH_X_Disable    GUI_TOUCH_X_Disable
N#define TOUCH_X_MeasureX   GUI_TOUCH_X_MeasureX
N#define TOUCH_X_MeasureY   GUI_TOUCH_X_MeasureY
N#define GUI_SelLayer       GUI_SelectLayer
N#if defined(__cplusplus)
X#if 0L
S}
N#endif 
N
N#endif   /* ifdef GUI_H */
N
N/*************************** End of file ****************************/
N	 	 			 		    	 				 	  			   	 	 	 	 	 	  	  	      	   		 	 	 		  		  	 		 	  	  			     			       	   	 			  		    	 	     	 				  	 					 	 			   	  	  			 				 		 	 	 			     			 
L 29 "..\GUI\Core\GUI_FontIntern.h" 2
N
N#if defined(__cplusplus)
X#if 0L
Sextern "C" {     /* Make sure we have C-declarations in C++ programs */
N#endif
N
N
Nextern GUI_CONST_STORAGE GUI_FONT_PROP GUI_Font8ASCII_Prop;
Xextern const GUI_FONT_PROP GUI_Font8ASCII_Prop;
Nextern GUI_CONST_STORAGE GUI_FONT_PROP GUI_Font10S_ASCII_FontProp1;
Xextern const GUI_FONT_PROP GUI_Font10S_ASCII_FontProp1;
Nextern GUI_CONST_STORAGE GUI_FONT_PROP GUI_Font10ASCIIProp1;
Xextern const GUI_FONT_PROP GUI_Font10ASCIIProp1;
Nextern GUI_CONST_STORAGE GUI_FONT_PROP GUI_Font16ASCIIProp1;
Xextern const GUI_FONT_PROP GUI_Font16ASCIIProp1;
N
Nextern GUI_CONST_STORAGE GUI_FONT_PROP GUI_Font16_1_FontProp1;
Xextern const GUI_FONT_PROP GUI_Font16_1_FontProp1;
Nextern GUI_CONST_STORAGE GUI_FONT_PROP FontComic24BProp_ASCII;
Xextern const GUI_FONT_PROP FontComic24BProp_ASCII;
N
Nextern GUI_CONST_STORAGE GUI_CHARINFO GUI_Font24B_ASCII_CharInfo[95];
Xextern const GUI_CHARINFO GUI_Font24B_ASCII_CharInfo[95];
Nextern GUI_CONST_STORAGE GUI_CHARINFO GUI_Font24_ASCII_CharInfo[95];
Xextern const GUI_CHARINFO GUI_Font24_ASCII_CharInfo[95];
Nextern GUI_CONST_STORAGE GUI_CHARINFO GUI_Font32B_ASCII_CharInfo[95];
Xextern const GUI_CHARINFO GUI_Font32B_ASCII_CharInfo[95];
N
Nextern GUI_CONST_STORAGE GUI_CHARINFO GUI_Font32_ASCII_CharInfo[95];
Xextern const GUI_CHARINFO GUI_Font32_ASCII_CharInfo[95];
Nextern GUI_CONST_STORAGE GUI_CHARINFO GUI_CharInfoF8x13_ASCII[96];
Xextern const GUI_CHARINFO GUI_CharInfoF8x13_ASCII[96];
Nextern GUI_CONST_STORAGE GUI_CHARINFO GUI_CharInfoF8x15B_ASCII[96];
Xextern const GUI_CHARINFO GUI_CharInfoF8x15B_ASCII[96];
Nextern GUI_CONST_STORAGE GUI_CHARINFO CharInfo18B_ASCII[97];
Xextern const GUI_CHARINFO CharInfo18B_ASCII[97];
Nextern GUI_CONST_STORAGE GUI_CHARINFO CharInfo24B_ASCII[96];
Xextern const GUI_CHARINFO CharInfo24B_ASCII[96];
Nextern GUI_CONST_STORAGE GUI_FONT_PROP GUI_Font13ASCII_Prop1;
Xextern const GUI_FONT_PROP GUI_Font13ASCII_Prop1;
Nextern GUI_CONST_STORAGE GUI_FONT_PROP GUI_Font13B_ASCII_Prop1;
Xextern const GUI_FONT_PROP GUI_Font13B_ASCII_Prop1;
Nextern GUI_CONST_STORAGE GUI_CHARINFO GUI_Font13H_ASCII_CharInfo[95];
Xextern const GUI_CHARINFO GUI_Font13H_ASCII_CharInfo[95];
Nextern GUI_CONST_STORAGE GUI_CHARINFO GUI_Font13HB_ASCII_CharInfo[95];
Xextern const GUI_CHARINFO GUI_Font13HB_ASCII_CharInfo[95];
Nextern GUI_CONST_STORAGE GUI_CHARINFO GUI_Font16_HK_CharInfo[169];
Xextern const GUI_CHARINFO GUI_Font16_HK_CharInfo[169];
Nextern GUI_CONST_STORAGE GUI_CHARINFO GUI_Font16B_ASCII_CharInfo[95];
Xextern const GUI_CHARINFO GUI_Font16B_ASCII_CharInfo[95];
N
N
N#if defined(__cplusplus)
X#if 0L
S  }
N#endif
N
N
N#endif   /* Guard against multiple inclusion */
N
N/*************************** End of file ****************************/
N	 	 			 		    	 				 	  			   	 	 	 	 	 	  	  	      	   		 	 	 		  		  	 		 	  	  			     			       	   	 			  		    	 	     	 				  	 					 	 			   	  	  			 				 		 	 	 			     			 
L 22 "..\GUI\Font\F13_1.c" 2
N
N
N/* Start of unicode area <Latin-1 Supplement> */
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00A0[13] = { /* code 00A0 */
Xconst unsigned char acFont13_1_00A0[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00A1[13] = { /* code 00A1 */
Xconst unsigned char acFont13_1_00A1[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _X______,
X  0x40,
N  ________,
X  0x0,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00A2[13] = { /* code 00A2 */
Xconst unsigned char acFont13_1_00A2[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  __X_____,
X  0x20,
N  __X_____,
X  0x20,
N  _XXXX___,
X  0x78,
N  X_X_____,
X  0xa0,
N  X_X_____,
X  0xa0,
N  X_X_____,
X  0xa0,
N  X_X_____,
X  0xa0,
N  _XXXX___,
X  0x78,
N  __X_____,
X  0x20,
N  __X_____};
X  0x20};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00A3[13] = { /* code 00A3 */
Xconst unsigned char acFont13_1_00A3[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  __XXX___,
X  0x38,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  XXXX____,
X  0xf0,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  XXXXX___,
X  0xf8,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00A4[13] = { /* code 00A4 */
Xconst unsigned char acFont13_1_00A4[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  X___X___,
X  0x88,
N  _XXX____,
X  0x70,
N  _X_X____,
X  0x50,
N  _XXX____,
X  0x70,
N  X___X___,
X  0x88,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00A5[13] = { /* code 00A5 */
Xconst unsigned char acFont13_1_00A5[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  X___X___,
X  0x88,
N  _X_X____,
X  0x50,
N  _X_X____,
X  0x50,
N  __X_____,
X  0x20,
N  __X_____,
X  0x20,
N  XXXXX___,
X  0xf8,
N  __X_____,
X  0x20,
N  __X_____,
X  0x20,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00A6[13] = { /* code 00A6 */
Xconst unsigned char acFont13_1_00A6[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______};
X  0x40};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00A7[13] = { /* code 00A7 */
Xconst unsigned char acFont13_1_00A7[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _XXXX___,
X  0x78,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  _XXX____,
X  0x70,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  _XXX____,
X  0x70,
N  ____X___,
X  0x8,
N  ____X___,
X  0x8,
N  XXXX____};
X  0xf0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00A8[13] = { /* code 00A8 */
Xconst unsigned char acFont13_1_00A8[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _X_X____,
X  0x50,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00A9[26] = { /* code 00A9 */
Xconst unsigned char acFont13_1_00A9[26] = {  
N  ________,________,
X  0x0,0x0,
N  ________,________,
X  0x0,0x0,
N  ________,________,
X  0x0,0x0,
N  __XXXXX_,________,
X  0x3e,0x0,
N  _X_____X,________,
X  0x41,0x0,
N  X__XXX__,X_______,
X  0x9c,0x80,
N  X_X_____,X_______,
X  0xa0,0x80,
N  X_X_____,X_______,
X  0xa0,0x80,
N  X_X_____,X_______,
X  0xa0,0x80,
N  X__XXX__,X_______,
X  0x9c,0x80,
N  _X_____X,________,
X  0x41,0x0,
N  __XXXXX_,________,
X  0x3e,0x0,
N  ________,________};
X  0x0,0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00AA[13] = { /* code 00AA */
Xconst unsigned char acFont13_1_00AA[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  XXX_____,
X  0xe0,
N  ___X____,
X  0x10,
N  _XXX____,
X  0x70,
N  X__X____,
X  0x90,
N  _XXX____,
X  0x70,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00AB[13] = { /* code 00AB */
Xconst unsigned char acFont13_1_00AB[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  __X_X___,
X  0x28,
N  _X_X____,
X  0x50,
N  X_X_____,
X  0xa0,
N  _X_X____,
X  0x50,
N  __X_X___,
X  0x28,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00AC[13] = { /* code 00AC */
Xconst unsigned char acFont13_1_00AC[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _XXXXXX_,
X  0x7e,
N  ______X_,
X  0x2,
N  ______X_,
X  0x2,
N  ______X_,
X  0x2,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00AD[13] = { /* code 00AD */
Xconst unsigned char acFont13_1_00AD[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  XXX_____,
X  0xe0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00AE[26] = { /* code 00AE */
Xconst unsigned char acFont13_1_00AE[26] = {  
N  ________,________,
X  0x0,0x0,
N  ________,________,
X  0x0,0x0,
N  ________,________,
X  0x0,0x0,
N  __XXXXX_,________,
X  0x3e,0x0,
N  _X_____X,________,
X  0x41,0x0,
N  X__XXX__,X_______,
X  0x9c,0x80,
N  X__X__X_,X_______,
X  0x92,0x80,
N  X__XXX__,X_______,
X  0x9c,0x80,
N  X__X_X__,X_______,
X  0x94,0x80,
N  X__X__X_,X_______,
X  0x92,0x80,
N  _X_____X,________,
X  0x41,0x0,
N  __XXXXX_,________,
X  0x3e,0x0,
N  ________,________};
X  0x0,0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00AF[13] = { /* code 00AF */
Xconst unsigned char acFont13_1_00AF[13] = {  
N  ________,
X  0x0,
N  XXXXXX__,
X  0xfc,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00B0[13] = { /* code 00B0 */
Xconst unsigned char acFont13_1_00B0[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _XX_____,
X  0x60,
N  X__X____,
X  0x90,
N  X__X____,
X  0x90,
N  _XX_____,
X  0x60,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00B1[13] = { /* code 00B1 */
Xconst unsigned char acFont13_1_00B1[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ___X____,
X  0x10,
N  ___X____,
X  0x10,
N  ___X____,
X  0x10,
N  XXXXXXX_,
X  0xfe,
N  ___X____,
X  0x10,
N  ___X____,
X  0x10,
N  XXXXXXX_,
X  0xfe,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00B2[13] = { /* code 00B2 */
Xconst unsigned char acFont13_1_00B2[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _XX_____,
X  0x60,
N  ___X____,
X  0x10,
N  ___X____,
X  0x10,
N  __X_____,
X  0x20,
N  _XXX____,
X  0x70,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00B3[13] = { /* code 00B3 */
Xconst unsigned char acFont13_1_00B3[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _XX_____,
X  0x60,
N  ___X____,
X  0x10,
N  __X_____,
X  0x20,
N  ___X____,
X  0x10,
N  _XX_____,
X  0x60,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00B4[13] = { /* code 00B4 */
Xconst unsigned char acFont13_1_00B4[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ___X____,
X  0x10,
N  __X_____,
X  0x20,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00B5[13] = { /* code 00B5 */
Xconst unsigned char acFont13_1_00B5[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X__XX___,
X  0x98,
N  XXX_X___,
X  0xe8,
N  X_______,
X  0x80,
N  X_______};
X  0x80};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00B6[13] = { /* code 00B6 */
Xconst unsigned char acFont13_1_00B6[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _XXXX___,
X  0x78,
N  XXX_X___,
X  0xe8,
N  XXX_X___,
X  0xe8,
N  XXX_X___,
X  0xe8,
N  _XX_X___,
X  0x68,
N  __X_X___,
X  0x28,
N  __X_X___,
X  0x28,
N  __X_X___,
X  0x28,
N  __X_X___,
X  0x28,
N  __X_X___};
X  0x28};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00B7[13] = { /* code 00B7 */
Xconst unsigned char acFont13_1_00B7[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00B8[13] = { /* code 00B8 */
Xconst unsigned char acFont13_1_00B8[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ____X___,
X  0x8,
N  __XX____};
X  0x30};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00B9[13] = { /* code 00B9 */
Xconst unsigned char acFont13_1_00B9[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  __X_____,
X  0x20,
N  _XX_____,
X  0x60,
N  __X_____,
X  0x20,
N  __X_____,
X  0x20,
N  _XXX____,
X  0x70,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00BA[13] = { /* code 00BA */
Xconst unsigned char acFont13_1_00BA[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _XX_____,
X  0x60,
N  X__X____,
X  0x90,
N  X__X____,
X  0x90,
N  X__X____,
X  0x90,
N  _XX_____,
X  0x60,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00BB[13] = { /* code 00BB */
Xconst unsigned char acFont13_1_00BB[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  X_X_____,
X  0xa0,
N  _X_X____,
X  0x50,
N  __X_X___,
X  0x28,
N  _X_X____,
X  0x50,
N  X_X_____,
X  0xa0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00BC[26] = { /* code 00BC */
Xconst unsigned char acFont13_1_00BC[26] = {  
N  ________,________,
X  0x0,0x0,
N  ________,________,
X  0x0,0x0,
N  ________,________,
X  0x0,0x0,
N  __X____X,________,
X  0x21,0x0,
N  _XX___X_,________,
X  0x62,0x0,
N  __X___X_,________,
X  0x22,0x0,
N  __X__X__,X_______,
X  0x24,0x80,
N  __X__X_X,X_______,
X  0x25,0x80,
N  ____X_X_,X_______,
X  0xa,0x80,
N  ____X_XX,XX______,
X  0xb,0xc0,
N  ___X____,X_______,
X  0x10,0x80,
N  ________,________,
X  0x0,0x0,
N  ________,________};
X  0x0,0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00BD[26] = { /* code 00BD */
Xconst unsigned char acFont13_1_00BD[26] = {  
N  ________,________,
X  0x0,0x0,
N  ________,________,
X  0x0,0x0,
N  ________,________,
X  0x0,0x0,
N  __X____X,________,
X  0x21,0x0,
N  _XX___X_,________,
X  0x62,0x0,
N  __X___X_,________,
X  0x22,0x0,
N  __X__X_X,X_______,
X  0x25,0x80,
N  __X__X__,_X______,
X  0x24,0x40,
N  ____X___,_X______,
X  0x8,0x40,
N  ____X___,X_______,
X  0x8,0x80,
N  ___X___X,XX______,
X  0x11,0xc0,
N  ________,________,
X  0x0,0x0,
N  ________,________};
X  0x0,0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00BE[26] = { /* code 00BE */
Xconst unsigned char acFont13_1_00BE[26] = {  
N  ________,________,
X  0x0,0x0,
N  ________,________,
X  0x0,0x0,
N  ________,________,
X  0x0,0x0,
N  _XXX___X,________,
X  0x71,0x0,
N  ____X_X_,________,
X  0xa,0x0,
N  __XX__X_,________,
X  0x32,0x0,
N  ____XX__,X_______,
X  0xc,0x80,
N  _XXX_X_X,X_______,
X  0x75,0x80,
N  ____X_X_,X_______,
X  0xa,0x80,
N  ____X_XX,XX______,
X  0xb,0xc0,
N  ___X____,X_______,
X  0x10,0x80,
N  ________,________,
X  0x0,0x0,
N  ________,________};
X  0x0,0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00BF[13] = { /* code 00BF */
Xconst unsigned char acFont13_1_00BF[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  __X_____,
X  0x20,
N  ________,
X  0x0,
N  __X_____,
X  0x20,
N  __X_____,
X  0x20,
N  _X______,
X  0x40,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  _XXX____,
X  0x70,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00C0[13] = { /* code 00C0 */
Xconst unsigned char acFont13_1_00C0[13] = {  
N  __X_____,
X  0x20,
N  ___X____,
X  0x10,
N  ________,
X  0x0,
N  __XX____,
X  0x30,
N  __XX____,
X  0x30,
N  _X__X___,
X  0x48,
N  _X__X___,
X  0x48,
N  _X__X___,
X  0x48,
N  XXXXXX__,
X  0xfc,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00C1[13] = { /* code 00C1 */
Xconst unsigned char acFont13_1_00C1[13] = {  
N  ___X____,
X  0x10,
N  __X_____,
X  0x20,
N  ________,
X  0x0,
N  __XX____,
X  0x30,
N  __XX____,
X  0x30,
N  _X__X___,
X  0x48,
N  _X__X___,
X  0x48,
N  _X__X___,
X  0x48,
N  XXXXXX__,
X  0xfc,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00C2[13] = { /* code 00C2 */
Xconst unsigned char acFont13_1_00C2[13] = {  
N  __XX____,
X  0x30,
N  _X__X___,
X  0x48,
N  ________,
X  0x0,
N  __XX____,
X  0x30,
N  __XX____,
X  0x30,
N  _X__X___,
X  0x48,
N  _X__X___,
X  0x48,
N  _X__X___,
X  0x48,
N  XXXXXX__,
X  0xfc,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00C3[13] = { /* code 00C3 */
Xconst unsigned char acFont13_1_00C3[13] = {  
N  _XX_X___,
X  0x68,
N  _X_XX___,
X  0x58,
N  ________,
X  0x0,
N  __XX____,
X  0x30,
N  __XX____,
X  0x30,
N  _X__X___,
X  0x48,
N  _X__X___,
X  0x48,
N  _X__X___,
X  0x48,
N  XXXXXX__,
X  0xfc,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00C4[13] = { /* code 00C4 */
Xconst unsigned char acFont13_1_00C4[13] = {  
N  ________,
X  0x0,
N  _X__X___,
X  0x48,
N  ________,
X  0x0,
N  __XX____,
X  0x30,
N  __XX____,
X  0x30,
N  _X__X___,
X  0x48,
N  _X__X___,
X  0x48,
N  _X__X___,
X  0x48,
N  XXXXXX__,
X  0xfc,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00C5[13] = { /* code 00C5 */
Xconst unsigned char acFont13_1_00C5[13] = {  
N  __XX____,
X  0x30,
N  _X__X___,
X  0x48,
N  _X__X___,
X  0x48,
N  __XX____,
X  0x30,
N  __XX____,
X  0x30,
N  _X__X___,
X  0x48,
N  _X__X___,
X  0x48,
N  _X__X___,
X  0x48,
N  XXXXXX__,
X  0xfc,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00C6[26] = { /* code 00C6 */
Xconst unsigned char acFont13_1_00C6[26] = {  
N  ________,________,
X  0x0,0x0,
N  ________,________,
X  0x0,0x0,
N  ________,________,
X  0x0,0x0,
N  __XXXXXX,X_______,
X  0x3f,0x80,
N  __X_X___,________,
X  0x28,0x0,
N  _X__X___,________,
X  0x48,0x0,
N  _X__XXXX,________,
X  0x4f,0x0,
N  _XXXX___,________,
X  0x78,0x0,
N  X___X___,________,
X  0x88,0x0,
N  X___X___,________,
X  0x88,0x0,
N  X___XXXX,X_______,
X  0x8f,0x80,
N  ________,________,
X  0x0,0x0,
N  ________,________};
X  0x0,0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00C7[13] = { /* code 00C7 */
Xconst unsigned char acFont13_1_00C7[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  __XXXX__,
X  0x3c,
N  _X______,
X  0x40,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  _X______,
X  0x40,
N  __XXXX__,
X  0x3c,
N  ____X___,
X  0x8,
N  __XX____};
X  0x30};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00C8[13] = { /* code 00C8 */
Xconst unsigned char acFont13_1_00C8[13] = {  
N  __X_____,
X  0x20,
N  ___X____,
X  0x10,
N  ________,
X  0x0,
N  XXXXX___,
X  0xf8,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  XXXX____,
X  0xf0,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  XXXXX___,
X  0xf8,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00C9[13] = { /* code 00C9 */
Xconst unsigned char acFont13_1_00C9[13] = {  
N  ___X____,
X  0x10,
N  __X_____,
X  0x20,
N  ________,
X  0x0,
N  XXXXX___,
X  0xf8,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  XXXX____,
X  0xf0,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  XXXXX___,
X  0xf8,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00CA[13] = { /* code 00CA */
Xconst unsigned char acFont13_1_00CA[13] = {  
N  __XX____,
X  0x30,
N  _X__X___,
X  0x48,
N  ________,
X  0x0,
N  XXXXX___,
X  0xf8,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  XXXX____,
X  0xf0,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  XXXXX___,
X  0xf8,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00CB[13] = { /* code 00CB */
Xconst unsigned char acFont13_1_00CB[13] = {  
N  ________,
X  0x0,
N  _X_X____,
X  0x50,
N  ________,
X  0x0,
N  XXXXX___,
X  0xf8,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  XXXX____,
X  0xf0,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  XXXXX___,
X  0xf8,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00CC[13] = { /* code 00CC */
Xconst unsigned char acFont13_1_00CC[13] = {  
N  X_______,
X  0x80,
N  _X______,
X  0x40,
N  ________,
X  0x0,
N  XXX_____,
X  0xe0,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  XXX_____,
X  0xe0,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00CD[13] = { /* code 00CD */
Xconst unsigned char acFont13_1_00CD[13] = {  
N  __X_____,
X  0x20,
N  _X______,
X  0x40,
N  ________,
X  0x0,
N  XXX_____,
X  0xe0,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  XXX_____,
X  0xe0,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00CE[13] = { /* code 00CE */
Xconst unsigned char acFont13_1_00CE[13] = {  
N  _XX_____,
X  0x60,
N  X__X____,
X  0x90,
N  ________,
X  0x0,
N  XXX_____,
X  0xe0,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  XXX_____,
X  0xe0,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00CF[13] = { /* code 00CF */
Xconst unsigned char acFont13_1_00CF[13] = {  
N  ________,
X  0x0,
N  X_X_____,
X  0xa0,
N  ________,
X  0x0,
N  XXX_____,
X  0xe0,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  _X______,
X  0x40,
N  XXX_____,
X  0xe0,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00D0[13] = { /* code 00D0 */
Xconst unsigned char acFont13_1_00D0[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _XXXX___,
X  0x78,
N  _X___X__,
X  0x44,
N  _X____X_,
X  0x42,
N  XXXX__X_,
X  0xf2,
N  _X____X_,
X  0x42,
N  _X____X_,
X  0x42,
N  _X___X__,
X  0x44,
N  _XXXX___,
X  0x78,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00D1[13] = { /* code 00D1 */
Xconst unsigned char acFont13_1_00D1[13] = {  
N  _XX_X___,
X  0x68,
N  _X_XX___,
X  0x58,
N  ________,
X  0x0,
N  XX___X__,
X  0xc4,
N  XX___X__,
X  0xc4,
N  X_X__X__,
X  0xa4,
N  X_X__X__,
X  0xa4,
N  X__X_X__,
X  0x94,
N  X__X_X__,
X  0x94,
N  X___XX__,
X  0x8c,
N  X___XX__,
X  0x8c,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00D2[13] = { /* code 00D2 */
Xconst unsigned char acFont13_1_00D2[13] = {  
N  __X_____,
X  0x20,
N  ___X____,
X  0x10,
N  ________,
X  0x0,
N  __XXX___,
X  0x38,
N  _X___X__,
X  0x44,
N  X_____X_,
X  0x82,
N  X_____X_,
X  0x82,
N  X_____X_,
X  0x82,
N  X_____X_,
X  0x82,
N  _X___X__,
X  0x44,
N  __XXX___,
X  0x38,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00D3[13] = { /* code 00D3 */
Xconst unsigned char acFont13_1_00D3[13] = {  
N  ____X___,
X  0x8,
N  ___X____,
X  0x10,
N  ________,
X  0x0,
N  __XXX___,
X  0x38,
N  _X___X__,
X  0x44,
N  X_____X_,
X  0x82,
N  X_____X_,
X  0x82,
N  X_____X_,
X  0x82,
N  X_____X_,
X  0x82,
N  _X___X__,
X  0x44,
N  __XXX___,
X  0x38,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00D4[13] = { /* code 00D4 */
Xconst unsigned char acFont13_1_00D4[13] = {  
N  ___XX___,
X  0x18,
N  __X__X__,
X  0x24,
N  ________,
X  0x0,
N  __XXX___,
X  0x38,
N  _X___X__,
X  0x44,
N  X_____X_,
X  0x82,
N  X_____X_,
X  0x82,
N  X_____X_,
X  0x82,
N  X_____X_,
X  0x82,
N  _X___X__,
X  0x44,
N  __XXX___,
X  0x38,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00D5[13] = { /* code 00D5 */
Xconst unsigned char acFont13_1_00D5[13] = {  
N  __XX_X__,
X  0x34,
N  __X_XX__,
X  0x2c,
N  ________,
X  0x0,
N  __XXX___,
X  0x38,
N  _X___X__,
X  0x44,
N  X_____X_,
X  0x82,
N  X_____X_,
X  0x82,
N  X_____X_,
X  0x82,
N  X_____X_,
X  0x82,
N  _X___X__,
X  0x44,
N  __XXX___,
X  0x38,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00D6[13] = { /* code 00D6 */
Xconst unsigned char acFont13_1_00D6[13] = {  
N  ________,
X  0x0,
N  __X_X___,
X  0x28,
N  ________,
X  0x0,
N  __XXX___,
X  0x38,
N  _X___X__,
X  0x44,
N  X_____X_,
X  0x82,
N  X_____X_,
X  0x82,
N  X_____X_,
X  0x82,
N  X_____X_,
X  0x82,
N  _X___X__,
X  0x44,
N  __XXX___,
X  0x38,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00D7[13] = { /* code 00D7 */
Xconst unsigned char acFont13_1_00D7[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  __X___X_,
X  0x22,
N  ___X_X__,
X  0x14,
N  ____X___,
X  0x8,
N  ___X_X__,
X  0x14,
N  __X___X_,
X  0x22,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00D8[13] = { /* code 00D8 */
Xconst unsigned char acFont13_1_00D8[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  __XXX_X_,
X  0x3a,
N  _X___X__,
X  0x44,
N  X___X_X_,
X  0x8a,
N  X__X__X_,
X  0x92,
N  X__X__X_,
X  0x92,
N  X_X___X_,
X  0xa2,
N  _X___X__,
X  0x44,
N  X_XXX___,
X  0xb8,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00D9[13] = { /* code 00D9 */
Xconst unsigned char acFont13_1_00D9[13] = {  
N  __X_____,
X  0x20,
N  ___X____,
X  0x10,
N  ________,
X  0x0,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  _XXXX___,
X  0x78,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00DA[13] = { /* code 00DA */
Xconst unsigned char acFont13_1_00DA[13] = {  
N  ___X____,
X  0x10,
N  __X_____,
X  0x20,
N  ________,
X  0x0,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  _XXXX___,
X  0x78,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00DB[13] = { /* code 00DB */
Xconst unsigned char acFont13_1_00DB[13] = {  
N  __XX____,
X  0x30,
N  _X__X___,
X  0x48,
N  ________,
X  0x0,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  _XXXX___,
X  0x78,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00DC[13] = { /* code 00DC */
Xconst unsigned char acFont13_1_00DC[13] = {  
N  ________,
X  0x0,
N  _X__X___,
X  0x48,
N  ________,
X  0x0,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  X____X__,
X  0x84,
N  _XXXX___,
X  0x78,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00DD[13] = { /* code 00DD */
Xconst unsigned char acFont13_1_00DD[13] = {  
N  ___X____,
X  0x10,
N  __X_____,
X  0x20,
N  ________,
X  0x0,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  _X_X____,
X  0x50,
N  _X_X____,
X  0x50,
N  __X_____,
X  0x20,
N  __X_____,
X  0x20,
N  __X_____,
X  0x20,
N  __X_____,
X  0x20,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00DE[13] = { /* code 00DE */
Xconst unsigned char acFont13_1_00DE[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  XXXX____,
X  0xf0,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  XXXX____,
X  0xf0,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00DF[13] = { /* code 00DF */
Xconst unsigned char acFont13_1_00DF[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _XXX____,
X  0x70,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X_XX____,
X  0xb0,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X_XX____,
X  0xb0,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00E0[13] = { /* code 00E0 */
Xconst unsigned char acFont13_1_00E0[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  __X_____,
X  0x20,
N  ___X____,
X  0x10,
N  ________,
X  0x0,
N  _XXX____,
X  0x70,
N  ____X___,
X  0x8,
N  _XXXX___,
X  0x78,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  _XXXX___,
X  0x78,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00E1[13] = { /* code 00E1 */
Xconst unsigned char acFont13_1_00E1[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ___X____,
X  0x10,
N  __X_____,
X  0x20,
N  ________,
X  0x0,
N  _XXX____,
X  0x70,
N  ____X___,
X  0x8,
N  _XXXX___,
X  0x78,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  _XXXX___,
X  0x78,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00E2[13] = { /* code 00E2 */
Xconst unsigned char acFont13_1_00E2[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  __XX____,
X  0x30,
N  _X__X___,
X  0x48,
N  ________,
X  0x0,
N  _XXX____,
X  0x70,
N  ____X___,
X  0x8,
N  _XXXX___,
X  0x78,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  _XXXX___,
X  0x78,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00E3[13] = { /* code 00E3 */
Xconst unsigned char acFont13_1_00E3[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _XX_X___,
X  0x68,
N  _X_XX___,
X  0x58,
N  ________,
X  0x0,
N  _XXX____,
X  0x70,
N  ____X___,
X  0x8,
N  _XXXX___,
X  0x78,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  _XXXX___,
X  0x78,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00E4[13] = { /* code 00E4 */
Xconst unsigned char acFont13_1_00E4[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _X_X____,
X  0x50,
N  ________,
X  0x0,
N  _XXX____,
X  0x70,
N  ____X___,
X  0x8,
N  _XXXX___,
X  0x78,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  _XXXX___,
X  0x78,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00E5[13] = { /* code 00E5 */
Xconst unsigned char acFont13_1_00E5[13] = {  
N  ________,
X  0x0,
N  __XX____,
X  0x30,
N  _X__X___,
X  0x48,
N  _X__X___,
X  0x48,
N  __XX____,
X  0x30,
N  _XXX____,
X  0x70,
N  ____X___,
X  0x8,
N  _XXXX___,
X  0x78,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  _XXXX___,
X  0x78,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00E6[26] = { /* code 00E6 */
Xconst unsigned char acFont13_1_00E6[26] = {  
N  ________,________,
X  0x0,0x0,
N  ________,________,
X  0x0,0x0,
N  ________,________,
X  0x0,0x0,
N  ________,________,
X  0x0,0x0,
N  ________,________,
X  0x0,0x0,
N  _XXX_XXX,________,
X  0x77,0x0,
N  ____X___,X_______,
X  0x8,0x80,
N  _XXXXXXX,X_______,
X  0x7f,0x80,
N  X___X___,________,
X  0x88,0x0,
N  X___XX__,X_______,
X  0x8c,0x80,
N  _XXX__XX,________,
X  0x73,0x0,
N  ________,________,
X  0x0,0x0,
N  ________,________};
X  0x0,0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00E7[13] = { /* code 00E7 */
Xconst unsigned char acFont13_1_00E7[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _XXX____,
X  0x70,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  _XXX____,
X  0x70,
N  __X_____,
X  0x20,
N  XX______};
X  0xc0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00E8[13] = { /* code 00E8 */
Xconst unsigned char acFont13_1_00E8[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _X______,
X  0x40,
N  __X_____,
X  0x20,
N  ________,
X  0x0,
N  _XXX____,
X  0x70,
N  X___X___,
X  0x88,
N  XXXXX___,
X  0xf8,
N  X_______,
X  0x80,
N  X___X___,
X  0x88,
N  _XXX____,
X  0x70,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00E9[13] = { /* code 00E9 */
Xconst unsigned char acFont13_1_00E9[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ___X____,
X  0x10,
N  __X_____,
X  0x20,
N  ________,
X  0x0,
N  _XXX____,
X  0x70,
N  X___X___,
X  0x88,
N  XXXXX___,
X  0xf8,
N  X_______,
X  0x80,
N  X___X___,
X  0x88,
N  _XXX____,
X  0x70,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00EA[13] = { /* code 00EA */
Xconst unsigned char acFont13_1_00EA[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  __XX____,
X  0x30,
N  _X__X___,
X  0x48,
N  ________,
X  0x0,
N  _XXX____,
X  0x70,
N  X___X___,
X  0x88,
N  XXXXX___,
X  0xf8,
N  X_______,
X  0x80,
N  X___X___,
X  0x88,
N  _XXX____,
X  0x70,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00EB[13] = { /* code 00EB */
Xconst unsigned char acFont13_1_00EB[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _X_X____,
X  0x50,
N  ________,
X  0x0,
N  _XXX____,
X  0x70,
N  X___X___,
X  0x88,
N  XXXXX___,
X  0xf8,
N  X_______,
X  0x80,
N  X___X___,
X  0x88,
N  _XXX____,
X  0x70,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00EC[13] = { /* code 00EC */
Xconst unsigned char acFont13_1_00EC[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  X_______,
X  0x80,
N  ________,
X  0x0,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00ED[13] = { /* code 00ED */
Xconst unsigned char acFont13_1_00ED[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _X______,
X  0x40,
N  X_______,
X  0x80,
N  ________,
X  0x0,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00EE[13] = { /* code 00EE */
Xconst unsigned char acFont13_1_00EE[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  X_______,
X  0x80,
N  _X______,
X  0x40,
N  ________,
X  0x0,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00EF[13] = { /* code 00EF */
Xconst unsigned char acFont13_1_00EF[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _X______,
X  0x40,
N  ________,
X  0x0,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00F0[13] = { /* code 00F0 */
Xconst unsigned char acFont13_1_00F0[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  __XX____,
X  0x30,
N  _X_X____,
X  0x50,
N  ____X___,
X  0x8,
N  _XXXX___,
X  0x78,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  _XXX____,
X  0x70,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00F1[13] = { /* code 00F1 */
Xconst unsigned char acFont13_1_00F1[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _XX_X___,
X  0x68,
N  _X_XX___,
X  0x58,
N  ________,
X  0x0,
N  XXXX____,
X  0xf0,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00F2[13] = { /* code 00F2 */
Xconst unsigned char acFont13_1_00F2[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _X______,
X  0x40,
N  __X_____,
X  0x20,
N  ________,
X  0x0,
N  _XXX____,
X  0x70,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  _XXX____,
X  0x70,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00F3[13] = { /* code 00F3 */
Xconst unsigned char acFont13_1_00F3[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ___X____,
X  0x10,
N  __X_____,
X  0x20,
N  ________,
X  0x0,
N  _XXX____,
X  0x70,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  _XXX____,
X  0x70,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00F4[13] = { /* code 00F4 */
Xconst unsigned char acFont13_1_00F4[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  __XX____,
X  0x30,
N  _X__X___,
X  0x48,
N  ________,
X  0x0,
N  _XXX____,
X  0x70,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  _XXX____,
X  0x70,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00F5[13] = { /* code 00F5 */
Xconst unsigned char acFont13_1_00F5[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _XX_X___,
X  0x68,
N  _X_XX___,
X  0x58,
N  ________,
X  0x0,
N  _XXX____,
X  0x70,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  _XXX____,
X  0x70,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00F6[13] = { /* code 00F6 */
Xconst unsigned char acFont13_1_00F6[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _X_X____,
X  0x50,
N  ________,
X  0x0,
N  _XXX____,
X  0x70,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  _XXX____,
X  0x70,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00F7[13] = { /* code 00F7 */
Xconst unsigned char acFont13_1_00F7[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ___X____,
X  0x10,
N  ___X____,
X  0x10,
N  ________,
X  0x0,
N  XXXXXXX_,
X  0xfe,
N  ________,
X  0x0,
N  ___X____,
X  0x10,
N  ___X____,
X  0x10,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00F8[13] = { /* code 00F8 */
Xconst unsigned char acFont13_1_00F8[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ____X___,
X  0x8,
N  _XXX____,
X  0x70,
N  X__XX___,
X  0x98,
N  X_X_X___,
X  0xa8,
N  X_X_X___,
X  0xa8,
N  XX__X___,
X  0xc8,
N  _XXX____,
X  0x70,
N  X_______,
X  0x80,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00F9[13] = { /* code 00F9 */
Xconst unsigned char acFont13_1_00F9[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _X______,
X  0x40,
N  __X_____,
X  0x20,
N  ________,
X  0x0,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  _XXXX___,
X  0x78,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00FA[13] = { /* code 00FA */
Xconst unsigned char acFont13_1_00FA[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ___X____,
X  0x10,
N  __X_____,
X  0x20,
N  ________,
X  0x0,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  _XXXX___,
X  0x78,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00FB[13] = { /* code 00FB */
Xconst unsigned char acFont13_1_00FB[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  __XX____,
X  0x30,
N  _X__X___,
X  0x48,
N  ________,
X  0x0,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  _XXXX___,
X  0x78,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00FC[13] = { /* code 00FC */
Xconst unsigned char acFont13_1_00FC[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _X_X____,
X  0x50,
N  ________,
X  0x0,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  _XXXX___,
X  0x78,
N  ________,
X  0x0,
N  ________};
X  0x0};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00FD[13] = { /* code 00FD */
Xconst unsigned char acFont13_1_00FD[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ___X____,
X  0x10,
N  __X_____,
X  0x20,
N  ________,
X  0x0,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  _X_X____,
X  0x50,
N  _X_X____,
X  0x50,
N  __X_____,
X  0x20,
N  __X_____,
X  0x20,
N  _X______,
X  0x40,
N  _X______};
X  0x40};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00FE[13] = { /* code 00FE */
Xconst unsigned char acFont13_1_00FE[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  X_______,
X  0x80,
N  XXXX____,
X  0xf0,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  XXXX____,
X  0xf0,
N  X_______,
X  0x80,
N  X_______};
X  0x80};
N
NGUI_CONST_STORAGE unsigned char acFont13_1_00FF[13] = { /* code 00FF */
Xconst unsigned char acFont13_1_00FF[13] = {  
N  ________,
X  0x0,
N  ________,
X  0x0,
N  ________,
X  0x0,
N  _X_X____,
X  0x50,
N  ________,
X  0x0,
N  X___X___,
X  0x88,
N  X___X___,
X  0x88,
N  _X_X____,
X  0x50,
N  _X_X____,
X  0x50,
N  __X_____,
X  0x20,
N  __X_____,
X  0x20,
N  _X______,
X  0x40,
N  _X______};
X  0x40};
N
NGUI_CONST_STORAGE GUI_CHARINFO GUI_Font13_1_CharInfo[96] = {
Xconst GUI_CHARINFO GUI_Font13_1_CharInfo[96] = {
N   {   3,   3,  1, acFont13_1_00A0 } /* code 00A0 */
N  ,{   4,   4,  1, acFont13_1_00A1 } /* code 00A1 */
N  ,{   6,   6,  1, acFont13_1_00A2 } /* code 00A2 */
N  ,{   6,   6,  1, acFont13_1_00A3 } /* code 00A3 */
N  ,{   6,   6,  1, acFont13_1_00A4 } /* code 00A4 */
N  ,{   6,   6,  1, acFont13_1_00A5 } /* code 00A5 */
N  ,{   4,   4,  1, acFont13_1_00A6 } /* code 00A6 */
N  ,{   6,   6,  1, acFont13_1_00A7 } /* code 00A7 */
N  ,{   6,   6,  1, acFont13_1_00A8 } /* code 00A8 */
N  ,{  10,  10,  2, acFont13_1_00A9 } /* code 00A9 */
N  ,{   5,   5,  1, acFont13_1_00AA } /* code 00AA */
N  ,{   6,   6,  1, acFont13_1_00AB } /* code 00AB */
N  ,{   8,   8,  1, acFont13_1_00AC } /* code 00AC */
N  ,{   4,   4,  1, acFont13_1_00AD } /* code 00AD */
N  ,{  10,  10,  2, acFont13_1_00AE } /* code 00AE */
N  ,{   6,   6,  1, acFont13_1_00AF } /* code 00AF */
N  ,{   5,   5,  1, acFont13_1_00B0 } /* code 00B0 */
N  ,{   8,   8,  1, acFont13_1_00B1 } /* code 00B1 */
N  ,{   5,   5,  1, acFont13_1_00B2 } /* code 00B2 */
N  ,{   5,   5,  1, acFont13_1_00B3 } /* code 00B3 */
N  ,{   6,   6,  1, acFont13_1_00B4 } /* code 00B4 */
N  ,{   6,   6,  1, acFont13_1_00B5 } /* code 00B5 */
N  ,{   6,   6,  1, acFont13_1_00B6 } /* code 00B6 */
N  ,{   3,   3,  1, acFont13_1_00B7 } /* code 00B7 */
N  ,{   6,   6,  1, acFont13_1_00B8 } /* code 00B8 */
N  ,{   5,   5,  1, acFont13_1_00B9 } /* code 00B9 */
N  ,{   5,   5,  1, acFont13_1_00BA } /* code 00BA */
N  ,{   6,   6,  1, acFont13_1_00BB } /* code 00BB */
N  ,{  11,  11,  2, acFont13_1_00BC } /* code 00BC */
N  ,{  11,  11,  2, acFont13_1_00BD } /* code 00BD */
N  ,{  11,  11,  2, acFont13_1_00BE } /* code 00BE */
N  ,{   5,   5,  1, acFont13_1_00BF } /* code 00BF */
N  ,{   7,   7,  1, acFont13_1_00C0 } /* code 00C0 */
N  ,{   7,   7,  1, acFont13_1_00C1 } /* code 00C1 */
N  ,{   7,   7,  1, acFont13_1_00C2 } /* code 00C2 */
N  ,{   7,   7,  1, acFont13_1_00C3 } /* code 00C3 */
N  ,{   7,   7,  1, acFont13_1_00C4 } /* code 00C4 */
N  ,{   7,   7,  1, acFont13_1_00C5 } /* code 00C5 */
N  ,{  10,  10,  2, acFont13_1_00C6 } /* code 00C6 */
N  ,{   7,   7,  1, acFont13_1_00C7 } /* code 00C7 */
N  ,{   6,   6,  1, acFont13_1_00C8 } /* code 00C8 */
N  ,{   6,   6,  1, acFont13_1_00C9 } /* code 00C9 */
N  ,{   6,   6,  1, acFont13_1_00CA } /* code 00CA */
N  ,{   6,   6,  1, acFont13_1_00CB } /* code 00CB */
N  ,{   4,   4,  1, acFont13_1_00CC } /* code 00CC */
N  ,{   4,   4,  1, acFont13_1_00CD } /* code 00CD */
N  ,{   4,   4,  1, acFont13_1_00CE } /* code 00CE */
N  ,{   4,   4,  1, acFont13_1_00CF } /* code 00CF */
N  ,{   8,   8,  1, acFont13_1_00D0 } /* code 00D0 */
N  ,{   7,   7,  1, acFont13_1_00D1 } /* code 00D1 */
N  ,{   8,   8,  1, acFont13_1_00D2 } /* code 00D2 */
N  ,{   8,   8,  1, acFont13_1_00D3 } /* code 00D3 */
N  ,{   8,   8,  1, acFont13_1_00D4 } /* code 00D4 */
N  ,{   8,   8,  1, acFont13_1_00D5 } /* code 00D5 */
N  ,{   8,   8,  1, acFont13_1_00D6 } /* code 00D6 */
N  ,{   8,   8,  1, acFont13_1_00D7 } /* code 00D7 */
N  ,{   8,   8,  1, acFont13_1_00D8 } /* code 00D8 */
N  ,{   7,   7,  1, acFont13_1_00D9 } /* code 00D9 */
N  ,{   7,   7,  1, acFont13_1_00DA } /* code 00DA */
N  ,{   7,   7,  1, acFont13_1_00DB } /* code 00DB */
N  ,{   7,   7,  1, acFont13_1_00DC } /* code 00DC */
N  ,{   6,   6,  1, acFont13_1_00DD } /* code 00DD */
N  ,{   6,   6,  1, acFont13_1_00DE } /* code 00DE */
N  ,{   6,   6,  1, acFont13_1_00DF } /* code 00DF */
N  ,{   6,   6,  1, acFont13_1_00E0 } /* code 00E0 */
N  ,{   6,   6,  1, acFont13_1_00E1 } /* code 00E1 */
N  ,{   6,   6,  1, acFont13_1_00E2 } /* code 00E2 */
N  ,{   6,   6,  1, acFont13_1_00E3 } /* code 00E3 */
N  ,{   6,   6,  1, acFont13_1_00E4 } /* code 00E4 */
N  ,{   6,   6,  1, acFont13_1_00E5 } /* code 00E5 */
N  ,{  10,  10,  2, acFont13_1_00E6 } /* code 00E6 */
N  ,{   5,   5,  1, acFont13_1_00E7 } /* code 00E7 */
N  ,{   6,   6,  1, acFont13_1_00E8 } /* code 00E8 */
N  ,{   6,   6,  1, acFont13_1_00E9 } /* code 00E9 */
N  ,{   6,   6,  1, acFont13_1_00EA } /* code 00EA */
N  ,{   6,   6,  1, acFont13_1_00EB } /* code 00EB */
N  ,{   2,   2,  1, acFont13_1_00EC } /* code 00EC */
N  ,{   2,   2,  1, acFont13_1_00ED } /* code 00ED */
N  ,{   2,   2,  1, acFont13_1_00EE } /* code 00EE */
N  ,{   2,   2,  1, acFont13_1_00EF } /* code 00EF */
N  ,{   6,   6,  1, acFont13_1_00F0 } /* code 00F0 */
N  ,{   6,   6,  1, acFont13_1_00F1 } /* code 00F1 */
N  ,{   6,   6,  1, acFont13_1_00F2 } /* code 00F2 */
N  ,{   6,   6,  1, acFont13_1_00F3 } /* code 00F3 */
N  ,{   6,   6,  1, acFont13_1_00F4 } /* code 00F4 */
N  ,{   6,   6,  1, acFont13_1_00F5 } /* code 00F5 */
N  ,{   6,   6,  1, acFont13_1_00F6 } /* code 00F6 */
N  ,{   8,   8,  1, acFont13_1_00F7 } /* code 00F7 */
N  ,{   6,   6,  1, acFont13_1_00F8 } /* code 00F8 */
N  ,{   6,   6,  1, acFont13_1_00F9 } /* code 00F9 */
N  ,{   6,   6,  1, acFont13_1_00FA } /* code 00FA */
N  ,{   6,   6,  1, acFont13_1_00FB } /* code 00FB */
N  ,{   6,   6,  1, acFont13_1_00FC } /* code 00FC */
N  ,{   6,   6,  1, acFont13_1_00FD } /* code 00FD */
N  ,{   6,   6,  1, acFont13_1_00FE } /* code 00FE */
N  ,{   6,   6,  1, acFont13_1_00FF } /* code 00FF */
N};
N
NGUI_CONST_STORAGE GUI_FONT_PROP GUI_Font13_1_Prop1 = {
Xconst GUI_FONT_PROP GUI_Font13_1_Prop1 = {
N   160                         /* first character               */
N  ,255                         /* last character                */
N  ,&GUI_Font13_1_CharInfo[0] /* address of first character    */
N  ,&GUI_Font13ASCII_Prop1                         /* pointer to next GUI_FONT_PROP */
N};
N
NGUI_CONST_STORAGE GUI_FONT GUI_Font13_1 = {
Xconst GUI_FONT GUI_Font13_1 = {
N   GUI_FONTTYPE_PROP /* type of font    */
X   GUIPROP_DispChar, GUIPROP_GetCharDistX, GUIPROP_GetFontInfo, GUIPROP_IsInFont, (tGUI_ENC_APIList*)0  
N  ,13                /* height of font  */
N  ,13                /* space of font y */
N  ,1                /* magnification x */
N  ,1                /* magnification y */
N  ,{&GUI_Font13_1_Prop1}
N  , 11, 6, 8
N};
N	 	 			 		    	 				 	  			   	 	 	 	 	 	  	  	      	   		 	 	 		  		  	 		 	  	  			     			       	   	 			  		    	 	     	 				  	 					 	 			   	  	  			 				 		 	 	 			     			 
