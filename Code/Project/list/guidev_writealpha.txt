; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\guidev_writealpha.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\guidev_writealpha.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\MemDev\GUIDEV_WriteAlpha.c]
                          THUMB

                          AREA ||i.GUI_MEMDEV_WriteAlpha||, CODE, READONLY, ALIGN=2

                  GUI_MEMDEV_WriteAlpha PROC
;;;121    */
;;;122    void GUI_MEMDEV_WriteAlpha(GUI_MEMDEV_Handle hMem, int Alpha) {
000000  4a01              LDR      r2,|L1.8|
;;;123      GUI_MEMDEV_WriteAlphaAt(hMem, Alpha, GUI_POS_AUTO, GUI_POS_AUTO);
000002  4613              MOV      r3,r2
000004  f7ffbffe          B.W      GUI_MEMDEV_WriteAlphaAt
;;;124    }
;;;125    
                          ENDP

                  |L1.8|
                          DCD      0xfffff001

                          AREA ||i.GUI_MEMDEV_WriteAlphaAt||, CODE, READONLY, ALIGN=1

                  GUI_MEMDEV_WriteAlphaAt PROC
;;;92     */
;;;93     void GUI_MEMDEV_WriteAlphaAt(GUI_MEMDEV_Handle hMem, int Alpha, int x, int y) {
000000  e92d41fc          PUSH     {r2-r8,lr}
000004  461d              MOV      r5,r3
000006  4614              MOV      r4,r2
000008  460f              MOV      r7,r1
00000a  0006              MOVS     r6,r0
00000c  d025              BEQ      |L2.90|
;;;94       if (hMem) {
;;;95         GUI_MEMDEV* pDevData;
;;;96         #if (GUI_WINSUPPORT)
;;;97           GUI_RECT r;
;;;98         #endif
;;;99         GUI_LOCK();
;;;100        pDevData = (GUI_MEMDEV*) GUI_ALLOC_h2p(hMem);  /* Convert to pointer */
00000e  f7fffffe          BL       GUI_ALLOC_h2p
;;;101        if (x == GUI_POS_AUTO) {
000012  f64071ff          MOV      r1,#0xfff
000016  1909              ADDS     r1,r1,r4
000018  d103              BNE      |L2.34|
;;;102          x = pDevData->x0;
00001a  f9b04000          LDRSH    r4,[r0,#0]
;;;103          y = pDevData->y0;
00001e  f9b05002          LDRSH    r5,[r0,#2]
                  |L2.34|
;;;104        }
;;;105        #if (GUI_WINSUPPORT)
;;;106          r.x1 = (r.x0 = x) + pDevData->XSize-1;
000022  8882              LDRH     r2,[r0,#4]
000024  1e61              SUBS     r1,r4,#1
000026  4411              ADD      r1,r1,r2
000028  f8ad4000          STRH     r4,[sp,#0]
00002c  f8ad1004          STRH     r1,[sp,#4]
;;;107          r.y1 = (r.y0 = y) + pDevData->YSize-1;;
000030  88c1              LDRH     r1,[r0,#6]
000032  1e68              SUBS     r0,r5,#1
000034  4408              ADD      r0,r0,r1
000036  f8ad0006          STRH     r0,[sp,#6]
00003a  f8ad5002          STRH     r5,[sp,#2]
;;;108          WM_ITERATE_START(&r) {
00003e  4668              MOV      r0,sp
000040  f7fffffe          BL       WM__InitIVRSearch
000044  e007              B        |L2.86|
                  |L2.70|
;;;109          _WriteAlphaToActiveAt(hMem, Alpha, x,y);
000046  462b              MOV      r3,r5
000048  4622              MOV      r2,r4
00004a  4639              MOV      r1,r7
00004c  4630              MOV      r0,r6
00004e  f7fffffe          BL       _WriteAlphaToActiveAt
;;;110          } WM_ITERATE_END();
000052  f7fffffe          BL       WM__GetNextIVR
                  |L2.86|
000056  2800              CMP      r0,#0
000058  d1f5              BNE      |L2.70|
                  |L2.90|
;;;111        #else
;;;112          _WriteAlphaToActiveAt(hMem, Alpha, x,y);
;;;113        #endif
;;;114        GUI_UNLOCK();
;;;115      }
;;;116    }
00005a  e8bd81fc          POP      {r2-r8,pc}
;;;117    
                          ENDP


                          AREA ||i._WriteAlphaToActiveAt||, CODE, READONLY, ALIGN=1

                  _WriteAlphaToActiveAt PROC
;;;39     */
;;;40     static void _WriteAlphaToActiveAt(GUI_MEMDEV_Handle hMem, int Intens, int x, int y) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b083              SUB      sp,sp,#0xc
000006  4692              MOV      r10,r2
000008  2800              CMP      r0,#0
00000a  d04b              BEQ      |L3.164|
;;;41       /* Make sure the memory handle is valid */
;;;42       if (hMem) {
;;;43         GUI_MEMDEV * pDev = GUI_MEMDEV_H2P(hMem);
00000c  f7fffffe          BL       GUI_ALLOC_h2p
;;;44         GUI_USAGE_h hUsage = pDev->hUsage; 
000010  f9b01018          LDRSH    r1,[r0,#0x18]
000014  4680              MOV      r8,r0                 ;43
;;;45         GUI_USAGE*  pUsage;
;;;46         int YSize = pDev->YSize;
000016  f9b00006          LDRSH    r0,[r0,#6]
;;;47         int yi;
;;;48         if (hUsage) {
00001a  9002              STR      r0,[sp,#8]
00001c  2900              CMP      r1,#0
00001e  d041              BEQ      |L3.164|
;;;49           pUsage = GUI_USAGE_H2P(hUsage);
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       GUI_ALLOC_h2p
;;;50           for (yi = 0; yi < YSize; yi++) {
000026  9001              STR      r0,[sp,#4]
000028  2000              MOVS     r0,#0
00002a  e037              B        |L3.156|
                  |L3.44|
;;;51             int xOff = 0;
00002c  2000              MOVS     r0,#0
;;;52             int XSize;
;;;53             XSize = GUI_USAGE_GetNextDirty(pUsage, &xOff, yi);
;;;54             /* Draw the partial line which needs to be drawn */
;;;55             for (; XSize; ) {
00002e  9000              STR      r0,[sp,#0]
000030  e029              B        |L3.134|
                  |L3.50|
;;;56               U8* pData;
;;;57               pData = (U8*)GUI_MEMDEV__XY2PTREx(pDev, xOff, yi);
000032  464a              MOV      r2,r9
000034  4640              MOV      r0,r8
000036  9900              LDR      r1,[sp,#0]
000038  f7fffffe          BL       GUI_MEMDEV__XY2PTREx
00003c  4604              MOV      r4,r0
;;;58               do {
;;;59                 LCD_COLOR Color, BkColor;
;;;60                 int xPos, yPos, Index;
;;;61                 if (pDev->BitsPerPixel == 8) {
;;;62                   Index = *pData++;
;;;63                 } else {
;;;64                   Index = *(U16*)pData;
;;;65                   pData += 2;
;;;66                 }
;;;67                 Color   = LCD_Index2Color(Index);
;;;68                 xPos    = xOff + x;
;;;69                 yPos    = yi +y;
00003e  9806              LDR      r0,[sp,#0x18]
000040  eb090600          ADD      r6,r9,r0
                  |L3.68|
000044  f8d80010          LDR      r0,[r8,#0x10]         ;61
000048  2808              CMP      r0,#8                 ;61
00004a  d02e              BEQ      |L3.170|
00004c  f8340b02          LDRH     r0,[r4],#2            ;64
                  |L3.80|
000050  f7fffffe          BL       LCD_Index2Color
000054  9900              LDR      r1,[sp,#0]            ;68
000056  4683              MOV      r11,r0                ;67
000058  eb01070a          ADD      r7,r1,r10             ;68
;;;70                 BkColor = LCD_GetPixelColor(xPos, yPos);
00005c  4631              MOV      r1,r6
00005e  4638              MOV      r0,r7
000060  f7fffffe          BL       LCD_GetPixelColor
000064  4601              MOV      r1,r0
;;;71                 Color   = LCD_MixColors256(Color, BkColor, Intens);
000066  4658              MOV      r0,r11
000068  9a04              LDR      r2,[sp,#0x10]
00006a  f7fffffe          BL       LCD_MixColors256
;;;72                 Index   = LCD_Color2Index(Color);
00006e  f7fffffe          BL       LCD_Color2Index
000072  4602              MOV      r2,r0
;;;73                 LCD_SetPixelIndex(xPos, yPos, Index);
000074  4631              MOV      r1,r6
000076  4638              MOV      r0,r7
000078  f7fffffe          BL       LCD_SetPixelIndex
;;;74                 xOff++;
00007c  9800              LDR      r0,[sp,#0]
00007e  1c40              ADDS     r0,r0,#1
000080  9000              STR      r0,[sp,#0]
000082  1e6d              SUBS     r5,r5,#1
;;;75               } while (--XSize);
000084  d1de              BNE      |L3.68|
                  |L3.134|
;;;76               XSize = GUI_USAGE_GetNextDirty(pUsage, &xOff, yi);
000086  9801              LDR      r0,[sp,#4]
000088  464a              MOV      r2,r9
00008a  4669              MOV      r1,sp
00008c  6880              LDR      r0,[r0,#8]
00008e  6943              LDR      r3,[r0,#0x14]
000090  9801              LDR      r0,[sp,#4]
000092  4798              BLX      r3
000094  0005              MOVS     r5,r0
000096  d1cc              BNE      |L3.50|
000098  f1090001          ADD      r0,r9,#1              ;50
                  |L3.156|
00009c  9902              LDR      r1,[sp,#8]            ;50
00009e  4681              MOV      r9,r0                 ;50
0000a0  4288              CMP      r0,r1                 ;50
0000a2  dbc3              BLT      |L3.44|
                  |L3.164|
;;;77             }
;;;78           }
;;;79         }
;;;80       }
;;;81     }
0000a4  b007              ADD      sp,sp,#0x1c
0000a6  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.170|
0000aa  f8140b01          LDRB     r0,[r4],#1            ;62
0000ae  e7cf              B        |L3.80|
;;;82     
                          ENDP

