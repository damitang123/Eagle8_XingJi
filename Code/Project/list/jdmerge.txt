; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\jdmerge.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\jdmerge.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\JPEG\jdmerge.c]
                          THUMB

                          AREA ||i.build_ycc_rgb_table||, CODE, READONLY, ALIGN=2

                  build_ycc_rgb_table PROC
;;;82     LOCAL(void)
;;;83     build_ycc_rgb_table (j_decompress_ptr cinfo)
000000  b570              PUSH     {r4-r6,lr}
;;;84     {
000002  4605              MOV      r5,r0
;;;85       my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
;;;86       int i;
;;;87       INT32 x;
;;;88       SHIFT_TEMPS
;;;89     
;;;90       upsample->Cr_r_tab = (int *)
000004  f8d041c4          LDR      r4,[r0,#0x1c4]
000008  6840              LDR      r0,[r0,#4]
00000a  f44f6680          MOV      r6,#0x400
00000e  4632              MOV      r2,r6
000010  6803              LDR      r3,[r0,#0]
000012  2101              MOVS     r1,#1
000014  4628              MOV      r0,r5
000016  4798              BLX      r3
;;;91         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;92     				(MAXJSAMPLE+1) * SIZEOF(int));
;;;93       upsample->Cb_b_tab = (int *)
000018  6120              STR      r0,[r4,#0x10]
00001a  6868              LDR      r0,[r5,#4]
00001c  4632              MOV      r2,r6
00001e  2101              MOVS     r1,#1
000020  6803              LDR      r3,[r0,#0]
000022  4628              MOV      r0,r5
000024  4798              BLX      r3
;;;94         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;95     				(MAXJSAMPLE+1) * SIZEOF(int));
;;;96       upsample->Cr_g_tab = (INT32 *)
000026  6160              STR      r0,[r4,#0x14]
000028  6868              LDR      r0,[r5,#4]
00002a  4632              MOV      r2,r6
00002c  2101              MOVS     r1,#1
00002e  6803              LDR      r3,[r0,#0]
000030  4628              MOV      r0,r5
000032  4798              BLX      r3
;;;97         (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;98     				(MAXJSAMPLE+1) * SIZEOF(INT32));
;;;99       upsample->Cb_g_tab = (INT32 *)
000034  61a0              STR      r0,[r4,#0x18]
000036  6868              LDR      r0,[r5,#4]
000038  4632              MOV      r2,r6
00003a  2101              MOVS     r1,#1
00003c  6803              LDR      r3,[r0,#0]
00003e  4628              MOV      r0,r5
000040  4798              BLX      r3
;;;100        (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;101    				(MAXJSAMPLE+1) * SIZEOF(INT32));
;;;102    
;;;103      for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
000042  2100              MOVS     r1,#0
000044  61e0              STR      r0,[r4,#0x1c]
000046  f06f007f          MVN      r0,#0x7f
;;;104        /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
;;;105        /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
;;;106        /* Cr=>R value is nearest int to 1.40200 * x */
;;;107        upsample->Cr_r_tab[i] = (int)
;;;108    		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
;;;109        /* Cb=>B value is nearest int to 1.77200 * x */
;;;110        upsample->Cb_b_tab[i] = (int)
00004a  0172              LSLS     r2,r6,#5
                  |L1.76|
00004c  4b10              LDR      r3,|L1.144|
00004e  6925              LDR      r5,[r4,#0x10]         ;107
000050  4343              MULS     r3,r0,r3              ;107
000052  f5034300          ADD      r3,r3,#0x8000         ;107
000056  141b              ASRS     r3,r3,#16             ;107
000058  f8453021          STR      r3,[r5,r1,LSL #2]     ;107
00005c  f24e23d1          MOV      r3,#0xe2d1
000060  4343              MULS     r3,r0,r3
000062  6965              LDR      r5,[r4,#0x14]
000064  eb020343          ADD      r3,r2,r3,LSL #1
000068  141b              ASRS     r3,r3,#16
00006a  f8453021          STR      r3,[r5,r1,LSL #2]
;;;111    		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
;;;112        /* Cr=>G value is scaled-up -0.71414 * x */
;;;113        upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
00006e  4b09              LDR      r3,|L1.148|
000070  69a5              LDR      r5,[r4,#0x18]
000072  4343              MULS     r3,r0,r3
000074  f8453021          STR      r3,[r5,r1,LSL #2]
;;;114        /* Cb=>G value is scaled-up -0.34414 * x */
;;;115        /* We also add in ONE_HALF so that need not do it in inner loop */
;;;116        upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
000078  4b07              LDR      r3,|L1.152|
00007a  69e5              LDR      r5,[r4,#0x1c]
00007c  4343              MULS     r3,r0,r3
00007e  eb020343          ADD      r3,r2,r3,LSL #1
000082  f8453021          STR      r3,[r5,r1,LSL #2]
000086  1c40              ADDS     r0,r0,#1
000088  1c49              ADDS     r1,r1,#1
00008a  29ff              CMP      r1,#0xff              ;103
00008c  ddde              BLE      |L1.76|
;;;117      }
;;;118    }
00008e  bd70              POP      {r4-r6,pc}
;;;119    
                          ENDP

                  |L1.144|
                          DCD      0x000166e9
                  |L1.148|
                          DCD      0xffff492e
                  |L1.152|
                          DCD      0xffffd3f3

                          AREA ||i.h2v1_merged_upsample||, CODE, READONLY, ALIGN=2

                  h2v1_merged_upsample PROC
;;;228    METHODDEF(void)
;;;229    h2v1_merged_upsample (j_decompress_ptr cinfo,
000000  e92d4ffc          PUSH     {r2-r11,lr}
;;;230    		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
;;;231    		      JSAMPARRAY output_buf)
;;;232    {
000004  4682              MOV      r10,r0
;;;233      my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
000006  f8d001c4          LDR      r0,[r0,#0x1c4]
;;;234      register int y, cred, cgreen, cblue;
;;;235      int cb, cr;
;;;236      register JSAMPROW outptr;
;;;237      JSAMPROW inptr0, inptr1, inptr2;
;;;238      JDIMENSION col;
;;;239      /* copy these pointers into registers if possible */
;;;240      register JSAMPLE * range_limit = cinfo->sample_range_limit;
;;;241      int * Crrtab = upsample->Cr_r_tab;
00000a  f8da4144          LDR      r4,[r10,#0x144]
00000e  6905              LDR      r5,[r0,#0x10]
;;;242      int * Cbbtab = upsample->Cb_b_tab;
000010  9501              STR      r5,[sp,#4]
000012  6945              LDR      r5,[r0,#0x14]
;;;243      INT32 * Crgtab = upsample->Cr_g_tab;
000014  9500              STR      r5,[sp,#0]
;;;244      INT32 * Cbgtab = upsample->Cb_g_tab;
;;;245      SHIFT_TEMPS
;;;246    
;;;247      inptr0 = input_buf[0][in_row_group_ctr];
000016  e9d0eb06          LDRD     lr,r11,[r0,#0x18]
00001a  6808              LDR      r0,[r1,#0]
00001c  f8505022          LDR      r5,[r0,r2,LSL #2]
;;;248      inptr1 = input_buf[1][in_row_group_ctr];
000020  6848              LDR      r0,[r1,#4]
000022  f8506022          LDR      r6,[r0,r2,LSL #2]
;;;249      inptr2 = input_buf[2][in_row_group_ctr];
000026  6888              LDR      r0,[r1,#8]
000028  f8501022          LDR      r1,[r0,r2,LSL #2]
;;;250      outptr = output_buf[0];
;;;251      /* Loop for each pair of output pixels */
;;;252      for (col = cinfo->output_width >> 1; col > 0; col--) {
00002c  f8da2070          LDR      r2,[r10,#0x70]
000030  6818              LDR      r0,[r3,#0]
000032  0852              LSRS     r2,r2,#1
000034  d038              BEQ      |L2.168|
;;;253        /* Do the chroma part of the calculation */
;;;254        cb = GETJSAMPLE(*inptr1++);
000036  bf00              NOP      
                  |L2.56|
;;;255        cr = GETJSAMPLE(*inptr2++);
000038  f8113b01          LDRB     r3,[r1],#1
;;;256        cred = Crrtab[cr];
00003c  f8ddc004          LDR      r12,[sp,#4]
000040  f8167b01          LDRB     r7,[r6],#1            ;254
000044  f85c9023          LDR      r9,[r12,r3,LSL #2]
;;;257        cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
;;;258        cblue = Cbbtab[cb];
000048  f8ddc000          LDR      r12,[sp,#0]
00004c  f85b8027          LDR      r8,[r11,r7,LSL #2]    ;257
000050  f85e3023          LDR      r3,[lr,r3,LSL #2]     ;257
000054  f85c7027          LDR      r7,[r12,r7,LSL #2]
;;;259        /* Fetch 2 Y values and emit 2 pixels */
;;;260        y  = GETJSAMPLE(*inptr0++);
000058  f815cb01          LDRB     r12,[r5],#1
00005c  4443              ADD      r3,r3,r8              ;257
;;;261        outptr[RGB_RED] =   range_limit[y + cred];
00005e  eb0c0809          ADD      r8,r12,r9
000062  141b              ASRS     r3,r3,#16             ;257
000064  f8148008          LDRB     r8,[r4,r8]
000068  f8008b01          STRB     r8,[r0],#1
;;;262        outptr[RGB_GREEN] = range_limit[y + cgreen];
00006c  eb0c0803          ADD      r8,r12,r3
;;;263        outptr[RGB_BLUE] =  range_limit[y + cblue];
000070  44bc              ADD      r12,r12,r7
000072  f8148008          LDRB     r8,[r4,r8]            ;262
000076  f8008b01          STRB     r8,[r0],#1            ;262
00007a  f814c00c          LDRB     r12,[r4,r12]
00007e  f800cb02          STRB     r12,[r0],#2
;;;264        outptr += RGB_PIXELSIZE;
;;;265        y  = GETJSAMPLE(*inptr0++);
000082  f815cb01          LDRB     r12,[r5],#1
;;;266        outptr[RGB_RED] =   range_limit[y + cred];
;;;267        outptr[RGB_GREEN] = range_limit[y + cgreen];
;;;268        outptr[RGB_BLUE] =  range_limit[y + cblue];
000086  1e52              SUBS     r2,r2,#1
000088  eb0c0809          ADD      r8,r12,r9             ;266
00008c  4463              ADD      r3,r3,r12             ;267
00008e  f8148008          LDRB     r8,[r4,r8]            ;266
000092  f8008c01          STRB     r8,[r0,#-1]           ;266
000096  5ce3              LDRB     r3,[r4,r3]            ;267
000098  f8003b01          STRB     r3,[r0],#1            ;267
00009c  eb0c0307          ADD      r3,r12,r7
0000a0  5ce3              LDRB     r3,[r4,r3]
0000a2  f8003b01          STRB     r3,[r0],#1
0000a6  d1c7              BNE      |L2.56|
                  |L2.168|
;;;269        outptr += RGB_PIXELSIZE;
;;;270      }
;;;271      /* If image width is odd, do the last output column separately */
;;;272      if (cinfo->output_width & 1) {
0000a8  f89a2070          LDRB     r2,[r10,#0x70]
0000ac  07d2              LSLS     r2,r2,#31
0000ae  d017              BEQ      |L2.224|
;;;273        cb = GETJSAMPLE(*inptr1);
;;;274        cr = GETJSAMPLE(*inptr2);
0000b0  7809              LDRB     r1,[r1,#0]
;;;275        cred = Crrtab[cr];
0000b2  9b01              LDR      r3,[sp,#4]
0000b4  7832              LDRB     r2,[r6,#0]            ;273
0000b6  f8533021          LDR      r3,[r3,r1,LSL #2]
;;;276        cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
0000ba  f85b7022          LDR      r7,[r11,r2,LSL #2]
0000be  f85e1021          LDR      r1,[lr,r1,LSL #2]
0000c2  4439              ADD      r1,r1,r7
0000c4  140e              ASRS     r6,r1,#16
;;;277        cblue = Cbbtab[cb];
0000c6  9900              LDR      r1,[sp,#0]
0000c8  f8512022          LDR      r2,[r1,r2,LSL #2]
;;;278        y  = GETJSAMPLE(*inptr0);
0000cc  7829              LDRB     r1,[r5,#0]
;;;279        outptr[RGB_RED] =   range_limit[y + cred];
0000ce  440b              ADD      r3,r3,r1
0000d0  5ce3              LDRB     r3,[r4,r3]
0000d2  7003              STRB     r3,[r0,#0]
;;;280        outptr[RGB_GREEN] = range_limit[y + cgreen];
0000d4  198b              ADDS     r3,r1,r6
;;;281        outptr[RGB_BLUE] =  range_limit[y + cblue];
0000d6  4411              ADD      r1,r1,r2
0000d8  5ce3              LDRB     r3,[r4,r3]            ;280
0000da  7043              STRB     r3,[r0,#1]            ;280
0000dc  5c61              LDRB     r1,[r4,r1]
0000de  7081              STRB     r1,[r0,#2]
                  |L2.224|
;;;282      }
;;;283    }
0000e0  e8bd8ffc          POP      {r2-r11,pc}
;;;284    
                          ENDP


                          AREA ||i.h2v2_merged_upsample||, CODE, READONLY, ALIGN=1

                  h2v2_merged_upsample PROC
;;;290    METHODDEF(void)
;;;291    h2v2_merged_upsample (j_decompress_ptr cinfo,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;292    		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
;;;293    		      JSAMPARRAY output_buf)
;;;294    {
;;;295      my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
;;;296      register int y, cred, cgreen, cblue;
;;;297      int cb, cr;
;;;298      register JSAMPROW outptr0, outptr1;
;;;299      JSAMPROW inptr00, inptr01, inptr1, inptr2;
;;;300      JDIMENSION col;
;;;301      /* copy these pointers into registers if possible */
;;;302      register JSAMPLE * range_limit = cinfo->sample_range_limit;
000004  f8d041c4          LDR      r4,[r0,#0x1c4]
000008  b090              SUB      sp,sp,#0x40           ;294
00000a  4686              MOV      lr,r0                 ;294
00000c  f8d00144          LDR      r0,[r0,#0x144]
;;;303      int * Crrtab = upsample->Cr_r_tab;
000010  6925              LDR      r5,[r4,#0x10]
;;;304      int * Cbbtab = upsample->Cb_b_tab;
000012  950a              STR      r5,[sp,#0x28]
000014  6965              LDR      r5,[r4,#0x14]
;;;305      INT32 * Crgtab = upsample->Cr_g_tab;
000016  9501              STR      r5,[sp,#4]
000018  69a5              LDR      r5,[r4,#0x18]
;;;306      INT32 * Cbgtab = upsample->Cb_g_tab;
00001a  9509              STR      r5,[sp,#0x24]
00001c  69e4              LDR      r4,[r4,#0x1c]
;;;307      SHIFT_TEMPS
;;;308    
;;;309      inptr00 = input_buf[0][in_row_group_ctr*2];
00001e  9403              STR      r4,[sp,#0xc]
000020  680d              LDR      r5,[r1,#0]
;;;310      inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
000022  2604              MOVS     r6,#4
000024  eb0606c2          ADD      r6,r6,r2,LSL #3
000028  f8554032          LDR      r4,[r5,r2,LSL #3]     ;309
00002c  59ad              LDR      r5,[r5,r6]
;;;311      inptr1 = input_buf[1][in_row_group_ctr];
00002e  684e              LDR      r6,[r1,#4]
;;;312      inptr2 = input_buf[2][in_row_group_ctr];
000030  6889              LDR      r1,[r1,#8]
000032  f856a022          LDR      r10,[r6,r2,LSL #2]    ;311
000036  f8519022          LDR      r9,[r1,r2,LSL #2]
00003a  e9d31200          LDRD     r1,r2,[r3,#0]
;;;313      outptr0 = output_buf[0];
;;;314      outptr1 = output_buf[1];
;;;315      /* Loop for each group of output pixels */
;;;316      for (col = cinfo->output_width >> 1; col > 0; col--) {
00003e  f8de3070          LDR      r3,[lr,#0x70]
000042  ea5f0c53          LSRS     r12,r3,#1
000046  d062              BEQ      |L3.270|
                  |L3.72|
;;;317        /* Do the chroma part of the calculation */
;;;318        cb = GETJSAMPLE(*inptr1++);
;;;319        cr = GETJSAMPLE(*inptr2++);
000048  f8196b01          LDRB     r6,[r9],#1
;;;320        cred = Crrtab[cr];
00004c  9b0a              LDR      r3,[sp,#0x28]
00004e  f81abb01          LDRB     r11,[r10],#1          ;318
;;;321        cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
000052  f8dd800c          LDR      r8,[sp,#0xc]
000056  9f09              LDR      r7,[sp,#0x24]
000058  f8533026          LDR      r3,[r3,r6,LSL #2]     ;320
00005c  f858802b          LDR      r8,[r8,r11,LSL #2]
000060  f8576026          LDR      r6,[r7,r6,LSL #2]
000064  4446              ADD      r6,r6,r8
;;;322        cblue = Cbbtab[cb];
000066  f8dd8004          LDR      r8,[sp,#4]
00006a  1436              ASRS     r6,r6,#16             ;321
;;;323        /* Fetch 4 Y values and emit 4 pixels */
;;;324        y  = GETJSAMPLE(*inptr00++);
;;;325        outptr0[RGB_RED] =   range_limit[y + cred];
;;;326        outptr0[RGB_GREEN] = range_limit[y + cgreen];
;;;327        outptr0[RGB_BLUE] =  range_limit[y + cblue];
;;;328        outptr0 += RGB_PIXELSIZE;
;;;329        y  = GETJSAMPLE(*inptr00++);
;;;330        outptr0[RGB_RED] =   range_limit[y + cred];
;;;331        outptr0[RGB_GREEN] = range_limit[y + cgreen];
;;;332        outptr0[RGB_BLUE] =  range_limit[y + cblue];
;;;333        outptr0 += RGB_PIXELSIZE;
;;;334        y  = GETJSAMPLE(*inptr01++);
;;;335        outptr1[RGB_RED] =   range_limit[y + cred];
;;;336        outptr1[RGB_GREEN] = range_limit[y + cgreen];
;;;337        outptr1[RGB_BLUE] =  range_limit[y + cblue];
;;;338        outptr1 += RGB_PIXELSIZE;
;;;339        y  = GETJSAMPLE(*inptr01++);
;;;340        outptr1[RGB_RED] =   range_limit[y + cred];
;;;341        outptr1[RGB_GREEN] = range_limit[y + cgreen];
;;;342        outptr1[RGB_BLUE] =  range_limit[y + cblue];
00006c  f1bc0c01          SUBS     r12,r12,#1
000070  f858702b          LDR      r7,[r8,r11,LSL #2]    ;322
000074  f814bb01          LDRB     r11,[r4],#1           ;324
000078  eb0b0803          ADD      r8,r11,r3             ;325
00007c  f8108008          LDRB     r8,[r0,r8]            ;325
000080  f8018b01          STRB     r8,[r1],#1            ;325
000084  eb0b0806          ADD      r8,r11,r6             ;326
000088  f8108008          LDRB     r8,[r0,r8]            ;326
00008c  f8018b01          STRB     r8,[r1],#1            ;326
000090  eb0b0807          ADD      r8,r11,r7             ;327
000094  f8108008          LDRB     r8,[r0,r8]            ;327
000098  f8018b02          STRB     r8,[r1],#2            ;327
00009c  f814bb01          LDRB     r11,[r4],#1           ;329
0000a0  eb0b0803          ADD      r8,r11,r3             ;330
0000a4  f8108008          LDRB     r8,[r0,r8]            ;330
0000a8  f8018c01          STRB     r8,[r1,#-1]           ;330
0000ac  eb0b0806          ADD      r8,r11,r6             ;331
0000b0  f8108008          LDRB     r8,[r0,r8]            ;331
0000b4  f8018b01          STRB     r8,[r1],#1            ;331
0000b8  eb0b0807          ADD      r8,r11,r7             ;332
0000bc  f8108008          LDRB     r8,[r0,r8]            ;332
0000c0  f8018b01          STRB     r8,[r1],#1            ;332
0000c4  f815bb01          LDRB     r11,[r5],#1           ;334
0000c8  eb0b0803          ADD      r8,r11,r3             ;335
0000cc  f8108008          LDRB     r8,[r0,r8]            ;335
0000d0  f8028b01          STRB     r8,[r2],#1            ;335
0000d4  eb0b0806          ADD      r8,r11,r6             ;336
0000d8  f8108008          LDRB     r8,[r0,r8]            ;336
0000dc  f8028b01          STRB     r8,[r2],#1            ;336
0000e0  eb0b0807          ADD      r8,r11,r7             ;337
0000e4  f8108008          LDRB     r8,[r0,r8]            ;337
0000e8  f8028b02          STRB     r8,[r2],#2            ;337
0000ec  f8158b01          LDRB     r8,[r5],#1            ;339
0000f0  4443              ADD      r3,r3,r8              ;340
0000f2  5cc3              LDRB     r3,[r0,r3]            ;340
0000f4  f8023c01          STRB     r3,[r2,#-1]           ;340
0000f8  eb080306          ADD      r3,r8,r6              ;341
0000fc  5cc3              LDRB     r3,[r0,r3]            ;341
0000fe  f8023b01          STRB     r3,[r2],#1            ;341
000102  eb080307          ADD      r3,r8,r7
000106  5cc3              LDRB     r3,[r0,r3]
000108  f8023b01          STRB     r3,[r2],#1
00010c  d19c              BNE      |L3.72|
                  |L3.270|
;;;343        outptr1 += RGB_PIXELSIZE;
;;;344      }
;;;345      /* If image width is odd, do the last output column separately */
;;;346      if (cinfo->output_width & 1) {
00010e  f89e3070          LDRB     r3,[lr,#0x70]
000112  07db              LSLS     r3,r3,#31
000114  d028              BEQ      |L3.360|
;;;347        cb = GETJSAMPLE(*inptr1);
000116  f89a3000          LDRB     r3,[r10,#0]
;;;348        cr = GETJSAMPLE(*inptr2);
;;;349        cred = Crrtab[cr];
;;;350        cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
00011a  f8ddc00c          LDR      r12,[sp,#0xc]
00011e  f8997000          LDRB     r7,[r9,#0]            ;348
000122  9e0a              LDR      r6,[sp,#0x28]         ;349
000124  f85c8023          LDR      r8,[r12,r3,LSL #2]
000128  f8ddc024          LDR      r12,[sp,#0x24]
00012c  f8566027          LDR      r6,[r6,r7,LSL #2]     ;349
000130  f85c7027          LDR      r7,[r12,r7,LSL #2]
;;;351        cblue = Cbbtab[cb];
000134  f8ddc004          LDR      r12,[sp,#4]
000138  4447              ADD      r7,r7,r8              ;350
00013a  143f              ASRS     r7,r7,#16             ;350
00013c  f85cc023          LDR      r12,[r12,r3,LSL #2]
;;;352        y  = GETJSAMPLE(*inptr00);
000140  7823              LDRB     r3,[r4,#0]
;;;353        outptr0[RGB_RED] =   range_limit[y + cred];
000142  199c              ADDS     r4,r3,r6
000144  5d04              LDRB     r4,[r0,r4]
000146  700c              STRB     r4,[r1,#0]
;;;354        outptr0[RGB_GREEN] = range_limit[y + cgreen];
000148  19dc              ADDS     r4,r3,r7
;;;355        outptr0[RGB_BLUE] =  range_limit[y + cblue];
00014a  4463              ADD      r3,r3,r12
00014c  5d04              LDRB     r4,[r0,r4]            ;354
00014e  704c              STRB     r4,[r1,#1]            ;354
000150  5cc3              LDRB     r3,[r0,r3]
000152  708b              STRB     r3,[r1,#2]
;;;356        y  = GETJSAMPLE(*inptr01);
000154  7829              LDRB     r1,[r5,#0]
;;;357        outptr1[RGB_RED] =   range_limit[y + cred];
000156  198b              ADDS     r3,r1,r6
000158  5cc3              LDRB     r3,[r0,r3]
00015a  7013              STRB     r3,[r2,#0]
;;;358        outptr1[RGB_GREEN] = range_limit[y + cgreen];
00015c  19cb              ADDS     r3,r1,r7
;;;359        outptr1[RGB_BLUE] =  range_limit[y + cblue];
00015e  4461              ADD      r1,r1,r12
000160  5cc3              LDRB     r3,[r0,r3]            ;358
000162  7053              STRB     r3,[r2,#1]            ;358
000164  5c40              LDRB     r0,[r0,r1]
000166  7090              STRB     r0,[r2,#2]
                  |L3.360|
;;;360      }
;;;361    }
000168  b010              ADD      sp,sp,#0x40
00016a  e8bd8ff0          POP      {r4-r11,pc}
;;;362    
                          ENDP


                          AREA ||i.jinit_merged_upsampler||, CODE, READONLY, ALIGN=2

                  jinit_merged_upsampler PROC
;;;372    GLOBAL(void)
;;;373    jinit_merged_upsampler (j_decompress_ptr cinfo)
000000  b570              PUSH     {r4-r6,lr}
;;;374    {
000002  4605              MOV      r5,r0
;;;375      my_upsample_ptr upsample;
;;;376    
;;;377      upsample = (my_upsample_ptr)
000004  6840              LDR      r0,[r0,#4]
000006  2230              MOVS     r2,#0x30
000008  2101              MOVS     r1,#1
00000a  6803              LDR      r3,[r0,#0]
00000c  4628              MOV      r0,r5
00000e  4798              BLX      r3
000010  4604              MOV      r4,r0
;;;378        (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;379    				SIZEOF(my_upsampler));
;;;380      cinfo->upsample = (struct jpeg_upsampler *) upsample;
;;;381      upsample->pub.start_pass = start_pass_merged_upsample;
000012  f8c501c4          STR      r0,[r5,#0x1c4]
000016  4810              LDR      r0,|L4.88|
;;;382      upsample->pub.need_context_rows = FALSE;
000018  6020              STR      r0,[r4,#0]
00001a  2000              MOVS     r0,#0
;;;383    
;;;384      upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
00001c  60a0              STR      r0,[r4,#8]
00001e  6f2a              LDR      r2,[r5,#0x70]
000020  6fa9              LDR      r1,[r5,#0x78]
000022  434a              MULS     r2,r1,r2
;;;385    
;;;386      if (cinfo->max_v_samp_factor == 2) {
000024  62a2              STR      r2,[r4,#0x28]
000026  f8d51138          LDR      r1,[r5,#0x138]
00002a  2902              CMP      r1,#2
00002c  d009              BEQ      |L4.66|
;;;387        upsample->pub.upsample = merged_2v_upsample;
;;;388        upsample->upmethod = h2v2_merged_upsample;
;;;389        /* Allocate a spare row buffer */
;;;390        upsample->spare_row = (JSAMPROW)
;;;391          (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
;;;392    		(size_t) (upsample->out_row_width * SIZEOF(JSAMPLE)));
;;;393      } else {
;;;394        upsample->pub.upsample = merged_1v_upsample;
00002e  490b              LDR      r1,|L4.92|
;;;395        upsample->upmethod = h2v1_merged_upsample;
000030  6061              STR      r1,[r4,#4]
000032  490b              LDR      r1,|L4.96|
000034  60e1              STR      r1,[r4,#0xc]
                  |L4.54|
;;;396        /* No spare row needed */
;;;397        upsample->spare_row = NULL;
;;;398      }
;;;399    
;;;400      build_ycc_rgb_table(cinfo);
000036  6220              STR      r0,[r4,#0x20]
000038  4628              MOV      r0,r5
00003a  e8bd4070          POP      {r4-r6,lr}
00003e  f7ffbffe          B.W      build_ycc_rgb_table
                  |L4.66|
000042  4808              LDR      r0,|L4.100|
000044  6060              STR      r0,[r4,#4]            ;388
000046  4808              LDR      r0,|L4.104|
000048  60e0              STR      r0,[r4,#0xc]          ;390
00004a  6868              LDR      r0,[r5,#4]            ;390
00004c  2101              MOVS     r1,#1                 ;390
00004e  6843              LDR      r3,[r0,#4]            ;390
000050  4628              MOV      r0,r5                 ;390
000052  4798              BLX      r3                    ;390
000054  e7ef              B        |L4.54|
;;;401    }
;;;402    
                          ENDP

000056  0000              DCW      0x0000
                  |L4.88|
                          DCD      start_pass_merged_upsample
                  |L4.92|
                          DCD      merged_1v_upsample
                  |L4.96|
                          DCD      h2v1_merged_upsample
                  |L4.100|
                          DCD      merged_2v_upsample
                  |L4.104|
                          DCD      h2v2_merged_upsample

                          AREA ||i.merged_1v_upsample||, CODE, READONLY, ALIGN=1

                  merged_1v_upsample PROC
;;;193    METHODDEF(void)
;;;194    merged_1v_upsample (j_decompress_ptr cinfo,
000000  b570              PUSH     {r4-r6,lr}
;;;195    		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
;;;196    		    JDIMENSION in_row_groups_avail,
;;;197    		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
;;;198    		    JDIMENSION out_rows_avail)
;;;199    /* 1:1 vertical sampling case: much easier, never need a spare row. */
;;;200    {
000002  4614              MOV      r4,r2
000004  e9dd2504          LDRD     r2,r5,[sp,#0x10]
;;;201      my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
;;;202    
;;;203      GUI_USE_PARA(out_rows_avail);
;;;204      GUI_USE_PARA(in_row_groups_avail);
;;;205      /* Just do the upsampling. */
;;;206      (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
000008  f8d061c4          LDR      r6,[r0,#0x1c4]
00000c  682b              LDR      r3,[r5,#0]
00000e  eb020383          ADD      r3,r2,r3,LSL #2
000012  68f6              LDR      r6,[r6,#0xc]
000014  6822              LDR      r2,[r4,#0]
000016  47b0              BLX      r6
;;;207    			 output_buf + *out_row_ctr);
;;;208      /* Adjust counts */
;;;209      (*out_row_ctr)++;
000018  6828              LDR      r0,[r5,#0]
00001a  1c40              ADDS     r0,r0,#1
;;;210      (*in_row_group_ctr)++;
00001c  6028              STR      r0,[r5,#0]
00001e  6820              LDR      r0,[r4,#0]
000020  1c40              ADDS     r0,r0,#1
000022  6020              STR      r0,[r4,#0]
;;;211    }
000024  bd70              POP      {r4-r6,pc}
;;;212    
                          ENDP


                          AREA ||i.merged_2v_upsample||, CODE, READONLY, ALIGN=1

                  merged_2v_upsample PROC
;;;143    METHODDEF(void)
;;;144    merged_2v_upsample (j_decompress_ptr cinfo,
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;145    		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
;;;146    		    JDIMENSION in_row_groups_avail,
;;;147    		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
;;;148    		    JDIMENSION out_rows_avail)
;;;149    /* 2:1 vertical sampling case: may need a spare row. */
;;;150    {
000004  4686              MOV      lr,r0
000006  4617              MOV      r7,r2
;;;151      my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
;;;152      JSAMPROW work_ptrs[2];
;;;153      JDIMENSION num_rows;		/* number of rows returned to caller */
;;;154    
;;;155      GUI_USE_PARA(in_row_groups_avail);
;;;156      if (upsample->spare_full) {
000008  f8de41c4          LDR      r4,[lr,#0x1c4]
00000c  e9dd600b          LDRD     r6,r0,[sp,#0x2c]      ;150
000010  9a0a              LDR      r2,[sp,#0x28]         ;151
000012  6a63              LDR      r3,[r4,#0x24]         ;150
;;;157        /* If we have a spare row saved from a previous cycle, just return it. */
;;;158        jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
000014  f04f0c01          MOV      r12,#1
000018  b17b              CBZ      r3,|L6.58|
00001a  6aa0              LDR      r0,[r4,#0x28]
00001c  2300              MOVS     r3,#0
00001e  e9cdc000          STRD     r12,r0,[sp,#0]
000022  6830              LDR      r0,[r6,#0]
000024  4619              MOV      r1,r3
000026  eb020280          ADD      r2,r2,r0,LSL #2
00002a  f1040020          ADD      r0,r4,#0x20
00002e  f7fffffe          BL       jcopy_sample_rows
;;;159    		      1, upsample->out_row_width);
;;;160        num_rows = 1;
000032  2501              MOVS     r5,#1
;;;161        upsample->spare_full = FALSE;
000034  2000              MOVS     r0,#0
000036  6260              STR      r0,[r4,#0x24]
000038  e01e              B        |L6.120|
                  |L6.58|
;;;162      } else {
;;;163        /* Figure number of rows to return to caller. */
;;;164        num_rows = 2;
;;;165        /* Not more than the distance to the end of the image. */
;;;166        if (num_rows > upsample->rows_to_go)
00003a  6ae3              LDR      r3,[r4,#0x2c]
00003c  2502              MOVS     r5,#2                 ;164
00003e  2b02              CMP      r3,#2
000040  d200              BCS      |L6.68|
;;;167          num_rows = upsample->rows_to_go;
000042  461d              MOV      r5,r3
                  |L6.68|
;;;168        /* And not more than what the client can accept: */
;;;169        out_rows_avail -= *out_row_ctr;
000044  6833              LDR      r3,[r6,#0]
000046  1ac0              SUBS     r0,r0,r3
;;;170        if (num_rows > out_rows_avail)
000048  4285              CMP      r5,r0
00004a  d900              BLS      |L6.78|
;;;171          num_rows = out_rows_avail;
00004c  4605              MOV      r5,r0
                  |L6.78|
;;;172        /* Create output pointer array for upsampler. */
;;;173        work_ptrs[0] = output_buf[*out_row_ctr];
00004e  f8520023          LDR      r0,[r2,r3,LSL #2]
;;;174        if (num_rows > 1) {
000052  9002              STR      r0,[sp,#8]
000054  2d01              CMP      r5,#1
000056  d905              BLS      |L6.100|
;;;175          work_ptrs[1] = output_buf[*out_row_ctr + 1];
000058  6830              LDR      r0,[r6,#0]
00005a  eb020080          ADD      r0,r2,r0,LSL #2
00005e  6840              LDR      r0,[r0,#4]
000060  9003              STR      r0,[sp,#0xc]
000062  e003              B        |L6.108|
                  |L6.100|
;;;176        } else {
;;;177          work_ptrs[1] = upsample->spare_row;
000064  6a20              LDR      r0,[r4,#0x20]
;;;178          upsample->spare_full = TRUE;
000066  9003              STR      r0,[sp,#0xc]
000068  f8c4c024          STR      r12,[r4,#0x24]
                  |L6.108|
;;;179        }
;;;180        /* Now do the upsampling. */
;;;181        (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
00006c  f8d4c00c          LDR      r12,[r4,#0xc]
000070  683a              LDR      r2,[r7,#0]
000072  ab02              ADD      r3,sp,#8
000074  4670              MOV      r0,lr
000076  47e0              BLX      r12
                  |L6.120|
;;;182      }
;;;183    
;;;184      /* Adjust counts */
;;;185      *out_row_ctr += num_rows;
000078  6830              LDR      r0,[r6,#0]
00007a  4428              ADD      r0,r0,r5
;;;186      upsample->rows_to_go -= num_rows;
00007c  6030              STR      r0,[r6,#0]
00007e  6ae0              LDR      r0,[r4,#0x2c]
000080  1b40              SUBS     r0,r0,r5
;;;187      /* When the buffer is emptied, declare this input row group consumed */
;;;188      if (! upsample->spare_full)
000082  62e0              STR      r0,[r4,#0x2c]
000084  6a60              LDR      r0,[r4,#0x24]
000086  2800              CMP      r0,#0
000088  d102              BNE      |L6.144|
;;;189        (*in_row_group_ctr)++;
00008a  6838              LDR      r0,[r7,#0]
00008c  1c40              ADDS     r0,r0,#1
00008e  6038              STR      r0,[r7,#0]
                  |L6.144|
;;;190    }
000090  e8bd81ff          POP      {r0-r8,pc}
;;;191    
                          ENDP


                          AREA ||i.start_pass_merged_upsample||, CODE, READONLY, ALIGN=1

                  start_pass_merged_upsample PROC
;;;125    METHODDEF(void)
;;;126    start_pass_merged_upsample (j_decompress_ptr cinfo)
000000  f8d011c4          LDR      r1,[r0,#0x1c4]
;;;127    {
;;;128      my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
;;;129    
;;;130      /* Mark the spare buffer empty */
;;;131      upsample->spare_full = FALSE;
000004  2200              MOVS     r2,#0
;;;132      /* Initialize total-height counter for detecting bottom of image */
;;;133      upsample->rows_to_go = cinfo->output_height;
000006  624a              STR      r2,[r1,#0x24]
000008  6f40              LDR      r0,[r0,#0x74]
00000a  62c8              STR      r0,[r1,#0x2c]
;;;134    }
00000c  4770              BX       lr
;;;135    
                          ENDP

