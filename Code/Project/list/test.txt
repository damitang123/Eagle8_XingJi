; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\test.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\test.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\User\test.c]
                          THUMB

                          AREA ||i.Adc_Get_Static_Press_Value||, CODE, READONLY, ALIGN=2

                  Adc_Get_Static_Press_Value PROC
;;;87     
;;;88     bool Adc_Get_Static_Press_Value(unsigned short * nStaticPressValue)
000000  b510              PUSH     {r4,lr}
;;;89     {
;;;90     	if(g_nAdcPressValidDataCnt++ < 50)
000002  4c0a              LDR      r4,|L1.44|
000004  6861              LDR      r1,[r4,#4]  ; g_nAdcPressValidDataCnt
000006  1c4a              ADDS     r2,r1,#1
000008  6062              STR      r2,[r4,#4]  ; g_nAdcPressValidDataCnt
00000a  2932              CMP      r1,#0x32
00000c  d207              BCS      |L1.30|
;;;91     	{
;;;92     		g_nSumOfStaticPressValue += Adc_Get_PressSensorValue();
00000e  2004              MOVS     r0,#4
000010  f7fffffe          BL       ADC_Software_Filter
000014  68a1              LDR      r1,[r4,#8]  ; g_nSumOfStaticPressValue
000016  4408              ADD      r0,r0,r1
;;;93     	}
;;;94     	else
;;;95     	{
;;;96     		* nStaticPressValue = g_nSumOfStaticPressValue / 50;
;;;97     		return true;
;;;98     	}
;;;99     
;;;100    	return false;
000018  60a0              STR      r0,[r4,#8]  ; g_nSumOfStaticPressValue
00001a  2000              MOVS     r0,#0
;;;101    }
00001c  bd10              POP      {r4,pc}
                  |L1.30|
00001e  68a1              LDR      r1,[r4,#8]            ;96  ; g_nSumOfStaticPressValue
000020  2232              MOVS     r2,#0x32              ;96
000022  fbb1f1f2          UDIV     r1,r1,r2              ;96
000026  8001              STRH     r1,[r0,#0]            ;96
000028  2001              MOVS     r0,#1                 ;97
00002a  bd10              POP      {r4,pc}
;;;102    
                          ENDP

                  |L1.44|
                          DCD      ||.data||

                          AREA ||i.Get_Blow_Ratio_Via_Press_DiffAdc||, CODE, READONLY, ALIGN=2

                  Get_Blow_Ratio_Via_Press_DiffAdc PROC
;;;135    
;;;136    double Get_Blow_Ratio_Via_Press_DiffAdc(unsigned short nCurrBlowAdcValue, unsigned long nCurrTime)
000000  b570              PUSH     {r4-r6,lr}
;;;137    {
;;;138    	double fBlowRatio;
;;;139    	unsigned long nTime;
;;;140    	unsigned short nAverageAdc;
;;;141    
;;;142    	nTime = (nCurrTime - pTestWin->nLastBlowAdcIntegralTime);
000002  4a13              LDR      r2,|L2.80|
000004  6814              LDR      r4,[r2,#0]  ; pTestWin
000006  f8542f60          LDR      r2,[r4,#0x60]!
;;;143    	pTestWin->nLastBlowAdcIntegralTime = nCurrTime;
00000a  f8441934          STR      r1,[r4],#-0x34
00000e  1a8a              SUBS     r2,r1,r2              ;142
;;;144    	
;;;145    	nAverageAdc = (nCurrBlowAdcValue + pTestWin->nLastBlowAdcValue) / 2;
000010  8e21              LDRH     r1,[r4,#0x30]
;;;146    	pTestWin->nLastBlowAdcValue = nCurrBlowAdcValue;
000012  8620              STRH     r0,[r4,#0x30]
000014  4401              ADD      r1,r1,r0              ;145
000016  084e              LSRS     r6,r1,#1              ;145
;;;147    
;;;148    	fBlowRatio = (float)Get_Blow_Ratio_Via_Via_Press_DiffAdc_Sub(abs(nAverageAdc - pTestWin->nPressValueBeforeBlow)) * (float)nTime / 1000;
000018  4610              MOV      r0,r2
00001a  f7fffffe          BL       __aeabi_ui2f
00001e  4605              MOV      r5,r0
000020  8820              LDRH     r0,[r4,#0]
000022  1a32              SUBS     r2,r6,r0
000024  d500              BPL      |L2.40|
000026  4252              RSBS     r2,r2,#0
                  |L2.40|
000028  b290              UXTH     r0,r2
00002a  f7fffffe          BL       Get_Blow_Ratio_Via_Via_Press_DiffAdc_Sub
00002e  f7fffffe          BL       __aeabi_ui2f
000032  4629              MOV      r1,r5
000034  f7fffffe          BL       __aeabi_fmul
000038  4906              LDR      r1,|L2.84|
00003a  f7fffffe          BL       __aeabi_fdiv
00003e  f7fffffe          BL       __aeabi_f2d
;;;149    
;;;150    //	TRACE_PRINTF("nDiffAdc = %d, T = %d, f= %.4f\r\n",nAverageAdc - pTestWin->nPressValueBeforeBlow, nTime, fBlowRatio / 10000);
;;;151    
;;;152    	/*从ml转换成L*/
;;;153    	return (fBlowRatio / 10000);
000042  e8bd4070          POP      {r4-r6,lr}
000046  2200              MOVS     r2,#0
000048  4b03              LDR      r3,|L2.88|
00004a  f7ffbffe          B.W      __aeabi_ddiv
;;;154    }
;;;155    
                          ENDP

00004e  0000              DCW      0x0000
                  |L2.80|
                          DCD      pTestWin
                  |L2.84|
                          DCD      0x447a0000
                  |L2.88|
                          DCD      0x40c38800

                          AREA ||i.Get_Blow_Ratio_Via_Via_Press_DiffAdc_Sub||, CODE, READONLY, ALIGN=2

                  Get_Blow_Ratio_Via_Via_Press_DiffAdc_Sub PROC
;;;102    
;;;103    unsigned long Get_Blow_Ratio_Via_Via_Press_DiffAdc_Sub(unsigned short nDiffAdcValue)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;104    {
;;;105    	float k;
;;;106    	unsigned char i;
;;;107    	int y1, y2, x1, x2;
;;;108    	unsigned short nAdc_Value = nDiffAdcValue;
000004  0004              MOVS     r4,r0
000006  d005              BEQ      |L3.20|
;;;109    
;;;110    	if(nAdc_Value <= g_sPressVsBlowRatioLUT[0].nDiffAdc)
;;;111    	{
;;;112    		return g_sPressVsBlowRatioLUT[0].nBlowRatio;
;;;113    	}
;;;114    
;;;115    	if(nAdc_Value >= g_sPressVsBlowRatioLUT[ARR_SIZE(g_sPressVsBlowRatioLUT) - 1].nDiffAdc)
000008  f240703a          MOV      r0,#0x73a
00000c  4284              CMP      r4,r0
00000e  d303              BCC      |L3.24|
;;;116    	{
;;;117    		return g_sPressVsBlowRatioLUT[ARR_SIZE(g_sPressVsBlowRatioLUT) - 1].nBlowRatio;
000010  f6413026          MOV      r0,#0x1b26
                  |L3.20|
;;;118    	}
;;;119    
;;;120    	for(i = 0; i < ARR_SIZE(g_sPressVsBlowRatioLUT); i++)
;;;121    	{
;;;122    		if(nAdc_Value < g_sPressVsBlowRatioLUT[i].nDiffAdc)
;;;123    			break;
;;;124    	}
;;;125    
;;;126    	y2 = g_sPressVsBlowRatioLUT[i].nBlowRatio;
;;;127    	y1 = g_sPressVsBlowRatioLUT[i - 1].nBlowRatio;
;;;128    	x2 = g_sPressVsBlowRatioLUT[i].nDiffAdc;
;;;129    	x1 = g_sPressVsBlowRatioLUT[i - 1].nDiffAdc;
;;;130    
;;;131    	k = (float)(y2 - y1) / (float)(x2 - x1);			/*求斜率*/
;;;132    
;;;133    	return y1 + k * (nAdc_Value - x1);
;;;134    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L3.24|
000018  4916              LDR      r1,|L3.116|
00001a  2000              MOVS     r0,#0                 ;120
                  |L3.28|
00001c  eb010280          ADD      r2,r1,r0,LSL #2       ;122
000020  8852              LDRH     r2,[r2,#2]            ;122
000022  42a2              CMP      r2,r4                 ;122
000024  d803              BHI      |L3.46|
000026  1c40              ADDS     r0,r0,#1              ;122
000028  b2c0              UXTB     r0,r0                 ;120
00002a  2815              CMP      r0,#0x15              ;120
00002c  d3f6              BCC      |L3.28|
                  |L3.46|
00002e  eb010080          ADD      r0,r1,r0,LSL #2       ;126
000032  f8306904          LDRH     r6,[r0],#-4           ;126
000036  88c1              LDRH     r1,[r0,#6]            ;128
000038  8847              LDRH     r7,[r0,#2]            ;129
00003a  8805              LDRH     r5,[r0,#0]            ;127
00003c  1bc8              SUBS     r0,r1,r7              ;131
00003e  f7fffffe          BL       __aeabi_i2f
000042  4680              MOV      r8,r0                 ;131
000044  1b70              SUBS     r0,r6,r5              ;131
000046  f7fffffe          BL       __aeabi_i2f
00004a  4641              MOV      r1,r8                 ;131
00004c  f7fffffe          BL       __aeabi_fdiv
000050  4606              MOV      r6,r0                 ;131
000052  1be0              SUBS     r0,r4,r7              ;133
000054  f7fffffe          BL       __aeabi_i2f
000058  4631              MOV      r1,r6                 ;133
00005a  f7fffffe          BL       __aeabi_fmul
00005e  4604              MOV      r4,r0                 ;133
000060  4628              MOV      r0,r5                 ;133
000062  f7fffffe          BL       __aeabi_i2f
000066  4621              MOV      r1,r4                 ;133
000068  f7fffffe          BL       __aeabi_fadd
00006c  e8bd41f0          POP      {r4-r8,lr}            ;133
000070  f7ffbffe          B.W      __aeabi_f2uiz
;;;135    
                          ENDP

                  |L3.116|
                          DCD      ||.constdata||

                          AREA ||i.Scan_Test_State||, CODE, READONLY, ALIGN=2

                  Scan_Test_State PROC
;;;671    
;;;672    void Scan_Test_State(WM_MESSAGE *pMsg)
000000  b51f              PUSH     {r0-r4,lr}
;;;673    {
;;;674    	switch(g_eTestState)
000002  4c2d              LDR      r4,|L4.184|
000004  78a1              LDRB     r1,[r4,#2]  ; g_eTestState
000006  290e              CMP      r1,#0xe
000008  d232              BCS      |L4.112|
00000a  e8dff001          TBB      [pc,r1]
00000e  3107              DCB      0x31,0x07
000010  0c113131          DCB      0x0c,0x11,0x31,0x31
000014  31161b20          DCB      0x31,0x16,0x1b,0x20
000018  252a2f32          DCB      0x25,0x2a,0x2f,0x32
;;;675    	{
;;;676    		case eStart:
;;;677    			_Start(pMsg);
00001c  b004              ADD      sp,sp,#0x10
00001e  e8bd4010          POP      {r4,lr}
000022  f7ffbffe          B.W      _Start
;;;678    			break;
;;;679    
;;;680    		case ePrepare:
;;;681    			_Prepare(pMsg);
000026  b004              ADD      sp,sp,#0x10
000028  e8bd4010          POP      {r4,lr}
00002c  f7ffbffe          B.W      _Prepare
;;;682    			break;
;;;683    
;;;684    		case eAlcClean:
;;;685    			_AlcClean(pMsg);
000030  b004              ADD      sp,sp,#0x10
000032  e8bd4010          POP      {r4,lr}
000036  f7ffbffe          B.W      _AlcClean
;;;686    			break;
;;;687    
;;;688    		case eWaitStart:
;;;689    			_WaitStart(pMsg);
;;;690    			break;
;;;691    				
;;;692    		case eStartTestPrepare:
;;;693    			_StartTestPrepare(pMsg);
;;;694    			break;
;;;695    	
;;;696    		case eInhaling:
;;;697    			_Inhaling(pMsg);
;;;698    			break;
;;;699    
;;;700    		case eWaitBlowing:
;;;701    			_WaitBlowing(pMsg);
00003a  b004              ADD      sp,sp,#0x10
00003c  e8bd4010          POP      {r4,lr}
000040  f7ffbffe          B.W      _WaitBlowing
;;;702    			break;
;;;703    
;;;704    		case eBlowing:
;;;705    			_Blowing(pMsg);
000044  b004              ADD      sp,sp,#0x10
000046  e8bd4010          POP      {r4,lr}
00004a  f7ffbffe          B.W      _Blowing
;;;706    			break;
;;;707    
;;;708    		case eBlowInterrupt:
;;;709    			_BlowInterrupt(pMsg);
00004e  b004              ADD      sp,sp,#0x10
000050  e8bd4010          POP      {r4,lr}
000054  f7ffbffe          B.W      _BlowInterrupt
;;;710    			break;
;;;711    
;;;712    		case ePump:
;;;713    			_Pump(pMsg);
000058  b004              ADD      sp,sp,#0x10
00005a  e8bd4010          POP      {r4,lr}
00005e  f7ffbffe          B.W      _Pump
;;;714    			break;
;;;715    
;;;716    		case eProcessing:
;;;717    			_Processing(pMsg);
000062  b004              ADD      sp,sp,#0x10
000064  e8bd4010          POP      {r4,lr}
000068  f7ffbffe          B.W      _Processing
00006c  200d              MOVS     r0,#0xd
00006e  70a0              STRB     r0,[r4,#2]
                  |L4.112|
;;;718    			break;
;;;719    
;;;720    		case eFinishTest:
;;;721    			_FinishTest(pMsg);
;;;722    			break;
;;;723    		
;;;724    		case eDisplayResult:
;;;725    			_DisplayResult(pMsg);
;;;726    			break;
;;;727    	}
;;;728    }
000070  bd1f              POP      {r0-r4,pc}
000072  f9b00004          LDRSH    r0,[r0,#4]
000076  f7fffffe          BL       WM_DeleteWindow
00007a  4910              LDR      r1,|L4.188|
00007c  7820              LDRB     r0,[r4,#0]  ; g_eTestMode
00007e  74c8              STRB     r0,[r1,#0x13]
000080  2802              CMP      r0,#2
000082  d007              BEQ      |L4.148|
000084  f7fffffe          BL       GetLastWinFromList
000088  b004              ADD      sp,sp,#0x10
00008a  2101              MOVS     r1,#1
00008c  e8bd4010          POP      {r4,lr}
000090  f7ffbffe          B.W      CW_ShowReport_Create
                  |L4.148|
000094  2000              MOVS     r0,#0
000096  490b              LDR      r1,|L4.196|
000098  f88d0008          STRB     r0,[sp,#8]
00009c  4808              LDR      r0,|L4.192|
00009e  7809              LDRB     r1,[r1,#0]  ; g_Language
0000a0  f8500021          LDR      r0,[r0,r1,LSL #2]
0000a4  f8d001bc          LDR      r0,[r0,#0x1bc]
0000a8  9003              STR      r0,[sp,#0xc]
0000aa  f7fffffe          BL       GetLastWinFromList
0000ae  4669              MOV      r1,sp
0000b0  f7fffffe          BL       CW_InputPlateNumWindow_Create
0000b4  bd1f              POP      {r0-r4,pc}
;;;729    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L4.184|
                          DCD      ||.data||
                  |L4.188|
                          DCD      g_sRecord
                  |L4.192|
                          DCD      Strings
                  |L4.196|
                          DCD      g_Language

                          AREA ||i._AlcClean||, CODE, READONLY, ALIGN=2

                  _AlcClean PROC
;;;217    
;;;218    static void _AlcClean(WM_MESSAGE *pMsg)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;219    {
;;;220    	bool bAlreadyGetStaticBlowPress;
;;;221    #if QUICK_TEST
;;;222    	if(pTestWin->bNeedRefreshState)
000004  4c54              LDR      r4,|L5.344|
000006  4607              MOV      r7,r0                 ;219
000008  2600              MOVS     r6,#0
00000a  6820              LDR      r0,[r4,#0]  ; pTestWin
00000c  f890102a          LDRB     r1,[r0,#0x2a]
000010  b1f1              CBZ      r1,|L5.80|
;;;223    	{
;;;224    		pTestWin->bNeedRefreshState = false;
;;;225    		TEXT_SetText(pTestWin->hTestTips, _T_Clean);
000012  4a53              LDR      r2,|L5.352|
000014  f880602a          STRB     r6,[r0,#0x2a]         ;224
000018  4950              LDR      r1,|L5.348|
00001a  7812              LDRB     r2,[r2,#0]  ; g_Language
00001c  f9b00020          LDRSH    r0,[r0,#0x20]
000020  f8511022          LDR      r1,[r1,r2,LSL #2]
000024  f8d110f0          LDR      r1,[r1,#0xf0]
000028  f7fffffe          BL       TEXT_SetText
;;;226    		pTestWin->nStartDelayTime = 0;
00002c  6820              LDR      r0,[r4,#0]  ; pTestWin
;;;227    		pTestWin->nCurrPumpState = 0;
;;;228    		pTestWin->bAlcSensorReady = false;
;;;229    		pTestWin->bQuickTestAlcSernsorReady = false;
;;;230    		pTestWin->nCleanCnt = 0;
;;;231    		Gpio_Ctrl(eGpio_Alc_Clean_Sw_Ctrl,false);
00002e  2100              MOVS     r1,#0
000030  6406              STR      r6,[r0,#0x40]         ;227
000032  f8806065          STRB     r6,[r0,#0x65]         ;227
000036  f880604c          STRB     r6,[r0,#0x4c]         ;228
00003a  f880604d          STRB     r6,[r0,#0x4d]         ;229
00003e  f8806064          STRB     r6,[r0,#0x64]         ;230
000042  2007              MOVS     r0,#7
000044  f7fffffe          BL       Gpio_Ctrl
;;;232    		Gpio_Ctrl(eGpio_QuickTest_Alc_Clean_Sw_Ctrl,false);
000048  2100              MOVS     r1,#0
00004a  2008              MOVS     r0,#8
00004c  f7fffffe          BL       Gpio_Ctrl
                  |L5.80|
;;;233    	}
;;;234    
;;;235    	bAlreadyGetStaticBlowPress = Adc_Get_Static_Press_Value(&pTestWin->nPressValueBeforeBlow);
000050  6820              LDR      r0,[r4,#0]  ; pTestWin
000052  302c              ADDS     r0,r0,#0x2c
000054  f7fffffe          BL       Adc_Get_Static_Press_Value
000058  4680              MOV      r8,r0
;;;236    
;;;237    	if(Get_System_Time() > pTestWin->nStartDelayTime + 500)
00005a  f7fffffe          BL       Get_System_Time
00005e  6821              LDR      r1,[r4,#0]  ; pTestWin
000060  6c09              LDR      r1,[r1,#0x40]
000062  f50171fa          ADD      r1,r1,#0x1f4
000066  4288              CMP      r0,r1
000068  d96c              BLS      |L5.324|
;;;238    	{
;;;239    		pTestWin->nStartDelayTime = Get_System_Time();
00006a  f7fffffe          BL       Get_System_Time
00006e  6821              LDR      r1,[r4,#0]  ; pTestWin
;;;240    		
;;;241    		Gpio_Ctrl(eGpio_Pump_On_Sw_Ctrl, false);
000070  6408              STR      r0,[r1,#0x40]
000072  2100              MOVS     r1,#0
000074  2006              MOVS     r0,#6
000076  f7fffffe          BL       Gpio_Ctrl
;;;242    		
;;;243    		/*普通测试传感器清零*/
;;;244    		if(Adc_Is_Alcohol_Sensor_Ready())
00007a  f7fffffe          BL       Adc_Is_Alcohol_Sensor_Ready
;;;245    		{
;;;246    			if(pTestWin->bAlcSensorReady == false)
;;;247    			{
;;;248    				pTestWin->bAlcSensorReady = true;
00007e  2501              MOVS     r5,#1
000080  2800              CMP      r0,#0                 ;244
000082  6820              LDR      r0,[r4,#0]            ;244  ; pTestWin
000084  d007              BEQ      |L5.150|
000086  f890104c          LDRB     r1,[r0,#0x4c]         ;246
00008a  b9d1              CBNZ     r1,|L5.194|
00008c  f880504c          STRB     r5,[r0,#0x4c]
;;;249    				Gpio_Ctrl(eGpio_Alc_Clean_Sw_Ctrl,true);
000090  2101              MOVS     r1,#1
000092  2007              MOVS     r0,#7
000094  e013              B        |L5.190|
                  |L5.150|
;;;250    			}
;;;251    		}
;;;252    		else
;;;253    		{
;;;254    			if(pTestWin->nCleanCnt++ < 6)
000096  f8901064          LDRB     r1,[r0,#0x64]
00009a  1c4a              ADDS     r2,r1,#1
00009c  f8802064          STRB     r2,[r0,#0x64]
0000a0  2906              CMP      r1,#6
0000a2  d219              BCS      |L5.216|
;;;255    			{
;;;256    				pTestWin->nCleanCnt = 6;
0000a4  2106              MOVS     r1,#6
0000a6  f8801064          STRB     r1,[r0,#0x64]
;;;257    				pTestWin->nCurrPumpState = pTestWin->nCurrPumpState ? 0 : 1;
0000aa  f8901065          LDRB     r1,[r0,#0x65]
0000ae  b189              CBZ      r1,|L5.212|
0000b0  f05f0100          MOVS.W   r1,#0
                  |L5.180|
0000b4  f8801065          STRB     r1,[r0,#0x65]
;;;258    				Gpio_Ctrl(eGpio_Pump_On_Sw_Ctrl, pTestWin->nCurrPumpState ? true : false);
0000b8  b101              CBZ      r1,|L5.188|
0000ba  2101              MOVS     r1,#1
                  |L5.188|
0000bc  2006              MOVS     r0,#6
                  |L5.190|
0000be  f7fffffe          BL       Gpio_Ctrl
                  |L5.194|
;;;259    			}
;;;260    			else
;;;261    			{
;;;262    				pTestWin->nCurrPumpState = 0;
;;;263    				Gpio_Ctrl(eGpio_Pump_On_Sw_Ctrl, false);
;;;264    			}
;;;265    		}
;;;266    
;;;267    		/*快测传感器清零*/
;;;268    		if(Adc_Is_Quick_Test_Alcohol_Sensor_Ready())
0000c2  f7fffffe          BL       Adc_Is_Quick_Test_Alcohol_Sensor_Ready
;;;269    		{
;;;270    			if(pTestWin->bQuickTestAlcSernsorReady == false)
;;;271    			{
;;;272    				pTestWin->bQuickTestAlcSernsorReady = true;
;;;273    				Gpio_Ctrl(eGpio_Moto_Ctrl,false);
;;;274    				Gpio_Ctrl(eGpio_QuickTest_Alc_Clean_Sw_Ctrl,true);
;;;275    				if(pTestWin->wObj.Property == eTestQuickTest)
;;;276    				{
;;;277    					g_eTestState = eStartTestPrepare;
0000c6  4e27              LDR      r6,|L5.356|
0000c8  b300              CBZ      r0,|L5.268|
0000ca  6820              LDR      r0,[r4,#0]            ;270  ; pTestWin
0000cc  f890104d          LDRB     r1,[r0,#0x4d]         ;270
0000d0  b131              CBZ      r1,|L5.224|
0000d2  e01f              B        |L5.276|
                  |L5.212|
0000d4  2101              MOVS     r1,#1                 ;257
0000d6  e7ed              B        |L5.180|
                  |L5.216|
0000d8  f8806065          STRB     r6,[r0,#0x65]         ;262
0000dc  2100              MOVS     r1,#0                 ;263
0000de  e7ed              B        |L5.188|
                  |L5.224|
0000e0  f880504d          STRB     r5,[r0,#0x4d]         ;272
0000e4  2100              MOVS     r1,#0                 ;273
0000e6  200b              MOVS     r0,#0xb               ;273
0000e8  f7fffffe          BL       Gpio_Ctrl
0000ec  2101              MOVS     r1,#1                 ;274
0000ee  2008              MOVS     r0,#8                 ;274
0000f0  f7fffffe          BL       Gpio_Ctrl
0000f4  6820              LDR      r0,[r4,#0]            ;275  ; pTestWin
0000f6  6841              LDR      r1,[r0,#4]            ;275
0000f8  2903              CMP      r1,#3                 ;275
0000fa  d10b              BNE      |L5.276|
0000fc  2105              MOVS     r1,#5
0000fe  70b1              STRB     r1,[r6,#2]
;;;278    					g_eTestMode = eTestQuickTest;
000100  2103              MOVS     r1,#3
000102  7031              STRB     r1,[r6,#0]
;;;279    					pTestWin->bNeedRefreshState = true;
000104  f880502a          STRB     r5,[r0,#0x2a]
                  |L5.264|
;;;280    					return;
;;;281    				}
;;;282    			}
;;;283    		}
;;;284    		else
;;;285    		{
;;;286    			Gpio_Ctrl(eGpio_Moto_Ctrl,true);
;;;287    		}
;;;288    
;;;289    		/*都清零完成之后再判断其他条件是否成熟*/
;;;290    		if(pTestWin->bAlcSensorReady && pTestWin->bQuickTestAlcSernsorReady && bAlreadyGetStaticBlowPress && Adc_Is_Pump_Ready())
;;;291    		{
;;;292    			g_eTestState = eWaitBlowing;
;;;293    			pTestWin->bNeedRefreshState = true;
;;;294    			Voc_Cmd(eVOC_BLOW);
;;;295    			Buzzer_Beep(eBUZ_DEVICE_OK);
;;;296    		}
;;;297    	}		
;;;298    
;;;299    	/*处理按键 事件*/
;;;300    	switch(WM_Key_Code)
;;;301    	{
;;;302    		case GUI_KEY_LEFT_FUN:
;;;303    			WM_DeleteWindow(pMsg->hWin);
;;;304    			break;
;;;305    	}
;;;306    	
;;;307    #else
;;;308    
;;;309    	if(pTestWin->bNeedRefreshState)
;;;310    	{
;;;311    		pTestWin->bNeedRefreshState = false;
;;;312    		TEXT_SetText(pTestWin->hTestTips, _T_Clean);
;;;313    		pTestWin->nStartDelayTime = 0;
;;;314    		pTestWin->nCurrPumpState = 0;
;;;315    		pTestWin->bAlcSensorReady = false;
;;;316    		pTestWin->nCleanCnt = 0;
;;;317    		Gpio_Ctrl(eGpio_Alc_Clean_Sw_Ctrl,false);
;;;318    	}
;;;319    
;;;320    	bAlreadyGetStaticBlowPress = Adc_Get_Static_Press_Value(&pTestWin->nPressValueBeforeBlow);
;;;321    
;;;322    	if(Get_System_Time() > pTestWin->nStartDelayTime + 500)
;;;323    	{
;;;324    		pTestWin->nStartDelayTime = Get_System_Time();
;;;325    
;;;326    		Gpio_Ctrl(eGpio_Pump_On_Sw_Ctrl, false);
;;;327    		
;;;328    		/*普通测试传感器清零*/
;;;329    		if(Adc_Is_Alcohol_Sensor_Ready())
;;;330    		{
;;;331    			if(pTestWin->bAlcSensorReady == false) 
;;;332    			{
;;;333    				pTestWin->bAlcSensorReady = true;
;;;334    				Gpio_Ctrl(eGpio_Alc_Clean_Sw_Ctrl,true);
;;;335    			}
;;;336    		}
;;;337    		else
;;;338    		{
;;;339    			if(pTestWin->nCleanCnt++ < 6)
;;;340    			{
;;;341    				pTestWin->nCurrPumpState = pTestWin->nCurrPumpState ? 0 : 1;
;;;342    				Gpio_Ctrl(eGpio_Pump_On_Sw_Ctrl, pTestWin->nCurrPumpState ? true : false);
;;;343    			}
;;;344    			else
;;;345    			{
;;;346    				pTestWin->nCurrPumpState = 0;
;;;347    				Gpio_Ctrl(eGpio_Pump_On_Sw_Ctrl, false);
;;;348    			}
;;;349    		}
;;;350    
;;;351    		/*都清零完成之后再判断其他条件是否成熟*/
;;;352    		if(pTestWin->bAlcSensorReady && bAlreadyGetStaticBlowPress && Adc_Is_Pump_Ready())
;;;353    		{
;;;354    			g_eTestState = eWaitBlowing;
;;;355    			pTestWin->bNeedRefreshState = true;
;;;356    			Voc_Cmd(eVOC_BLOW);
;;;357    			Buzzer_Beep(eBUZ_DEVICE_OK);
;;;358    		}
;;;359    	}		
;;;360    
;;;361    	/*处理按键 事件*/
;;;362    	switch(WM_Key_Code)
;;;363    	{
;;;364    		case GUI_KEY_LEFT_FUN:
;;;365    			WM_DeleteWindow(pMsg->hWin);
;;;366    			break;
;;;367    	}
;;;368    	
;;;369    #endif
;;;370    }
000108  e8bd81f0          POP      {r4-r8,pc}
                  |L5.268|
00010c  2101              MOVS     r1,#1                 ;286
00010e  200b              MOVS     r0,#0xb               ;286
000110  f7fffffe          BL       Gpio_Ctrl
                  |L5.276|
000114  6820              LDR      r0,[r4,#0]            ;290  ; pTestWin
000116  f890104c          LDRB     r1,[r0,#0x4c]         ;290
00011a  b199              CBZ      r1,|L5.324|
00011c  f890004d          LDRB     r0,[r0,#0x4d]         ;290
000120  b180              CBZ      r0,|L5.324|
000122  f1b80f00          CMP      r8,#0                 ;290
000126  d00d              BEQ      |L5.324|
000128  f7fffffe          BL       Adc_Is_Pump_Ready
00012c  b150              CBZ      r0,|L5.324|
00012e  2007              MOVS     r0,#7                 ;292
000130  70b0              STRB     r0,[r6,#2]            ;292
000132  6820              LDR      r0,[r4,#0]            ;293  ; pTestWin
000134  f880502a          STRB     r5,[r0,#0x2a]         ;293
000138  2000              MOVS     r0,#0                 ;294
00013a  f7fffffe          BL       Voc_Cmd
00013e  2002              MOVS     r0,#2                 ;295
000140  f7fffffe          BL       Buzzer_Beep
                  |L5.324|
000144  68b8              LDR      r0,[r7,#8]            ;300
000146  6800              LDR      r0,[r0,#0]            ;300
000148  2805              CMP      r0,#5                 ;300
00014a  d1dd              BNE      |L5.264|
00014c  f9b70004          LDRSH    r0,[r7,#4]            ;303
000150  e8bd41f0          POP      {r4-r8,lr}            ;303
000154  f7ffbffe          B.W      WM_DeleteWindow
;;;371    
                          ENDP

                  |L5.344|
                          DCD      pTestWin
                  |L5.348|
                          DCD      Strings
                  |L5.352|
                          DCD      g_Language
                  |L5.356|
                          DCD      ||.data||

                          AREA ||i._BlowInterrupt||, CODE, READONLY, ALIGN=2

                  _BlowInterrupt PROC
;;;583    
;;;584    static void _BlowInterrupt(WM_MESSAGE *pMsg)
000000  b570              PUSH     {r4-r6,lr}
;;;585    {
;;;586    	if(pTestWin->bNeedRefreshState)
000002  4c20              LDR      r4,|L6.132|
;;;587    	{
;;;588    		pTestWin->bNeedRefreshState = false;
;;;589    		g_nInvalidBlowPressCnt = 100;
000004  4d20              LDR      r5,|L6.136|
000006  6820              LDR      r0,[r4,#0]            ;586  ; pTestWin
000008  f890102a          LDRB     r1,[r0,#0x2a]         ;586
00000c  b1f9              CBZ      r1,|L6.78|
00000e  2100              MOVS     r1,#0                 ;588
000010  f880102a          STRB     r1,[r0,#0x2a]         ;588
000014  2064              MOVS     r0,#0x64
000016  70e8              STRB     r0,[r5,#3]
;;;590    		pTestWin->nStartDelayTime = Get_System_Time();
000018  f7fffffe          BL       Get_System_Time
00001c  6822              LDR      r2,[r4,#0]  ; pTestWin
;;;591    		TEXT_SetText(pTestWin->hTestTips, _T_BlowBreak);
00001e  491c              LDR      r1,|L6.144|
000020  6410              STR      r0,[r2,#0x40]
000022  481a              LDR      r0,|L6.140|
000024  7809              LDRB     r1,[r1,#0]  ; g_Language
000026  f8500021          LDR      r0,[r0,r1,LSL #2]
00002a  f8d010fc          LDR      r1,[r0,#0xfc]
00002e  f9b20020          LDRSH    r0,[r2,#0x20]
000032  f7fffffe          BL       TEXT_SetText
;;;592    		PROGBAR_SetValue(pTestWin->hTimeProgressBar, 0);
000036  6820              LDR      r0,[r4,#0]  ; pTestWin
000038  2100              MOVS     r1,#0
00003a  f9b0001a          LDRSH    r0,[r0,#0x1a]
00003e  f7fffffe          BL       PROGBAR_SetValue
;;;593    	#if USE_GB_T21254_2017
;;;594    		PROGBAR_SetValue(pTestWin->hBlowFlowVolume, 0);
000042  6820              LDR      r0,[r4,#0]  ; pTestWin
000044  2100              MOVS     r1,#0
000046  f9b0001c          LDRSH    r0,[r0,#0x1c]
00004a  f7fffffe          BL       PROGBAR_SetValue
                  |L6.78|
;;;595    	#endif
;;;596    	}
;;;597    
;;;598    	if(Get_System_Time() > pTestWin->nStartDelayTime + 600)
00004e  f7fffffe          BL       Get_System_Time
000052  6821              LDR      r1,[r4,#0]  ; pTestWin
000054  6c09              LDR      r1,[r1,#0x40]
000056  f5017116          ADD      r1,r1,#0x258
00005a  4288              CMP      r0,r1
00005c  d910              BLS      |L6.128|
;;;599    	{
;;;600    		/*只更新状态,不改变显示内容.*/
;;;601    		g_eTestState = eWaitBlowing;
00005e  2007              MOVS     r0,#7
000060  70a8              STRB     r0,[r5,#2]
;;;602    		pTestWin->nStartWaitBlowTime = Get_System_Time();
000062  f7fffffe          BL       Get_System_Time
000066  6821              LDR      r1,[r4,#0]  ; pTestWin
;;;603    		WM_ShowWindow(pTestWin->hLeftButton);
000068  6488              STR      r0,[r1,#0x48]
00006a  f9b10014          LDRSH    r0,[r1,#0x14]
00006e  f7fffffe          BL       WM_ShowWindow
;;;604    		WM_ShowWindow(pTestWin->hRightButton);
000072  6820              LDR      r0,[r4,#0]  ; pTestWin
000074  f9b00016          LDRSH    r0,[r0,#0x16]
000078  e8bd4070          POP      {r4-r6,lr}
00007c  f7ffbffe          B.W      WM_ShowWindow
                  |L6.128|
;;;605    	}
;;;606    }
000080  bd70              POP      {r4-r6,pc}
;;;607    
                          ENDP

000082  0000              DCW      0x0000
                  |L6.132|
                          DCD      pTestWin
                  |L6.136|
                          DCD      ||.data||
                  |L6.140|
                          DCD      Strings
                  |L6.144|
                          DCD      g_Language

                          AREA ||i._Blowing||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  _Blowing PROC
;;;480    
;;;481    static void _Blowing(WM_MESSAGE *pMsg)
000000  e92d4ff1          PUSH     {r0,r4-r11,lr}
;;;482    {
;;;483    	if(pTestWin->bNeedRefreshState)
000004  4c69              LDR      r4,|L7.428|
000006  b088              SUB      sp,sp,#0x20           ;482
000008  6820              LDR      r0,[r4,#0]  ; pTestWin
00000a  f890102a          LDRB     r1,[r0,#0x2a]
00000e  b169              CBZ      r1,|L7.44|
;;;484    	{
;;;485    		pTestWin->bNeedRefreshState = false;
000010  2100              MOVS     r1,#0
;;;486    		TEXT_SetText(pTestWin->hTestTips, _T_Blowing);
000012  4a68              LDR      r2,|L7.436|
000014  f880102a          STRB     r1,[r0,#0x2a]         ;485
000018  4965              LDR      r1,|L7.432|
00001a  7812              LDRB     r2,[r2,#0]  ; g_Language
00001c  f9b00020          LDRSH    r0,[r0,#0x20]
000020  f8511022          LDR      r1,[r1,r2,LSL #2]
000024  f8d110f8          LDR      r1,[r1,#0xf8]
000028  f7fffffe          BL       TEXT_SetText
                  |L7.44|
;;;487    	}
;;;488    
;;;489    	if(Adc_Is_Blowing(pTestWin->nPressValueBeforeBlow, pTestWin->nEnvTemperatureBeforeBlow))
00002c  6820              LDR      r0,[r4,#0]  ; pTestWin
00002e  f990102e          LDRSB    r1,[r0,#0x2e]
000032  8d80              LDRH     r0,[r0,#0x2c]
000034  f7fffffe          BL       Adc_Is_Blowing
;;;490    	{
;;;491    	#if USE_GB_T21254_2017
;;;492    		char aTemp[30];
;;;493    		int nBlowTimePercent;
;;;494    		int nBlowFlowVolumePercent;
;;;495    		
;;;496    		Buzzer_On();
;;;497    
;;;498    		pTestWin->nBlowDurationTime = Get_System_Time() - pTestWin->nStartBlowTime;
;;;499    		nBlowTimePercent = (pTestWin->nBlowDurationTime) * 100 / pTestWin->nRequestBlowDurationTime;
;;;500    
;;;501    		/*设置进度条*/
;;;502    		PROGBAR_SetValue(pTestWin->hTimeProgressBar, nBlowTimePercent);
;;;503    		sprintf(aTemp, "TIME : %d%%", nBlowTimePercent);
;;;504    		PROGBAR_SetText(pTestWin->hTimeProgressBar,aTemp);
;;;505    	
;;;506    		pTestWin->fSumOfBlowFlowVolume += Get_Blow_Ratio_Via_Press_DiffAdc(Adc_Get_PressSensorValue(), Get_System_Time());
;;;507    		/*流量校准系数*/
;;;508    		pTestWin->fSumOfBlowFlowVolume = pTestWin->fSumOfBlowFlowVolume * (1 + g_sSystemParam.nFlowVolumeAdjustCoefficient * 0.05);
;;;509    		nBlowFlowVolumePercent = pTestWin->fSumOfBlowFlowVolume * 100 / pTestWin->fRequestBlowFlowVolume;
;;;510    
;;;511    		PROGBAR_SetValue(pTestWin->hBlowFlowVolume, nBlowFlowVolumePercent);
;;;512    		sprintf(aTemp, "FLOW : %d%%", nBlowFlowVolumePercent);
;;;513    		PROGBAR_SetText(pTestWin->hBlowFlowVolume,aTemp);
;;;514    
;;;515    		/*判断吹气是否完成*/
;;;516    		if(pTestWin->nBlowDurationTime >=  pTestWin->nRequestBlowDurationTime && (pTestWin->fSumOfBlowFlowVolume > pTestWin->fRequestBlowFlowVolume))
;;;517    		{
;;;518    			pTestWin->bAchieveSampleCondition = true;
000038  2601              MOVS     r6,#1
;;;519    		}
;;;520    	#else
;;;521    		char aTemp[30];
;;;522    		int nBlowTimePercent;
;;;523    
;;;524    		Buzzer_On();
;;;525    
;;;526    		pTestWin->nBlowDurationTime = Get_System_Time() - pTestWin->nStartBlowTime;
;;;527    		nBlowTimePercent = (pTestWin->nBlowDurationTime) * 100 / pTestWin->nRequestBlowDurationTime;
;;;528    
;;;529    		/*设置进度条*/
;;;530    		PROGBAR_SetValue(pTestWin->hTimeProgressBar, nBlowTimePercent);
;;;531    		sprintf(aTemp, "TIME : %d%%", nBlowTimePercent);
;;;532    		PROGBAR_SetText(pTestWin->hTimeProgressBar,aTemp);
;;;533    		
;;;534    		/*判断吹气是否完成*/
;;;535    		if(pTestWin->nBlowDurationTime >=  pTestWin->nRequestBlowDurationTime)
;;;536    		{
;;;537    			pTestWin->bAchieveSampleCondition = true;
;;;538    		}
;;;539    	#endif
;;;540    	}
;;;541    	else if(pTestWin->bAchieveSampleCondition == false)
;;;542    	{
;;;543    		Buzzer_Off();
;;;544    		Buzzer_Beep(eBUZ_BLOW_BREAK);
;;;545    		Voc_Cmd(eVOC_BLOW_INT);
;;;546    		g_eTestState = eBlowInterrupt;
00003a  4d5f              LDR      r5,|L7.440|
00003c  2800              CMP      r0,#0                 ;489
00003e  d075              BEQ      |L7.300|
000040  f7fffffe          BL       Buzzer_On
000044  f7fffffe          BL       Get_System_Time
000048  6821              LDR      r1,[r4,#0]            ;498  ; pTestWin
00004a  6b4a              LDR      r2,[r1,#0x34]         ;498
00004c  1a80              SUBS     r0,r0,r2              ;498
00004e  2264              MOVS     r2,#0x64              ;499
000050  6388              STR      r0,[r1,#0x38]         ;499
000052  4350              MULS     r0,r2,r0              ;499
000054  6bca              LDR      r2,[r1,#0x3c]         ;499
000056  fbb0f7f2          UDIV     r7,r0,r2              ;499
00005a  f9b1001a          LDRSH    r0,[r1,#0x1a]         ;502
00005e  4639              MOV      r1,r7                 ;502
000060  f7fffffe          BL       PROGBAR_SetValue
000064  463a              MOV      r2,r7                 ;503
000066  a155              ADR      r1,|L7.444|
000068  4668              MOV      r0,sp                 ;503
00006a  f7fffffe          BL       __2sprintf
00006e  6820              LDR      r0,[r4,#0]            ;504  ; pTestWin
000070  4669              MOV      r1,sp                 ;504
000072  f9b0001a          LDRSH    r0,[r0,#0x1a]         ;504
000076  f7fffffe          BL       PROGBAR_SetText
00007a  f7fffffe          BL       Get_System_Time
00007e  4607              MOV      r7,r0                 ;506
000080  2004              MOVS     r0,#4                 ;506
000082  f7fffffe          BL       ADC_Software_Filter
000086  4639              MOV      r1,r7                 ;506
000088  f7fffffe          BL       Get_Blow_Ratio_Via_Press_DiffAdc
00008c  6827              LDR      r7,[r4,#0]            ;506  ; pTestWin
00008e  e9d72314          LDRD     r2,r3,[r7,#0x50]      ;506
000092  f7fffffe          BL       __aeabi_dadd
000096  4680              MOV      r8,r0                 ;506
000098  484b              LDR      r0,|L7.456|
00009a  4689              MOV      r9,r1                 ;506
00009c  f990002e          LDRSB    r0,[r0,#0x2e]         ;508  ; g_sSystemParam
0000a0  f7fffffe          BL       __aeabi_i2d
0000a4  4a49              LDR      r2,|L7.460|
0000a6  4b4a              LDR      r3,|L7.464|
0000a8  f7fffffe          BL       __aeabi_dmul
0000ac  2200              MOVS     r2,#0                 ;508
0000ae  4b49              LDR      r3,|L7.468|
0000b0  f7fffffe          BL       __aeabi_dadd
0000b4  4642              MOV      r2,r8                 ;508
0000b6  464b              MOV      r3,r9                 ;508
0000b8  f7fffffe          BL       __aeabi_dmul
0000bc  e9c70114          STRD     r0,r1,[r7,#0x50]      ;508
0000c0  4681              MOV      r9,r0                 ;508
0000c2  468a              MOV      r10,r1                ;508
0000c4  6db8              LDR      r0,[r7,#0x58]         ;509
0000c6  f7fffffe          BL       __aeabi_f2d
0000ca  4680              MOV      r8,r0                 ;509
0000cc  468b              MOV      r11,r1                ;509
0000ce  2200              MOVS     r2,#0                 ;509
0000d0  4b41              LDR      r3,|L7.472|
0000d2  4648              MOV      r0,r9                 ;509
0000d4  4651              MOV      r1,r10                ;509
0000d6  f7fffffe          BL       __aeabi_dmul
0000da  4642              MOV      r2,r8                 ;509
0000dc  465b              MOV      r3,r11                ;509
0000de  f7fffffe          BL       __aeabi_ddiv
0000e2  f7fffffe          BL       __aeabi_d2iz
0000e6  4680              MOV      r8,r0                 ;509
0000e8  f9b7001c          LDRSH    r0,[r7,#0x1c]         ;511
0000ec  4641              MOV      r1,r8                 ;511
0000ee  f7fffffe          BL       PROGBAR_SetValue
0000f2  4642              MOV      r2,r8                 ;512
0000f4  a139              ADR      r1,|L7.476|
0000f6  4668              MOV      r0,sp                 ;512
0000f8  f7fffffe          BL       __2sprintf
0000fc  6820              LDR      r0,[r4,#0]            ;513  ; pTestWin
0000fe  4669              MOV      r1,sp                 ;513
000100  f9b0001c          LDRSH    r0,[r0,#0x1c]         ;513
000104  f7fffffe          BL       PROGBAR_SetText
000108  6827              LDR      r7,[r4,#0]            ;516  ; pTestWin
00010a  e9d7010e          LDRD     r0,r1,[r7,#0x38]      ;516
00010e  4288              CMP      r0,r1                 ;516
000110  d31b              BCC      |L7.330|
000112  6db8              LDR      r0,[r7,#0x58]         ;516
000114  f7fffffe          BL       __aeabi_f2d
000118  e9d72314          LDRD     r2,r3,[r7,#0x50]      ;516
00011c  f7fffffe          BL       __aeabi_cdcmple
000120  d213              BCS      |L7.330|
000122  6820              LDR      r0,[r4,#0]            ;518  ; pTestWin
000124  f8806066          STRB     r6,[r0,#0x66]         ;518
000128  e013              B        |L7.338|
00012a  e7ff              B        |L7.300|
                  |L7.300|
00012c  6820              LDR      r0,[r4,#0]            ;541  ; pTestWin
00012e  f8900066          LDRB     r0,[r0,#0x66]         ;541
000132  b970              CBNZ     r0,|L7.338|
000134  f7fffffe          BL       Buzzer_Off
000138  2007              MOVS     r0,#7                 ;544
00013a  f7fffffe          BL       Buzzer_Beep
00013e  2001              MOVS     r0,#1                 ;545
000140  f7fffffe          BL       Voc_Cmd
000144  2009              MOVS     r0,#9
000146  70a8              STRB     r0,[r5,#2]
;;;547    		pTestWin->bNeedRefreshState = true;
;;;548    		return;
000148  e02a              B        |L7.416|
                  |L7.330|
;;;549    	}
;;;550    
;;;551    	if(pTestWin->bAchieveSampleCondition)
00014a  6820              LDR      r0,[r4,#0]  ; pTestWin
00014c  f8900066          LDRB     r0,[r0,#0x66]
000150  b1b0              CBZ      r0,|L7.384|
                  |L7.338|
;;;552    	{
;;;553    		if(g_sTestParam.nSampleMethod == 0 || (abs(pTestWin->nPressValueBeforeBlow - Adc_Get_PressSensorValue()) < 50))
000152  4825              LDR      r0,|L7.488|
000154  7e80              LDRB     r0,[r0,#0x1a]  ; g_sTestParam
000156  b140              CBZ      r0,|L7.362|
000158  2004              MOVS     r0,#4
00015a  f7fffffe          BL       ADC_Software_Filter
00015e  6821              LDR      r1,[r4,#0]  ; pTestWin
000160  8d89              LDRH     r1,[r1,#0x2c]
000162  1a08              SUBS     r0,r1,r0
000164  3031              ADDS     r0,r0,#0x31
000166  2862              CMP      r0,#0x62
000168  d80a              BHI      |L7.384|
                  |L7.362|
;;;554    		{
;;;555    			Buzzer_Off();
00016a  f7fffffe          BL       Buzzer_Off
;;;556    			g_eTestState = ePump;
00016e  200a              MOVS     r0,#0xa
000170  70a8              STRB     r0,[r5,#2]
;;;557    			g_eTestMode = eTestActive;
000172  2000              MOVS     r0,#0
000174  7028              STRB     r0,[r5,#0]
;;;558    			pTestWin->bNeedRefreshState = true;
000176  6821              LDR      r1,[r4,#0]  ; pTestWin
000178  f881602a          STRB     r6,[r1,#0x2a]
;;;559    			pTestWin->bAchieveSampleCondition = false;
00017c  f8810066          STRB     r0,[r1,#0x66]
                  |L7.384|
;;;560    		}
;;;561    	}
;;;562    
;;;563    	/*处理按键 事件*/
;;;564    	switch(WM_Key_Code)
000180  9808              LDR      r0,[sp,#0x20]
000182  6880              LDR      r0,[r0,#8]
000184  6800              LDR      r0,[r0,#0]
000186  2805              CMP      r0,#5
000188  d00d              BEQ      |L7.422|
00018a  2806              CMP      r0,#6
00018c  d00b              BEQ      |L7.422|
00018e  280d              CMP      r0,#0xd
000190  d109              BNE      |L7.422|
;;;565    	{
;;;566    		case GUI_KEY_LEFT_FUN:
;;;567    			break;
;;;568    
;;;569    		case GUI_KEY_MIDDLE_FUN:
;;;570    			if(g_eAlcTestPurpose == eTestForNormal || g_eAlcTestPurpose == eTestForMaintain)
000192  7868              LDRB     r0,[r5,#1]  ; g_eAlcTestPurpose
000194  b108              CBZ      r0,|L7.410|
000196  2802              CMP      r0,#2
000198  d105              BNE      |L7.422|
                  |L7.410|
;;;571    			{
;;;572    				/*发起手动测试*/
;;;573    				g_eTestState = ePump;
00019a  200a              MOVS     r0,#0xa
00019c  70a8              STRB     r0,[r5,#2]
;;;574    				g_eTestMode = eTestPassive;
00019e  702e              STRB     r6,[r5,#0]
                  |L7.416|
;;;575    				pTestWin->bNeedRefreshState = true;
0001a0  6820              LDR      r0,[r4,#0]  ; pTestWin
0001a2  f880602a          STRB     r6,[r0,#0x2a]
                  |L7.422|
;;;576    			}
;;;577    			break;
;;;578    
;;;579    		case GUI_KEY_RIGHT_FUN:
;;;580    			break;
;;;581    	}
;;;582    }
0001a6  b009              ADD      sp,sp,#0x24
0001a8  e8bd8ff0          POP      {r4-r11,pc}
;;;583    
                          ENDP

                  |L7.428|
                          DCD      pTestWin
                  |L7.432|
                          DCD      Strings
                  |L7.436|
                          DCD      g_Language
                  |L7.440|
                          DCD      ||.data||
                  |L7.444|
0001bc  54494d45          DCB      "TIME : %d%%",0
0001c0  203a2025
0001c4  64252500
                  |L7.456|
                          DCD      g_sSystemParam
                  |L7.460|
                          DCD      0x9999999a
                  |L7.464|
                          DCD      0x3fa99999
                  |L7.468|
                          DCD      0x3ff00000
                  |L7.472|
                          DCD      0x40590000
                  |L7.476|
0001dc  464c4f57          DCB      "FLOW : %d%%",0
0001e0  203a2025
0001e4  64252500
                  |L7.488|
                          DCD      g_sTestParam

                          AREA ||i._ConfirmRefuseTest||, CODE, READONLY, ALIGN=2

                  _ConfirmRefuseTest PROC
;;;165    /*拒绝测试*/
;;;166    static void _ConfirmRefuseTest(void)
000000  4807              LDR      r0,|L8.32|
;;;167    {
000002  b510              PUSH     {r4,lr}
;;;168    	g_eTestState = eDisplayResult;
000004  210d              MOVS     r1,#0xd
000006  7081              STRB     r1,[r0,#2]
;;;169    	g_eTestMode = eTestRefuseMode;
;;;170    	pTestWin->bNeedRefreshState = true;
000008  4c06              LDR      r4,|L8.36|
00000a  2102              MOVS     r1,#2                 ;169
00000c  7001              STRB     r1,[r0,#0]            ;169
00000e  6821              LDR      r1,[r4,#0]  ; pTestWin
000010  2001              MOVS     r0,#1
000012  f881002a          STRB     r0,[r1,#0x2a]
;;;171    	pTestWin->fAlcSampleTemperature =  Adc_Get_Sensor_Temperature();
000016  f7fffffe          BL       Adc_Get_Sensor_Temperature
00001a  6821              LDR      r1,[r4,#0]  ; pTestWin
00001c  6308              STR      r0,[r1,#0x30]
;;;172    }
00001e  bd10              POP      {r4,pc}
;;;173    
                          ENDP

                  |L8.32|
                          DCD      ||.data||
                  |L8.36|
                          DCD      pTestWin

                          AREA ||i._ConfirmRetryTest||, CODE, READONLY, ALIGN=2

                  _ConfirmRetryTest PROC
;;;159    /*重测*/
;;;160    static void _ConfirmRetryTest(void)
000000  4901              LDR      r1,|L9.8|
;;;161    {
;;;162    	g_eTestState = eStart;
000002  2001              MOVS     r0,#1
000004  7088              STRB     r0,[r1,#2]
;;;163    }
000006  4770              BX       lr
;;;164    
                          ENDP

                  |L9.8|
                          DCD      ||.data||

                          AREA ||i._Prepare||, CODE, READONLY, ALIGN=2

                  _Prepare PROC
;;;192    
;;;193    static void _Prepare(WM_MESSAGE *pMsg)
000000  b570              PUSH     {r4-r6,lr}
;;;194    {
;;;195    	if(pTestWin->bNeedRefreshState)
000002  4c16              LDR      r4,|L10.92|
000004  4605              MOV      r5,r0                 ;194
000006  6820              LDR      r0,[r4,#0]  ; pTestWin
000008  f890102a          LDRB     r1,[r0,#0x2a]
00000c  b169              CBZ      r1,|L10.42|
;;;196    	{
;;;197    		pTestWin->bNeedRefreshState = false;
00000e  2100              MOVS     r1,#0
;;;198    		TEXT_SetText(pTestWin->hTestTips, _T_Prepare);
000010  4a14              LDR      r2,|L10.100|
000012  f880102a          STRB     r1,[r0,#0x2a]         ;197
000016  4912              LDR      r1,|L10.96|
000018  7812              LDRB     r2,[r2,#0]  ; g_Language
00001a  f9b00020          LDRSH    r0,[r0,#0x20]
00001e  f8511022          LDR      r1,[r1,r2,LSL #2]
000022  f8d110ec          LDR      r1,[r1,#0xec]
000026  f7fffffe          BL       TEXT_SetText
                  |L10.42|
;;;199    	}
;;;200    
;;;201    	if(Adc_Is_Pump_Ready())
00002a  f7fffffe          BL       Adc_Is_Pump_Ready
00002e  b130              CBZ      r0,|L10.62|
;;;202    	{
;;;203    		g_eTestState = eAlcClean;
000030  490d              LDR      r1,|L10.104|
000032  2003              MOVS     r0,#3
000034  7088              STRB     r0,[r1,#2]
;;;204    		pTestWin->bNeedRefreshState = true;
000036  6821              LDR      r1,[r4,#0]  ; pTestWin
000038  2001              MOVS     r0,#1
00003a  f881002a          STRB     r0,[r1,#0x2a]
                  |L10.62|
;;;205    	}
;;;206    
;;;207    	Adc_Get_Static_Press_Value(&pTestWin->nPressValueBeforeBlow);
00003e  6820              LDR      r0,[r4,#0]  ; pTestWin
000040  302c              ADDS     r0,r0,#0x2c
000042  f7fffffe          BL       Adc_Get_Static_Press_Value
;;;208    	
;;;209    	/*处理按键 事件*/
;;;210    	switch(WM_Key_Code)
000046  68a8              LDR      r0,[r5,#8]
000048  6800              LDR      r0,[r0,#0]
00004a  2805              CMP      r0,#5
00004c  d105              BNE      |L10.90|
;;;211    	{
;;;212    		case GUI_KEY_LEFT_FUN:
;;;213    			WM_DeleteWindow(pMsg->hWin);
00004e  f9b50004          LDRSH    r0,[r5,#4]
000052  e8bd4070          POP      {r4-r6,lr}
000056  f7ffbffe          B.W      WM_DeleteWindow
                  |L10.90|
;;;214    			break;
;;;215    	}
;;;216    }
00005a  bd70              POP      {r4-r6,pc}
;;;217    
                          ENDP

                  |L10.92|
                          DCD      pTestWin
                  |L10.96|
                          DCD      Strings
                  |L10.100|
                          DCD      g_Language
                  |L10.104|
                          DCD      ||.data||

                          AREA ||i._Processing||, CODE, READONLY, ALIGN=2

                  _Processing PROC
;;;623    
;;;624    static void _Processing(WM_MESSAGE *pMsg)
000000  b570              PUSH     {r4-r6,lr}
;;;625    {
;;;626    	if(Alcohol_Sensor_AD_Integral())
000002  f7fffffe          BL       Alcohol_Sensor_AD_Integral
000006  2800              CMP      r0,#0
000008  d042              BEQ      |L11.144|
;;;627    	{
;;;628    		Stop_Sample();
00000a  f7fffffe          BL       Stop_Sample
;;;629    		
;;;630    		Gpio_Ctrl(eGpio_Alc_Clean_Sw_Ctrl,true);
00000e  2101              MOVS     r1,#1
000010  2007              MOVS     r0,#7
000012  f7fffffe          BL       Gpio_Ctrl
;;;631    		Gpio_Ctrl(eGpio_QuickTest_Alc_Clean_Sw_Ctrl,true);
000016  2101              MOVS     r1,#1
000018  2008              MOVS     r0,#8
00001a  f7fffffe          BL       Gpio_Ctrl
;;;632    		Gpio_Ctrl(eGpio_Pump_Charge_Sw_Ctrl,false);
00001e  2100              MOVS     r1,#0
000020  2005              MOVS     r0,#5
000022  f7fffffe          BL       Gpio_Ctrl
;;;633    		Gpio_Ctrl(eGpio_Pump_On_Sw_Ctrl,false);
000026  2100              MOVS     r1,#0
000028  2006              MOVS     r0,#6
00002a  f7fffffe          BL       Gpio_Ctrl
;;;634    
;;;635    		g_fAlcoholVolumeOriginal = Calculate_Alcohol_Concentration(g_sAlcSample.nIntegralSumValue,pTestWin->fAlcSampleTemperature);
00002e  4d19              LDR      r5,|L11.148|
000030  4c19              LDR      r4,|L11.152|
000032  6828              LDR      r0,[r5,#0]  ; pTestWin
000034  6b01              LDR      r1,[r0,#0x30]
000036  68e0              LDR      r0,[r4,#0xc]  ; g_sAlcSample
000038  f7fffffe          BL       Calculate_Alcohol_Concentration
00003c  4e17              LDR      r6,|L11.156|
;;;636    		g_fAlcoholVolume = Temperature_Calibrate(g_fAlcoholVolumeOriginal, pTestWin->fAlcSampleTemperature);
00003e  6030              STR      r0,[r6,#0]  ; g_fAlcoholVolumeOriginal
000040  6829              LDR      r1,[r5,#0]  ; pTestWin
000042  6b09              LDR      r1,[r1,#0x30]
000044  f7fffffe          BL       Temperature_Calibrate
000048  4915              LDR      r1,|L11.160|
;;;637    		//g_fAlcoholVolume=30;//test use
;;;638    
;;;639    		TRACE_PRINTF("g_fAlcoholVolume = %.3f\r\n",g_fAlcoholVolume);
00004a  6008              STR      r0,[r1,#0]  ; g_fAlcoholVolume
00004c  f7fffffe          BL       __aeabi_f2d
000050  4602              MOV      r2,r0
000052  460b              MOV      r3,r1
000054  a013              ADR      r0,|L11.164|
000056  f7fffffe          BL       User_Debug_Printf
;;;640    		TRACE_PRINTF("g_fAlcoholVolumeOriginal = %.3f\r\n",g_fAlcoholVolumeOriginal);
00005a  6830              LDR      r0,[r6,#0]  ; g_fAlcoholVolumeOriginal
00005c  f7fffffe          BL       __aeabi_f2d
000060  4602              MOV      r2,r0
000062  460b              MOV      r3,r1
000064  a016              ADR      r0,|L11.192|
000066  f7fffffe          BL       User_Debug_Printf
;;;641    		TRACE_PRINTF("g_sAlcSample.nIntegralSumValue = %ld\r\n",g_sAlcSample.nIntegralSumValue);
00006a  a01e              ADR      r0,|L11.228|
00006c  68e1              LDR      r1,[r4,#0xc]  ; g_sAlcSample
00006e  f7fffffe          BL       User_Debug_Printf
;;;642    		TRACE_PRINTF("g_sAlcSample.nTotalIntegralCnt = %ld\r\n",g_sAlcSample.nTotalIntegralCnt);
000072  8921              LDRH     r1,[r4,#8]  ; g_sAlcSample
000074  a025              ADR      r0,|L11.268|
000076  f7fffffe          BL       User_Debug_Printf
;;;643    		TRACE_PRINTF("g_sAlcSample.nSampleMaxValue = %ld\r\n",g_sAlcSample.nSampleMaxValue);
00007a  8861              LDRH     r1,[r4,#2]  ; g_sAlcSample
00007c  a02d              ADR      r0,|L11.308|
00007e  f7fffffe          BL       User_Debug_Printf
;;;644    		
;;;645    		g_eTestState = eDisplayResult;
000082  4936              LDR      r1,|L11.348|
000084  200d              MOVS     r0,#0xd
000086  7088              STRB     r0,[r1,#2]
;;;646    		pTestWin->bNeedRefreshState = true;
000088  6829              LDR      r1,[r5,#0]  ; pTestWin
00008a  2001              MOVS     r0,#1
00008c  f881002a          STRB     r0,[r1,#0x2a]
                  |L11.144|
;;;647    	}
;;;648    }
000090  bd70              POP      {r4-r6,pc}
;;;649    
                          ENDP

000092  0000              DCW      0x0000
                  |L11.148|
                          DCD      pTestWin
                  |L11.152|
                          DCD      g_sAlcSample
                  |L11.156|
                          DCD      g_fAlcoholVolumeOriginal
                  |L11.160|
                          DCD      g_fAlcoholVolume
                  |L11.164|
0000a4  675f6641          DCB      "g_fAlcoholVolume = %.3f\r\n",0
0000a8  6c636f68
0000ac  6f6c566f
0000b0  6c756d65
0000b4  203d2025
0000b8  2e33660d
0000bc  0a00    
0000be  00                DCB      0
0000bf  00                DCB      0
                  |L11.192|
0000c0  675f6641          DCB      "g_fAlcoholVolumeOriginal = %.3f\r\n",0
0000c4  6c636f68
0000c8  6f6c566f
0000cc  6c756d65
0000d0  4f726967
0000d4  696e616c
0000d8  203d2025
0000dc  2e33660d
0000e0  0a00    
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L11.228|
0000e4  675f7341          DCB      "g_sAlcSample.nIntegralSumValue = %ld\r\n",0
0000e8  6c635361
0000ec  6d706c65
0000f0  2e6e496e
0000f4  74656772
0000f8  616c5375
0000fc  6d56616c
000100  7565203d
000104  20256c64
000108  0d0a00  
00010b  00                DCB      0
                  |L11.268|
00010c  675f7341          DCB      "g_sAlcSample.nTotalIntegralCnt = %ld\r\n",0
000110  6c635361
000114  6d706c65
000118  2e6e546f
00011c  74616c49
000120  6e746567
000124  72616c43
000128  6e74203d
00012c  20256c64
000130  0d0a00  
000133  00                DCB      0
                  |L11.308|
000134  675f7341          DCB      "g_sAlcSample.nSampleMaxValue = %ld\r\n",0
000138  6c635361
00013c  6d706c65
000140  2e6e5361
000144  6d706c65
000148  4d617856
00014c  616c7565
000150  203d2025
000154  6c640d0a
000158  00      
000159  00                DCB      0
00015a  00                DCB      0
00015b  00                DCB      0
                  |L11.348|
                          DCD      ||.data||

                          AREA ||i._Pump||, CODE, READONLY, ALIGN=2

                  _Pump PROC
;;;607    
;;;608    static void _Pump(WM_MESSAGE *pMsg)
000000  b510              PUSH     {r4,lr}
;;;609    {
;;;610    	if(pTestWin->bNeedRefreshState)
000002  4c12              LDR      r4,|L12.76|
000004  6820              LDR      r0,[r4,#0]  ; pTestWin
000006  f890102a          LDRB     r1,[r0,#0x2a]
00000a  b169              CBZ      r1,|L12.40|
;;;611    	{
;;;612    		pTestWin->bNeedRefreshState = false;
00000c  2100              MOVS     r1,#0
;;;613    		TEXT_SetText(pTestWin->hTestTips, _T_Precessing);
00000e  4a11              LDR      r2,|L12.84|
000010  f880102a          STRB     r1,[r0,#0x2a]         ;612
000014  490e              LDR      r1,|L12.80|
000016  7812              LDRB     r2,[r2,#0]  ; g_Language
000018  f9b00020          LDRSH    r0,[r0,#0x20]
00001c  f8511022          LDR      r1,[r1,r2,LSL #2]
000020  f8d11100          LDR      r1,[r1,#0x100]
000024  f7fffffe          BL       TEXT_SetText
                  |L12.40|
;;;614    	}
;;;615    	Gpio_Ctrl(eGpio_Alc_Clean_Sw_Ctrl,false);
000028  2100              MOVS     r1,#0
00002a  2007              MOVS     r0,#7
00002c  f7fffffe          BL       Gpio_Ctrl
;;;616    	Gpio_Ctrl(eGpio_Pump_On_Sw_Ctrl,true);
000030  2101              MOVS     r1,#1
000032  2006              MOVS     r0,#6
000034  f7fffffe          BL       Gpio_Ctrl
;;;617    
;;;618    	Start_Sample();
000038  f7fffffe          BL       Start_Sample
;;;619    
;;;620    	g_eTestState = eProcessing;
00003c  4906              LDR      r1,|L12.88|
00003e  200b              MOVS     r0,#0xb
000040  7088              STRB     r0,[r1,#2]
;;;621    	pTestWin->bNeedRefreshState = true;
000042  6821              LDR      r1,[r4,#0]  ; pTestWin
000044  2001              MOVS     r0,#1
000046  f881002a          STRB     r0,[r1,#0x2a]
;;;622    }
00004a  bd10              POP      {r4,pc}
;;;623    
                          ENDP

                  |L12.76|
                          DCD      pTestWin
                  |L12.80|
                          DCD      Strings
                  |L12.84|
                          DCD      g_Language
                  |L12.88|
                          DCD      ||.data||

                          AREA ||i._Start||, CODE, READONLY, ALIGN=2

                  _Start PROC
;;;173    
;;;174    static void _Start(WM_MESSAGE *pMsg)
000000  b570              PUSH     {r4-r6,lr}
;;;175    {
;;;176    	g_eTestState = ePrepare;
000002  4c1b              LDR      r4,|L13.112|
000004  2002              MOVS     r0,#2
000006  70a0              STRB     r0,[r4,#2]
;;;177    	pTestWin->bNeedRefreshState = true;
000008  4d1a              LDR      r5,|L13.116|
00000a  2001              MOVS     r0,#1
00000c  6829              LDR      r1,[r5,#0]  ; pTestWin
00000e  f881002a          STRB     r0,[r1,#0x2a]
;;;178    
;;;179    	Gpio_Ctrl(eGpio_Pump_On_Sw_Ctrl,false);
000012  2100              MOVS     r1,#0
000014  2006              MOVS     r0,#6
000016  f7fffffe          BL       Gpio_Ctrl
;;;180    	Gpio_Ctrl(eGpio_Pump_Charge_Sw_Ctrl,true);
00001a  2101              MOVS     r1,#1
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       Gpio_Ctrl
;;;181    	Gpio_Ctrl(eGpio_Alc_Clean_Sw_Ctrl,true);
000022  2101              MOVS     r1,#1
000024  2007              MOVS     r0,#7
000026  f7fffffe          BL       Gpio_Ctrl
;;;182    	Gpio_Ctrl(eGpio_QuickTest_Alc_Clean_Sw_Ctrl,true);
00002a  2101              MOVS     r1,#1
00002c  2008              MOVS     r0,#8
00002e  f7fffffe          BL       Gpio_Ctrl
;;;183    
;;;184    	g_nAdcPressValidDataCnt = 0;
000032  2000              MOVS     r0,#0
;;;185    	g_nSumOfStaticPressValue = 0;
000034  6060              STR      r0,[r4,#4]  ; g_nAdcPressValidDataCnt
;;;186    	g_nInvalidBlowPressCnt = 100;
000036  60a0              STR      r0,[r4,#8]  ; g_nSumOfStaticPressValue
000038  2064              MOVS     r0,#0x64
00003a  70e0              STRB     r0,[r4,#3]
;;;187    	pTestWin->nRequestBlowDurationTime = g_sTestParam.nBlowTime;
00003c  480e              LDR      r0,|L13.120|
00003e  682c              LDR      r4,[r5,#0]  ; pTestWin
000040  f8d01012          LDR      r1,[r0,#0x12]  ; g_sTestParam
;;;188    	pTestWin->fRequestBlowFlowVolume = (float)g_sTestParam.nBlowFlowVolume / 10;
000044  63e1              STR      r1,[r4,#0x3c]
000046  7e40              LDRB     r0,[r0,#0x19]  ; g_sTestParam
000048  f7fffffe          BL       __aeabi_ui2f
00004c  490b              LDR      r1,|L13.124|
00004e  f7fffffe          BL       __aeabi_fdiv
;;;189    	pTestWin->nEnvTemperatureBeforeBlow = Adc_Get_Environment_Temperature();
000052  65a0              STR      r0,[r4,#0x58]
000054  f7fffffe          BL       Adc_Get_Environment_Temperature
000058  f7fffffe          BL       __aeabi_f2iz
00005c  4601              MOV      r1,r0
00005e  6828              LDR      r0,[r5,#0]  ; pTestWin
000060  f880102e          STRB     r1,[r0,#0x2e]
;;;190    	Adc_Get_Static_Press_Value(&pTestWin->nPressValueBeforeBlow);
000064  e8bd4070          POP      {r4-r6,lr}
000068  302c              ADDS     r0,r0,#0x2c           ;189
00006a  f7ffbffe          B.W      Adc_Get_Static_Press_Value
;;;191    }
;;;192    
                          ENDP

00006e  0000              DCW      0x0000
                  |L13.112|
                          DCD      ||.data||
                  |L13.116|
                          DCD      pTestWin
                  |L13.120|
                          DCD      g_sTestParam
                  |L13.124|
                          DCD      0x41200000

                          AREA ||i._WaitBlowing||, CODE, READONLY, ALIGN=2

                  _WaitBlowing PROC
;;;386    
;;;387    static void _WaitBlowing(WM_MESSAGE *pMsg)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;388    {
;;;389    	if(pTestWin->bNeedRefreshState)
000004  4d56              LDR      r5,|L14.352|
000006  4680              MOV      r8,r0                 ;388
;;;390    	{
;;;391    		pTestWin->bNeedRefreshState = false;
;;;392    		pTestWin->nStartWaitBlowTime = Get_System_Time();
;;;393    		TEXT_SetText(pTestWin->hTestTips, _T_WaitBlow);
000008  f8df9158          LDR      r9,|L14.356|
00000c  6828              LDR      r0,[r5,#0]            ;389  ; pTestWin
00000e  f8dfa158          LDR      r10,|L14.360|
000012  b08d              SUB      sp,sp,#0x34           ;388
000014  f890102a          LDRB     r1,[r0,#0x2a]         ;389
000018  2700              MOVS     r7,#0
00001a  b179              CBZ      r1,|L14.60|
00001c  f880702a          STRB     r7,[r0,#0x2a]         ;391
000020  f7fffffe          BL       Get_System_Time
000024  682a              LDR      r2,[r5,#0]            ;392  ; pTestWin
000026  6490              STR      r0,[r2,#0x48]
000028  f89a1000          LDRB     r1,[r10,#0]  ; g_Language
00002c  f8590021          LDR      r0,[r9,r1,LSL #2]
000030  f8d010f4          LDR      r1,[r0,#0xf4]
000034  f9b20020          LDRSH    r0,[r2,#0x20]
000038  f7fffffe          BL       TEXT_SetText
                  |L14.60|
;;;394    	}
;;;395    
;;;396    	/*检查是否进入快测模式*/
;;;397    	if(g_eAlcTestPurpose == eTestForCalibration && g_sAlcCalibrationParam.nCurrCalibrteState == eCaliQuickTest)
00003c  4c4b              LDR      r4,|L14.364|
00003e  2601              MOVS     r6,#1
;;;398    	{
;;;399    		g_eTestState = eWaitStart;
;;;400    		g_eTestMode = eTestQuickTest;
000040  f04f0b03          MOV      r11,#3
000044  7860              LDRB     r0,[r4,#1]            ;397  ; g_eAlcTestPurpose
000046  2801              CMP      r0,#1                 ;397
000048  d104              BNE      |L14.84|
00004a  4849              LDR      r0,|L14.368|
00004c  f890003e          LDRB     r0,[r0,#0x3e]         ;397  ; g_sAlcCalibrationParam
000050  2802              CMP      r0,#2                 ;397
000052  d030              BEQ      |L14.182|
                  |L14.84|
;;;401    		pTestWin->bNeedRefreshState = true;
;;;402    		return;
;;;403    	}
;;;404    
;;;405    	if(Adc_Is_Blowing(pTestWin->nPressValueBeforeBlow, pTestWin->nEnvTemperatureBeforeBlow))
000054  6828              LDR      r0,[r5,#0]  ; pTestWin
000056  f990102e          LDRSB    r1,[r0,#0x2e]
00005a  8d80              LDRH     r0,[r0,#0x2c]
00005c  f7fffffe          BL       Adc_Is_Blowing
000060  b320              CBZ      r0,|L14.172|
;;;406    	{
;;;407    		Voc_Close();
000062  f7fffffe          BL       Voc_Close
;;;408    		g_eTestState = eBlowing;
000066  2008              MOVS     r0,#8
000068  70a0              STRB     r0,[r4,#2]
;;;409    		pTestWin->bNeedRefreshState = true;
00006a  6828              LDR      r0,[r5,#0]  ; pTestWin
00006c  f880602a          STRB     r6,[r0,#0x2a]
;;;410    		pTestWin->nStartBlowTime = Get_System_Time(); 
000070  f7fffffe          BL       Get_System_Time
000074  6829              LDR      r1,[r5,#0]  ; pTestWin
000076  6348              STR      r0,[r1,#0x34]
000078  2000              MOVS     r0,#0
00007a  e9c10014          STRD     r0,r0,[r1,#0x50]
;;;411    		pTestWin->fSumOfBlowFlowVolume = 0;
;;;412    		pTestWin->nLastBlowAdcValue = Adc_Get_PressSensorValue();
00007e  2004              MOVS     r0,#4
000080  f7fffffe          BL       ADC_Software_Filter
000084  6829              LDR      r1,[r5,#0]  ; pTestWin
000086  f8a1005c          STRH     r0,[r1,#0x5c]
;;;413    		pTestWin->nLastBlowAdcIntegralTime = Get_System_Time();
00008a  f7fffffe          BL       Get_System_Time
00008e  6829              LDR      r1,[r5,#0]  ; pTestWin
;;;414    		pTestWin->bAchieveSampleCondition = false;
000090  6608              STR      r0,[r1,#0x60]
000092  f8817066          STRB     r7,[r1,#0x66]
;;;415    		WM_HideWindow(pTestWin->hLeftButton);
000096  f9b10014          LDRSH    r0,[r1,#0x14]
00009a  f7fffffe          BL       WM_HideWindow
;;;416    		WM_HideWindow(pTestWin->hRightButton);
00009e  6828              LDR      r0,[r5,#0]  ; pTestWin
0000a0  f9b00016          LDRSH    r0,[r0,#0x16]
0000a4  f7fffffe          BL       WM_HideWindow
;;;417    		Buzzer_On();
0000a8  f7fffffe          BL       Buzzer_On
                  |L14.172|
;;;418    	}
;;;419    
;;;420    	/*在标定模式下不允许出现测试*/
;;;421    	if(g_eAlcTestPurpose == eTestForNormal || g_eAlcTestPurpose == eTestForMaintain)
0000ac  7860              LDRB     r0,[r4,#1]  ; g_eAlcTestPurpose
0000ae  b120              CBZ      r0,|L14.186|
0000b0  2802              CMP      r0,#2
0000b2  d002              BEQ      |L14.186|
0000b4  e02e              B        |L14.276|
                  |L14.182|
0000b6  2004              MOVS     r0,#4                 ;399
0000b8  e049              B        |L14.334|
                  |L14.186|
;;;422    	{
;;;423    		if(Get_System_Time() > pTestWin->nStartWaitBlowTime + 30 * 1000)
0000ba  f7fffffe          BL       Get_System_Time
0000be  6829              LDR      r1,[r5,#0]  ; pTestWin
0000c0  f2475230          MOV      r2,#0x7530
0000c4  6c89              LDR      r1,[r1,#0x48]
0000c6  4411              ADD      r1,r1,r2
0000c8  4288              CMP      r0,r1
0000ca  d923              BLS      |L14.276|
;;;424    		{
;;;425    			sDialogWindowProperty s;
;;;426    			s.nWinType = eDialogCommon;
0000cc  2002              MOVS     r0,#2
0000ce  f88d0000          STRB     r0,[sp,#0]
;;;427    			s.pFont = _GetFont(Font_Content);
0000d2  2004              MOVS     r0,#4
0000d4  f7fffffe          BL       _GetFont
;;;428    			s.pContent = _Retest_Refuse;
0000d8  9002              STR      r0,[sp,#8]
0000da  f89a1000          LDRB     r1,[r10,#0]  ; g_Language
0000de  f8590021          LDR      r0,[r9,r1,LSL #2]
0000e2  f8d01120          LDR      r1,[r0,#0x120]
;;;429    			s.nContentColor = GUI_RED;
0000e6  9101              STR      r1,[sp,#4]
0000e8  21ff              MOVS     r1,#0xff
;;;430    			s.nBackGroundColor = GUI_LIGHTGRAY;
0000ea  9103              STR      r1,[sp,#0xc]
0000ec  4921              LDR      r1,|L14.372|
;;;431    			s.nAutoCloseTime = 0;
0000ee  9104              STR      r1,[sp,#0x10]
;;;432    			s.pFunLeftYes = _ConfirmRetryTest;
0000f0  4921              LDR      r1,|L14.376|
;;;433    			s.pFunRightNo = _ConfirmRefuseTest;
0000f2  9106              STR      r1,[sp,#0x18]
0000f4  4921              LDR      r1,|L14.380|
0000f6  f88d7014          STRB     r7,[sp,#0x14]         ;431
;;;434    			s.pLeftButton = _Retest;
0000fa  9107              STR      r1,[sp,#0x1c]
0000fc  f8d0110c          LDR      r1,[r0,#0x10c]
;;;435    			s.pRightButton = _Refuse;
000100  9109              STR      r1,[sp,#0x24]
000102  f8d00108          LDR      r0,[r0,#0x108]
;;;436    			CW_ShowDialog_Create(GetLastWinFromList(),(void *)&s);
000106  900a              STR      r0,[sp,#0x28]
000108  f7fffffe          BL       GetLastWinFromList
00010c  4669              MOV      r1,sp
00010e  f7fffffe          BL       CW_ShowDialog_Create
;;;437    			g_eTestState = eIdle;
000112  70a7              STRB     r7,[r4,#2]
                  |L14.276|
;;;438    		}
;;;439    	}
;;;440    
;;;441    	/*处理按键 事件*/
;;;442    	switch(WM_Key_Code)
000114  f8d80008          LDR      r0,[r8,#8]
000118  6800              LDR      r0,[r0,#0]
00011a  2805              CMP      r0,#5
00011c  d00b              BEQ      |L14.310|
00011e  2806              CMP      r0,#6
000120  d010              BEQ      |L14.324|
000122  280d              CMP      r0,#0xd
000124  d119              BNE      |L14.346|
;;;443    	{
;;;444    		case GUI_KEY_LEFT_FUN:
;;;445    			WM_DeleteWindow(pMsg->hWin);
;;;446    			break;
;;;447    
;;;448    		case GUI_KEY_MIDDLE_FUN:
;;;449    			if(g_eAlcTestPurpose == eTestForNormal || g_eAlcTestPurpose == eTestForMaintain)
000126  7860              LDRB     r0,[r4,#1]  ; g_eAlcTestPurpose
000128  b108              CBZ      r0,|L14.302|
00012a  2802              CMP      r0,#2
00012c  d115              BNE      |L14.346|
                  |L14.302|
;;;450    			{
;;;451    				/*发起手动测试*/
;;;452    				g_eTestState = ePump;
00012e  200a              MOVS     r0,#0xa
000130  70a0              STRB     r0,[r4,#2]
;;;453    				g_eTestMode = eTestPassive;
000132  7026              STRB     r6,[r4,#0]
;;;454    				pTestWin->bNeedRefreshState = true;
000134  e00e              B        |L14.340|
                  |L14.310|
000136  f9b80004          LDRSH    r0,[r8,#4]            ;445
00013a  b00d              ADD      sp,sp,#0x34           ;445
00013c  e8bd4ff0          POP      {r4-r11,lr}           ;445
000140  f7ffbffe          B.W      WM_DeleteWindow
                  |L14.324|
;;;455    			}
;;;456    			break;
;;;457    
;;;458    		case GUI_KEY_RIGHT_FUN:
;;;459    	#if QUICK_TEST
;;;460    			if(g_eAlcTestPurpose == eTestForNormal || g_eAlcTestPurpose == eTestForMaintain)
000144  7860              LDRB     r0,[r4,#1]  ; g_eAlcTestPurpose
000146  b108              CBZ      r0,|L14.332|
000148  2802              CMP      r0,#2
00014a  d106              BNE      |L14.346|
                  |L14.332|
;;;461    			{
;;;462    				g_eTestState = eStartTestPrepare;
00014c  2005              MOVS     r0,#5
                  |L14.334|
00014e  70a0              STRB     r0,[r4,#2]            ;399
000150  f884b000          STRB     r11,[r4,#0]           ;400
                  |L14.340|
000154  6828              LDR      r0,[r5,#0]            ;454  ; pTestWin
000156  f880602a          STRB     r6,[r0,#0x2a]         ;454
                  |L14.346|
;;;463    				g_eTestMode = eTestQuickTest;
;;;464    				pTestWin->bNeedRefreshState = true;
;;;465    			}
;;;466    	#else
;;;467    			if(g_eAlcTestPurpose == eTestForNormal)
;;;468    			{
;;;469    				/*拒绝测试*/
;;;470    				g_eTestState = eDisplayResult;
;;;471    				g_eTestMode = eTestRefuseMode;
;;;472    				pTestWin->bNeedRefreshState = true;
;;;473    				pTestWin->fAlcSampleTemperature =  Adc_Get_Sensor_Temperature();
;;;474    			}
;;;475    	#endif
;;;476    			break;
;;;477    		
;;;478    	}
;;;479    }
00015a  b00d              ADD      sp,sp,#0x34
00015c  e8bd8ff0          POP      {r4-r11,pc}
;;;480    
                          ENDP

                  |L14.352|
                          DCD      pTestWin
                  |L14.356|
                          DCD      Strings
                  |L14.360|
                          DCD      g_Language
                  |L14.364|
                          DCD      ||.data||
                  |L14.368|
                          DCD      g_sAlcCalibrationParam
                  |L14.372|
                          DCD      0x00d3d3d3
                  |L14.376|
                          DCD      _ConfirmRetryTest
                  |L14.380|
                          DCD      _ConfirmRefuseTest

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  g_sPressVsBlowRatioLUT
000000  00000000          DCWU     0x0000,0x0000
000004  04580021          DCWU     0x0458,0x0021
000008  056e003a          DCWU     0x056e,0x003a
00000c  0684005d          DCWU     0x0684,0x005d
000010  079a0086          DCWU     0x079a,0x0086
000014  08b000b8          DCWU     0x08b0,0x00b8
000018  09c600e6          DCWU     0x09c6,0x00e6
00001c  0adc011f          DCWU     0x0adc,0x011f
000020  0bf20159          DCWU     0x0bf2,0x0159
000024  0d08019b          DCWU     0x0d08,0x019b
000028  0e1e01e4          DCWU     0x0e1e,0x01e4
00002c  0f34022e          DCWU     0x0f34,0x022e
000030  104a0284          DCWU     0x104a,0x0284
000034  116002d0          DCWU     0x1160,0x02d0
000038  12760320          DCWU     0x1276,0x0320
00003c  138c039d          DCWU     0x138c,0x039d
000040  14a2040c          DCWU     0x14a2,0x040c
000044  15b804ba          DCWU     0x15b8,0x04ba
000048  16ce0533          DCWU     0x16ce,0x0533
00004c  17e405a4          DCWU     0x17e4,0x05a4
000050  1b26073a          DCWU     0x1b26,0x073a

                          AREA ||.data||, DATA, ALIGN=2

                  g_eTestMode
000000  00                DCB      0x00
                  g_eAlcTestPurpose
000001  00                DCB      0x00
                  g_eTestState
000002  00                DCB      0x00
                  g_nInvalidBlowPressCnt
000003  00                DCB      0x00
                  g_nAdcPressValidDataCnt
                          DCD      0x00000000
                  g_nSumOfStaticPressValue
                          DCD      0x00000000
