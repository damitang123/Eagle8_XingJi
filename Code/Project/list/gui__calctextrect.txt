; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--list --split_sections -c --asm --interleave -o.\obj\gui__calctextrect.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\gui__calctextrect.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\Board_Support_Package -I..\Config -I..\GUI\Core -I..\GUI\JPEG -I..\GUI\LCDDriver -I..\GUI\MultiLayer -I..\GUI\Widget -I..\GUI\WM -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\Include -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\Res -I..\User\UserWindow -I..\User -I..\USB\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -DSTM32F10X_HD -DVECT_TAB_FLASH -DUSE_STDPERIPH_DRIVER --no_multibyte_chars ..\GUI\Core\GUI__CalcTextRect.c]
                          THUMB

                          AREA ||i.GUI__CalcTextRect||, CODE, READONLY, ALIGN=2

                  GUI__CalcTextRect PROC
;;;33     */
;;;34     void GUI__CalcTextRect(const char GUI_UNI_PTR* pText, const GUI_RECT* pTextRectIn, GUI_RECT* pTextRectOut, int TextAlign) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4698              MOV      r8,r3
000006  4616              MOV      r6,r2
000008  460c              MOV      r4,r1
00000a  b388              CBZ      r0,|L1.112|
;;;35       if (pText) {
;;;36         int xPos, yPos, TextWidth, TextHeight;
;;;37     
;;;38         /* Calculate X-pos of text */
;;;39         TextWidth = GUI_GetStringDistX(pText);
00000c  f7fffffe          BL       GUI_GetStringDistX
000010  4607              MOV      r7,r0
;;;40         switch (TextAlign & GUI_TA_HORIZONTAL) {
000012  f0080003          AND      r0,r8,#3
000016  2801              CMP      r0,#1
000018  d025              BEQ      |L1.102|
00001a  2802              CMP      r0,#2
00001c  d017              BEQ      |L1.78|
;;;41         case GUI_TA_HCENTER:
;;;42           xPos = pTextRectIn->x0 + ((pTextRectIn->x1 - pTextRectIn->x0 + 1) - TextWidth) / 2;
;;;43           break;
;;;44         case GUI_TA_RIGHT:
;;;45           xPos = pTextRectIn->x1 - TextWidth + 1;
;;;46           break;
;;;47         default:
;;;48           xPos = pTextRectIn->x0;
00001e  f9b45000          LDRSH    r5,[r4,#0]
;;;49         }
;;;50     
;;;51         /* Calculate Y-pos of text*/
;;;52         TextHeight = GUI_GetFontDistY();
000022  bf00              NOP      
                  |L1.36|
000024  f7fffffe          BL       GUI_GetFontDistY
000028  4601              MOV      r1,r0
;;;53         switch (TextAlign & GUI_TA_VERTICAL) {
00002a  f008000c          AND      r0,r8,#0xc
00002e  2804              CMP      r0,#4
000030  d02b              BEQ      |L1.138|
000032  280c              CMP      r0,#0xc
000034  d01d              BEQ      |L1.114|
;;;54         case GUI_TA_VCENTER:
;;;55           yPos = pTextRectIn->y0 + ((pTextRectIn->y1 - pTextRectIn->y0 + 1) - TextHeight) / 2;
;;;56           break;
;;;57         case GUI_TA_BOTTOM:
;;;58           yPos = pTextRectIn->y1 - TextHeight + 1;
;;;59           break;
;;;60         case GUI_TA_BASELINE:
;;;61         default:
;;;62           yPos = pTextRectIn->y0;
000036  f9b40002          LDRSH    r0,[r4,#2]
                  |L1.58|
;;;63         }
;;;64     
;;;65         /* Return text rectangle */
;;;66         pTextRectOut->x0 = xPos;
00003a  8035              STRH     r5,[r6,#0]
;;;67         pTextRectOut->y0 = yPos;
00003c  8070              STRH     r0,[r6,#2]
;;;68         pTextRectOut->x1 = xPos + TextWidth  - 1;
00003e  19ea              ADDS     r2,r5,r7
000040  1e52              SUBS     r2,r2,#1
;;;69         pTextRectOut->y1 = yPos + TextHeight - 1;
000042  4408              ADD      r0,r0,r1
000044  80b2              STRH     r2,[r6,#4]            ;68
000046  1e40              SUBS     r0,r0,#1
000048  80f0              STRH     r0,[r6,#6]
                  |L1.74|
;;;70       } else {
;;;71         *pTextRectOut = *pTextRectIn;
;;;72       }
;;;73     }
00004a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.78|
00004e  f9b40004          LDRSH    r0,[r4,#4]            ;42
000052  f9b41000          LDRSH    r1,[r4,#0]            ;42
000056  1a40              SUBS     r0,r0,r1              ;42
000058  1bc0              SUBS     r0,r0,r7              ;42
00005a  1c40              ADDS     r0,r0,#1              ;42
00005c  eb0070d0          ADD      r0,r0,r0,LSR #31      ;42
000060  eb010560          ADD      r5,r1,r0,ASR #1       ;42
000064  e7de              B        |L1.36|
                  |L1.102|
000066  f9b40004          LDRSH    r0,[r4,#4]            ;45
00006a  1bc5              SUBS     r5,r0,r7              ;45
00006c  1c6d              ADDS     r5,r5,#1              ;45
00006e  e7d9              B        |L1.36|
                  |L1.112|
000070  e010              B        |L1.148|
                  |L1.114|
000072  f9b40006          LDRSH    r0,[r4,#6]            ;55
000076  f9b42002          LDRSH    r2,[r4,#2]            ;55
00007a  1a80              SUBS     r0,r0,r2              ;55
00007c  1a40              SUBS     r0,r0,r1              ;55
00007e  1c40              ADDS     r0,r0,#1              ;55
000080  eb0070d0          ADD      r0,r0,r0,LSR #31      ;55
000084  eb020060          ADD      r0,r2,r0,ASR #1       ;55
000088  e7d7              B        |L1.58|
                  |L1.138|
00008a  f9b40006          LDRSH    r0,[r4,#6]            ;58
00008e  1a40              SUBS     r0,r0,r1              ;58
000090  1c40              ADDS     r0,r0,#1              ;58
000092  e7d2              B        |L1.58|
                  |L1.148|
000094  6820              LDR      r0,[r4,#0]            ;71
000096  6030              STR      r0,[r6,#0]            ;71
000098  6860              LDR      r0,[r4,#4]            ;71
00009a  6070              STR      r0,[r6,#4]            ;71
00009c  e7d5              B        |L1.74|
;;;74     
                          ENDP

